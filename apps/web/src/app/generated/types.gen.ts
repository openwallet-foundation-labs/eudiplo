// This file is auto-generated by @hey-api/openapi-ts

export type CertEntity = {
  /**
   * Unique identifier for the key.
   */
  id: string;
  /**
   * Tenant ID for the key.
   */
  tenantId: string;
  /**
   * Certificate in PEM format.
   */
  crt: string;
  /**
   * Type of the certificate (access or signing).
   */
  type: {
    [key: string]: unknown;
  };
  /**
   * Description of the key.
   */
  description?: string;
};

export type Key = {
  kid: string;
  kty: string;
  x: string;
  y: string;
  crv: string;
  d: string;
  alg: string;
};

export type KeyImportDto = {
  /**
   * The private key in JWK format.
   */
  privateKey: Key;
  /**
   * Optional certificate in PEM format.
   */
  crt?: string;
  /**
   * Description of the key.
   */
  description?: string;
};

export type Vct = {
  vct: string;
  name?: string;
  description?: string;
  extends?: string;
  'extends#integrity'?: string;
  schema_uri?: string;
  'schema_uri#integrity'?: string;
};

export type SchemaResponse = {
  $schema: {
    [key: string]: unknown;
  };
  type: {
    [key: string]: unknown;
  };
  properties: {
    [key: string]: unknown;
  };
  required: Array<string>;
};

export type CredentialConfig = {
  /**
   * Unique identifier for the configuration to reference it.
   */
  id: string;
  /**
   * Tenant ID for the issuance configuration.
   */
  tenantId: string;
  config: {
    [key: string]: unknown;
  };
  /**
   * Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.
   */
  claims: {
    [key: string]: unknown;
  };
  /**
   * Disclosure frame for the sd jwt vc.
   */
  disclosureFrame: {
    [key: string]: unknown;
  };
  vct?: Vct;
  keyBinding?: boolean;
  /**
   * Optional key ID for the credential configuration.
   * This is used to identify the key used for signing the credential.
   */
  keyId?: string;
  key: CertEntity;
  /**
   * Optional status management flag for the credential configuration.
   * If true, a status management will be applied to the credential.
   */
  statusManagement?: boolean;
  /**
   * Optional livetime for the credential configuration in seconds.
   */
  lifeTime?: number;
  /**
   * json schema that is used during issuance for the validation of the claims.
   */
  schema?: SchemaResponse;
  /**
   * Link to all the issuance config bindings that are using this credential.
   */
  credentialIssuanceBindings: Array<CredentialIssuanceBinding>;
};

export type ApiKeyConfig = {
  /**
   * The name of the header where the API key will be sent.
   */
  headerName: string;
  /**
   * The value of the API key to be sent in the header.
   */
  value: string;
};

export type WebHookAuthConfig = {
  /**
   * The type of authentication used for the webhook.
   * Currently, only 'apiKey' is supported.
   */
  type: 'apiKey';
  /**
   * Configuration for API key authentication.
   * This is required if the type is 'apiKey'.
   */
  config: ApiKeyConfig;
};

export type WebhookConfig = {
  /**
   * The URL to which the webhook will send notifications.
   */
  url: string;
  /**
   * Optional authentication configuration for the webhook.
   * If not provided, no authentication will be used.
   */
  auth?: WebHookAuthConfig;
};

export type IssuanceConfig = {
  /**
   * Unique identifier for the issuance configuration.
   */
  id: string;
  /**
   * Links to all credential config bindings that are included in this issuance config.
   */
  credentialIssuanceBindings: Array<CredentialIssuanceBinding>;
  /**
   * Authentication configuration for the issuance process.
   * This determines which OpenID4VC flow to use:
   * - 'none': Pre-authorized code flow (no user authentication required)
   * - 'auth': OID4VCI authorized code flow (user will be redirected for authentication)
   * - 'presentationDuringIssuance': OID4VP request is sent (credential presentation required)
   */
  authenticationConfig: {
    [key: string]: unknown;
  };
  /**
   * The timestamp when the issuance configuration was created.
   */
  createdAt?: string;
  /**
   * Webhook to send the result of the notification response
   */
  notifyWebhook: WebhookConfig;
  /**
   * Value to determine the amount of credentials that are issued in a batch.
   * Default is 1.
   */
  batch_size?: number;
};

export type CredentialIssuanceBinding = {
  credentialConfigId: string;
  issuanceConfigId: string;
  /**
   * Reference to the credential configuration.
   */
  credentialConfig: CredentialConfig;
  /**
   * Reference to the issuance configuration.
   */
  issuanceConfig: IssuanceConfig;
  /**
   * The timestamp when the binding was created.
   */
  createdAt?: string;
};

export type OfferRequestDto = {
  /**
   * The type of response expected for the offer request.
   */
  response_type: 'qrcode' | 'uri';
  /**
   * Issuance config id to reference the issuance configuration.
   */
  issuanceId: string;
  /**
   * Overrides the default values for the credential ids.
   */
  credentialConfigurationIds?: Array<string>;
};

export type OfferResponse = {
  uri: string;
  session: string;
};

export type CredentialConfigMapping = {
  /**
   * Unique identifier for the credential configuration.
   */
  id: string;
};

export type AuthenticationConfigDto = {
  /**
   * The authentication method to use:
   * - 'none': Pre-authorized code flow (no user authentication)
   * - 'auth': OID4VCI authorized code flow (user redirect for authentication)
   * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)
   */
  method: 'none' | 'auth' | 'presentationDuringIssuance';
  /**
   * Configuration specific to the selected authentication method
   * - For 'none': no config needed (undefined) - uses pre-authorized code flow
   * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow
   * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow
   */
  config?: {
    [key: string]: unknown;
  };
};

export type IssuanceDto = {
  /**
   * Unique identifier for the issuance configuration.
   */
  id: string;
  /**
   * Ids of the credential configurations associated with this issuance configuration.
   */
  credentialConfigs: Array<CredentialConfigMapping>;
  /**
   * Authentication configuration for the issuance process.
   * This includes details like the authentication method and any required parameters.
   */
  authenticationConfig: AuthenticationConfigDto;
  /**
   * Optional webhook configuration to send the results of the notification response.
   */
  notifyWebhook?: WebhookConfig;
  /**
   * Value to determine the amount of credentials that are issued in a batch.
   * Default is 1.
   */
  batch_size?: number;
};

export type PresentationRequest = {
  response_type: 'qrcode' | 'uri';
  /**
   * Identifier of the presentation configuration
   */
  requestId: string;
  /**
   * Webhook configuration to receive the response.
   * If not provided, the configured webhook from the configuration will be used.
   */
  webhook?: WebhookConfig;
};

export type RegistrationCertificateRequest = {
  /**
   * Identifier of the registration certificate that got issued.
   */
  id?: string;
  /**
   * The body of the registration certificate request containing the necessary details.
   */
  body: {
    [key: string]: unknown;
  };
};

export type PresentationConfig = {
  /**
   * Unique identifier for the VP request.
   */
  id: string;
  /**
   * The DCQL query to be used for the VP request.
   */
  dcql_query: {
    [key: string]: unknown;
  };
  /**
   * The registration certificate request containing the necessary details.
   */
  registrationCert?: RegistrationCertificateRequest;
  /**
   * Optional webhook URL to receive the response.
   */
  webhook?: WebhookConfig;
  /**
   * The timestamp when the VP request was created.
   */
  createdAt: string;
};

export type AuthorizeQueries = {
  issuer_state?: string;
  response_type?: string;
  client_id?: string;
  redirect_uri?: string;
  resource?: string;
  scope?: string;
  code_challenge?: string;
  code_challenge_method?: string;
  dpop_jkt?: string;
  request_uri?: string;
  auth_session?: string;
};

export type Session = {
  /**
   * Unique identifier for the session.
   */
  id: string;
  issuanceId?: string;
  /**
   * The ID of the presentation configuration associated with the session.
   */
  requestId?: string;
  /**
   * Verified credentials from the verification process.
   */
  credentials?: Array<{
    [key: string]: unknown;
  }>;
  /**
   * Authorization code for the session.
   */
  authorization_code?: string;
  /**
   * Request URI from the authorization request.
   */
  request_uri?: string;
  /**
   * Authorization queries associated with the session.
   */
  auth_queries?: AuthorizeQueries;
  /**
   * Noncce from the Verifiable Presentation request.
   */
  vp_nonce?: string;
  /**
   * Credential offer object containing details about the credential offer or presentation request.
   */
  createdAt: string;
  /**
   * Credential offer object containing details about the credential offer or presentation request.
   */
  offer?: {
    [key: string]: unknown;
  };
  /**
   * Credential payload containing the offer request details.
   */
  credentialPayload?: OfferRequestDto;
  /**
   * Webhook configuration to send result and may receive further information.
   */
  webhook?: WebhookConfig;
  /**
   * Webhook configuration to send the result of the notification response.
   */
  notifyWebhook?: WebhookConfig;
  /**
   * Notifications associated with the session.
   */
  notifications: Array<{
    [key: string]: unknown;
  }>;
  /**
   * Tenant ID for multi-tenancy support.
   */
  tenantId: string;
  status: {
    [key: string]: unknown;
  };
};

export type StatusUpdateDto = {
  /**
   * The session ID of the user
   */
  sessionId: string;
  /**
   * The ID of the credential configuration
   * This is optional, if not provided, all credentials will be revoked of the session.
   */
  credentialConfigurationId?: string;
  /**
   * The status of the credential
   * 0 = valid, 1 = revoked
   */
  status: 0 | 1;
};

export type KeyControllerGetKeysData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/key';
};

export type KeyControllerGetKeysResponses = {
  200: Array<CertEntity>;
};

export type KeyControllerGetKeysResponse =
  KeyControllerGetKeysResponses[keyof KeyControllerGetKeysResponses];

export type KeyControllerAddKeyData = {
  body: KeyImportDto;
  path?: never;
  query?: never;
  url: '/key';
};

export type KeyControllerAddKeyResponses = {
  201: unknown;
};

export type KeyControllerDeleteKeyData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/key/{id}';
};

export type KeyControllerDeleteKeyResponses = {
  200: unknown;
};

export type CredentialsControllerGetConfigsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/issuer-management/credentials';
};

export type CredentialsControllerGetConfigsResponses = {
  200: Array<CredentialConfig>;
};

export type CredentialsControllerGetConfigsResponse =
  CredentialsControllerGetConfigsResponses[keyof CredentialsControllerGetConfigsResponses];

export type CredentialsControllerStoreCredentialConfigurationData = {
  body: CredentialConfig;
  path?: never;
  query?: never;
  url: '/issuer-management/credentials';
};

export type CredentialsControllerStoreCredentialConfigurationResponses = {
  201: {
    [key: string]: unknown;
  };
};

export type CredentialsControllerStoreCredentialConfigurationResponse =
  CredentialsControllerStoreCredentialConfigurationResponses[keyof CredentialsControllerStoreCredentialConfigurationResponses];

export type CredentialsControllerDeleteIssuanceConfigurationData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/issuer-management/credentials/{id}';
};

export type CredentialsControllerDeleteIssuanceConfigurationResponses = {
  200: unknown;
};

export type IssuerManagementControllerGetOfferData = {
  body: OfferRequestDto;
  path?: never;
  query?: never;
  url: '/issuer-management/offer';
};

export type IssuerManagementControllerGetOfferResponses = {
  /**
   * JSON response
   */
  201: OfferResponse;
};

export type IssuerManagementControllerGetOfferResponse =
  IssuerManagementControllerGetOfferResponses[keyof IssuerManagementControllerGetOfferResponses];

export type IssuanceControllerGetIssuanceConfigurationsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/issuer-management/issuance';
};

export type IssuanceControllerGetIssuanceConfigurationsResponses = {
  200: Array<IssuanceConfig>;
};

export type IssuanceControllerGetIssuanceConfigurationsResponse =
  IssuanceControllerGetIssuanceConfigurationsResponses[keyof IssuanceControllerGetIssuanceConfigurationsResponses];

export type IssuanceControllerStoreIssuanceConfigurationData = {
  body: IssuanceDto;
  path?: never;
  query?: never;
  url: '/issuer-management/issuance';
};

export type IssuanceControllerStoreIssuanceConfigurationResponses = {
  201: {
    [key: string]: unknown;
  };
};

export type IssuanceControllerStoreIssuanceConfigurationResponse =
  IssuanceControllerStoreIssuanceConfigurationResponses[keyof IssuanceControllerStoreIssuanceConfigurationResponses];

export type IssuanceControllerDeleteIssuanceConfigurationData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/issuer-management/issuance/{id}';
};

export type IssuanceControllerDeleteIssuanceConfigurationResponses = {
  200: unknown;
};

export type PresentationManagementControllerGetOfferData = {
  body: PresentationRequest;
  path?: never;
  query?: never;
  url: '/presentation-management/request';
};

export type PresentationManagementControllerGetOfferResponses = {
  /**
   * JSON response
   */
  201: OfferResponse;
};

export type PresentationManagementControllerGetOfferResponse =
  PresentationManagementControllerGetOfferResponses[keyof PresentationManagementControllerGetOfferResponses];

export type PresentationManagementControllerConfigurationData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/presentation-management';
};

export type PresentationManagementControllerConfigurationResponses = {
  200: Array<PresentationConfig>;
};

export type PresentationManagementControllerConfigurationResponse =
  PresentationManagementControllerConfigurationResponses[keyof PresentationManagementControllerConfigurationResponses];

export type PresentationManagementControllerStorePresentationConfigData = {
  body: PresentationConfig;
  path?: never;
  query?: never;
  url: '/presentation-management';
};

export type PresentationManagementControllerStorePresentationConfigResponses = {
  201: PresentationConfig;
};

export type PresentationManagementControllerStorePresentationConfigResponse =
  PresentationManagementControllerStorePresentationConfigResponses[keyof PresentationManagementControllerStorePresentationConfigResponses];

export type PresentationManagementControllerDeleteConfigurationData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/presentation-management/{id}';
};

export type PresentationManagementControllerDeleteConfigurationResponses = {
  200: unknown;
};

export type SessionControllerGetAllSessionsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/session';
};

export type SessionControllerGetAllSessionsResponses = {
  200: Array<Session>;
};

export type SessionControllerGetAllSessionsResponse =
  SessionControllerGetAllSessionsResponses[keyof SessionControllerGetAllSessionsResponses];

export type SessionControllerDeleteSessionData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/session/{id}';
};

export type SessionControllerDeleteSessionResponses = {
  200: unknown;
};

export type SessionControllerGetSessionData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/session/{id}';
};

export type SessionControllerGetSessionResponses = {
  200: Session;
};

export type SessionControllerGetSessionResponse =
  SessionControllerGetSessionResponses[keyof SessionControllerGetSessionResponses];

export type SessionControllerRevokeAllData = {
  body: StatusUpdateDto;
  path?: never;
  query?: never;
  url: '/session/revoke';
};

export type SessionControllerRevokeAllResponses = {
  201: unknown;
};

export type HealthControllerCheckData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/health';
};

export type HealthControllerCheckErrors = {
  /**
   * The Health Check is not successful
   */
  503: {
    status?: string;
    info?: {
      [key: string]: {
        status: string;
        [key: string]: unknown | string;
      };
    } | null;
    error?: {
      [key: string]: {
        status: string;
        [key: string]: unknown | string;
      };
    } | null;
    details?: {
      [key: string]: {
        status: string;
        [key: string]: unknown | string;
      };
    };
  };
};

export type HealthControllerCheckError =
  HealthControllerCheckErrors[keyof HealthControllerCheckErrors];

export type HealthControllerCheckResponses = {
  /**
   * The Health Check is successful
   */
  200: {
    status?: string;
    info?: {
      [key: string]: {
        status: string;
        [key: string]: unknown | string;
      };
    } | null;
    error?: {
      [key: string]: {
        status: string;
        [key: string]: unknown | string;
      };
    } | null;
    details?: {
      [key: string]: {
        status: string;
        [key: string]: unknown | string;
      };
    };
  };
};

export type HealthControllerCheckResponse =
  HealthControllerCheckResponses[keyof HealthControllerCheckResponses];

export type PrometheusControllerIndexData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/metrics';
};

export type PrometheusControllerIndexResponses = {
  200: unknown;
};

export type ClientOptions = {
  baseUrl: string;
};
