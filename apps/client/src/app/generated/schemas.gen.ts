// This file is auto-generated by @hey-api/openapi-ts

export const Oauth2AuthorizationServerResponseSchema = {
    type: 'object',
    properties: {
        issuer: {
            type: 'string'
        },
        token_endpoint: {
            type: 'string',
            description: "The URL of the OAuth2 authorization server's token endpoint."
        },
        authorization_endpoint: {
            type: 'string',
            description: "The URL of the OAuth2 authorization server's authorization endpoint."
        },
        jwks_uri: {
            type: 'string',
            description: "The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint."
        },
        code_challenge_methods_supported: {
            description: 'List of supported algorithms to sign the challenge',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        dpop_signing_alg_values_supported: {
            description: 'List of supported algorithms for DPoP signing.',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        require_pushed_authorization_requests: {
            type: 'boolean',
            description: 'Indicates whether the server requires pushed authorization requests.'
        },
        pushed_authorization_request_endpoint: {
            type: 'string',
            description: 'The URL of the pushed authorization request endpoint.'
        },
        authorization_challenge_endpoint: {
            type: 'string',
            description: 'The URL of the authorization challenge endpoint.'
        }
    },
    required: ['issuer', 'token_endpoint', 'authorization_endpoint', 'jwks_uri', 'code_challenge_methods_supported', 'dpop_signing_alg_values_supported', 'require_pushed_authorization_requests', 'pushed_authorization_request_endpoint', 'authorization_challenge_endpoint']
} as const;

export const EC_PublicSchema = {
    type: 'object',
    properties: {
        kty: {
            type: 'string',
            description: "The key type, which is always 'EC' for Elliptic Curve keys."
        },
        crv: {
            type: 'string',
            description: "The algorithm intended for use with the key, such as 'ES256'."
        },
        x: {
            type: 'string',
            description: 'The x coordinate of the EC public key.'
        },
        y: {
            type: 'string',
            description: 'The y coordinate of the EC public key.'
        }
    },
    required: ['kty', 'crv', 'x', 'y']
} as const;

export const JwksResponseDtoSchema = {
    type: 'object',
    properties: {
        keys: {
            description: 'An array of EC public keys in JWK format.',
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EC_Public'
            }
        }
    },
    required: ['keys']
} as const;

export const CertEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the key.'
        },
        tenantId: {
            type: 'string',
            description: 'Tenant ID for the key.'
        },
        crt: {
            type: 'string',
            description: 'Certificate in PEM format.'
        },
        type: {
            type: 'object',
            description: 'Type of the certificate (access or signing).'
        },
        description: {
            type: 'string',
            description: 'Description of the key.'
        },
        createdAt: {
            format: 'date-time',
            type: 'string',
            description: 'The timestamp when the VP request was created.'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string',
            description: 'The timestamp when the VP request was last updated.'
        }
    },
    required: ['id', 'tenantId', 'crt', 'type', 'createdAt', 'updatedAt']
} as const;

export const KeySchema = {
    type: 'object',
    properties: {
        kid: {
            type: 'string'
        },
        kty: {
            type: 'string'
        },
        x: {
            type: 'string'
        },
        y: {
            type: 'string'
        },
        crv: {
            type: 'string'
        },
        d: {
            type: 'string'
        },
        alg: {
            type: 'string'
        }
    },
    required: ['kid', 'kty', 'x', 'y', 'crv', 'd', 'alg']
} as const;

export const KeyImportDtoSchema = {
    type: 'object',
    properties: {
        privateKey: {
            description: 'The private key in JWK format.',
            allOf: [
                {
                    '$ref': '#/components/schemas/Key'
                }
            ]
        },
        crt: {
            type: 'string',
            description: 'Optional certificate in PEM format.'
        },
        description: {
            type: 'string',
            description: 'Description of the key.'
        }
    },
    required: ['privateKey']
} as const;

export const UpdateKeyDtoSchema = {
    type: 'object',
    properties: {
        crt: {
            type: 'string',
            description: 'Optional certificate in PEM format.'
        },
        description: {
            type: 'string',
            description: 'Description of the key.'
        }
    }
} as const;

export const NotificationRequestDtoSchema = {
    type: 'object',
    properties: {
        notification_id: {
            type: 'string'
        },
        event: {
            type: 'object'
        }
    },
    required: ['notification_id', 'event']
} as const;

export const AuthorizeQueriesSchema = {
    type: 'object',
    properties: {
        issuer_state: {
            type: 'string'
        },
        response_type: {
            type: 'string'
        },
        client_id: {
            type: 'string'
        },
        redirect_uri: {
            type: 'string'
        },
        resource: {
            type: 'string'
        },
        scope: {
            type: 'string'
        },
        code_challenge: {
            type: 'string'
        },
        code_challenge_method: {
            type: 'string'
        },
        dpop_jkt: {
            type: 'string'
        },
        request_uri: {
            type: 'string'
        },
        auth_session: {
            type: 'string'
        }
    }
} as const;

export const ParResponseDtoSchema = {
    type: 'object',
    properties: {
        request_uri: {
            type: 'string',
            description: 'The request URI for the Pushed Authorization Request.'
        },
        expires_in: {
            type: 'number',
            description: 'The expiration time for the request URI in seconds.'
        }
    },
    required: ['request_uri', 'expires_in']
} as const;

export const VCTSchema = {
    type: 'object',
    properties: {
        vct: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        extends: {
            type: 'string'
        },
        'extends#integrity': {
            type: 'string'
        },
        schema_uri: {
            type: 'string'
        },
        'schema_uri#integrity': {
            type: 'string'
        }
    },
    required: ['vct']
} as const;

export const SchemaResponseSchema = {
    type: 'object',
    properties: {
        '$schema': {
            type: 'object',
            default: 'https://json-schema.org/draft/2020-12/schema'
        },
        type: {
            type: 'object',
            default: 'object'
        },
        properties: {
            type: 'object'
        },
        required: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['$schema', 'type', 'properties', 'required']
} as const;

export const CredentialConfigSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the configuration to reference it.'
        },
        tenantId: {
            type: 'string',
            description: 'Tenant ID for the issuance configuration.'
        },
        config: {
            type: 'object'
        },
        claims: {
            type: 'object',
            description: 'Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.'
        },
        disclosureFrame: {
            type: 'object',
            description: 'Disclosure frame for the sd jwt vc.'
        },
        vct: {
            '$ref': '#/components/schemas/VCT'
        },
        keyBinding: {
            type: 'boolean'
        },
        keyId: {
            type: 'string',
            description: `Optional key ID for the credential configuration.
This is used to identify the key used for signing the credential.`
        },
        key: {
            '$ref': '#/components/schemas/CertEntity'
        },
        statusManagement: {
            type: 'boolean',
            description: `Optional status management flag for the credential configuration.
If true, a status management will be applied to the credential.`
        },
        lifeTime: {
            type: 'number',
            description: 'Optional livetime for the credential configuration in seconds.'
        },
        schema: {
            description: 'json schema that is used during issuance for the validation of the claims.',
            allOf: [
                {
                    '$ref': '#/components/schemas/SchemaResponse'
                }
            ]
        },
        credentialIssuanceBindings: {
            description: 'Link to all the issuance config bindings that are using this credential.',
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CredentialIssuanceBinding'
            }
        }
    },
    required: ['id', 'tenantId', 'config', 'claims', 'disclosureFrame', 'key', 'credentialIssuanceBindings']
} as const;

export const ApiKeyConfigSchema = {
    type: 'object',
    properties: {
        headerName: {
            type: 'string',
            description: 'The name of the header where the API key will be sent.',
            example: 'Authorization'
        },
        value: {
            type: 'string',
            description: 'The value of the API key to be sent in the header.'
        }
    },
    required: ['headerName', 'value']
} as const;

export const WebHookAuthConfigSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            description: `The type of authentication used for the webhook.
Currently, only 'apiKey' is supported.`,
            enum: ['apiKey']
        },
        config: {
            description: `Configuration for API key authentication.
This is required if the type is 'apiKey'.`,
            allOf: [
                {
                    '$ref': '#/components/schemas/ApiKeyConfig'
                }
            ]
        }
    },
    required: ['type', 'config']
} as const;

export const WebhookConfigSchema = {
    type: 'object',
    properties: {
        url: {
            type: 'string',
            description: 'The URL to which the webhook will send notifications.'
        },
        auth: {
            description: `Optional authentication configuration for the webhook.
If not provided, no authentication will be used.`,
            allOf: [
                {
                    '$ref': '#/components/schemas/WebHookAuthConfig'
                }
            ]
        }
    },
    required: ['url']
} as const;

export const IssuanceConfigSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the issuance configuration.'
        },
        description: {
            type: 'string',
            description: 'Description of the issuance configuration.'
        },
        credentialIssuanceBindings: {
            description: 'Links to all credential config bindings that are included in this issuance config.',
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CredentialIssuanceBinding'
            }
        },
        authenticationConfig: {
            type: 'object',
            description: `Authentication configuration for the issuance process.
This determines which OpenID4VC flow to use:
- 'none': Pre-authorized code flow (no user authentication required)
- 'auth': OID4VCI authorized code flow (user will be redirected for authentication)
- 'presentationDuringIssuance': OID4VP request is sent (credential presentation required)`
        },
        createdAt: {
            format: 'date-time',
            type: 'string',
            description: 'The timestamp when the VP request was created.'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string',
            description: 'The timestamp when the VP request was last updated.'
        },
        notifyWebhook: {
            description: 'Webhook to send the result of the notification response',
            allOf: [
                {
                    '$ref': '#/components/schemas/WebhookConfig'
                }
            ]
        },
        batch_size: {
            type: 'number',
            description: `Value to determine the amount of credentials that are issued in a batch.
Default is 1.`
        }
    },
    required: ['id', 'credentialIssuanceBindings', 'authenticationConfig', 'createdAt', 'updatedAt']
} as const;

export const CredentialIssuanceBindingSchema = {
    type: 'object',
    properties: {
        credentialConfigId: {
            type: 'string'
        },
        issuanceConfigId: {
            type: 'string'
        },
        credentialConfig: {
            description: 'Reference to the credential configuration.',
            allOf: [
                {
                    '$ref': '#/components/schemas/CredentialConfig'
                }
            ]
        },
        issuanceConfig: {
            description: 'Reference to the issuance configuration.',
            allOf: [
                {
                    '$ref': '#/components/schemas/IssuanceConfig'
                }
            ]
        },
        createdAt: {
            format: 'date-time',
            type: 'string',
            description: 'The timestamp when the VP request was created.'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string',
            description: 'The timestamp when the VP request was last updated.'
        }
    },
    required: ['credentialConfigId', 'issuanceConfigId', 'credentialConfig', 'issuanceConfig', 'createdAt', 'updatedAt']
} as const;

export const OfferRequestDtoSchema = {
    type: 'object',
    properties: {
        response_type: {
            example: 'qrcode',
            enum: ['qrcode', 'uri'],
            type: 'string',
            description: 'The type of response expected for the offer request.'
        },
        issuanceId: {
            type: 'string',
            description: 'Issuance config id to reference the issuance configuration.',
            example: 'pid'
        },
        credentialConfigurationIds: {
            description: 'Overrides the default values for the credential ids.',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        session: {
            type: 'string',
            description: 'Pre defined session id',
            format: 'uuid'
        }
    },
    required: ['response_type', 'issuanceId']
} as const;

export const OfferResponseSchema = {
    type: 'object',
    properties: {
        uri: {
            type: 'string'
        },
        session: {
            type: 'string'
        }
    },
    required: ['uri', 'session']
} as const;

export const CredentialConfigMappingSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the credential configuration.'
        }
    },
    required: ['id']
} as const;

export const AuthenticationConfigDtoSchema = {
    type: 'object',
    properties: {
        method: {
            type: 'string',
            description: `The authentication method to use:
- 'none': Pre-authorized code flow (no user authentication)
- 'auth': OID4VCI authorized code flow (user redirect for authentication)
- 'presentationDuringIssuance': OID4VP flow (credential presentation required)`,
            enum: ['none', 'auth', 'presentationDuringIssuance']
        },
        config: {
            type: 'object',
            description: `Configuration specific to the selected authentication method
- For 'none': no config needed (undefined) - uses pre-authorized code flow
- For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow
- For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow`
        },
        description: {
            type: 'string',
            description: 'Description of the authentication configuration.'
        }
    },
    required: ['method']
} as const;

export const IssuanceDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the issuance configuration.'
        },
        description: {
            type: 'string',
            description: 'Description of the issuance configuration.'
        },
        credentialConfigs: {
            description: 'Ids of the credential configurations associated with this issuance configuration.',
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CredentialConfigMapping'
            }
        },
        authenticationConfig: {
            description: `Authentication configuration for the issuance process.
This includes details like the authentication method and any required parameters.`,
            allOf: [
                {
                    '$ref': '#/components/schemas/AuthenticationConfigDto'
                }
            ]
        },
        notifyWebhook: {
            description: 'Optional webhook configuration to send the results of the notification response.',
            allOf: [
                {
                    '$ref': '#/components/schemas/WebhookConfig'
                }
            ]
        },
        batch_size: {
            type: 'number',
            description: `Value to determine the amount of credentials that are issued in a batch.
Default is 1.`
        }
    },
    required: ['id', 'credentialConfigs', 'authenticationConfig']
} as const;

export const AuthorizationResponseSchema = {
    type: 'object',
    properties: {
        response: {
            type: 'string',
            description: 'The response string containing the authorization details.'
        }
    },
    required: ['response']
} as const;

export const PresentationRequestSchema = {
    type: 'object',
    properties: {
        response_type: {
            type: 'string',
            example: 'qrcode',
            enum: ['qrcode', 'uri']
        },
        requestId: {
            type: 'string',
            description: 'Identifier of the presentation configuration',
            example: 'pid'
        },
        webhook: {
            description: `Webhook configuration to receive the response.
If not provided, the configured webhook from the configuration will be used.`,
            allOf: [
                {
                    '$ref': '#/components/schemas/WebhookConfig'
                }
            ]
        }
    },
    required: ['response_type', 'requestId']
} as const;

export const RegistrationCertificateRequestSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Identifier of the registration certificate that got issued.'
        },
        body: {
            type: 'object',
            description: 'The body of the registration certificate request containing the necessary details.'
        }
    },
    required: ['body']
} as const;

export const PresentationConfigSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the VP request.'
        },
        description: {
            type: 'string',
            description: 'Description of the presentation configuration.'
        },
        lifeTime: {
            type: 'number',
            description: 'Lifetime how long the presentation request is valid after creation, in seconds.'
        },
        dcql_query: {
            type: 'object',
            description: 'The DCQL query to be used for the VP request.'
        },
        registrationCert: {
            description: 'The registration certificate request containing the necessary details.',
            allOf: [
                {
                    '$ref': '#/components/schemas/RegistrationCertificateRequest'
                }
            ]
        },
        webhook: {
            description: 'Optional webhook URL to receive the response.',
            allOf: [
                {
                    '$ref': '#/components/schemas/WebhookConfig'
                }
            ]
        },
        createdAt: {
            format: 'date-time',
            type: 'string',
            description: 'The timestamp when the VP request was created.'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string',
            description: 'The timestamp when the VP request was last updated.'
        }
    },
    required: ['id', 'lifeTime', 'dcql_query', 'createdAt', 'updatedAt']
} as const;

export const SessionSchema = {
    type: 'object',
    properties: {
        status: {
            description: 'Status of the session.',
            enum: ['active', 'fetched', 'completed', 'expired', 'failed'],
            type: 'string'
        },
        id: {
            type: 'string',
            description: 'Unique identifier for the session.'
        },
        issuanceId: {
            type: 'string'
        },
        requestId: {
            type: 'string',
            description: 'The ID of the presentation configuration associated with the session.'
        },
        requestUrl: {
            type: 'string',
            description: 'The URL of the presentation auth request.'
        },
        credentials: {
            description: 'Verified credentials from the verification process.',
            type: 'array',
            items: {
                type: 'object'
            }
        },
        authorization_code: {
            type: 'string',
            description: 'Authorization code for the session.'
        },
        request_uri: {
            type: 'string',
            description: 'Request URI from the authorization request.'
        },
        auth_queries: {
            description: 'Authorization queries associated with the session.',
            allOf: [
                {
                    '$ref': '#/components/schemas/AuthorizeQueries'
                }
            ]
        },
        vp_nonce: {
            type: 'string',
            description: 'Noncce from the Verifiable Presentation request.'
        },
        nonce: {
            type: 'string',
            description: 'Nonce used for the OID4VCI flow.'
        },
        createdAt: {
            format: 'date-time',
            type: 'string',
            description: 'The timestamp when the VP request was created.'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string',
            description: 'The timestamp when the VP request was last updated.'
        },
        expiresAt: {
            format: 'date-time',
            type: 'string'
        },
        offer: {
            type: 'object',
            description: 'Credential offer object containing details about the credential offer or presentation request.'
        },
        offerUrl: {
            type: 'string',
            description: 'Offer URL for the credential offer.'
        },
        credentialPayload: {
            description: 'Credential payload containing the offer request details.',
            allOf: [
                {
                    '$ref': '#/components/schemas/OfferRequestDto'
                }
            ]
        },
        webhook: {
            description: 'Webhook configuration to send result and may receive further information.',
            allOf: [
                {
                    '$ref': '#/components/schemas/WebhookConfig'
                }
            ]
        },
        notifyWebhook: {
            description: 'Webhook configuration to send the result of the notification response.',
            allOf: [
                {
                    '$ref': '#/components/schemas/WebhookConfig'
                }
            ]
        },
        notifications: {
            description: 'Notifications associated with the session.',
            type: 'array',
            items: {
                type: 'object'
            }
        },
        tenantId: {
            type: 'string',
            description: 'Tenant ID for multi-tenancy support.'
        }
    },
    required: ['status', 'id', 'createdAt', 'updatedAt', 'notifications', 'tenantId']
} as const;

export const StatusUpdateDtoSchema = {
    type: 'object',
    properties: {
        sessionId: {
            type: 'string',
            description: 'The session ID of the user'
        },
        credentialConfigurationId: {
            type: 'string',
            description: `The ID of the credential configuration
This is optional, if not provided, all credentials will be revoked of the session.`
        },
        status: {
            type: 'number',
            description: `The status of the credential
0 = valid, 1 = revoked`,
            enum: [0, 1]
        }
    },
    required: ['sessionId', 'status']
} as const;

export const ClientCredentialsDtoSchema = {
    type: 'object',
    properties: {
        client_id: {
            type: 'string'
        },
        client_secret: {
            type: 'string'
        }
    },
    required: ['client_id', 'client_secret']
} as const;

export const TokenResponseSchema = {
    type: 'object',
    properties: {
        access_token: {
            type: 'string'
        },
        token_type: {
            type: 'string'
        },
        expires_in: {
            type: 'number'
        }
    },
    required: ['access_token', 'token_type', 'expires_in']
} as const;