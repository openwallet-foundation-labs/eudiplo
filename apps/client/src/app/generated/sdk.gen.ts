// This file is auto-generated by @hey-api/openapi-ts

import { Client, Options as ClientOptions, TDataShape } from './client';
import { client as _heyApiClient } from './client.gen';
import {
    CredentialsControllerDeleteIssuanceConfigurationData,
    CredentialsControllerDeleteIssuanceConfigurationResponses,
    CredentialsControllerGetConfigsData,
    CredentialsControllerGetConfigsResponses,
    CredentialsControllerStoreCredentialConfigurationData,
    CredentialsControllerStoreCredentialConfigurationResponses,
    HealthControllerCheckData,
    HealthControllerCheckErrors,
    HealthControllerCheckResponses,
    IssuanceControllerDeleteIssuanceConfigurationData,
    IssuanceControllerDeleteIssuanceConfigurationResponses,
    IssuanceControllerGetIssuanceConfigurationsData,
    IssuanceControllerGetIssuanceConfigurationsResponses,
    IssuanceControllerStoreIssuanceConfigurationData,
    IssuanceControllerStoreIssuanceConfigurationResponses,
    IssuerManagementControllerGetOfferData,
    IssuerManagementControllerGetOfferResponses,
    KeyControllerAddKeyData,
    KeyControllerAddKeyResponses,
    KeyControllerDeleteKeyData,
    KeyControllerDeleteKeyResponses,
    KeyControllerGetKeysData,
    KeyControllerGetKeysResponses,
    PresentationManagementControllerConfigurationData,
    PresentationManagementControllerConfigurationResponses,
    PresentationManagementControllerDeleteConfigurationData,
    PresentationManagementControllerDeleteConfigurationResponses,
    PresentationManagementControllerGetOfferData,
    PresentationManagementControllerGetOfferResponses,
    PresentationManagementControllerStorePresentationConfigData,
    PresentationManagementControllerStorePresentationConfigResponses,
    PrometheusControllerIndexData,
    PrometheusControllerIndexResponses,
    SessionControllerDeleteSessionData,
    SessionControllerDeleteSessionResponses,
    SessionControllerGetAllSessionsData,
    SessionControllerGetAllSessionsResponses,
    SessionControllerGetSessionData,
    SessionControllerGetSessionResponses,
    SessionControllerRevokeAllData,
    SessionControllerRevokeAllResponses,
} from './types.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get all keys for the tenant.
 */
export const keyControllerGetKeys = <ThrowOnError extends boolean = false>(
  options?: Options<KeyControllerGetKeysData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    KeyControllerGetKeysResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/key',
    ...options,
  });
};

/**
 * Add a new key to the key service.
 */
export const keyControllerAddKey = <ThrowOnError extends boolean = false>(
  options: Options<KeyControllerAddKeyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    KeyControllerAddKeyResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/key',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a key from the key service.
 */
export const keyControllerDeleteKey = <ThrowOnError extends boolean = false>(
  options: Options<KeyControllerDeleteKeyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    KeyControllerDeleteKeyResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/key/{id}',
    ...options,
  });
};

/**
 * Returns the credential configurations for this tenant.
 */
export const credentialsControllerGetConfigs = <ThrowOnError extends boolean = false>(
  options?: Options<CredentialsControllerGetConfigsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    CredentialsControllerGetConfigsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/issuer-management/credentials',
    ...options,
  });
};

/**
 * Stores the credential configuration for this tenant.
 */
export const credentialsControllerStoreCredentialConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CredentialsControllerStoreCredentialConfigurationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CredentialsControllerStoreCredentialConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/issuer-management/credentials',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Deletes an credential configuration.
 */
export const credentialsControllerDeleteIssuanceConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CredentialsControllerDeleteIssuanceConfigurationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    CredentialsControllerDeleteIssuanceConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/issuer-management/credentials/{id}',
    ...options,
  });
};

/**
 * Create an offer for a credential.
 */
export const issuerManagementControllerGetOffer = <ThrowOnError extends boolean = false>(
  options: Options<IssuerManagementControllerGetOfferData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    IssuerManagementControllerGetOfferResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/issuer-management/offer',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Returns the issuance configurations for this tenant.
 */
export const issuanceControllerGetIssuanceConfigurations = <ThrowOnError extends boolean = false>(
  options?: Options<IssuanceControllerGetIssuanceConfigurationsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    IssuanceControllerGetIssuanceConfigurationsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/issuer-management/issuance',
    ...options,
  });
};

/**
 * Stores the issuance configuration for this tenant.
 */
export const issuanceControllerStoreIssuanceConfiguration = <ThrowOnError extends boolean = false>(
  options: Options<IssuanceControllerStoreIssuanceConfigurationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    IssuanceControllerStoreIssuanceConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/issuer-management/issuance',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Deletes an issuance configuration.
 */
export const issuanceControllerDeleteIssuanceConfiguration = <ThrowOnError extends boolean = false>(
  options: Options<IssuanceControllerDeleteIssuanceConfigurationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    IssuanceControllerDeleteIssuanceConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/issuer-management/issuance/{id}',
    ...options,
  });
};

/**
 * Create an presentation request that can be sent to the user
 */
export const presentationManagementControllerGetOffer = <ThrowOnError extends boolean = false>(
  options: Options<PresentationManagementControllerGetOfferData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PresentationManagementControllerGetOfferResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/presentation-management/request',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Returns the presentation request configurations.
 */
export const presentationManagementControllerConfiguration = <ThrowOnError extends boolean = false>(
  options?: Options<PresentationManagementControllerConfigurationData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    PresentationManagementControllerConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/presentation-management',
    ...options,
  });
};

/**
 * Store a presentation request configuration. If it already exists, it will be updated.
 */
export const presentationManagementControllerStorePresentationConfig = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PresentationManagementControllerStorePresentationConfigData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PresentationManagementControllerStorePresentationConfigResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/presentation-management',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Deletes a presentation request configuration by its ID.
 */
export const presentationManagementControllerDeleteConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PresentationManagementControllerDeleteConfigurationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    PresentationManagementControllerDeleteConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/presentation-management/{id}',
    ...options,
  });
};

/**
 * Retrieves all sessions.
 */
export const sessionControllerGetAllSessions = <ThrowOnError extends boolean = false>(
  options?: Options<SessionControllerGetAllSessionsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    SessionControllerGetAllSessionsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/session',
    ...options,
  });
};

/**
 * Deletes a session by its ID.
 */
export const sessionControllerDeleteSession = <ThrowOnError extends boolean = false>(
  options: Options<SessionControllerDeleteSessionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    SessionControllerDeleteSessionResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/session/{id}',
    ...options,
  });
};

/**
 * Retrieves the session information for a given session ID.
 */
export const sessionControllerGetSession = <ThrowOnError extends boolean = false>(
  options: Options<SessionControllerGetSessionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SessionControllerGetSessionResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/session/{id}',
    ...options,
  });
};

/**
 * Update the status of the credentials of a specific session.
 */
export const sessionControllerRevokeAll = <ThrowOnError extends boolean = false>(
  options: Options<SessionControllerRevokeAllData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    SessionControllerRevokeAllResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/session/revoke',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Endpoint to check the health of the service.
 */
export const healthControllerCheck = <ThrowOnError extends boolean = false>(
  options?: Options<HealthControllerCheckData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthControllerCheckResponses,
    HealthControllerCheckErrors,
    ThrowOnError
  >({
    url: '/health',
    ...options,
  });
};

export const prometheusControllerIndex = <ThrowOnError extends boolean = false>(
  options?: Options<PrometheusControllerIndexData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    PrometheusControllerIndexResponses,
    unknown,
    ThrowOnError
  >({
    url: '/metrics',
    ...options,
  });
};
