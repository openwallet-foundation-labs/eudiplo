// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape } from './client';
import { client } from './client.gen';
import type { AuthControllerGetGlobalJwksData, AuthControllerGetGlobalJwksResponses, AuthControllerGetOAuth2TokenData, AuthControllerGetOAuth2TokenErrors, AuthControllerGetOAuth2TokenResponses, AuthControllerGetOidcDiscoveryData, AuthControllerGetOidcDiscoveryResponses, AuthorizeControllerAuthorizationChallengeEndpointData, AuthorizeControllerAuthorizationChallengeEndpointResponses, AuthorizeControllerAuthorizeData, AuthorizeControllerAuthorizeResponses, AuthorizeControllerParData, AuthorizeControllerParResponses, AuthorizeControllerTokenData, AuthorizeControllerTokenResponses, ClientControllerCreateClientData, ClientControllerCreateClientResponses, ClientControllerDeleteClientData, ClientControllerDeleteClientResponses, ClientControllerGetClientData, ClientControllerGetClientResponses, ClientControllerGetClientsData, ClientControllerGetClientSecretData, ClientControllerGetClientSecretResponses, ClientControllerGetClientsResponses, ClientControllerUpdateClientData, ClientControllerUpdateClientResponses, CredentialsControllerDeleteIssuanceConfigurationData, CredentialsControllerDeleteIssuanceConfigurationResponses, CredentialsControllerGetConfigsData, CredentialsControllerGetConfigsResponses, CredentialsControllerStoreCredentialConfigurationData, CredentialsControllerStoreCredentialConfigurationResponses, CredentialsMetadataControllerSchemaData, CredentialsMetadataControllerSchemaResponses, CredentialsMetadataControllerVctData, CredentialsMetadataControllerVctResponses, DisplayControllerCreateDisplayData, DisplayControllerCreateDisplayResponses, DisplayControllerGetDisplayData, DisplayControllerGetDisplayResponses, HealthControllerCheckData, HealthControllerCheckErrors, HealthControllerCheckResponses, IssuanceControllerDeleteIssuanceConfigurationData, IssuanceControllerDeleteIssuanceConfigurationResponses, IssuanceControllerGetIssuanceConfigurationsData, IssuanceControllerGetIssuanceConfigurationsResponses, IssuanceControllerStoreIssuanceConfigurationData, IssuanceControllerStoreIssuanceConfigurationResponses, IssuerManagementControllerGetOfferData, IssuerManagementControllerGetOfferResponses, KeyControllerAddKeyData, KeyControllerAddKeyResponses, KeyControllerDeleteKeyData, KeyControllerDeleteKeyResponses, KeyControllerGetKeysData, KeyControllerGetKeysResponses, KeyControllerUpdateKeyData, KeyControllerUpdateKeyResponses, Oid4VciControllerCredentialData, Oid4VciControllerCredentialResponses, Oid4VciControllerNonceData, Oid4VciControllerNonceResponses, Oid4VciControllerNotificationsData, Oid4VciControllerNotificationsResponses, Oid4VpControllerGetPostRequestWithSessionData, Oid4VpControllerGetPostRequestWithSessionResponses, Oid4VpControllerGetRequestWithSessionData, Oid4VpControllerGetRequestWithSessionResponses, Oid4VpControllerGetResponseData, Oid4VpControllerGetResponseResponses, PresentationManagementControllerConfigurationData, PresentationManagementControllerConfigurationResponses, PresentationManagementControllerDeleteConfigurationData, PresentationManagementControllerDeleteConfigurationResponses, PresentationManagementControllerGetOfferData, PresentationManagementControllerGetOfferResponses, PresentationManagementControllerStorePresentationConfigData, PresentationManagementControllerStorePresentationConfigResponses, PrometheusControllerIndexData, PrometheusControllerIndexResponses, SessionControllerDeleteSessionData, SessionControllerDeleteSessionResponses, SessionControllerGetAllSessionsData, SessionControllerGetAllSessionsResponses, SessionControllerGetSessionData, SessionControllerGetSessionResponses, SessionControllerRevokeAllData, SessionControllerRevokeAllResponses, StatusListControllerGetListData, StatusListControllerGetListResponses, StorageControllerDownloadData, StorageControllerDownloadResponses, StorageControllerUploadData, StorageControllerUploadResponses, TenantControllerDeleteTenantData, TenantControllerDeleteTenantResponses, TenantControllerGetTenantData, TenantControllerGetTenantResponses, TenantControllerGetTenantsData, TenantControllerGetTenantsResponses, TenantControllerInitTenantData, TenantControllerInitTenantResponses, WellKnownControllerAuthzMetadataData, WellKnownControllerAuthzMetadataResponses, WellKnownControllerGetJwksData, WellKnownControllerGetJwksResponses, WellKnownControllerIssuerMetadataData, WellKnownControllerIssuerMetadataResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get OpenID4VCI issuer metadata
 * Returns the OpenID4VCI issuer metadata.
 */
export const wellKnownControllerIssuerMetadata = <ThrowOnError extends boolean = false>(options: Options<WellKnownControllerIssuerMetadataData, ThrowOnError>) => {
    return (options.client ?? client).get<WellKnownControllerIssuerMetadataResponses, unknown, ThrowOnError>({
        url: '/{session}/.well-known/openid-credential-issuer',
        ...options
    });
};

/**
 * Authorization Server Metadata
 */
export const wellKnownControllerAuthzMetadata = <ThrowOnError extends boolean = false>(options: Options<WellKnownControllerAuthzMetadataData, ThrowOnError>) => {
    return (options.client ?? client).get<WellKnownControllerAuthzMetadataResponses, unknown, ThrowOnError>({
        url: '/{session}/.well-known/oauth-authorization-server',
        ...options
    });
};

/**
 * Returns the JSON Web Key Set (JWKS) for the authorization server.
 */
export const wellKnownControllerGetJwks = <ThrowOnError extends boolean = false>(options: Options<WellKnownControllerGetJwksData, ThrowOnError>) => {
    return (options.client ?? client).get<WellKnownControllerGetJwksResponses, unknown, ThrowOnError>({
        url: '/{session}/.well-known/jwks.json',
        ...options
    });
};

/**
 * OAuth2 Token endpoint - supports client credentials flow only
 * Accepts client credentials either in Authorization header (Basic auth) or request body
 */
export const authControllerGetOAuth2Token = <ThrowOnError extends boolean = false>(options: Options<AuthControllerGetOAuth2TokenData, ThrowOnError>) => {
    return (options.client ?? client).post<AuthControllerGetOAuth2TokenResponses, AuthControllerGetOAuth2TokenErrors, ThrowOnError>({
        url: '/oauth2/token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * OIDC Discovery Configuration
 * Returns the OpenID Connect discovery configuration for client credentials authentication.
 */
export const authControllerGetOidcDiscovery = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerGetOidcDiscoveryData, ThrowOnError>) => {
    return (options?.client ?? client).get<AuthControllerGetOidcDiscoveryResponses, unknown, ThrowOnError>({
        url: '/.well-known/oauth-authorization-server',
        ...options
    });
};

/**
 * JSON Web Key Set
 * Returns the JSON Web Key Set for token verification.
 */
export const authControllerGetGlobalJwks = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerGetGlobalJwksData, ThrowOnError>) => {
    return (options?.client ?? client).get<AuthControllerGetGlobalJwksResponses, unknown, ThrowOnError>({
        url: '/.well-known/jwks.json',
        ...options
    });
};

/**
 * Get all tenants
 */
export const tenantControllerGetTenants = <ThrowOnError extends boolean = false>(options?: Options<TenantControllerGetTenantsData, ThrowOnError>) => {
    return (options?.client ?? client).get<TenantControllerGetTenantsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tenant',
        ...options
    });
};

/**
 * Initialize a tenant
 */
export const tenantControllerInitTenant = <ThrowOnError extends boolean = false>(options: Options<TenantControllerInitTenantData, ThrowOnError>) => {
    return (options.client ?? client).post<TenantControllerInitTenantResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tenant',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes a tenant by ID
 */
export const tenantControllerDeleteTenant = <ThrowOnError extends boolean = false>(options: Options<TenantControllerDeleteTenantData, ThrowOnError>) => {
    return (options.client ?? client).delete<TenantControllerDeleteTenantResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tenant/{id}',
        ...options
    });
};

/**
 * Get a tenant by ID
 */
export const tenantControllerGetTenant = <ThrowOnError extends boolean = false>(options: Options<TenantControllerGetTenantData, ThrowOnError>) => {
    return (options.client ?? client).get<TenantControllerGetTenantResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tenant/{id}',
        ...options
    });
};

/**
 * Get all clients for a user
 */
export const clientControllerGetClients = <ThrowOnError extends boolean = false>(options?: Options<ClientControllerGetClientsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ClientControllerGetClientsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/client',
        ...options
    });
};

/**
 * Create a new client
 */
export const clientControllerCreateClient = <ThrowOnError extends boolean = false>(options: Options<ClientControllerCreateClientData, ThrowOnError>) => {
    return (options.client ?? client).post<ClientControllerCreateClientResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/client',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a client by its id
 */
export const clientControllerDeleteClient = <ThrowOnError extends boolean = false>(options: Options<ClientControllerDeleteClientData, ThrowOnError>) => {
    return (options.client ?? client).delete<ClientControllerDeleteClientResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/client/{id}',
        ...options
    });
};

/**
 * Get a client by its id
 */
export const clientControllerGetClient = <ThrowOnError extends boolean = false>(options: Options<ClientControllerGetClientData, ThrowOnError>) => {
    return (options.client ?? client).get<ClientControllerGetClientResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/client/{id}',
        ...options
    });
};

/**
 * Update a client by its id
 */
export const clientControllerUpdateClient = <ThrowOnError extends boolean = false>(options: Options<ClientControllerUpdateClientData, ThrowOnError>) => {
    return (options.client ?? client).patch<ClientControllerUpdateClientResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/client/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const clientControllerGetClientSecret = <ThrowOnError extends boolean = false>(options: Options<ClientControllerGetClientSecretData, ThrowOnError>) => {
    return (options.client ?? client).get<ClientControllerGetClientSecretResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/client/{id}/secret',
        ...options
    });
};

/**
 * Get all keys for the tenant.
 */
export const keyControllerGetKeys = <ThrowOnError extends boolean = false>(options?: Options<KeyControllerGetKeysData, ThrowOnError>) => {
    return (options?.client ?? client).get<KeyControllerGetKeysResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/key',
        ...options
    });
};

/**
 * Add a new key to the key service.
 */
export const keyControllerAddKey = <ThrowOnError extends boolean = false>(options: Options<KeyControllerAddKeyData, ThrowOnError>) => {
    return (options.client ?? client).post<KeyControllerAddKeyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/key',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a key from the key service.
 */
export const keyControllerDeleteKey = <ThrowOnError extends boolean = false>(options: Options<KeyControllerDeleteKeyData, ThrowOnError>) => {
    return (options.client ?? client).delete<KeyControllerDeleteKeyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/key/{id}',
        ...options
    });
};

/**
 * Updates an existing key in the key service.
 */
export const keyControllerUpdateKey = <ThrowOnError extends boolean = false>(options: Options<KeyControllerUpdateKeyData, ThrowOnError>) => {
    return (options.client ?? client).put<KeyControllerUpdateKeyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/key/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the status list
 */
export const statusListControllerGetList = <ThrowOnError extends boolean = false>(options: Options<StatusListControllerGetListData, ThrowOnError>) => {
    return (options.client ?? client).get<StatusListControllerGetListResponses, unknown, ThrowOnError>({
        url: '/{tenantId}/status-management/status-list',
        ...options
    });
};

/**
 * Create an presentation request that can be sent to the user
 */
export const presentationManagementControllerGetOffer = <ThrowOnError extends boolean = false>(options: Options<PresentationManagementControllerGetOfferData, ThrowOnError>) => {
    return (options.client ?? client).post<PresentationManagementControllerGetOfferResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/presentation-management/request',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Returns the presentation request configurations.
 */
export const presentationManagementControllerConfiguration = <ThrowOnError extends boolean = false>(options?: Options<PresentationManagementControllerConfigurationData, ThrowOnError>) => {
    return (options?.client ?? client).get<PresentationManagementControllerConfigurationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/presentation-management',
        ...options
    });
};

/**
 * Store a presentation request configuration. If it already exists, it will be updated.
 */
export const presentationManagementControllerStorePresentationConfig = <ThrowOnError extends boolean = false>(options: Options<PresentationManagementControllerStorePresentationConfigData, ThrowOnError>) => {
    return (options.client ?? client).post<PresentationManagementControllerStorePresentationConfigResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/presentation-management',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes a presentation request configuration by its ID.
 */
export const presentationManagementControllerDeleteConfiguration = <ThrowOnError extends boolean = false>(options: Options<PresentationManagementControllerDeleteConfigurationData, ThrowOnError>) => {
    return (options.client ?? client).delete<PresentationManagementControllerDeleteConfigurationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/presentation-management/{id}',
        ...options
    });
};

/**
 * Returns the authorization request for a given requestId and session.
 */
export const oid4VpControllerGetRequestWithSession = <ThrowOnError extends boolean = false>(options: Options<Oid4VpControllerGetRequestWithSessionData, ThrowOnError>) => {
    return (options.client ?? client).get<Oid4VpControllerGetRequestWithSessionResponses, unknown, ThrowOnError>({
        url: '/{session}/oid4vp/request',
        ...options
    });
};

/**
 * Returns the authorization request for a given requestId and session.
 */
export const oid4VpControllerGetPostRequestWithSession = <ThrowOnError extends boolean = false>(options: Options<Oid4VpControllerGetPostRequestWithSessionData, ThrowOnError>) => {
    return (options.client ?? client).post<Oid4VpControllerGetPostRequestWithSessionResponses, unknown, ThrowOnError>({
        url: '/{session}/oid4vp/request',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Endpoint to receive the response from the wallet.
 */
export const oid4VpControllerGetResponse = <ThrowOnError extends boolean = false>(options: Options<Oid4VpControllerGetResponseData, ThrowOnError>) => {
    return (options.client ?? client).post<Oid4VpControllerGetResponseResponses, unknown, ThrowOnError>({
        url: '/{session}/oid4vp',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves all sessions.
 */
export const sessionControllerGetAllSessions = <ThrowOnError extends boolean = false>(options?: Options<SessionControllerGetAllSessionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<SessionControllerGetAllSessionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/session',
        ...options
    });
};

/**
 * Deletes a session by its ID
 */
export const sessionControllerDeleteSession = <ThrowOnError extends boolean = false>(options: Options<SessionControllerDeleteSessionData, ThrowOnError>) => {
    return (options.client ?? client).delete<SessionControllerDeleteSessionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/session/{id}',
        ...options
    });
};

/**
 * Retrieves the session information for a given session ID.
 */
export const sessionControllerGetSession = <ThrowOnError extends boolean = false>(options: Options<SessionControllerGetSessionData, ThrowOnError>) => {
    return (options.client ?? client).get<SessionControllerGetSessionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/session/{id}',
        ...options
    });
};

/**
 * Update the status of the credentials of a specific session.
 */
export const sessionControllerRevokeAll = <ThrowOnError extends boolean = false>(options: Options<SessionControllerRevokeAllData, ThrowOnError>) => {
    return (options.client ?? client).post<SessionControllerRevokeAllResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/session/revoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Endpoint to issue credentials
 */
export const oid4VciControllerCredential = <ThrowOnError extends boolean = false>(options: Options<Oid4VciControllerCredentialData, ThrowOnError>) => {
    return (options.client ?? client).post<Oid4VciControllerCredentialResponses, unknown, ThrowOnError>({
        url: '/{session}/vci/credential',
        ...options
    });
};

/**
 * Notification endpoint
 */
export const oid4VciControllerNotifications = <ThrowOnError extends boolean = false>(options: Options<Oid4VciControllerNotificationsData, ThrowOnError>) => {
    return (options.client ?? client).post<Oid4VciControllerNotificationsResponses, unknown, ThrowOnError>({
        url: '/{session}/vci/notification',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const oid4VciControllerNonce = <ThrowOnError extends boolean = false>(options: Options<Oid4VciControllerNonceData, ThrowOnError>) => {
    return (options.client ?? client).post<Oid4VciControllerNonceResponses, unknown, ThrowOnError>({
        url: '/{session}/vci/nonce',
        ...options
    });
};

/**
 * Endpoint to handle the Authorization Request.
 */
export const authorizeControllerAuthorize = <ThrowOnError extends boolean = false>(options?: Options<AuthorizeControllerAuthorizeData, ThrowOnError>) => {
    return (options?.client ?? client).get<AuthorizeControllerAuthorizeResponses, unknown, ThrowOnError>({
        url: '/{session}/authorize',
        ...options
    });
};

/**
 * Endpoint to handle the Pushed Authorization Request (PAR).
 */
export const authorizeControllerPar = <ThrowOnError extends boolean = false>(options: Options<AuthorizeControllerParData, ThrowOnError>) => {
    return (options.client ?? client).post<AuthorizeControllerParResponses, unknown, ThrowOnError>({
        url: '/{session}/authorize/par',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Endpoint to validate the token request.
 * This endpoint is used to exchange the authorization code for an access token.
 */
export const authorizeControllerToken = <ThrowOnError extends boolean = false>(options: Options<AuthorizeControllerTokenData, ThrowOnError>) => {
    return (options.client ?? client).post<AuthorizeControllerTokenResponses, unknown, ThrowOnError>({
        url: '/{session}/authorize/token',
        ...options
    });
};

/**
 * Endpoint for the authorization challenge.
 */
export const authorizeControllerAuthorizationChallengeEndpoint = <ThrowOnError extends boolean = false>(options: Options<AuthorizeControllerAuthorizationChallengeEndpointData, ThrowOnError>) => {
    return (options.client ?? client).post<AuthorizeControllerAuthorizationChallengeEndpointResponses, unknown, ThrowOnError>({
        url: '/{session}/authorize/challenge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Returns the credential configurations for this tenant.
 */
export const credentialsControllerGetConfigs = <ThrowOnError extends boolean = false>(options?: Options<CredentialsControllerGetConfigsData, ThrowOnError>) => {
    return (options?.client ?? client).get<CredentialsControllerGetConfigsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/issuer-management/credentials',
        ...options
    });
};

/**
 * Stores the credential configuration for this tenant.
 */
export const credentialsControllerStoreCredentialConfiguration = <ThrowOnError extends boolean = false>(options: Options<CredentialsControllerStoreCredentialConfigurationData, ThrowOnError>) => {
    return (options.client ?? client).post<CredentialsControllerStoreCredentialConfigurationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/issuer-management/credentials',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes an credential configuration.
 */
export const credentialsControllerDeleteIssuanceConfiguration = <ThrowOnError extends boolean = false>(options: Options<CredentialsControllerDeleteIssuanceConfigurationData, ThrowOnError>) => {
    return (options.client ?? client).delete<CredentialsControllerDeleteIssuanceConfigurationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/issuer-management/credentials/{id}',
        ...options
    });
};

/**
 * Create an offer for a credential.
 */
export const issuerManagementControllerGetOffer = <ThrowOnError extends boolean = false>(options: Options<IssuerManagementControllerGetOfferData, ThrowOnError>) => {
    return (options.client ?? client).post<IssuerManagementControllerGetOfferResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/issuer-management/offer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Returns the issuance configurations for this tenant.
 */
export const issuanceControllerGetIssuanceConfigurations = <ThrowOnError extends boolean = false>(options?: Options<IssuanceControllerGetIssuanceConfigurationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<IssuanceControllerGetIssuanceConfigurationsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/issuer-management/issuance',
        ...options
    });
};

/**
 * Stores the issuance configuration for this tenant.
 */
export const issuanceControllerStoreIssuanceConfiguration = <ThrowOnError extends boolean = false>(options: Options<IssuanceControllerStoreIssuanceConfigurationData, ThrowOnError>) => {
    return (options.client ?? client).post<IssuanceControllerStoreIssuanceConfigurationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/issuer-management/issuance',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes an issuance configuration.
 */
export const issuanceControllerDeleteIssuanceConfiguration = <ThrowOnError extends boolean = false>(options: Options<IssuanceControllerDeleteIssuanceConfigurationData, ThrowOnError>) => {
    return (options.client ?? client).delete<IssuanceControllerDeleteIssuanceConfigurationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/issuer-management/issuance/{id}',
        ...options
    });
};

/**
 * Retrieves the VCT (Verifiable Credential Type) from the credentials service.
 */
export const credentialsMetadataControllerVct = <ThrowOnError extends boolean = false>(options: Options<CredentialsMetadataControllerVctData, ThrowOnError>) => {
    return (options.client ?? client).get<CredentialsMetadataControllerVctResponses, unknown, ThrowOnError>({
        url: '/{tenantId}/credentials-metadata/vct/{id}',
        ...options
    });
};

/**
 * Retrieves the schema for a specific credential
 */
export const credentialsMetadataControllerSchema = <ThrowOnError extends boolean = false>(options: Options<CredentialsMetadataControllerSchemaData, ThrowOnError>) => {
    return (options.client ?? client).get<CredentialsMetadataControllerSchemaResponses, unknown, ThrowOnError>({
        url: '/{tenantId}/credentials-metadata/schema/{id}',
        ...options
    });
};

/**
 * Get display information for a user
 */
export const displayControllerGetDisplay = <ThrowOnError extends boolean = false>(options?: Options<DisplayControllerGetDisplayData, ThrowOnError>) => {
    return (options?.client ?? client).get<DisplayControllerGetDisplayResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/display',
        ...options
    });
};

/**
 * Create a new display for a user
 */
export const displayControllerCreateDisplay = <ThrowOnError extends boolean = false>(options: Options<DisplayControllerCreateDisplayData, ThrowOnError>) => {
    return (options.client ?? client).post<DisplayControllerCreateDisplayResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/display',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Endpoint to check the health of the service.
 */
export const healthControllerCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthControllerCheckData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthControllerCheckResponses, HealthControllerCheckErrors, ThrowOnError>({
        url: '/health',
        ...options
    });
};

export const prometheusControllerIndex = <ThrowOnError extends boolean = false>(options?: Options<PrometheusControllerIndexData, ThrowOnError>) => {
    return (options?.client ?? client).get<PrometheusControllerIndexResponses, unknown, ThrowOnError>({
        url: '/metrics',
        ...options
    });
};

/**
 * Upload files that belong to a tenant like images
 */
export const storageControllerUpload = <ThrowOnError extends boolean = false>(options: Options<StorageControllerUploadData, ThrowOnError>) => {
    return (options.client ?? client).post<StorageControllerUploadResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/storage',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const storageControllerDownload = <ThrowOnError extends boolean = false>(options: Options<StorageControllerDownloadData, ThrowOnError>) => {
    return (options.client ?? client).get<StorageControllerDownloadResponses, unknown, ThrowOnError>({
        url: '/storage/{key}',
        ...options
    });
};
