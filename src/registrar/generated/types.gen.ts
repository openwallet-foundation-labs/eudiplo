// This file is auto-generated by @hey-api/openapi-ts

export type RelyingParty = {
    name: string;
    id: string;
    EORI?: string;
    NTR: string;
    LEI?: string;
    VAT?: string;
    EX?: string;
    TAX?: string;
    EUID?: string;
    distinguishedName: string;
    intendedUses: {
        [key: string]: unknown;
    };
};

export type RelyingPartyRegistration = {
    name: string;
    LEI?: string;
    EORI?: string;
    EUID?: string;
    TAX?: string;
};

export type AccessCertificate = {
    id: string;
    revoked: string;
};

export type AccessCertificateRegistration = {
    publicKey: string;
    /**
     * The Subject Alternative Name (SAN) of the certificate
     */
    dns?: Array<string>;
};

export type AccessCertificateRegistrationResponse = {
    id: string;
    crt: string;
};

export type IntendedUse = {
    [key: string]: unknown;
};

export type RegistrationCertificate = {
    id: string;
    jwt: string;
    intendedUse: IntendedUse;
    revoked: string;
};

export type MultiLang = {
    locale: string;
    name: string;
};

export type Contact = {
    website: string;
    'e-mail': string;
    phone: string;
};

export type Credential = {
    format: 'dc+sd-jwt' | 'mso_mdoc';
    meta: {
        [key: string]: unknown;
    };
    claims: Array<{
        [key: string]: unknown;
    }>;
};

export type RegistrationCertificateCreation = {
    /**
     * The URL to the privacy policy of the relying party
     */
    privacy_policy: string;
    /**
     * The relying party id of the intermediary
     */
    intermediary?: string;
    /**
     * The list of purposes for which the credential can be used
     */
    purpose: Array<MultiLang>;
    /**
     * Information about how to contact the relying party
     */
    contact: Contact;
    /**
     * The list of credentials that should be requested from the user
     */
    credentials: Array<Credential>;
};

export type OmitTypeClass = {
    id: string;
    jwt: string;
    intendedUse: IntendedUse;
};

export type DecodedJwt = {
    [key: string]: unknown;
};

export type HealthControllerCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthControllerCheckErrors = {
    /**
     * The Health Check is not successful
     */
    503: {
        status?: string;
        info?: {
            [key: string]: {
                status: string;
                [key: string]: unknown | string;
            };
        } | null;
        error?: {
            [key: string]: {
                status: string;
                [key: string]: unknown | string;
            };
        } | null;
        details?: {
            [key: string]: {
                status: string;
                [key: string]: unknown | string;
            };
        };
    };
};

export type HealthControllerCheckError = HealthControllerCheckErrors[keyof HealthControllerCheckErrors];

export type HealthControllerCheckResponses = {
    /**
     * The Health Check is successful
     */
    200: {
        status?: string;
        info?: {
            [key: string]: {
                status: string;
                [key: string]: unknown | string;
            };
        } | null;
        error?: {
            [key: string]: {
                status: string;
                [key: string]: unknown | string;
            };
        } | null;
        details?: {
            [key: string]: {
                status: string;
                [key: string]: unknown | string;
            };
        };
    };
};

export type HealthControllerCheckResponse = HealthControllerCheckResponses[keyof HealthControllerCheckResponses];

export type RelyingPartyControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        TAX?: unknown;
        EUID?: unknown;
        EORI?: unknown;
        LEI?: unknown;
        name?: unknown;
    };
    url: '/relying-parties';
};

export type RelyingPartyControllerFindAllResponses = {
    200: Array<RelyingParty>;
};

export type RelyingPartyControllerFindAllResponse = RelyingPartyControllerFindAllResponses[keyof RelyingPartyControllerFindAllResponses];

export type RelyingPartyControllerRegisterData = {
    body: RelyingPartyRegistration;
    path?: never;
    query?: never;
    url: '/relying-parties';
};

export type RelyingPartyControllerRegisterResponses = {
    201: RelyingParty;
};

export type RelyingPartyControllerRegisterResponse = RelyingPartyControllerRegisterResponses[keyof RelyingPartyControllerRegisterResponses];

export type RelyingPartyControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/relying-parties/{id}';
};

export type RelyingPartyControllerRemoveResponses = {
    200: unknown;
};

export type CryptoControllerOwnCertData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/ca';
};

export type CryptoControllerOwnCertResponses = {
    200: string;
};

export type CryptoControllerOwnCertResponse = CryptoControllerOwnCertResponses[keyof CryptoControllerOwnCertResponses];

export type CryptoControllerOwnCertParsedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/ca/parsed';
};

export type CryptoControllerOwnCertParsedResponses = {
    200: string;
};

export type CryptoControllerOwnCertParsedResponse = CryptoControllerOwnCertParsedResponses[keyof CryptoControllerOwnCertParsedResponses];

export type AccessCertificateControllerAccessCertificatesData = {
    body?: never;
    path: {
        /**
         * The relying party id
         */
        rp: unknown;
    };
    query?: never;
    url: '/relying-parties/{rp}/access-certificates';
};

export type AccessCertificateControllerAccessCertificatesResponses = {
    200: Array<AccessCertificate>;
};

export type AccessCertificateControllerAccessCertificatesResponse = AccessCertificateControllerAccessCertificatesResponses[keyof AccessCertificateControllerAccessCertificatesResponses];

export type AccessCertificateControllerRegisterData = {
    body: AccessCertificateRegistration;
    path: {
        /**
         * The relying party id
         */
        rp: unknown;
    };
    query?: never;
    url: '/relying-parties/{rp}/access-certificates';
};

export type AccessCertificateControllerRegisterResponses = {
    201: AccessCertificateRegistrationResponse;
};

export type AccessCertificateControllerRegisterResponse = AccessCertificateControllerRegisterResponses[keyof AccessCertificateControllerRegisterResponses];

export type AccessCertificateControllerDeleteData = {
    body?: never;
    path: {
        id: string;
        /**
         * The relying party id
         */
        rp: unknown;
    };
    query?: never;
    url: '/relying-parties/{rp}/access-certificates/{id}';
};

export type AccessCertificateControllerDeleteResponses = {
    200: unknown;
};

export type AccessCertificateControllerFindOneData = {
    body?: never;
    path: {
        id: string;
        /**
         * The relying party id
         */
        rp: unknown;
    };
    query?: never;
    url: '/relying-parties/{rp}/access-certificates/{id}';
};

export type AccessCertificateControllerFindOneResponses = {
    200: unknown;
};

export type AccessCertificateControllerFindOneParsedData = {
    body?: never;
    path: {
        id: string;
        /**
         * The relying party id
         */
        rp: unknown;
    };
    query?: never;
    url: '/relying-parties/{rp}/access-certificates/{id}/parsed';
};

export type AccessCertificateControllerFindOneParsedResponses = {
    200: string;
};

export type AccessCertificateControllerFindOneParsedResponse = AccessCertificateControllerFindOneParsedResponses[keyof AccessCertificateControllerFindOneParsedResponses];

export type RegistrationCertificateControllerAllData = {
    body?: never;
    path: {
        /**
         * The relying party id
         */
        rp: unknown;
    };
    query?: never;
    url: '/relying-parties/{rp}/registration-certificates';
};

export type RegistrationCertificateControllerAllResponses = {
    200: Array<RegistrationCertificate>;
};

export type RegistrationCertificateControllerAllResponse = RegistrationCertificateControllerAllResponses[keyof RegistrationCertificateControllerAllResponses];

export type RegistrationCertificateControllerRegisterData = {
    body: RegistrationCertificateCreation;
    path: {
        /**
         * The relying party id
         */
        rp: unknown;
    };
    query?: never;
    url: '/relying-parties/{rp}/registration-certificates';
};

export type RegistrationCertificateControllerRegisterResponses = {
    201: OmitTypeClass;
};

export type RegistrationCertificateControllerRegisterResponse = RegistrationCertificateControllerRegisterResponses[keyof RegistrationCertificateControllerRegisterResponses];

export type RegistrationCertificateControllerDeleteData = {
    body?: never;
    path: {
        id: string;
        /**
         * The relying party id
         */
        rp: unknown;
    };
    query?: never;
    url: '/relying-parties/{rp}/registration-certificates/{id}';
};

export type RegistrationCertificateControllerDeleteResponses = {
    200: unknown;
};

export type RegistrationCertificateControllerFindOneData = {
    body?: never;
    path: {
        id: string;
        /**
         * The relying party id
         */
        rp: unknown;
    };
    query?: never;
    url: '/relying-parties/{rp}/registration-certificates/{id}';
};

export type RegistrationCertificateControllerFindOneErrors = {
    default: RegistrationCertificate;
};

export type RegistrationCertificateControllerFindOneError = RegistrationCertificateControllerFindOneErrors[keyof RegistrationCertificateControllerFindOneErrors];

export type RegistrationCertificateControllerFindOneResponses = {
    200: RegistrationCertificate;
};

export type RegistrationCertificateControllerFindOneResponse = RegistrationCertificateControllerFindOneResponses[keyof RegistrationCertificateControllerFindOneResponses];

export type RegistrationCertificateControllerFindOneDecodedData = {
    body?: never;
    path: {
        id: string;
        /**
         * The relying party id
         */
        rp: unknown;
    };
    query?: never;
    url: '/relying-parties/{rp}/registration-certificates/{id}/jws-decoded';
};

export type RegistrationCertificateControllerFindOneDecodedResponses = {
    200: DecodedJwt;
};

export type RegistrationCertificateControllerFindOneDecodedResponse = RegistrationCertificateControllerFindOneDecodedResponses[keyof RegistrationCertificateControllerFindOneDecodedResponses];

export type StatusListControllerGetListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/status-management/status-list';
};

export type StatusListControllerGetListResponses = {
    200: string;
};

export type StatusListControllerGetListResponse = StatusListControllerGetListResponses[keyof StatusListControllerGetListResponses];

export type StatusListControllerCrlFileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/status-management/crl';
};

export type StatusListControllerCrlFileResponses = {
    /**
     * The CRL file in DER format
     */
    200: Blob | File;
};

export type StatusListControllerCrlFileResponse = StatusListControllerCrlFileResponses[keyof StatusListControllerCrlFileResponses];

export type Oid4VpControllerGetValidPidData = {
    body?: never;
    path?: never;
    query: {
        'oid4vp-version': 'draft-24' | 'draft-21';
        request: 'valid-request' | 'overask';
        response: 'qr-code' | 'uri';
        'query-language': 'dcql' | 'pex';
    };
    url: '/oid4vp';
};

export type Oid4VpControllerGetValidPidResponses = {
    200: unknown;
};

export type Oid4VpControllerGetValidRequestWithQueryData = {
    body?: never;
    path: {
        version: string;
        request: string;
    };
    query?: never;
    url: '/oid4vp/{version}/{request}';
};

export type Oid4VpControllerGetValidRequestWithQueryResponses = {
    200: string;
};

export type Oid4VpControllerGetValidRequestWithQueryResponse = Oid4VpControllerGetValidRequestWithQueryResponses[keyof Oid4VpControllerGetValidRequestWithQueryResponses];

export type Oid4VpControllerGetValidRequestData = {
    body?: never;
    path: {
        version: 'draft-21' | 'draft-24';
        request: 'valid-request' | 'overask';
        querylanguage: 'dcql' | 'pex';
    };
    query?: never;
    url: '/oid4vp/{version}/{request}/{querylanguage}';
};

export type Oid4VpControllerGetValidRequestResponses = {
    200: string;
};

export type Oid4VpControllerGetValidRequestResponse = Oid4VpControllerGetValidRequestResponses[keyof Oid4VpControllerGetValidRequestResponses];

export type Oid4VpControllerResponseData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/oid4vp/response';
};

export type Oid4VpControllerResponseResponses = {
    200: unknown;
};

export type Oid4VpControllerSuccessData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/oid4vp/success';
};

export type Oid4VpControllerSuccessResponses = {
    200: string;
};

export type Oid4VpControllerSuccessResponse = Oid4VpControllerSuccessResponses[keyof Oid4VpControllerSuccessResponses];

export type ClientOptions = {
    baseUrl: string;
};