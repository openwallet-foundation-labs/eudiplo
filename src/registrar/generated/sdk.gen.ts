// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type {
    HealthControllerCheckData,
    HealthControllerCheckResponses,
    HealthControllerCheckErrors,
    RelyingPartyControllerFindAllData,
    RelyingPartyControllerFindAllResponses,
    RelyingPartyControllerRegisterData,
    RelyingPartyControllerRegisterResponses,
    RelyingPartyControllerRemoveData,
    RelyingPartyControllerRemoveResponses,
    CryptoControllerOwnCertData,
    CryptoControllerOwnCertResponses,
    CryptoControllerOwnCertParsedData,
    CryptoControllerOwnCertParsedResponses,
    AccessCertificateControllerAccessCertificatesData,
    AccessCertificateControllerAccessCertificatesResponses,
    AccessCertificateControllerRegisterData,
    AccessCertificateControllerRegisterResponses,
    AccessCertificateControllerDeleteData,
    AccessCertificateControllerDeleteResponses,
    AccessCertificateControllerFindOneData,
    AccessCertificateControllerFindOneResponses,
    AccessCertificateControllerFindOneParsedData,
    AccessCertificateControllerFindOneParsedResponses,
    RegistrationCertificateControllerAllData,
    RegistrationCertificateControllerAllResponses,
    RegistrationCertificateControllerRegisterData,
    RegistrationCertificateControllerRegisterResponses,
    RegistrationCertificateControllerDeleteData,
    RegistrationCertificateControllerDeleteResponses,
    RegistrationCertificateControllerFindOneData,
    RegistrationCertificateControllerFindOneResponses,
    RegistrationCertificateControllerFindOneErrors,
    RegistrationCertificateControllerFindOneDecodedData,
    RegistrationCertificateControllerFindOneDecodedResponses,
    StatusListControllerGetListData,
    StatusListControllerGetListResponses,
    StatusListControllerCrlFileData,
    StatusListControllerCrlFileResponses,
    Oid4VpControllerGetValidPidData,
    Oid4VpControllerGetValidPidResponses,
    Oid4VpControllerGetValidRequestWithQueryData,
    Oid4VpControllerGetValidRequestWithQueryResponses,
    Oid4VpControllerGetValidRequestData,
    Oid4VpControllerGetValidRequestResponses,
    Oid4VpControllerResponseData,
    Oid4VpControllerResponseResponses,
    Oid4VpControllerSuccessData,
    Oid4VpControllerSuccessResponses,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
    TData extends TDataShape = TDataShape,
    ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const healthControllerCheck = <ThrowOnError extends boolean = false>(
    options?: Options<HealthControllerCheckData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        HealthControllerCheckResponses,
        HealthControllerCheckErrors,
        ThrowOnError
    >({
        url: '/health',
        ...options,
    });
};

/**
 * Get all relying parties
 */
export const relyingPartyControllerFindAll = <
    ThrowOnError extends boolean = false,
>(
    options?: Options<RelyingPartyControllerFindAllData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        RelyingPartyControllerFindAllResponses,
        unknown,
        ThrowOnError
    >({
        url: '/relying-parties',
        ...options,
    });
};

/**
 * Register a new relying party
 */
export const relyingPartyControllerRegister = <
    ThrowOnError extends boolean = false,
>(
    options: Options<RelyingPartyControllerRegisterData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        RelyingPartyControllerRegisterResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/relying-parties',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Removes a relying party and it's associated certificates. Only used to tidy up.
 */
export const relyingPartyControllerRemove = <
    ThrowOnError extends boolean = false,
>(
    options: Options<RelyingPartyControllerRemoveData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).delete<
        RelyingPartyControllerRemoveResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/relying-parties/{id}',
        ...options,
    });
};

/**
 * Returns the certificate of the RP registrar.
 */
export const cryptoControllerOwnCert = <ThrowOnError extends boolean = false>(
    options?: Options<CryptoControllerOwnCertData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        CryptoControllerOwnCertResponses,
        unknown,
        ThrowOnError
    >({
        url: '/ca',
        ...options,
    });
};

/**
 * Returns the certificate of the RP registrar.
 */
export const cryptoControllerOwnCertParsed = <
    ThrowOnError extends boolean = false,
>(
    options?: Options<CryptoControllerOwnCertParsedData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        CryptoControllerOwnCertParsedResponses,
        unknown,
        ThrowOnError
    >({
        url: '/ca/parsed',
        ...options,
    });
};

/**
 * Get all access certificates by a relying party
 */
export const accessCertificateControllerAccessCertificates = <
    ThrowOnError extends boolean = false,
>(
    options: Options<
        AccessCertificateControllerAccessCertificatesData,
        ThrowOnError
    >,
) => {
    return (options.client ?? _heyApiClient).get<
        AccessCertificateControllerAccessCertificatesResponses,
        unknown,
        ThrowOnError
    >({
        url: '/relying-parties/{rp}/access-certificates',
        ...options,
    });
};

/**
 * Add a new access certificate
 */
export const accessCertificateControllerRegister = <
    ThrowOnError extends boolean = false,
>(
    options: Options<AccessCertificateControllerRegisterData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        AccessCertificateControllerRegisterResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/relying-parties/{rp}/access-certificates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Delete a certificate by id
 */
export const accessCertificateControllerDelete = <
    ThrowOnError extends boolean = false,
>(
    options: Options<AccessCertificateControllerDeleteData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).delete<
        AccessCertificateControllerDeleteResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/relying-parties/{rp}/access-certificates/{id}',
        ...options,
    });
};

/**
 * Get a certificate by id
 */
export const accessCertificateControllerFindOne = <
    ThrowOnError extends boolean = false,
>(
    options: Options<AccessCertificateControllerFindOneData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        AccessCertificateControllerFindOneResponses,
        unknown,
        ThrowOnError
    >({
        url: '/relying-parties/{rp}/access-certificates/{id}',
        ...options,
    });
};

/**
 * Get a certificate by id and parse it via openssl
 * Subject is not RFC 4514 conform
 */
export const accessCertificateControllerFindOneParsed = <
    ThrowOnError extends boolean = false,
>(
    options: Options<
        AccessCertificateControllerFindOneParsedData,
        ThrowOnError
    >,
) => {
    return (options.client ?? _heyApiClient).get<
        AccessCertificateControllerFindOneParsedResponses,
        unknown,
        ThrowOnError
    >({
        url: '/relying-parties/{rp}/access-certificates/{id}/parsed',
        ...options,
    });
};

/**
 * Get all registration certificates by a relying party
 */
export const registrationCertificateControllerAll = <
    ThrowOnError extends boolean = false,
>(
    options: Options<RegistrationCertificateControllerAllData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        RegistrationCertificateControllerAllResponses,
        unknown,
        ThrowOnError
    >({
        url: '/relying-parties/{rp}/registration-certificates',
        ...options,
    });
};

/**
 * Add a new registration certificate
 */
export const registrationCertificateControllerRegister = <
    ThrowOnError extends boolean = false,
>(
    options: Options<
        RegistrationCertificateControllerRegisterData,
        ThrowOnError
    >,
) => {
    return (options.client ?? _heyApiClient).post<
        RegistrationCertificateControllerRegisterResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/relying-parties/{rp}/registration-certificates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Delete a certificate by id
 */
export const registrationCertificateControllerDelete = <
    ThrowOnError extends boolean = false,
>(
    options: Options<RegistrationCertificateControllerDeleteData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).delete<
        RegistrationCertificateControllerDeleteResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/relying-parties/{rp}/registration-certificates/{id}',
        ...options,
    });
};

/**
 * Get a certificate by id
 */
export const registrationCertificateControllerFindOne = <
    ThrowOnError extends boolean = false,
>(
    options: Options<
        RegistrationCertificateControllerFindOneData,
        ThrowOnError
    >,
) => {
    return (options.client ?? _heyApiClient).get<
        RegistrationCertificateControllerFindOneResponses,
        RegistrationCertificateControllerFindOneErrors,
        ThrowOnError
    >({
        url: '/relying-parties/{rp}/registration-certificates/{id}',
        ...options,
    });
};

/**
 * Get a certificate by id decoded as jws
 */
export const registrationCertificateControllerFindOneDecoded = <
    ThrowOnError extends boolean = false,
>(
    options: Options<
        RegistrationCertificateControllerFindOneDecodedData,
        ThrowOnError
    >,
) => {
    return (options.client ?? _heyApiClient).get<
        RegistrationCertificateControllerFindOneDecodedResponses,
        unknown,
        ThrowOnError
    >({
        url: '/relying-parties/{rp}/registration-certificates/{id}/jws-decoded',
        ...options,
    });
};

/**
 * Get the status list
 */
export const statusListControllerGetList = <
    ThrowOnError extends boolean = false,
>(
    options?: Options<StatusListControllerGetListData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        StatusListControllerGetListResponses,
        unknown,
        ThrowOnError
    >({
        url: '/status-management/status-list',
        ...options,
    });
};

/**
 * Returns the crl.der file
 */
export const statusListControllerCrlFile = <
    ThrowOnError extends boolean = false,
>(
    options?: Options<StatusListControllerCrlFileData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        StatusListControllerCrlFileResponses,
        unknown,
        ThrowOnError
    >({
        url: '/status-management/crl',
        ...options,
    });
};

/**
 * Get a valid openid4vp request uri
 */
export const oid4VpControllerGetValidPid = <
    ThrowOnError extends boolean = false,
>(
    options: Options<Oid4VpControllerGetValidPidData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        Oid4VpControllerGetValidPidResponses,
        unknown,
        ThrowOnError
    >({
        url: '/oid4vp',
        ...options,
    });
};

/**
 * deprecated
 */
export const oid4VpControllerGetValidRequestWithQuery = <
    ThrowOnError extends boolean = false,
>(
    options: Options<
        Oid4VpControllerGetValidRequestWithQueryData,
        ThrowOnError
    >,
) => {
    return (options.client ?? _heyApiClient).get<
        Oid4VpControllerGetValidRequestWithQueryResponses,
        unknown,
        ThrowOnError
    >({
        url: '/oid4vp/{version}/{request}',
        ...options,
    });
};

/**
 * Get an oid4vp authorization request as signed JWT
 */
export const oid4VpControllerGetValidRequest = <
    ThrowOnError extends boolean = false,
>(
    options: Options<Oid4VpControllerGetValidRequestData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        Oid4VpControllerGetValidRequestResponses,
        unknown,
        ThrowOnError
    >({
        url: '/oid4vp/{version}/{request}/{querylanguage}',
        ...options,
    });
};

/**
 * Response endpoint
 */
export const oid4VpControllerResponse = <ThrowOnError extends boolean = false>(
    options?: Options<Oid4VpControllerResponseData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        Oid4VpControllerResponseResponses,
        unknown,
        ThrowOnError
    >({
        url: '/oid4vp/response',
        ...options,
    });
};

/**
 * Dummy success endpoint
 */
export const oid4VpControllerSuccess = <ThrowOnError extends boolean = false>(
    options?: Options<Oid4VpControllerSuccessData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        Oid4VpControllerSuccessResponses,
        unknown,
        ThrowOnError
    >({
        url: '/oid4vp/success',
        ...options,
    });
};
