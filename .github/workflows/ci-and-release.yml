name: CI / Docker Release

on:
    push:
        branches: ['main']
    pull_request:
        types: [opened, synchronize, reopened]

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    lint:
        name: Lint Codebase
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22

            - name: Enable Corepack
              run: corepack enable

            - name: Restore pnpm cache
              uses: actions/setup-node@v4
              with:
                  node-version: 22
                  cache: 'pnpm'

            - name: Install dependencies
              run: pnpm install

            - name: Run linter
              run: pnpm run lint

    build:
        name: Build Application
        runs-on: ubuntu-latest
        needs: [lint]
        steps:
            - uses: actions/checkout@v4

            - name: Copy env file
              run: cp .env.example .env

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22

            - name: Enable Corepack
              run: corepack enable

            - name: Restore pnpm cache
              uses: actions/setup-node@v4
              with:
                  node-version: 22
                  cache: 'pnpm'

            - name: Install dependencies
              run: pnpm install

            - name: Build the application
              run: pnpm run build

    build-doc:
        name: Build Documentation
        runs-on: ubuntu-latest
        needs: [lint]
        steps:
            - uses: actions/checkout@v4

            - name: Copy env file
              run: cp .env.example .env

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22
            - name: Enable Corepack
              run: corepack enable

            - name: Restore pnpm cache
              uses: actions/setup-node@v4
              with:
                  node-version: 22
                  cache: 'pnpm'

            - name: Install dependencies
              run: pnpm install

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.11'

            - name: Install Python dependencies
              run: pip install -r requirements.txt

            - name: Build documentation
              run: pnpm run doc:build

            - name: Upload built documentation
              uses: actions/upload-artifact@v4
              with:
                  name: generated-docs
                  path: site/

    test-e2e:
        name: E2E Tests
        runs-on: ubuntu-latest
        needs: [build]
        steps:
            - uses: actions/checkout@v4

            - name: Add entry to /etc/hosts
              run:
                  echo "127.0.0.1       host.testcontainers.internal" | sudo tee
                  -a /etc/hosts

            - name: Copy env file
              run: cp .env.example .env

            - name: Set up Docker (for Testcontainers)
              uses: docker/setup-buildx-action@v3

            - name: Set up Node.js with pnpm
              uses: actions/setup-node@v4
              with:
                  node-version: 22

            - name: Enable Corepack
              run: corepack enable

            - name: Restore pnpm cache
              uses: actions/setup-node@v4
              with:
                  node-version: 22
                  cache: 'pnpm'

            - name: Install dependencies
              run: pnpm install

            - name: Set up Docker (for Testcontainers)
              uses: docker/setup-buildx-action@v3

            - name: Run E2E tests
              run: pnpm run test:e2e

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v5
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  files: ./coverage-e2e/coverage-final.json
                  flags: e2e-test
                  name: codecov-umbrella
                  fail_ci_if_error: false

            - name: Upload test results to Codecov
              if: ${{ !cancelled() }}
              uses: codecov/test-results-action@v1
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}

    docker-main:
        name: Build & Push Docker Image (main)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        needs: [test-e2e]
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
        steps:
            - uses: actions/checkout@v4

            - name: Log in to GitHub Container Registry
              run:
                  echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u
                  ${{ github.actor }} --password-stdin

            - name: Build Docker image
              run:
                  docker build -t ghcr.io/cre8/eudiplo:main --build-arg
                  VERSION=main .

            - name: Push Docker image
              run: docker push ghcr.io/cre8/eudiplo:main
