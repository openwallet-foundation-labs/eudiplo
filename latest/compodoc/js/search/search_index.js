var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccessCertificateResponse.html",[0,1.403,1,3.944]],["body/interfaces/AccessCertificateResponse.html",[0,1.967,1,6.733,2,3.254,3,0.079,4,0.087,5,0.07,6,6.004,7,4.13,8,6.004,9,0.812,10,6.726,11,5.569,12,1.729,13,0.29,14,1.06,15,6.36,16,1.958,17,0.904,18,8.553,19,0.638,20,0.381,21,0.006,22,3.384,23,2.008,24,5.014,25,3.249,26,3.69,27,3.123,28,3.503,29,6.733,30,0.087,31,0.005,32,0.005]],["title/classes/AllowListPolicy.html",[33,0.201,34,2.661]],["body/classes/AllowListPolicy.html",[3,0.064,4,0.071,5,0.057,9,0.664,13,0.237,14,0.933,19,0.568,20,0.4,21,0.006,30,0.121,31,0.004,32,0.004,33,0.394,34,3.996,35,1.066,36,3.492,37,4.884,38,3.821,39,5.141,40,5.48,41,3.447,42,1.214,43,5.495,44,3.802,45,0.468,46,5.495,47,5.495,48,1.658,49,5.495,50,0.189,51,1.555,52,4.087,53,5.867,54,2.179,55,2.473,56,2.379,57,2.869,58,1.226,59,3.991,60,3.991,61,3.991,62,3.802,63,2.594,64,3.492,65,2.952,66,4.601,67,4.601,68,3.802,69,5.907,70,4.289,71,3.047,72,3.802,73,3.802,74,3.143,75,3.802,76,2.368,77,3.492,78,3.047,79,3.047,80,5.111,81,2.318,82,1.69,83,3.802,84,3.047,85,3.802]],["title/classes/ApiKeyConfig.html",[33,0.201,86,3.175]],["body/classes/ApiKeyConfig.html",[3,0.059,4,0.065,5,0.052,9,0.602,13,0.215,14,0.875,17,0.551,19,0.571,20,0.417,21,0.006,23,2.218,30,0.115,31,0.004,32,0.004,33,0.379,35,0.968,42,1.138,45,0.439,48,0.909,50,0.18,51,1.412,54,1.979,56,2.329,57,2.187,58,1.113,65,2.481,86,5.436,87,3.302,88,2.348,89,5.018,90,4.406,91,5.22,92,5.571,93,2.691,94,4.989,95,1.451,96,3.974,97,4.183,98,4.989,99,2.854,100,2.792,101,2.949,102,1.282,103,2.766,104,2.922,105,3.442,106,2.929,107,4.137,108,3.452,109,4.295,110,3.093,111,5.436,112,2.481,113,5.436,114,3.627,115,4.913,116,1.979,117,1.412,118,5.072,119,3.627,120,4.913,121,3.627,122,3.452,123,3.17,124,3.627,125,1.831,126,2.15,127,2.949,128,3.302,129,2.475,130,2.949,131,3.995,132,3.627,133,3.627,134,2.949,135,2.475,136,2.949,137,2.949,138,1.979]],["title/controllers/AppController.html",[139,1.501,140,3.69]],["body/controllers/AppController.html",[3,0.084,4,0.093,5,0.075,13,0.31,19,0.567,21,0.006,30,0.093,31,0.005,32,0.005,33,0.301,42,1.209,45,0.466,50,0.2,102,1.845,139,2.664,140,6.551,141,2.539,142,6.408,143,1.961,144,9.394,145,7.178,146,1.627,147,1.229,148,5.413,149,1.505,150,5.9,151,4.967,152,7.178,153,6.408,154,3.864,155,6.408,156,5.9,157,6.408]],["title/modules/AppModule.html",[158,1.427,159,3.69]],["body/modules/AppModule.html",[3,0.057,4,0.063,5,0.051,21,0.006,30,0.063,31,0.004,32,0.004,33,0.204,48,1.213,50,0.234,140,5.825,141,2.353,147,0.834,158,2.252,159,7.775,160,2.057,161,2.358,162,2.483,163,2.483,164,2.196,165,3.575,166,2.302,167,4.352,168,4.352,169,4.352,170,6.39,171,5.028,172,6.751,173,6.39,174,6.081,175,6.191,176,5.412,177,6.39,178,5.586,179,5.38,180,6.191,181,6.39,182,6.081,183,3.388,184,2.483,185,2.483,186,4.875,187,5.825,188,3.336,189,4.836,190,2.191,191,1.606,192,4.875,193,4.007,194,2.703,195,4.875,196,4.007,197,6.652,198,4.352,199,2.624,200,2.703,201,4.875,202,4.875,203,3.226,204,4.875,205,4.875,206,4.875,207,4.352,208,4.875,209,3.75,210,3.544,211,4.875,212,5.468,213,4.875,214,4.875,215,5.468,216,4.875,217,4.875,218,4.603,219,5.117,220,4.875,221,4.352,222,4.875,223,4.875,224,4.875,225,4.875,226,4.875,227,2.789,228,3.544,229,4.875,230,4.875,231,3.75,232,4.875,233,4.875]],["title/classes/AttestationBasedPolicy.html",[33,0.201,84,2.661]],["body/classes/AttestationBasedPolicy.html",[3,0.065,4,0.072,5,0.058,13,0.238,14,0.935,19,0.536,20,0.4,21,0.006,30,0.121,31,0.004,32,0.004,33,0.394,34,3.056,35,1.069,36,3.503,37,4.607,38,3.824,39,5.145,40,5.484,41,3.45,42,1.216,44,3.813,45,0.469,48,1.617,50,0.189,51,1.56,52,4.091,53,5.873,54,2.186,55,2.477,56,2.381,57,2.872,58,1.23,59,3.996,60,3.996,61,3.996,62,3.813,63,2.602,64,3.503,65,2.957,66,4.607,67,4.607,68,3.813,69,5.914,70,4.293,71,3.056,72,3.813,73,3.813,74,3.153,75,3.813,76,2.375,77,3.503,78,3.056,79,3.056,80,5.432,81,2.325,82,1.695,83,3.813,84,4.004,85,3.813,234,5.511,235,5.511,236,4.92,237,4.239,238,5.511]],["title/controllers/AuthController.html",[139,1.501,239,3.69]],["body/controllers/AuthController.html",[3,0.047,4,0.052,5,0.042,9,1.123,12,1.482,13,0.172,17,0.439,20,0.321,21,0.006,23,2.172,30,0.052,31,0.003,32,0.003,33,0.167,42,1.142,45,0.44,48,0.725,50,0.204,74,2.275,82,2.86,88,2.307,90,3.201,93,1.714,95,0.703,96,2.789,99,2.275,102,1.022,138,2.287,139,2.326,141,1.407,143,1.327,146,1.971,147,0.681,148,2.528,149,1.559,239,4.434,240,3.551,241,7.436,242,6.053,243,6.638,244,5.765,245,3.978,246,4.009,247,5.141,248,3.079,249,3.201,250,3.978,251,8.231,252,3.978,253,5.216,254,3.408,255,4.822,256,4.738,257,4.108,258,6.112,259,5.765,260,4.739,261,4.191,262,3.549,263,5.216,264,3.551,265,4.708,266,3.978,267,5.216,268,5.406,269,5.765,270,4.726,271,2.233,272,4.93,273,5.146,274,3.816,275,3.978,276,5.146,277,5.765,278,3.891,279,5.146,280,3.301,281,0.975,282,1.773,283,5.765,284,3.978,285,5.231,286,7.763,287,5.406,288,6.638,289,3.978,290,3.978,291,5.765,292,4.739,293,5.146,294,3.104,295,4.93,296,6.053,297,5.574,298,1.974,299,4.191,300,6.053,301,6.488,302,2.633,303,3.978,304,2.789,305,4.692,306,3.551,307,3.551,308,3.978,309,3.551,310,3.551,311,3.059,312,3.978,313,3.551,314,3.978,315,2.633,316,3.978,317,1.714,318,1.686,319,3.978,320,4.739,321,5.719,322,3.978,323,4.434,324,3.276,325,3.551,326,3.269,327,3.059,328,3.978,329,3.269,330,3.269,331,2.892,332,3.551,333,3.978,334,5.765,335,3.978,336,2.892,337,2.892,338,2.892,339,3.551,340,3.269,341,3.454,342,0.888,343,2.351,344,3.978,345,3.551,346,3.269,347,2.275]],["title/modules/AuthModule.html",[158,1.427,170,3.488]],["body/modules/AuthModule.html",[3,0.069,4,0.076,5,0.061,21,0.006,30,0.076,31,0.005,32,0.005,33,0.245,50,0.228,141,2.655,147,1.001,158,2.464,160,2.467,161,2.83,162,2.979,163,2.979,164,2.635,165,3.913,166,3.913,170,7.308,183,3.822,184,2.979,185,2.979,188,3.306,189,5.456,191,1.926,239,6.374,305,6.401,306,5.221,348,5.221,349,5.221,350,5.221,351,5.221,352,6.401,353,6.726,354,7.142,355,6.502,356,7.142,357,5.849,358,8.287,359,4.499,360,5.849,361,5.849,362,5.221,363,5.221,364,5.849,365,5.849]],["title/interfaces/AuthResponse.html",[0,1.403,366,3.488]],["body/interfaces/AuthResponse.html",[0,1.971,2,3.26,3,0.079,4,0.088,5,0.07,9,0.814,12,2.107,13,0.291,14,1.062,19,0.627,20,0.397,21,0.006,23,2.01,30,0.088,31,0.005,32,0.005,93,2.004,249,3.437,366,6.426,367,6.015,368,3.855,369,3.526,370,6.776,371,7.56,372,8.2,373,8.2,374,8.2,375,6.74,376,5.961,377,4.758,378,3.871,379,3.188,380,3.651,381,6.739,382,3.628]],["title/injectables/AuthService.html",[305,3.32,383,1.038]],["body/injectables/AuthService.html",[3,0.048,4,0.053,5,0.043,9,0.492,12,1.507,13,0.176,16,0.867,17,0.647,19,0.39,20,0.297,21,0.006,22,1.682,25,1.615,30,0.053,31,0.004,32,0.004,33,0.17,45,0.446,50,0.205,82,2.45,88,1.994,90,3.244,95,1.036,96,3.324,129,2.02,138,2.325,143,1.35,146,1.704,147,0.697,149,1.23,150,4.819,155,3.634,156,3.346,157,3.634,190,2.882,191,1.341,227,2.329,242,5.234,243,6.71,249,2.923,255,2.258,256,4.057,257,1.97,264,5.234,265,4.168,270,4.367,272,2.96,274,2.694,278,3.596,279,5.234,280,2.923,281,1.437,282,1.803,285,5.562,286,6.71,287,2.96,294,2.192,295,2.96,297,5.648,304,1.97,305,5.201,309,3.634,310,3.634,313,3.634,318,2.33,320,5.648,327,4.51,329,3.346,330,3.346,331,2.96,332,3.634,336,2.96,355,5.659,363,3.634,383,1.268,384,1.553,385,3.634,386,2.611,387,2.303,388,2.128,389,4.071,390,4.367,391,5.465,392,4.071,393,4.071,394,4.071,395,7.966,396,4.071,397,3.634,398,2.587,399,3.346,400,3.726,401,2.96,402,2.407,403,2.113,404,3.346,405,4.071,406,3.51,407,2.578,408,2.817,409,4.819,410,4.51,411,2.131,412,2.96,413,4.071,414,3.131,415,2.817,416,4.853,417,5.791,418,3.589,419,3.131,420,1.988,421,5.863,422,4.071,423,4.071,424,5.863,425,4.071,426,4.071,427,3.131,428,4.071,429,2.02,430,4.071,431,4.071,432,4.071,433,2.02,434,4.071,435,4.071,436,4.071,437,4.071,438,2.303,439,4.071,440,4.071,441,1.682,442,2.131,443,4.071,444,2.817,445,4.071,446,2.28,447,4.071,448,5.648,449,4.071,450,5.863,451,4.071,452,4.057,453,1.755,454,3.634,455,3.634,456,4.071,457,3.726,458,4.819,459,4.071,460,4.071,461,4.071,462,2.329,463,5.863,464,2.694,465,3.131,466,1.834,467,2.96,468,4.071,469,2.96,470,4.071,471,3.634,472,4.071,473,3.131,474,4.071,475,4.071,476,4.071,477,4.071,478,2.407,479,4.071,480,4.071,481,3.131,482,2.587,483,3.634,484,3.131,485,2.96,486,4.071]],["title/classes/AuthenticationMethodAuth.html",[33,0.201,487,2.937]],["body/classes/AuthenticationMethodAuth.html",[0,1.595,3,0.064,4,0.071,5,0.057,12,1.402,13,0.235,14,0.928,17,0.602,19,0.477,20,0.392,21,0.006,30,0.12,31,0.004,32,0.004,33,0.387,35,1.058,42,1.208,45,0.465,50,0.188,51,1.543,54,2.163,55,2.205,56,2.297,57,2.755,58,1.217,65,3.125,79,3.024,88,2.259,90,4.175,97,2.777,104,3.056,105,2.777,106,2.734,110,2.584,112,3.125,117,2.409,125,2.941,126,2.549,138,3.507,257,3.877,379,2.789,487,4.39,488,5.093,489,3.466,490,5.62,491,4.659,492,5.41,493,4.868,494,5.453,495,5.453,496,5.453,497,2.301,498,3.977,499,4.962,500,3.753,501,2.002,502,4.962,503,3.773,504,3.338,505,5.032,506,2.936,507,1.765,508,5.093,509,3.773,510,3.466,511,2.08,512,3.466,513,3.024,514,3.773,515,3.773,516,3.338,517,3.466,518,3.609]],["title/interfaces/AuthenticationMethodInterface.html",[0,1.403,490,3.049]],["body/interfaces/AuthenticationMethodInterface.html",[0,1.609,2,2.662,3,0.065,4,0.072,5,0.058,12,1.414,13,0.238,14,0.934,17,0.607,19,0.48,20,0.393,21,0.006,30,0.121,31,0.004,32,0.004,33,0.388,50,0.189,51,1.558,54,2.183,55,2.218,56,2.302,57,2.765,58,1.228,65,3.341,79,3.051,88,2.267,90,4.187,97,2.803,104,3.069,105,2.803,106,2.746,110,2.599,112,2.954,117,2.042,125,2.954,126,2.561,138,3.678,257,3.894,379,2.805,487,3.369,488,3.497,489,3.497,490,5.637,491,4.722,492,5.115,497,2.321,498,4,499,4.992,500,3.775,501,2.02,502,4.992,503,3.807,504,3.369,505,5.38,506,2.962,507,1.781,508,5.115,509,3.807,510,3.497,511,2.098,512,3.497,513,3.051,514,3.807,515,3.807,516,3.369,517,3.497,518,3.642]],["title/classes/AuthenticationMethodNone.html",[33,0.201,516,2.937]],["body/classes/AuthenticationMethodNone.html",[0,1.622,3,0.065,4,0.072,5,0.058,12,1.425,13,0.239,14,0.939,17,0.612,19,0.482,20,0.384,21,0.006,30,0.121,31,0.004,32,0.004,33,0.389,35,1.076,42,0.934,45,0.36,50,0.19,51,1.569,54,2.199,55,2.229,56,2.307,57,2.773,58,1.237,65,3.145,79,3.075,88,2.273,90,4.198,97,2.824,104,3.081,105,2.824,106,2.756,110,2.612,112,3.145,117,2.052,125,2.965,126,2.57,138,3.526,257,3.908,379,2.819,487,3.394,488,4.608,489,3.524,490,5.65,491,4.676,492,5.134,497,2.339,498,4.02,499,5.016,500,3.794,501,2.035,502,5.016,503,3.837,504,3.394,505,5.065,506,2.985,507,1.795,508,5.134,509,3.837,510,3.524,511,2.114,512,3.524,513,3.075,514,3.837,515,3.837,516,4.438,517,3.524,518,3.67,519,4.95,520,5.545]],["title/classes/AuthenticationMethodPresentation.html",[33,0.201,513,2.661]],["body/classes/AuthenticationMethodPresentation.html",[0,1.595,3,0.064,4,0.071,5,0.057,12,1.402,13,0.235,14,0.928,17,0.602,19,0.477,20,0.392,21,0.006,30,0.12,31,0.004,32,0.004,33,0.387,35,1.058,42,1.208,45,0.465,50,0.188,51,1.543,54,2.163,55,2.205,56,2.297,57,2.755,58,1.217,65,3.125,79,3.024,88,2.259,90,4.175,97,2.777,104,3.056,105,2.777,106,2.734,110,2.584,112,3.125,117,2.409,125,2.941,126,2.549,138,3.507,257,3.877,379,2.789,487,3.338,488,5.093,489,3.466,490,5.62,491,4.659,492,5.093,493,4.868,497,2.301,498,3.977,499,4.962,500,3.753,501,2.002,502,4.962,503,3.773,504,3.338,505,5.032,506,2.936,507,1.765,508,5.41,509,3.773,510,3.466,511,2.08,512,3.466,513,3.977,514,3.773,515,3.773,516,3.338,517,3.466,518,3.609,521,5.453,522,5.453,523,5.453]],["title/classes/AuthenticationUrlConfig.html",[33,0.201,492,3.049]],["body/classes/AuthenticationUrlConfig.html",[0,1.524,3,0.061,4,0.068,5,0.055,9,0.629,12,1.339,13,0.225,14,0.901,17,0.923,19,0.521,20,0.395,21,0.006,30,0.119,31,0.004,32,0.004,33,0.383,35,1.011,42,1.172,45,0.452,50,0.184,51,1.475,54,2.067,55,2.14,56,2.315,57,2.706,58,1.163,65,3.069,79,2.889,88,2.378,90,4.445,97,2.654,104,2.988,105,2.654,106,2.972,110,3.139,112,2.876,117,1.97,125,3.069,126,2.911,138,3.555,257,4.215,379,2.706,487,3.19,488,4.979,489,3.312,490,5.313,491,4.54,492,5.313,497,2.198,498,4.636,499,5.785,500,4.375,501,2.554,502,5.785,503,4.815,504,4.26,505,4.942,506,2.805,507,1.687,508,4.979,509,3.605,510,3.312,511,1.987,512,3.312,513,2.889,514,3.605,515,3.605,516,3.19,517,3.312,518,3.449,524,5.211,525,5.211,526,5.211]],["title/classes/AuthorizationResponse.html",[33,0.201,527,3.175]],["body/classes/AuthorizationResponse.html",[3,0.077,4,0.085,5,0.068,9,0.789,12,2.068,13,0.282,14,1.042,17,1.004,19,0.605,20,0.347,21,0.006,30,0.085,31,0.005,32,0.005,33,0.337,35,1.268,42,1.355,45,0.522,50,0.153,55,2.681,56,2.206,58,1.458,246,3.71,298,3.992,369,4.21,491,3.992,527,5.325,528,7.166,529,3.999,530,6.613,531,6.296,532,4.898,533,8.046,534,4.756,535,4.602,536,3.992,537,4.21,538,4.756,539,3.799,540,8.719,541,8.719,542,6.613,543,5.831,544,8.046,545,6.533]],["title/classes/AuthorizationResponse-1.html",[33,0.167,527,2.642,546,2.443]],["body/classes/AuthorizationResponse-1.html",[3,0.077,4,0.085,5,0.068,9,0.79,13,0.282,14,1.043,17,0.889,19,0.606,20,0.348,21,0.006,28,3.195,30,0.085,31,0.005,32,0.005,33,0.337,35,1.27,42,1.357,45,0.523,48,1.468,50,0.154,55,2.477,56,2.207,58,1.461,97,4.102,248,2.798,249,3.132,256,4.102,271,3.233,278,4.981,368,3.744,369,4.215,377,4.336,378,4.299,527,5.331,528,7.172,547,8.726,548,5.842,549,4.607,550,5.842,551,5.842,552,4.215]],["title/controllers/AuthorizeController.html",[139,1.501,553,3.69]],["body/controllers/AuthorizeController.html",[3,0.049,4,0.055,5,0.044,9,0.723,11,3.54,12,2.447,13,0.181,17,0.841,20,0.372,21,0.006,30,0.055,31,0.004,32,0.004,33,0.176,42,1.283,45,0.494,48,0.764,50,0.214,95,1.346,102,1.078,106,2.043,139,2.52,141,1.483,143,1.379,146,1.955,147,0.718,148,2.665,149,1.598,194,2.325,249,3.491,255,5.05,271,2.841,278,4.95,280,3.723,281,1.868,282,2.343,298,2.081,299,4.354,304,2.029,315,2.775,318,2.523,331,3.049,387,2.341,388,1.187,403,1.841,420,1.316,438,1.406,446,1.631,500,3.134,553,4.606,554,3.743,555,1.98,556,4.194,557,5.346,558,4.606,559,5.989,560,5.043,561,5.373,562,6.985,563,7.619,564,4.194,565,5.206,566,5.857,567,3.45,568,4.194,569,4.194,570,5.346,571,5.21,572,4.194,573,4.194,574,5.539,575,5.078,576,4.194,577,4.194,578,6.263,579,4.194,580,4.194,581,4.194,582,4.194,583,4.194,584,2.581,585,5.346,586,2.775,587,2.902,588,2.479,589,2.258,590,4.833,591,3.226,592,3.656,593,2.775,594,4.276,595,4.194,596,3.226,597,1.889,598,3.226,599,4.194,600,4.194,601,1.769,602,4.194,603,4.194,604,4.194,605,4.194,606,4.842,607,4.194,608,3.743,609,3.226,610,3.049,611,3.226,612,3.743,613,4.194,614,3.743,615,4.194,616,4.194,617,3.226,618,4.194,619,4.194,620,4.144,621,4.194,622,4.194,623,4.194]],["title/classes/AuthorizeQueries.html",[33,0.201,566,3.049]],["body/classes/AuthorizeQueries.html",[3,0.064,4,0.071,5,0.057,13,0.235,14,0.928,17,1.109,19,0.669,20,0.417,21,0.006,30,0.071,31,0.004,32,0.004,33,0.3,35,1.058,42,1.628,45,0.627,50,0.128,55,2.99,56,2.46,58,1.217,295,5.826,529,3.338,543,4.868,566,4.558,606,5.093,624,8.681,625,6.163,626,8.013,627,8.013,628,8.013,629,5.826,630,8.013,631,8.013,632,5.303,633,5.826,634,6.685,635,4.868,636,5.453,637,5.453,638,4.868,639,4.868,640,5.453,641,5.453,642,4.868,643,4.868,644,5.453]],["title/injectables/AuthorizeService.html",[383,1.038,594,2.937]],["body/injectables/AuthorizeService.html",[0,1.213,3,0.03,4,0.034,5,0.027,12,2.062,13,0.112,17,0.863,19,0.6,20,0.366,21,0.006,22,1.068,30,0.054,31,0.002,32,0.002,33,0.108,41,1.613,45,0.508,48,0.471,50,0.202,65,0.949,82,0.795,88,1.101,90,2.452,93,0.769,95,1.382,107,3.179,110,2.502,116,2.357,117,0.732,125,2.181,126,1.89,129,2.577,138,2.357,143,0.955,146,1.719,147,0.443,149,1.456,190,2.287,191,0.852,194,1.434,257,1.251,262,1.353,265,2.88,271,2.793,280,3.041,281,1.917,282,1.827,294,1.392,336,1.88,338,1.88,370,2.87,379,2.529,383,0.897,384,0.986,387,3.065,388,1.174,403,2.331,406,3.213,407,2.532,411,2.171,414,3.191,416,1.434,420,2.059,433,1.283,438,3.001,446,2.019,452,1.789,453,1.115,457,1.644,464,1.712,466,2.34,467,1.88,469,1.88,473,1.989,478,2.452,491,3.227,497,1.091,500,3.404,504,2.539,505,1.529,506,1.392,507,1.343,511,1.98,513,2.3,561,3.995,565,4.204,566,5.1,567,3.478,571,2.971,574,1.88,575,3.776,586,3.437,587,1.789,589,1.392,592,3.817,593,1.712,594,2.539,596,1.989,597,1.165,606,3.301,620,5.047,625,4.57,629,4.32,645,1.989,646,3.995,647,4.148,648,4.269,649,4.148,650,4.269,651,4.148,652,4.269,653,1.479,654,3.286,655,4.312,656,4.465,657,2.586,658,2.586,659,2.586,660,2.309,661,2.586,662,3.41,663,2.586,664,1.574,665,5.347,666,2.586,667,2.586,668,1.392,669,2.007,670,3.41,671,2.586,672,2.586,673,2.586,674,3.41,675,2.586,676,2.586,677,2.586,678,4.134,679,4.884,680,4.884,681,4.884,682,2.74,683,2.126,684,4.884,685,1.88,686,1.434,687,2.126,688,2.126,689,1.989,690,1.989,691,1.88,692,2.126,693,3.016,694,3.191,695,3.016,696,2.126,697,2.126,698,3.41,699,2.126,700,3.41,701,2.636,702,3.026,703,4.884,704,4.32,705,4.636,706,4.884,707,2.126,708,2.126,709,1.989,710,2.126,711,2.126,712,1.989,713,4.269,714,1.192,715,1.712,716,1.989,717,1.989,718,2.126,719,1.989,720,2.126,721,1.989,722,2.126,723,2.126,724,3.41,725,2.126,726,1.989,727,2.126,728,2.126,729,4.104,730,2.126,731,2.126,732,2.126,733,2.126,734,2.126,735,4.269,736,3.995,737,3.995,738,2.126,739,4.884,740,3.41,741,5.303,742,2.126,743,3.41,744,3.41,745,3.41,746,3.41,747,2.007,748,3.41,749,2.126,750,2.126,751,2.126,752,2.126,753,2.126,754,2.126,755,2.126,756,3.41,757,2.126,758,2.126,759,1.529,760,1.353,761,2.126,762,1.989,763,2.126,764,1.434,765,2.126,766,2.126,767,1.989,768,2.126,769,2.126,770,4.269,771,3.301,772,2.126,773,1.251,774,3.41,775,2.126,776,2.126,777,2.126,778,1.989,779,2.126,780,2.288,781,2.126,782,2.126,783,1.88,784,2.126,785,3.41,786,2.126,787,3.41,788,2.171,789,2.126,790,4.269,791,1.989,792,2.126,793,1.88,794,2.126,795,2.126,796,1.712,797,1.789,798,2.126,799,2.126,800,3.995,801,2.126,802,2.126,803,2.126,804,4.269,805,0.898,806,1.989,807,2.126,808,3.995,809,2.126,810,2.126,811,2.126]],["title/entities/CertEntity.html",[812,1.253,813,2.583]],["body/entities/CertEntity.html",[3,0.058,4,0.065,5,0.052,7,3.538,9,1.068,11,4.527,12,2.11,13,0.215,14,0.874,15,5.299,16,1.828,17,0.745,19,0.612,20,0.419,21,0.006,23,2.168,24,4.133,25,2.678,26,3.042,27,2.575,30,0.088,31,0.004,32,0.004,33,0.209,42,1.55,45,0.597,48,1.719,50,0.158,341,3.439,342,2.019,347,4.908,377,4.419,664,1.736,805,2.345,812,2.144,813,3.634,814,2.352,815,4.095,816,5.193,817,6.027,818,3.8,819,3.9,820,4.419,821,4.381,822,4.982,823,4.696,824,3.113,825,5.453,826,4.982,827,3.188,828,4.982,829,3.732,830,4.982,831,2.704,832,2.762,833,3.391,834,2.789,835,4.982,836,2.848,837,2.224,838,4.982,839,5.567,840,4.982,841,4.381,842,4.982,843,3.744,844,3.744,845,2.016,846,2.789,847,1.585,848,2.016,849,3.62]],["title/classes/Claim.html",[33,0.201,850,2.661]],["body/classes/Claim.html",[3,0.047,4,0.052,5,0.042,7,1.716,9,0.697,12,2.236,13,0.172,14,0.747,16,1.585,17,0.439,19,0.628,20,0.405,21,0.006,25,2.288,26,1.794,27,1.518,28,2.288,30,0.113,31,0.003,32,0.003,33,0.377,35,0.773,41,2.243,42,0.671,45,0.258,48,1.696,50,0.199,51,1.127,52,4.205,54,1.579,55,2.861,56,2.278,57,2.816,58,0.889,59,1.976,60,3.367,61,3.367,70,3.984,76,2.487,81,1.68,82,1.224,88,1.531,100,2.384,102,1.023,104,2.2,106,1.359,110,2.079,116,1.579,125,2.491,126,1.267,248,1.383,271,1.311,342,1.514,377,4.433,378,1.88,379,2.638,380,1.645,382,2.144,446,2.893,462,2.278,497,1.68,507,1.867,534,4.398,535,4.256,536,3.918,537,3.893,538,4.011,549,2.278,552,3.551,584,1.716,588,4.398,597,1.794,664,0.903,764,2.208,773,1.926,788,2.084,805,1.383,812,1.772,818,1.976,819,2.028,820,3.106,821,3.3,823,3.3,824,1.836,827,3.513,829,2.434,831,2.235,833,2.384,834,1.645,836,1.68,837,1.311,841,3.3,843,2.208,844,2.208,845,1.612,846,2.384,847,1.267,848,1.612,849,2.862,850,4.125,851,3.532,852,2.278,853,3.278,854,3.982,855,2.863,856,3.667,857,3.019,858,3.762,859,2.531,860,4.312,861,2.438,862,4.011,863,2.531,864,4.728,865,2.531,866,2.531,867,4.011,868,2.531,869,2.531,870,2.531,871,2.531,872,2.354,873,2.531,874,2.531,875,3.667,876,2.144,877,4.398,878,2.531,879,2.531,880,2.939,881,2.531,882,2.438,883,2.084,884,1.579,885,3.43,886,2.354,887,2.278,888,2.208,889,2.438,890,2.028,891,2.531,892,2.438]],["title/classes/ClaimsQuery.html",[33,0.201,59,2.381]],["body/classes/ClaimsQuery.html",[3,0.046,4,0.05,5,0.041,7,1.674,9,0.684,12,2.22,13,0.168,14,0.734,16,1.739,17,0.738,19,0.63,20,0.409,21,0.006,25,2.247,26,1.75,27,1.481,28,2.247,30,0.112,31,0.003,32,0.003,33,0.375,35,0.754,41,2.859,42,1.127,45,0.434,48,1.688,50,0.198,51,1.099,52,4.183,54,1.54,55,2.848,56,2.295,57,2.796,58,0.867,59,2.811,60,3.319,61,3.319,70,3.949,76,2.442,81,1.639,82,1.194,88,1.503,100,2.341,102,0.998,104,2.161,106,1.325,110,2.042,116,1.54,125,2.456,126,1.236,248,1.349,271,1.279,342,1.493,377,4.395,378,1.834,379,2.601,380,1.605,382,2.091,446,2.859,462,2.222,497,1.639,507,1.834,534,4.347,535,4.206,536,3.879,537,3.848,538,3.954,549,2.222,552,3.501,584,1.674,588,4.347,597,1.75,664,0.88,764,2.154,773,1.879,788,2.033,805,1.349,812,1.747,818,1.927,819,1.978,820,3.05,821,3.241,823,3.241,824,1.791,827,3.472,829,2.39,831,2.203,833,2.341,834,1.605,836,1.639,837,1.279,841,3.241,843,2.154,844,2.154,845,1.572,846,2.341,847,1.236,848,1.572,849,2.822,850,3.709,851,4.501,852,2.222,853,3.239,855,2.811,856,3.601,857,2.965,858,3.709,859,2.468,860,4.251,861,2.378,862,3.954,863,2.468,864,4.673,865,2.468,866,2.468,867,3.954,868,2.468,869,2.468,870,2.468,871,2.468,872,2.296,873,2.468,874,2.468,875,3.601,876,2.091,877,4.347,878,2.468,879,2.468,880,2.886,881,2.468,882,2.378,883,2.033,884,1.54,885,3.39,886,2.296,887,2.222,888,2.154,889,2.378,890,1.978,891,2.468,892,2.378,893,3.884,894,3.884,895,3.467,896,3.884]],["title/controllers/ClientController.html",[139,1.501,897,3.69]],["body/controllers/ClientController.html",[3,0.05,4,0.056,5,0.045,9,0.52,13,0.186,16,2.088,17,0.933,19,0.622,20,0.365,21,0.006,30,0.056,31,0.004,32,0.004,33,0.18,42,1.424,45,0.548,50,0.212,95,1.493,102,1.106,139,2.216,141,1.522,143,1.404,146,2.1,147,0.736,149,1.772,227,2.461,249,3.286,256,4.6,280,2.755,281,2.072,282,1.876,298,3.515,302,2.848,304,2.082,307,3.841,318,2.709,390,5.172,398,2.735,401,3.128,403,1.323,407,1.974,429,3.026,501,3.627,555,2.032,816,4.691,897,4.691,898,3.841,899,7.085,900,6.099,901,4.691,902,4.691,903,5.45,904,5.45,905,4.303,906,5.877,907,4.831,908,4.303,909,2.951,910,4.303,911,2.848,912,4.303,913,4.303,914,3.841,915,4.303,916,4.303,917,4.303,918,4.303,919,4.303,920,4.303,921,4.303,922,5.978,923,4.303,924,4.303,925,4.22,926,1.855,927,4.303,928,1.855,929,2.461,930,2.386,931,3.841,932,3.734,933,3.31,934,3.31,935,2.848,936,4.691,937,3.31,938,4.303,939,4.303,940,3.537,941,4.303,942,4.303,943,4.303,944,4.303,945,3.537,946,4.303,947,4.303,948,4.303,949,4.434,950,4.303,951,4.303,952,4.303,953,4.303,954,4.303,955,4.303,956,2.848,957,4.303,958,4.303]],["title/classes/ClientCredentialsDto.html",[33,0.201,267,3.69]],["body/classes/ClientCredentialsDto.html",[3,0.084,4,0.093,5,0.075,13,0.31,14,1.103,19,0.625,20,0.368,21,0.006,30,0.093,31,0.005,32,0.005,33,0.357,35,1.393,42,1.435,45,0.553,50,0.169,56,2.426,58,1.602,267,6.551,295,6.603,296,8.107,959,8.107,960,6.408,961,7.178,962,7.178]],["title/entities/ClientEntity.html",[812,1.253,963,2.836]],["body/entities/ClientEntity.html",[3,0.06,4,0.066,5,0.053,9,1.075,13,0.22,14,0.887,17,1.021,19,0.615,20,0.393,21,0.006,23,1.68,26,3.733,27,3.159,30,0.066,31,0.004,32,0.004,33,0.287,42,1.5,45,0.578,48,1.708,50,0.194,55,2.107,56,2.096,58,1.137,70,3.316,103,2.824,246,3.16,256,5.003,342,2.132,416,4.295,429,4.29,442,4.524,664,1.756,812,1.79,814,2.405,816,5.271,827,3.657,829,2.891,831,2.728,832,2.824,833,2.831,834,2.831,845,3.499,846,2.831,847,1.621,928,3.338,929,2.914,963,4.051,964,4.547,965,4.051,966,4.742,967,7.948,968,4.547,969,5.094,970,4.547,971,5.094,972,6.853,973,5.094,974,5.094,975,5.271,976,5.094,977,5.094,978,6.853,979,5.094,980,5.094,981,5.094,982,3.92,983,6.853,984,4.195,985,6.118,986,5.271,987,4.187]],["title/modules/ClientModule.html",[158,1.427,352,3.32]],["body/modules/ClientModule.html",[3,0.072,4,0.08,5,0.064,21,0.006,30,0.08,31,0.005,32,0.005,33,0.256,50,0.231,95,1.082,141,2.734,147,1.048,149,1.284,158,2.298,160,2.584,165,2.892,166,2.892,188,2.698,190,2.789,191,2.017,199,3.297,227,3.504,228,4.453,285,3.893,352,5.347,391,4.453,397,6.899,398,5.382,407,2.502,420,1.346,847,1.949,884,2.429,897,6.513,932,4.731,933,4.711,963,3.621,984,3.749,988,6.125,989,5.467,990,3.504,991,2.429,992,6.353,993,3.893,994,4.054,995,5.006,996,6.125,997,3.482,998,6.125,999,4.711,1000,6.125,1001,6.125,1002,4.238,1003,6.125,1004,5.034,1005,6.125,1006,5.034,1007,7.559,1008,3.482,1009,7.729,1010,6.125,1011,6.125,1012,3.893,1013,6.125,1014,5.034,1015,6.125,1016,6.125,1017,5.467,1018,5.034,1019,4.711]],["title/classes/ClientSecretResponseDto.html",[33,0.201,934,3.69]],["body/classes/ClientSecretResponseDto.html",[3,0.088,4,0.098,5,0.079,13,0.324,14,1.132,19,0.582,20,0.324,21,0.006,30,0.098,31,0.005,32,0.005,33,0.314,35,1.456,45,0.487,368,4.293,429,4.815,934,6.725,1020,7.805,1021,6.699]],["title/interfaces/ClientsProvider.html",[0,1.403,932,2.937]],["body/interfaces/ClientsProvider.html",[0,1.539,2,2.547,3,0.062,4,0.068,5,0.055,13,0.227,16,1.677,17,1.041,19,0.678,20,0.396,21,0.006,30,0.091,31,0.004,32,0.004,45,0.605,50,0.215,77,3.345,95,1.62,106,1.796,143,1.613,146,2.08,281,2.249,282,3.007,369,4.121,398,4.452,416,5.327,417,5.724,420,1.157,482,3.345,584,2.269,664,2.037,669,2.547,901,5.388,902,5.388,903,5.388,904,6.056,906,5.556,922,6.072,932,4.288,935,3.484,936,5.388,937,4.049,963,3.111,1002,3.642,1014,4.326,1022,4.326,1023,5.758,1024,5.758,1025,7.029,1026,5.758,1027,5.264,1028,5.758,1029,5.264,1030,5.758,1031,5.264,1032,5.758,1033,5.264,1034,5.264,1035,5.758,1036,5.264,1037,4.326,1038,5.264,1039,4.699,1040,5.264,1041,4.699,1042,5.264,1043,5.264,1044,5.264]],["title/classes/CreateClientDto.html",[33,0.201,906,3.175]],["body/classes/CreateClientDto.html",[3,0.086,4,0.096,5,0.077,21,0.006,30,0.096,31,0.005,32,0.005,33,0.308,35,1.427,38,3.723,50,0.203,102,1.89,342,1.928,420,1.898,429,4.286,664,1.958,906,5.718,963,4.347,1002,5.087,1045,6.564,1046,6.044,1047,7.712,1048,4.501]],["title/classes/CreateTenantDto.html",[33,0.201,1049,3.32]],["body/classes/CreateTenantDto.html",[3,0.081,4,0.089,5,0.072,13,0.296,14,1.074,17,0.915,20,0.296,21,0.006,30,0.089,31,0.005,32,0.005,33,0.347,35,1.332,38,3.575,42,1.157,45,0.446,48,1.512,50,0.217,55,2.55,56,2.098,58,1.532,70,3.322,102,1.765,324,3.654,390,5.271,420,1.822,442,4.663,831,2.261,928,3.841,929,3.928,1048,4.203,1049,5.738,1050,7.403,1051,6.129,1052,8.294,1053,6.129,1054,6.866,1055,5.281]],["title/entities/CredentialConfig.html",[812,1.253,1056,2.661]],["body/entities/CredentialConfig.html",[3,0.039,4,0.043,5,0.035,9,0.821,13,0.143,14,0.652,16,1.297,17,1.043,19,0.614,20,0.415,21,0.006,23,1.493,25,1.315,28,2.698,30,0.088,31,0.003,32,0.003,33,0.361,34,3.377,37,1.897,39,4.271,40,4.553,42,1.554,45,0.599,48,1.704,50,0.202,51,1.724,55,2.692,56,2.245,57,2.669,58,1.359,63,1.566,65,1.217,66,1.897,67,1.897,71,3.377,78,3.377,81,2.569,82,1.549,84,3.772,93,2.023,95,1.292,99,2.881,100,2.081,101,1.96,102,0.852,104,2.323,117,1.724,130,1.96,131,4.021,134,4.021,135,1.645,136,1.96,137,2.978,248,1.75,304,1.604,342,1.632,507,1.073,511,1.921,539,1.566,552,3.187,633,2.411,634,2.295,664,1.381,702,3.464,714,2.323,805,2.363,812,1.315,813,3.662,814,1.566,827,4.283,829,2.87,831,2.24,832,2.793,833,3.407,834,3.182,836,2.125,837,1.659,845,1.342,846,2.516,847,1.055,848,1.342,849,2.569,852,1.897,855,2.499,857,2.636,880,3.102,883,1.735,884,1.998,885,3.551,982,2.881,1056,2.793,1057,2.411,1058,4.428,1059,4.428,1060,4.428,1061,3.377,1062,3.484,1063,4.685,1064,4.9,1065,3.464,1066,3.662,1067,5.037,1068,3.316,1069,4.706,1070,2.96,1071,3.316,1072,4.497,1073,3.316,1074,3.316,1075,3.316,1076,2.726,1077,3.316,1078,3.316,1079,3.874,1080,3.874,1081,3.874,1082,3.874,1083,3.662,1084,3.874,1085,3.874,1086,3.874,1087,3.874,1088,3.874,1089,3.874,1090,3.316,1091,2.96,1092,3.874,1093,3.316,1094,3.316,1095,5.037,1096,5.037,1097,3.316,1098,3.316,1099,3.316,1100,3.316,1101,3.316,1102,4.323,1103,4.14,1104,3.316,1105,3.316,1106,3.316,1107,2.551,1108,3.316,1109,3.316,1110,3.662,1111,2.551,1112,2.195,1113,2.411,1114,2.295,1115,2.551,1116,5.061,1117,3.662,1118,2.195,1119,2.551,1120,2.551,1121,2.551,1122,2.108,1123,3.485,1124,2.125,1125,2.551,1126,2.551,1127,2.551,1128,2.551,1129,2.411,1130,1.96,1131,2.108]],["title/classes/CredentialConfigCreate.html",[33,0.201,1132,3.488]],["body/classes/CredentialConfigCreate.html",[3,0.086,4,0.095,5,0.077,21,0.006,23,2.115,30,0.095,31,0.005,32,0.005,33,0.307,35,1.424,38,3.719,50,0.203,102,1.886,117,2.077,342,1.926,664,1.956,1048,4.492,1056,4.069,1059,6.273,1132,6.273,1133,6.55,1134,5.644,1135,8.629,1136,6.032]],["title/classes/CredentialConfigMapping.html",[33,0.201,1137,3.69]],["body/classes/CredentialConfigMapping.html",[3,0.076,4,0.084,5,0.068,9,0.782,13,0.279,14,1.036,16,1.85,19,0.578,20,0.279,21,0.006,26,3.605,27,3.051,30,0.104,31,0.005,32,0.005,33,0.364,35,1.256,38,2.79,42,1.091,45,0.42,50,0.204,52,3.689,56,2.197,58,1.445,63,3.057,88,2.304,102,1.664,342,1.445,369,4.544,420,1.423,507,3.017,511,3.459,664,1.468,702,3.297,818,3.212,819,3.297,1048,3.963,1137,6.154,1138,5.322,1139,7.138,1140,5.189,1141,6.474,1142,5.322,1143,4.48,1144,5.779,1145,4.98,1146,4.98,1147,4.115,1148,5.779]],["title/injectables/CredentialConfigService.html",[383,1.038,1149,3.175]],["body/injectables/CredentialConfigService.html",[3,0.032,4,0.036,5,0.09,7,1.18,9,0.808,13,0.118,16,2.004,17,0.786,19,0.614,20,0.307,21,0.006,22,2.228,23,1.064,30,0.036,31,0.003,32,0.003,33,0.226,45,0.502,48,0.791,50,0.215,51,0.775,53,1.812,58,0.611,76,1.871,82,2.058,88,2.053,93,0.814,95,1.258,117,2.541,126,2.265,129,1.359,135,1.359,143,1,146,1.851,147,0.469,149,1.403,188,1.913,190,2.457,191,0.902,199,1.474,200,1.519,248,0.951,274,2.873,281,1.745,282,2.189,292,2.251,318,2.264,340,2.251,342,2.1,383,0.939,384,1.044,386,1.874,387,2.387,388,1.737,403,2.058,418,1.676,419,2.106,420,1.956,433,2.154,438,2.671,441,2.228,453,1.871,507,2.697,539,2.547,584,1.871,601,1.155,654,3.362,664,1.997,686,1.519,780,1.206,812,2.021,814,2.05,847,0.871,853,1.913,926,3.216,991,1.086,995,3.628,997,3.208,1008,2.43,1056,4.7,1061,2.407,1117,2.337,1124,2.823,1132,4.865,1136,2.251,1140,3.511,1149,4.062,1150,6.908,1151,5.626,1152,2.106,1153,2.211,1154,4.342,1155,3.004,1156,3.628,1157,2.739,1158,4.567,1159,2.445,1160,5.394,1161,4.342,1162,2.739,1163,2.272,1164,4.166,1165,5.852,1166,3.156,1167,4.342,1168,3.876,1169,2.739,1170,3.757,1171,4.342,1172,2.739,1173,2.739,1174,3.732,1175,3.004,1176,2.739,1177,4.342,1178,2.739,1179,3.156,1180,3.302,1181,3.905,1182,4.342,1183,3.156,1184,1.433,1185,2.873,1186,1.74,1187,1.74,1188,1.676,1189,1.619,1190,2.106,1191,2.251,1192,1.895,1193,2.445,1194,1.74,1195,1.74,1196,3.004,1197,2.739,1198,4.062,1199,1.895,1200,1.74,1201,2.759,1202,1.74,1203,1.74,1204,1.74,1205,1.74,1206,3.921,1207,2.154,1208,1.895,1209,1.895,1210,3.302,1211,1.812,1212,1.895,1213,5.497,1214,2.658,1215,1.991,1216,1.991,1217,1.991,1218,2.106,1219,2.251,1220,1.991,1221,2.739,1222,3.732,1223,3.921,1224,2.106,1225,1.991,1226,2.106,1227,2.106,1228,5.394,1229,1.812,1230,2.873,1231,2.106,1232,1.812,1233,1.812,1234,1.74,1235,1.812,1236,1.812,1237,1.74,1238,1.812,1239,1.812,1240,4.149,1241,2.739,1242,2.445,1243,2.251,1244,2.739,1245,2.106,1246,2.739,1247,2.739,1248,3.876,1249,5.394,1250,4.342,1251,3.948,1252,4.342,1253,2.739,1254,3.339,1255,2.739,1256,6.138,1257,5.394,1258,4.149,1259,2.739,1260,3.428,1261,3.004,1262,2.658,1263,3.004,1264,1.619,1265,2.566,1266,3.189,1267,2.739,1268,1.812,1269,2.445,1270,2.739,1271,2.445,1272,2.739,1273,2.445,1274,2.739,1275,2.739,1276,1.812,1277,1.895,1278,2.739,1279,2.106,1280,2.739,1281,2.739]],["title/classes/CredentialIssuerMetadataDto.html",[33,0.201,1282,3.69]],["body/classes/CredentialIssuerMetadataDto.html",[3,0.063,4,0.069,5,0.056,9,0.644,13,0.23,14,0.915,19,0.635,20,0.408,21,0.006,27,2.695,30,0.069,31,0.004,32,0.004,33,0.223,35,1.035,45,0.606,76,3.046,82,2.595,126,2.973,154,4.543,255,4.679,261,5.138,262,3.698,278,4.416,376,3.877,412,5.138,415,4.89,466,4.45,507,3.061,511,3.44,532,2.871,837,2.327,884,2.115,965,3.153,1117,4.726,1140,4.042,1210,3.265,1282,5.436,1283,6.26,1284,8.443,1285,4.384,1286,7.926,1287,7.926,1288,7.926,1289,7.075,1290,7.926,1291,7.926,1292,7.926,1293,5.333,1294,7.067,1295,5.333,1296,3.698,1297,7.067,1298,5.333,1299,7.075,1300,5.333,1301,5.333,1302,5.333,1303,6.308,1304,5.333,1305,6.308,1306,5.333,1307,4.326,1308,4.761,1309,5.333]],["title/classes/CredentialQuery.html",[33,0.201,60,2.381]],["body/classes/CredentialQuery.html",[3,0.044,4,0.048,5,0.039,7,1.607,9,0.664,12,2.195,13,0.161,14,0.712,16,1.714,17,0.918,19,0.626,20,0.413,21,0.006,25,2.86,26,1.68,27,1.422,28,2.591,30,0.111,31,0.003,32,0.003,33,0.371,35,0.723,41,2.138,42,1.355,45,0.522,48,1.675,50,0.195,51,1.055,52,4.088,54,1.479,55,2.827,56,2.302,57,2.764,58,0.832,59,1.85,60,3.578,61,3.241,70,3.893,76,2.37,81,2.756,82,1.146,88,1.459,100,2.272,102,0.958,104,2.491,106,1.272,110,1.981,116,1.479,125,2.398,126,1.186,237,4.229,248,1.295,271,1.228,342,1.458,377,4.331,378,1.76,379,2.54,380,1.54,382,2.007,446,2.804,462,2.133,497,1.573,507,1.78,534,4.263,535,4.125,536,3.815,537,3.774,538,3.862,549,2.133,552,3.419,584,1.607,588,4.263,597,1.68,664,0.845,764,2.067,773,1.804,788,1.951,805,1.295,812,1.706,818,1.85,819,1.899,820,2.96,821,3.145,823,3.145,824,1.719,827,3.404,829,2.32,831,2.152,833,2.272,834,1.54,836,1.573,837,1.228,841,3.145,843,2.067,844,2.067,845,1.509,846,2.272,847,1.186,848,1.509,849,2.756,850,3.998,851,5.094,852,2.133,853,2.423,855,2.728,856,3.495,857,2.878,858,3.622,859,2.37,860,4.152,861,2.282,862,3.862,863,2.37,864,4.583,865,2.37,866,2.37,867,4.263,868,2.37,869,2.37,870,2.37,871,4.152,872,3.862,873,4.152,874,2.37,875,3.495,876,2.007,877,4.263,878,2.37,879,2.37,880,2.801,881,2.37,882,2.282,883,1.951,884,1.479,885,3.325,886,2.204,887,2.133,888,2.067,889,2.282,890,1.899,891,2.37,892,2.282,1310,3.728,1311,3.728,1312,3.728,1313,3.728,1314,3.728,1315,3.728,1316,3.728,1317,3.328,1318,3.728]],["title/classes/CredentialSetQuery.html",[33,0.201,61,2.381]],["body/classes/CredentialSetQuery.html",[3,0.046,4,0.051,5,0.041,7,1.687,9,0.688,12,2.225,13,0.169,14,0.738,16,1.572,17,0.741,19,0.627,20,0.407,21,0.006,25,2.26,26,1.763,27,1.492,28,2.665,30,0.113,31,0.003,32,0.003,33,0.375,35,0.759,41,2.215,42,0.96,45,0.37,48,1.691,50,0.198,51,1.108,52,4.135,54,1.552,55,2.852,56,2.269,57,2.802,58,0.873,59,1.942,60,3.333,61,3.661,70,3.96,76,2.896,81,1.651,82,1.203,88,1.512,100,2.354,102,1.006,104,2.173,106,1.335,110,2.053,116,2.665,125,2.466,126,1.245,248,1.359,271,1.289,342,1.499,377,4.406,378,1.848,379,2.612,380,1.617,382,2.107,446,2.869,462,2.238,497,1.651,507,1.844,534,4.362,535,4.221,536,3.891,537,3.862,538,3.971,549,2.238,550,3.493,552,3.516,584,1.687,588,4.362,597,1.763,664,0.887,764,2.17,773,1.893,788,2.048,805,1.359,812,1.754,818,1.942,819,1.993,820,3.067,821,3.259,823,3.259,824,1.804,827,3.484,829,2.403,831,2.213,833,2.354,834,1.617,836,1.651,837,1.289,841,3.259,843,2.17,844,2.17,845,1.584,846,2.354,847,1.245,848,1.584,849,2.834,850,3.725,851,4.113,852,2.238,853,2.51,855,2.827,856,3.621,857,2.981,858,3.725,859,2.487,860,4.27,861,2.396,862,3.971,863,2.487,864,4.69,865,2.487,866,2.487,867,3.971,868,2.487,869,2.487,870,2.487,871,2.487,872,2.313,873,2.487,874,2.487,875,4.27,876,3.617,877,4.362,878,2.487,879,2.487,880,2.902,881,2.487,882,2.396,883,2.048,884,1.552,885,3.402,886,2.313,887,2.238,888,2.17,889,2.396,890,1.993,891,2.487,892,2.396,1319,3.217,1320,3.913,1321,3.913,1322,3.913]],["title/controllers/CredentialsController.html",[139,1.501,1323,3.69]],["body/controllers/CredentialsController.html",[3,0.063,4,0.069,5,0.056,9,0.644,13,0.23,16,1.797,17,0.875,19,0.527,20,0.342,21,0.006,30,0.069,31,0.004,32,0.004,33,0.223,42,1.335,45,0.514,50,0.212,88,2.239,95,1.4,117,2.485,139,2.479,141,1.887,143,1.627,146,2.118,147,0.913,149,1.662,249,3.082,280,2.748,281,1.943,298,3.932,317,2.299,318,2.468,342,1.883,466,2.403,501,3.43,507,3.061,555,2.518,601,2.25,907,4.739,911,3.53,926,2.299,928,2.299,930,2.957,949,3.877,956,3.53,1132,6.135,1140,4.827,1149,5.245,1151,3.877,1153,3.599,1163,3.698,1179,5.138,1191,4.384,1192,3.69,1323,6.096,1324,4.761,1325,7.067,1326,6.515,1327,7.067,1328,7.926,1329,4.761,1330,5.333,1331,5.333,1332,5.333,1333,5.333,1334,5.333,1335,3.389,1336,3.389,1337,3.389,1338,3.877,1339,3.69,1340,4.384,1341,4.102,1342,4.677,1343,5.333,1344,5.333,1345,5.333,1346,5.333]],["title/controllers/CredentialsMetadataController.html",[139,1.501,1347,3.69]],["body/controllers/CredentialsMetadataController.html",[3,0.069,4,0.077,5,0.062,9,0.711,13,0.254,16,1.974,17,0.832,19,0.654,20,0.378,21,0.006,27,2.874,30,0.077,31,0.005,32,0.005,33,0.246,42,1.269,45,0.489,48,1.073,50,0.195,82,2.317,88,2,95,1.331,102,1.513,139,1.841,141,2.082,143,1.735,146,1.884,147,1.007,148,3.741,149,1.58,281,1.847,315,3.896,317,2.537,318,2.431,343,4.455,386,2.618,507,3,532,4.057,536,3.739,555,2.779,601,2.483,664,2.163,1062,5.013,1064,5.365,1170,5.365,1342,5.502,1347,5.797,1348,6.394,1349,6.833,1350,5.255,1351,5.887,1352,5.887,1353,5.887,1354,5.887,1355,5.887,1356,5.887,1357,5.887,1358,5.255,1359,5.887,1360,5.887,1361,5.887,1362,7.536,1363,5.887,1364,5.887,1365,5.887,1366,5.887]],["title/injectables/CredentialsService.html",[383,1.038,1342,3.175]],["body/injectables/CredentialsService.html",[3,0.034,4,0.038,5,0.031,9,0.355,13,0.127,16,1.563,17,0.764,19,0.595,20,0.342,21,0.006,23,1.125,30,0.038,31,0.003,32,0.003,33,0.123,45,0.476,48,0.536,50,0.214,63,1.387,81,2.692,82,1.962,88,2.321,93,0.874,95,1.223,96,1.421,116,2.239,117,1.598,129,3.166,143,1.056,146,1.889,147,0.503,149,1.338,190,2.611,191,0.968,248,1.021,281,1.697,282,2.256,304,1.421,318,2.558,324,3.376,343,4.091,346,2.415,347,2.625,383,0.993,384,1.12,386,1.594,387,2.892,388,1.806,403,2.128,406,3.049,407,2.374,411,2.401,418,1.799,420,1.945,433,1.458,438,2.569,464,3.037,481,2.26,484,4.342,485,4.104,498,2.544,507,2.894,536,2.277,567,3.278,589,1.582,654,3.453,664,1.956,668,1.582,669,1.421,678,4.662,682,3.757,685,2.136,686,1.629,702,4.454,705,4.055,714,2.603,729,4.091,747,2.731,759,1.737,760,1.537,805,1.021,847,0.935,880,1.496,884,1.165,909,1.421,926,1.266,991,1.165,997,2.875,1056,3.538,1058,3.336,1061,2.544,1062,3.229,1064,4.237,1065,3.25,1102,1.867,1112,1.944,1113,2.136,1114,2.033,1136,2.415,1140,2.625,1153,2.337,1170,3.906,1174,3.175,1183,2.136,1184,1.537,1193,2.623,1289,5.04,1296,1.537,1342,4.223,1367,2.623,1368,5.646,1369,5.646,1370,5.646,1371,4.588,1372,2.623,1373,4.687,1374,6.381,1375,4.397,1376,2.938,1377,2.938,1378,6.921,1379,2.938,1380,4.588,1381,3.336,1382,6.059,1383,2.938,1384,2.938,1385,2.938,1386,2.938,1387,4.588,1388,2.938,1389,6.381,1390,5.646,1391,2.033,1392,4.096,1393,4.588,1394,3.65,1395,2.26,1396,2.26,1397,4.096,1398,2.26,1399,4.096,1400,2.26,1401,2.136,1402,2.26,1403,1.582,1404,1.867,1405,1.681,1406,2.033,1407,2.938,1408,1.582,1409,4.588,1410,4.096,1411,2.938,1412,2.938,1413,5.696,1414,2.938,1415,2.938,1416,2.938,1417,4.588,1418,4.588,1419,4.588,1420,6.921,1421,2.938,1422,4.588,1423,2.938,1424,5.646,1425,2.938,1426,2.938,1427,2.938,1428,4.588,1429,2.623,1430,4.588,1431,4.588,1432,2.938,1433,2.938,1434,2.938,1435,2.938,1436,2.938,1437,2.415,1438,2.938,1439,2.938,1440,2.938,1441,2.938,1442,2.623,1443,2.938,1444,2.623,1445,2.26,1446,2.938,1447,2.938,1448,1.799,1449,3.037,1450,2.26,1451,2.938,1452,2.938,1453,2.938,1454,2.415,1455,1.944,1456,2.415,1457,2.623,1458,4.588,1459,5.696,1460,2.938,1461,2.938,1462,2.938,1463,2.136,1464,2.26,1465,2.938,1466,1.944,1467,4.588,1468,2.136,1469,2.938,1470,2.938,1471,2.938,1472,2.938,1473,4.588]],["title/modules/CryptoImplementatationModule.html",[158,1.427,1474,3.488]],["body/modules/CryptoImplementatationModule.html",[3,0.081,4,0.09,5,0.072,21,0.006,30,0.09,31,0.005,32,0.005,33,0.289,50,0.21,147,1.18,158,2.654,160,2.908,161,3.334,162,3.51,163,3.51,164,3.105,165,4.214,166,4.214,183,4.234,184,3.51,185,3.51,188,3.036,189,6.043,191,2.27,253,6.394,1264,4.074,1375,5.565,1403,3.71,1404,4.38,1474,7.086,1475,6.152,1476,6.152,1477,6.152,1478,4.769,1479,6.892]],["title/interfaces/CryptoImplementation.html",[0,1.403,1480,3.32]],["body/interfaces/CryptoImplementation.html",[0,2.426,2,2.834,3,0.069,4,0.076,5,0.061,9,0.707,13,0.253,14,0.973,17,0.829,19,0.616,20,0.4,21,0.006,23,2.144,30,0.076,31,0.005,32,0.005,45,0.538,95,1.465,143,1.73,146,1.88,281,1.842,282,2.931,318,2.197,380,3.104,407,2.432,759,4.903,760,4.578,1381,6.36,1403,4.71,1429,7.809,1478,6.053,1480,5.198,1481,4.815,1482,6.175,1483,7.513,1484,6.175,1485,5.198,1486,7.191,1487,7.513,1488,7.513,1489,5.858,1490,6.706,1491,5.489,1492,6.706,1493,8.509,1494,5.858,1495,6.36,1496,6.175,1497,6.706,1498,5.858,1499,6.379,1500,6.706,1501,3.877,1502,3.877,1503,4.506,1504,3.723]],["title/injectables/CryptoImplementationService.html",[383,1.038,1375,2.661]],["body/injectables/CryptoImplementationService.html",[3,0.045,4,0.05,5,0.041,9,0.683,13,0.167,14,0.951,17,0.862,19,0.445,20,0.4,21,0.006,23,1.638,30,0.074,31,0.003,32,0.003,33,0.162,45,0.56,50,0.183,76,2.438,93,1.682,95,1.18,106,1.93,129,3.315,143,1.303,146,2.116,147,0.663,149,1.766,190,2.687,191,1.276,246,2.608,247,3.344,276,5.05,281,1.638,317,1.67,318,1.655,347,3.236,383,1.224,384,1.478,388,1.097,403,2.708,406,3.236,407,2.528,415,5.405,420,1.243,453,2.438,478,5.205,584,1.67,601,3.441,653,2.217,668,2.086,682,4.06,760,3.496,780,3.236,805,1.965,806,4.351,837,1.276,982,4.202,1012,5.184,1264,5.473,1296,2.961,1375,3.137,1381,5.34,1394,2.217,1395,2.981,1396,2.981,1403,4.74,1445,5.65,1478,6.093,1480,5.405,1485,2.682,1493,5.964,1504,6.08,1505,3.186,1506,6.681,1507,6.681,1508,6.681,1509,7.346,1510,5.657,1511,5.657,1512,7.346,1513,5.657,1514,3.876,1515,4.351,1516,6.975,1517,5.657,1518,3.876,1519,8.334,1520,5.657,1521,7.346,1522,5.657,1523,3.876,1524,5.657,1525,5.05,1526,6.592,1527,6.038,1528,5.679,1529,3.876,1530,5.082,1531,6.038,1532,3.876,1533,3.876,1534,2.373,1535,3.876,1536,3.876,1537,3.876,1538,7.346,1539,2.981,1540,3.46,1541,3.876,1542,5.05,1543,3.876,1544,3.46,1545,3.876,1546,5.657,1547,3.876,1548,3.876,1549,2.818,1550,3.876,1551,3.876,1552,3.186,1553,5.657,1554,3.876,1555,3.876,1556,3.876]],["title/modules/CryptoModule.html",[158,1.427,171,2.745]],["body/modules/CryptoModule.html",[3,0.075,4,0.083,5,0.067,21,0.006,30,0.083,31,0.005,32,0.005,33,0.267,50,0.228,141,2.806,147,1.092,158,2.566,160,2.693,161,3.088,162,3.251,163,3.251,164,2.876,165,4.074,166,4.074,171,5.629,183,4.039,184,3.251,185,3.251,188,2.812,654,4.479,813,3.436,831,2.612,848,2.583,990,3.651,991,2.532,1557,5.698,1558,5.698,1559,5.698,1560,6.317,1561,6.383,1562,6.637,1563,5.698,1564,6.383,1565,6.383,1566,5.249,1567,5.698,1568,6.383,1569,5.698]],["title/classes/DBKeyService.html",[33,0.201,1570,3.69]],["body/classes/DBKeyService.html",[3,0.031,4,0.034,5,0.069,7,1.134,9,0.318,13,0.114,14,0.545,16,1.676,17,0.94,19,0.659,20,0.402,21,0.006,22,3.152,23,2.38,24,4.283,30,0.068,31,0.003,32,0.003,33,0.11,35,0.511,38,1.813,44,5.279,45,0.56,48,0.767,50,0.211,93,0.782,95,1.505,96,2.542,143,0.968,146,2.036,149,1.692,190,2.304,191,0.867,218,1.821,280,2.333,281,2.088,282,2.783,304,1.273,318,1.919,341,3.741,342,1.561,343,2.486,347,2.406,386,2.65,387,2.928,388,1.19,403,2.783,406,1.853,407,1.7,420,1.843,438,2.637,441,1.737,466,1.895,608,3.754,653,1.505,654,2.367,664,2.121,668,3.766,669,1.273,682,3.386,759,3.879,780,1.853,805,0.914,813,1.417,839,4.363,909,2.903,926,1.813,966,4.152,997,3.309,1061,5.209,1131,2.673,1153,2.142,1164,1.417,1181,2.201,1264,3.879,1375,3.328,1394,1.505,1403,2.264,1404,1.672,1408,1.417,1466,2.783,1480,3.635,1491,2.783,1495,3.058,1496,2.163,1501,4.342,1502,5.453,1519,2.349,1534,2.575,1566,1.742,1570,3.235,1571,6.556,1572,2.163,1573,2.91,1574,5.453,1575,4.318,1576,4.206,1577,4.206,1578,6.271,1579,3.235,1580,4.363,1581,3.457,1582,3.457,1583,4.616,1584,4.318,1585,4.206,1586,3.235,1587,2.631,1588,4.206,1589,3.058,1590,2.163,1591,2.631,1592,3.754,1593,3.058,1594,4.206,1595,2.631,1596,2.91,1597,4.616,1598,4.206,1599,6.561,1600,2.631,1601,3.972,1602,4.933,1603,2.631,1604,2.631,1605,2.631,1606,3.457,1607,3.674,1608,2.631,1609,4.206,1610,2.631,1611,3.457,1612,2.631,1613,3.457,1614,4.152,1615,5.357,1616,2.631,1617,2.163,1618,2.349,1619,1.821,1620,6.001,1621,3.457,1622,2.631,1623,4.69,1624,1.306,1625,1.742,1626,3.235,1627,1.913,1628,1.821,1629,2.024,1630,1.913,1631,1.913,1632,2.349,1633,2.024,1634,2.349,1635,2.631,1636,2.631,1637,2.631,1638,4.69,1639,6.561,1640,2.163,1641,2.631,1642,4.206,1643,2.631,1644,2.631,1645,2.631,1646,2.631,1647,2.631,1648,2.631,1649,2.631,1650,2.631,1651,2.163,1652,2.631,1653,2.631,1654,2.349,1655,2.631,1656,2.631,1657,5.253,1658,2.631,1659,2.631,1660,2.349,1661,2.631,1662,2.631,1663,2.349,1664,2.631,1665,2.349,1666,2.349,1667,2.163,1668,5.253,1669,3.754,1670,3.754,1671,4.206,1672,2.631,1673,2.631,1674,2.631,1675,2.631,1676,2.631,1677,2.631]],["title/classes/DCQL.html",[33,0.201,877,2.836]],["body/classes/DCQL.html",[3,0.046,4,0.051,5,0.041,7,1.688,9,0.689,12,2.226,13,0.169,14,0.738,16,1.573,17,0.742,19,0.622,20,0.407,21,0.006,25,2.261,26,1.765,27,1.494,28,2.261,30,0.113,31,0.003,32,0.003,33,0.376,35,0.76,41,2.217,42,0.96,45,0.37,48,1.691,50,0.198,51,1.109,52,4.136,54,1.554,55,2.853,56,2.269,57,2.803,58,0.874,59,1.944,60,3.663,61,3.663,70,3.961,76,2.457,81,1.653,82,2.067,88,1.513,100,2.355,102,1.007,104,2.174,106,1.337,110,2.054,116,1.554,125,2.468,126,1.246,237,4.386,248,1.361,271,1.29,342,1.5,377,4.408,378,1.85,379,2.614,380,1.618,382,2.109,446,2.871,462,2.241,497,1.653,507,1.845,534,4.364,535,4.223,536,3.893,537,3.864,538,3.974,549,2.241,552,3.518,584,1.688,588,4.364,597,1.765,664,0.888,764,2.172,773,1.895,788,2.05,805,1.361,812,1.755,818,1.944,819,1.995,820,3.069,821,3.262,823,3.262,824,1.806,827,3.486,829,2.405,831,2.214,833,2.355,834,1.618,836,1.653,837,1.29,841,3.262,843,2.172,844,2.172,845,1.585,846,2.355,847,1.246,848,1.585,849,2.836,850,3.728,851,4.115,852,2.241,853,2.512,855,2.829,856,3.624,857,2.984,858,3.728,859,2.49,860,4.272,861,2.398,862,3.974,863,2.49,864,4.692,865,2.49,866,2.49,867,3.974,868,2.49,869,2.49,870,2.49,871,2.49,872,2.316,873,2.49,874,2.49,875,3.624,876,2.109,877,4.638,878,4.272,879,2.49,880,2.904,881,2.49,882,2.398,883,2.05,884,1.554,885,3.404,886,2.316,887,2.241,888,2.172,889,2.398,890,1.995,891,2.49,892,2.398,1317,3.497,1678,3.918,1679,3.918,1680,3.918]],["title/modules/DatabaseModule.html",[158,1.427,172,3.488]],["body/modules/DatabaseModule.html",[3,0.077,4,0.085,5,0.068,20,0.347,21,0.006,30,0.085,31,0.005,32,0.005,33,0.273,48,1.466,50,0.214,147,1.118,149,1.687,158,2.393,160,2.756,172,5.849,188,3.544,189,5.849,190,2.997,191,2.151,227,3.737,228,4.749,420,1.768,853,2.878,990,3.737,991,2.591,1189,4.756,1468,4.749,1681,6.533,1682,8.046,1683,6.533,1684,8.046,1685,5.37,1686,5.831,1687,8.719,1688,6.533,1689,6.533,1690,7.182,1691,6.533,1692,5.831,1693,6.533,1694,5.831,1695,6.533,1696,5.37,1697,6.533,1698,6.613,1699,6.533,1700,5.831,1701,6.533,1702,6.533]],["title/classes/Display.html",[33,0.201,1117,2.583]],["body/classes/Display.html",[3,0.046,4,0.051,5,0.041,9,0.891,13,0.169,14,0.738,16,0.834,17,0.955,19,0.634,20,0.407,21,0.006,23,0.959,25,1.552,28,2.26,30,0.096,31,0.003,32,0.003,33,0.362,34,3.725,35,0.759,37,2.238,39,3.725,40,4.362,42,1.423,45,0.548,48,1.656,50,0.211,51,1.613,55,2.794,56,2.411,57,2.802,58,1.271,63,1.848,65,1.436,66,2.238,67,2.238,71,3.725,78,3.725,81,1.651,82,1.752,84,4.092,93,2.194,95,1.492,99,3.259,100,2.354,101,2.313,102,1.006,104,2.562,117,1.108,130,2.313,131,4.362,134,3.368,135,1.942,136,2.313,137,2.313,248,1.359,304,1.893,342,1.271,511,1.492,539,1.848,552,3.516,633,2.845,664,0.887,702,3.422,805,1.979,812,1.488,813,3.617,827,3.989,829,2.403,831,2.213,833,3.048,834,2.775,836,1.651,837,1.289,845,1.584,846,2.775,847,1.245,848,1.584,849,2.834,855,2.827,857,2.981,880,1.993,883,2.048,884,1.552,885,3.774,982,2.238,1056,2.17,1057,2.845,1058,2.845,1059,2.845,1060,2.845,1061,2.17,1062,2.238,1063,3.01,1064,4.517,1065,2.902,1069,4.648,1079,3.01,1080,3.01,1081,3.01,1082,3.01,1083,2.845,1084,3.01,1085,3.01,1086,3.01,1087,3.01,1088,3.01,1089,3.01,1092,3.01,1102,4.27,1110,4.142,1111,3.01,1112,2.59,1113,2.845,1114,2.708,1115,3.01,1116,5.845,1117,4.222,1118,4.446,1119,5.167,1120,5.167,1121,5.167,1122,4.27,1123,3.942,1124,2.403,1125,3.01,1126,3.01,1127,3.01,1128,3.01,1129,2.845,1130,2.313,1131,2.487,1703,3.913,1704,4.382,1705,3.913,1706,3.913,1707,3.913,1708,3.913,1709,3.913,1710,3.913]],["title/controllers/DisplayController.html",[139,1.501,1711,3.69]],["body/controllers/DisplayController.html",[3,0.065,4,0.072,5,0.058,9,0.977,13,0.24,17,0.802,20,0.314,21,0.006,30,0.072,31,0.004,32,0.004,33,0.233,42,1.224,45,0.471,50,0.214,95,1.283,139,2.683,141,1.967,143,1.673,146,1.944,147,0.952,149,1.524,154,4.914,249,3.549,280,2.825,281,1.781,298,4.014,317,2.397,318,2.509,380,3.001,407,2.351,441,3.544,501,3.616,555,2.626,601,2.346,824,3.35,907,4.613,909,4.15,928,2.397,930,3.084,1117,5.302,1192,3.848,1335,3.535,1336,3.535,1337,3.535,1339,3.848,1711,5.588,1712,4.965,1713,8.09,1714,7.265,1715,5.562,1716,7.944,1717,6.236,1718,5.562,1719,5.562,1720,5.562,1721,5.935,1722,5.562,1723,4.965,1724,5.562,1725,5.562,1726,5.562,1727,5.562]],["title/classes/DisplayCreateDto.html",[33,0.201,1717,3.488]],["body/classes/DisplayCreateDto.html",[3,0.087,4,0.096,5,0.078,21,0.006,30,0.096,31,0.005,32,0.005,33,0.31,35,1.438,38,3.741,50,0.204,102,1.905,342,1.937,420,1.907,1048,4.538,1134,5.702,1717,6.311,1728,6.617,1729,8.68,1730,4.711,1731,6.617]],["title/entities/DisplayEntity.html",[812,1.253,1730,3.049]],["body/entities/DisplayEntity.html",[3,0.071,4,0.078,5,0.063,13,0.26,14,0.989,19,0.607,20,0.402,21,0.006,30,0.099,31,0.005,32,0.005,33,0.382,42,1.414,45,0.545,48,1.61,50,0.214,51,1.702,56,2.235,57,2.718,58,1.342,93,2.497,95,1.062,102,1.545,126,1.913,154,4.112,342,2.035,664,1.903,812,1.995,814,2.839,829,3.223,831,2.909,832,3.334,833,3.649,834,3.156,836,3.223,837,2.516,845,2.434,846,3.156,847,1.913,848,2.434,849,2.537,855,3.79,885,2.773,1107,4.625,1117,4.112,1118,3.98,1122,3.822,1730,4.855,1732,4.625,1733,6.013,1734,6.013,1735,6.422,1736,6.013,1737,6.013,1738,6.104]],["title/classes/DisplayImage.html",[33,0.201,1116,3.32]],["body/classes/DisplayImage.html",[3,0.05,4,0.055,5,0.044,9,0.727,13,0.182,14,0.779,16,0.899,19,0.625,20,0.388,21,0.006,23,1.035,25,1.675,28,2.387,30,0.099,31,0.004,32,0.004,33,0.37,34,3.888,35,0.819,37,2.416,39,3.888,40,4.518,42,0.711,45,0.274,48,1.682,50,0.214,51,1.703,55,2.838,56,2.378,57,2.86,58,1.343,63,1.994,65,1.55,66,2.416,67,2.416,71,3.888,78,3.888,81,1.781,82,1.851,84,4.238,93,2.273,95,1.427,99,3.443,100,2.486,101,2.496,102,1.085,104,2.674,117,1.195,130,2.496,131,4.518,134,3.558,135,2.095,136,2.496,137,2.496,248,1.467,304,2.043,342,1.343,511,1.61,539,3.311,552,3.67,633,3.07,664,0.957,702,3.571,805,2.091,812,1.572,813,3.775,827,4.081,829,2.539,831,2.309,833,3.158,834,2.897,836,1.781,837,1.391,845,1.709,846,2.897,847,1.343,848,1.709,849,2.958,855,2.986,857,3.15,880,2.151,883,2.21,884,1.675,885,3.873,982,2.416,1056,2.342,1057,3.07,1058,3.07,1059,3.07,1060,3.07,1061,2.342,1062,2.416,1063,3.248,1064,4.679,1065,3.065,1069,4.852,1079,3.248,1080,3.248,1081,3.248,1082,3.248,1083,3.07,1084,3.248,1085,3.248,1086,3.248,1087,3.248,1088,3.248,1089,3.248,1092,3.248,1102,4.457,1110,4.375,1111,3.248,1112,2.795,1113,3.07,1114,2.922,1115,3.248,1116,5.812,1117,4.115,1118,2.795,1119,3.248,1120,3.248,1121,3.248,1122,2.684,1123,4.164,1124,2.539,1125,3.248,1126,3.248,1127,3.248,1128,3.248,1129,3.07,1130,2.496,1131,2.684,1739,4.223]],["title/classes/DisplayInfo.html",[33,0.201,1735,3.488]],["body/classes/DisplayInfo.html",[3,0.072,4,0.08,5,0.064,13,0.264,14,1.001,19,0.623,20,0.404,21,0.006,30,0.1,31,0.005,32,0.005,33,0.384,35,1.188,42,1.426,45,0.55,48,1.409,50,0.215,51,1.734,56,2.369,57,2.741,58,1.367,93,1.821,95,1.496,102,1.574,126,1.949,154,3.297,342,1.725,664,1.388,812,2.018,829,2.584,831,2.789,833,3.193,834,2.53,836,2.584,837,2.017,845,2.479,846,3.193,847,1.949,848,2.479,849,2.584,855,3.835,885,2.824,1117,3.297,1118,5.604,1122,5.382,1704,4.711,1730,3.893,1732,4.711,1735,6.465,1738,6.465,1740,6.125,1741,6.125,1742,6.125]],["title/classes/DisplayLogo.html",[33,0.201,1738,3.488]],["body/classes/DisplayLogo.html",[3,0.074,4,0.082,5,0.066,13,0.274,14,1.022,19,0.616,20,0.389,21,0.006,30,0.103,31,0.005,32,0.005,33,0.388,35,1.23,42,1.068,45,0.411,48,1.439,50,0.217,51,1.794,56,2.343,57,2.784,58,1.415,93,1.885,95,1.12,102,1.629,126,2.736,154,3.412,342,1.762,664,1.437,812,2.062,829,2.674,831,2.833,833,3.262,834,2.619,836,2.674,837,2.088,845,2.565,846,3.262,847,2.017,848,2.565,849,2.674,855,3.918,885,2.923,1117,3.412,1118,4.195,1122,4.028,1730,4.028,1732,4.876,1735,6.253,1738,6.545,1743,6.339]],["title/injectables/DisplayService.html",[383,1.038,1721,3.32]],["body/injectables/DisplayService.html",[3,0.065,4,0.049,5,0.069,9,0.797,13,0.164,16,1.548,17,0.728,19,0.539,20,0.285,21,0.006,22,1.566,30,0.049,31,0.003,32,0.003,33,0.276,45,0.502,48,1.015,50,0.23,51,1.073,58,0.846,88,1.006,95,1.165,112,1.391,117,2.057,126,2.098,143,1.282,146,1.835,147,0.649,149,1.383,154,4.792,164,2.508,190,2.755,191,1.248,199,2.041,200,2.102,274,2.509,281,1.617,282,2.235,318,2.126,342,1.867,380,2.299,383,1.204,384,1.446,386,2.525,387,2.211,388,1.575,403,2.235,407,1.802,420,2.026,438,2.595,441,2.725,453,1.634,501,2.668,584,2.399,601,2.348,664,1.985,824,2.566,847,1.206,853,2.452,909,4.047,991,1.503,995,4.297,997,3.275,1008,2.972,1117,5.219,1122,2.409,1124,3.066,1158,5.121,1168,4.969,1180,2.321,1181,3.452,1184,1.984,1185,2.509,1186,2.409,1187,2.409,1188,2.321,1189,2.241,1190,2.916,1192,2.623,1194,2.409,1195,2.409,1196,3.851,1198,3.684,1199,2.623,1200,2.409,1201,3.538,1202,2.409,1203,2.409,1204,2.409,1205,2.409,1207,1.881,1208,2.623,1209,2.623,1210,2.321,1211,4.366,1212,2.623,1213,5.121,1222,4.564,1229,2.509,1230,3.684,1231,2.916,1232,2.509,1233,2.509,1234,2.409,1235,2.509,1236,2.509,1237,2.409,1238,2.509,1239,2.509,1242,3.384,1243,3.116,1245,2.916,1248,3.384,1251,3.658,1254,2.916,1260,3.538,1262,2.321,1268,2.509,1276,2.509,1277,2.623,1586,2.916,1716,6.911,1717,5.628,1721,3.851,1723,3.384,1730,3.538,1731,3.384,1744,3.384,1745,5.144,1746,3.791,1747,3.791,1748,6.596,1749,3.791,1750,3.791,1751,3.791,1752,3.791,1753,3.29,1754,2.509,1755,3.791,1756,2.756,1757,3.791,1758,3.791,1759,3.791,1760,3.791,1761,4.969,1762,3.791,1763,3.791,1764,3.791,1765,3.791,1766,3.791,1767,3.791,1768,5.566,1769,3.791,1770,3.791,1771,3.791,1772,3.791,1773,3.791]],["title/classes/EC_Public.html",[33,0.201,1601,3.175]],["body/classes/EC_Public.html",[3,0.065,4,0.072,5,0.058,9,0.67,13,0.239,14,0.939,19,0.607,20,0.384,21,0.006,22,3.973,23,2.402,25,3.204,30,0.094,31,0.004,32,0.004,33,0.359,35,1.076,45,0.556,50,0.13,76,3.482,106,2.474,112,2.661,246,3.725,247,4.775,248,1.926,254,3.278,271,1.826,341,4.732,368,3.172,378,2.618,411,3.794,478,4.286,548,4.95,617,5.577,682,4.099,797,5.016,965,4.775,1283,5.884,1504,4.608,1528,6.229,1549,7.125,1601,4.798,1624,2.751,1628,6.152,1774,7.648,1775,7.211,1776,5.873,1777,6.214,1778,6.464,1779,6.839,1780,5.545,1781,6.472,1782,5.959,1783,6.472,1784,5.545,1785,6.59,1786,4.95,1787,3.837]],["title/classes/EmbeddedDisclosurePolicy.html",[33,0.201,39,2.661]],["body/classes/EmbeddedDisclosurePolicy.html",[3,0.066,4,0.073,5,0.059,13,0.242,14,0.946,19,0.573,20,0.402,21,0.006,30,0.121,31,0.004,32,0.004,33,0.396,34,3.113,35,1.089,36,3.568,37,4.649,38,3.71,39,5.074,40,5.509,41,3.16,42,0.946,45,0.364,48,1.627,50,0.191,51,1.589,52,4.115,53,5.907,54,2.226,55,2.499,56,2.416,57,2.889,58,1.253,59,4.032,60,4.032,61,4.032,62,3.884,63,2.65,64,3.568,65,2.983,66,4.649,67,4.649,68,3.884,69,5.956,70,4.318,71,3.113,72,3.884,73,3.884,74,3.211,75,3.884,76,2.419,77,3.568,78,3.113,79,3.113,80,5.165,81,2.368,82,1.726,83,3.884,84,3.113,85,3.884,1788,5.613]],["title/injectables/EncryptionService.html",[383,1.038,1560,3.049]],["body/injectables/EncryptionService.html",[3,0.05,4,0.055,5,0.045,9,0.979,13,0.184,16,1.92,17,0.895,19,0.642,20,0.364,21,0.006,22,3.481,23,2.124,30,0.055,31,0.004,32,0.004,33,0.178,45,0.526,48,0.777,50,0.198,95,1.432,143,1.395,146,1.91,147,0.729,149,1.478,190,1.404,246,2.793,247,3.581,271,3.01,281,2.065,282,2.493,294,3.261,318,2.464,341,4.511,342,2.117,383,1.311,384,1.625,386,2.105,387,3.021,388,2.173,403,1.311,420,1.549,429,2.115,438,2.573,565,2.364,610,4.405,664,2.15,682,3.25,926,3.038,991,1.691,997,3.458,1155,4.192,1163,3.171,1164,4.536,1170,3.709,1175,4.192,1184,2.231,1341,4.66,1445,3.279,1466,4.01,1486,3.504,1502,4.01,1515,4.66,1527,3.504,1534,3.709,1560,4.878,1566,4.01,1567,3.805,1584,4.98,1621,3.504,1623,3.805,1624,2.115,1625,2.821,1626,4.66,1627,3.099,1638,5.408,1670,3.805,1776,3.099,1789,3.805,1790,4.01,1791,9.337,1792,6.059,1793,6.059,1794,6.059,1795,4.98,1796,4.262,1797,4.262,1798,6.059,1799,4.262,1800,4.262,1801,6.059,1802,7.676,1803,7.124,1804,6.059,1805,6.059,1806,4.262,1807,4.262,1808,5.408,1809,4.262,1810,4.262,1811,4.262,1812,4.262,1813,5.408,1814,3.504,1815,4.262,1816,4.262,1817,5.794,1818,4.262,1819,6.059,1820,4.262,1821,3.805,1822,4.262,1823,4.262,1824,4.262,1825,4.262,1826,4.262]],["title/entities/FileEntity.html",[812,1.253,1827,3.488]],["body/entities/FileEntity.html",[3,0.073,4,0.081,5,0.066,13,0.27,14,1.015,16,2.035,19,0.627,20,0.387,21,0.006,23,1.921,30,0.081,31,0.005,32,0.005,33,0.262,42,1.51,45,0.582,48,1.634,50,0.184,342,2.132,664,1.939,812,2.047,814,2.957,825,3.98,829,3.306,831,2.952,832,3.472,833,3.703,834,3.238,836,3.306,837,2.952,845,3.462,846,3.238,847,1.992,848,2.534,849,2.642,986,6.58,1827,5.698,1828,5.59,1829,7.636,1830,6.262,1831,6.262,1832,6.262,1833,6.262]],["title/interfaces/FileStorage.html",[0,1.403,1834,3.175]],["body/interfaces/FileStorage.html",[0,1.627,2,2.691,3,0.065,4,0.072,5,0.058,13,0.24,17,1.041,19,0.669,20,0.401,21,0.006,22,3.001,23,2.337,30,0.112,31,0.004,32,0.004,45,0.578,50,0.131,95,1.572,126,2.574,143,1.673,146,2.017,280,3.146,281,2.181,282,2.959,403,1.71,420,1.222,427,4.278,532,3.911,668,2.994,884,2.206,926,3.131,1065,3.7,1181,3.802,1834,4.808,1835,4.278,1836,6.485,1837,6.223,1838,5.882,1839,5.588,1840,5.562,1841,5.971,1842,5.562,1843,4.965,1844,5.562,1845,4.278,1846,5.562,1847,4.572,1848,5.882,1849,6.598,1850,6.65,1851,6.236,1852,5.562,1853,4.043,1854,4.617,1855,4.572,1856,5.562,1857,5.588,1858,5.562,1859,3.848,1860,5.562,1861,5.562,1862,4.965,1863,4.278,1864,5.562,1865,5.562,1866,5.562,1867,4.278,1868,4.043,1869,4.965]],["title/classes/FileUploadDto.html",[33,0.201,1870,3.69]],["body/classes/FileUploadDto.html",[3,0.086,4,0.095,5,0.099,13,0.315,14,1.115,19,0.573,20,0.372,21,0.006,25,3.414,30,0.095,31,0.005,32,0.005,33,0.306,35,1.418,42,1.231,45,0.474,50,0.172,100,3.556,102,1.878,1319,6.007,1870,6.621,1871,7.684,1872,6.524,1873,7.076,1874,7.308]],["title/injectables/FilesService.html",[383,1.038,1158,2.937]],["body/injectables/FilesService.html",[3,0.037,4,0.041,5,0.103,9,0.798,13,0.135,16,1.605,17,0.866,19,0.627,20,0.339,21,0.006,22,2.731,23,2.176,26,2.978,27,2.521,30,0.041,31,0.003,32,0.003,33,0.131,45,0.539,48,0.572,50,0.221,93,0.933,95,1.468,112,1.152,117,1.871,126,2.398,143,1.112,146,2.012,147,0.537,149,1.7,164,2.176,190,2.586,191,1.034,199,1.69,200,1.74,227,1.795,231,5.797,271,1.034,281,1.924,282,2.317,318,2.37,340,3.97,342,1.752,343,2.855,383,1.045,384,1.197,387,2.786,388,1.367,403,2.194,420,1.972,438,2.786,453,1.353,501,1.773,532,3.558,586,3.896,664,2.012,714,1.447,805,1.09,847,0.999,853,2.128,926,2.082,991,1.245,995,3.907,997,2.978,1008,2.652,1124,2.037,1147,4.201,1158,2.956,1163,3.459,1164,2.6,1165,5.433,1170,2.956,1180,4.046,1181,3.459,1183,3.511,1184,1.642,1186,1.995,1187,1.995,1188,1.921,1189,1.855,1194,1.995,1195,1.995,1196,3.342,1198,3.196,1199,2.172,1200,1.995,1201,3.069,1202,1.995,1203,1.995,1204,1.995,1205,1.995,1206,4.28,1207,1.557,1208,2.172,1209,2.172,1210,1.921,1211,4.723,1212,2.172,1213,4.369,1214,4.806,1215,2.282,1217,2.282,1222,2.172,1240,2.414,1251,2.678,1264,1.855,1276,3.196,1277,2.172,1745,4.79,1753,2.855,1756,2.282,1761,2.802,1827,2.282,1829,7.577,1834,4.375,1837,3.715,1839,3.715,1845,3.715,1849,5.084,1853,5.188,1854,3.069,1855,3.97,1859,2.172,1868,2.282,1875,2.802,1876,4.83,1877,4.83,1878,4.83,1879,5.887,1880,3.139,1881,5.887,1882,3.139,1883,3.139,1884,5.433,1885,4.83,1886,3.139,1887,4.83,1888,4.83,1889,3.139,1890,3.139,1891,3.139,1892,6.727,1893,3.139,1894,4.83,1895,3.139,1896,4.83,1897,3.139,1898,5.255,1899,5.866,1900,3.139,1901,4.83,1902,4.83,1903,4.83,1904,4.311,1905,3.342,1906,4.83,1907,4.83,1908,3.139,1909,2.802,1910,3.139,1911,3.139,1912,3.139,1913,3.139,1914,3.139,1915,4.83,1916,4.83,1917,3.139,1918,3.139,1919,3.139,1920,2.802,1921,3.139,1922,3.139,1923,3.139,1924,3.139,1925,4.83,1926,3.139,1927,3.139,1928,3.139,1929,3.139,1930,3.139,1931,3.139,1932,2.414,1933,3.139,1934,3.139,1935,3.139,1936,3.139,1937,3.139]],["title/interfaces/GenerateTokenOptions.html",[0,1.403,1938,3.69]],["body/interfaces/GenerateTokenOptions.html",[0,1.463,2,2.42,3,0.059,4,0.065,5,0.052,13,0.216,14,0.877,17,0.907,19,0.628,20,0.331,21,0.006,28,1.984,30,0.088,31,0.004,32,0.004,33,0.209,50,0.202,74,2.862,138,1.984,147,0.856,149,1.609,190,2.528,191,1.648,249,3.444,262,2.618,270,3.179,282,2.082,285,5.226,294,4.131,317,2.156,337,3.637,355,3.311,383,1.465,386,1.738,387,2.269,400,4.303,401,3.637,406,3.381,407,2.867,408,3.461,409,6.759,410,6.325,411,2.618,418,3.062,420,2.051,429,3.808,433,2.482,438,2.269,441,3.549,448,7.062,452,5.69,453,2.156,457,5.226,465,3.848,466,3.458,714,2.306,715,3.311,747,3.978,760,2.618,780,3.381,805,1.738,876,2.693,907,3.359,1265,2.957,1485,3.461,1580,4.922,1596,3.461,1624,2.482,1938,5.903,1939,4.112,1940,4.466,1941,5.207,1942,4.466,1943,4.466,1944,4.466,1945,4.466,1946,4.112,1947,4.466,1948,4.112,1949,4.466,1950,6.044,1951,6.044,1952,6.044,1953,6.044,1954,4.466,1955,4.466,1956,6.851,1957,6.044,1958,4.466,1959,5.565,1960,4.466,1961,4.466,1962,4.466,1963,4.466,1964,4.466,1965,4.466,1966,4.466,1967,4.112,1968,4.466,1969,4.112,1970,4.466,1971,4.466,1972,4.112,1973,4.466]],["title/controllers/HealthController.html",[139,1.501,1974,3.69]],["body/controllers/HealthController.html",[3,0.077,4,0.085,5,0.068,9,0.79,13,0.282,21,0.006,30,0.085,31,0.005,32,0.005,33,0.274,42,1.102,45,0.425,50,0.189,139,2.047,141,2.315,143,1.854,146,1.826,147,1.12,149,1.372,255,4.466,386,2.798,388,1.852,403,2.477,453,4.198,555,3.09,558,6.195,1573,5.573,1698,6.621,1974,7.003,1975,5.842,1976,9.519,1977,8.054,1978,7.19,1979,9.105,1980,8.054,1981,6.621,1982,8.054,1983,6.544,1984,6.544,1985,8.054,1986,8.054,1987,5.379,1988,6.544,1989,5.842,1990,6.544,1991,6.544]],["title/modules/HealthModule.html",[158,1.427,173,3.488]],["body/modules/HealthModule.html",[3,0.087,4,0.096,5,0.078,21,0.006,30,0.096,31,0.005,32,0.005,33,0.31,50,0.216,141,3.071,147,1.269,158,2.581,160,3.127,173,6.311,188,3.266,1974,7.08,1987,6.093,1992,7.413,1993,8.68,1994,7.413]],["title/injectables/InternalClientsProvider.html",[383,1.038,391,3.488]],["body/injectables/InternalClientsProvider.html",[3,0.036,4,0.04,5,0.074,9,0.791,13,0.133,16,1.832,17,0.89,19,0.653,20,0.348,21,0.006,30,0.04,31,0.003,32,0.003,33,0.244,45,0.548,48,0.869,50,0.221,51,0.874,58,0.689,93,1.418,95,1.424,112,1.134,117,2.005,135,1.532,143,1.098,146,1.875,147,0.528,149,1.691,190,2.466,191,1.017,199,1.662,200,1.712,248,1.073,256,3.338,274,2.044,281,1.976,282,1.467,323,2.375,342,1.949,369,3.43,383,1.032,384,1.178,387,2.926,388,1.35,390,1.962,391,3.467,403,1.792,416,5.237,417,5.674,420,1.984,429,3.872,433,1.532,438,2.616,441,2.407,442,3.43,482,3.031,501,1.134,510,1.962,555,1.458,584,2.056,653,1.766,664,2.065,669,2.307,805,1.073,812,0.806,847,0.982,853,2.101,901,3.668,902,3.668,903,3.668,904,4.482,906,4.337,922,5.335,926,1.331,928,1.331,929,1.766,932,2.92,933,2.375,935,2.044,936,3.668,937,2.375,940,2.538,963,2.819,966,2.137,991,1.225,995,3.874,997,2.953,1002,2.137,1007,5.201,1008,2.625,1023,4.789,1024,3.92,1025,4.257,1026,2.538,1028,3.92,1030,3.92,1032,3.92,1035,3.92,1037,2.538,1039,4.257,1041,2.756,1124,2.988,1174,2.137,1180,1.89,1181,1.616,1184,1.616,1185,2.044,1186,1.962,1187,1.962,1188,1.89,1189,1.825,1194,1.962,1195,1.962,1196,3.3,1198,4.337,1199,2.137,1200,1.962,1201,3.031,1202,1.962,1203,1.962,1204,1.962,1205,1.962,1206,4.236,1207,2.366,1208,2.137,1209,2.137,1210,2.92,1211,2.044,1212,2.137,1213,4.778,1214,2.92,1215,2.245,1216,2.245,1217,2.245,1218,2.375,1222,3.3,1223,3.467,1224,2.375,1225,2.245,1226,2.375,1227,2.375,1229,2.044,1230,2.044,1231,2.375,1232,2.044,1233,2.044,1234,1.962,1235,2.044,1236,2.044,1237,1.962,1238,2.044,1239,2.044,1251,2.645,1254,2.375,1260,1.962,1261,2.137,1262,1.89,1263,2.137,1264,1.825,1265,1.825,1266,1.825,1268,2.044,1276,2.044,1277,2.137,1408,1.662,1466,3.156,1745,4.758,1756,2.245,1995,7.678,1996,2.538,1997,3.088,1998,3.088,1999,4.769,2000,3.088,2001,3.088,2002,3.088,2003,3.088,2004,3.088,2005,3.088,2006,3.088,2007,3.088,2008,3.088,2009,2.756,2010,3.088,2011,3.088,2012,3.088,2013,3.088,2014,4.769,2015,5.827,2016,3.088,2017,4.769,2018,4.769,2019,3.088,2020,2.245,2021,2.245,2022,2.245,2023,2.245,2024,3.088,2025,3.088,2026,5.827,2027,3.088,2028,3.088,2029,4.769,2030,4.769,2031,4.769,2032,4.769,2033,3.088,2034,2.756,2035,2.756,2036,2.538,2037,3.088,2038,2.538,2039,3.088,2040,4.257,2041,3.088,2042,3.088,2043,3.088,2044,3.088,2045,3.088]],["title/interfaces/InternalTokenPayload.html",[0,1.403,400,3.049]],["body/interfaces/InternalTokenPayload.html",[0,2.335,2,3.121,3,0.076,4,0.084,5,0.067,11,3.814,12,2.052,13,0.278,14,1.034,16,1.701,19,0.577,20,0.278,21,0.006,30,0.113,31,0.005,32,0.005,38,3.441,41,2.509,50,0.204,147,1.104,149,1.353,249,3.523,342,1.935,380,2.665,400,5.074,420,1.754,441,2.665,442,3.376,444,6.268,501,2.931,669,3.121,812,2.085,831,2.629,837,2.125,907,4.495,928,3.737,929,3.69,987,5.303,2046,4.962,2047,6.562,2048,5.524,2049,5.303,2050,5.303,2051,5.303,2052,5.303]],["title/entities/IssuanceConfig.html",[702,2.444,812,1.253]],["body/entities/IssuanceConfig.html",[3,0.041,4,0.046,5,0.037,9,0.951,12,1.8,13,0.152,14,0.681,16,1.597,17,0.964,19,0.524,20,0.402,21,0.006,26,2.37,27,2.006,28,2.086,29,4.323,30,0.046,31,0.003,32,0.003,33,0.264,42,1.514,45,0.583,48,1.719,50,0.197,51,0.994,55,2.42,56,1.595,57,2.266,58,0.784,81,2.219,82,1.617,88,2.227,90,2.483,93,2.427,95,1.114,99,3.009,100,2.173,101,2.076,102,0.903,110,2.523,116,2.086,117,1.982,125,2.996,127,3.109,130,2.076,131,3.728,134,3.109,135,1.743,136,2.076,137,3.109,261,3.824,271,1.732,342,1.821,377,3.769,487,4.591,491,1.743,497,1.482,507,2.266,511,3.553,512,5.002,513,4.158,516,4.819,517,2.232,546,4.286,552,2.753,664,1.429,689,2.701,702,2.679,714,1.619,741,3.824,805,2.915,812,1.828,814,1.658,816,4.046,818,3.129,819,3.212,820,3.769,821,3.607,823,4.005,824,2.425,827,3.716,829,2.954,831,2.306,832,1.947,833,2.893,834,2.173,836,2.219,837,1.732,841,3.607,843,2.917,844,2.917,845,1.421,846,2.173,847,1.117,848,1.421,849,2.66,852,2.009,855,2.61,857,2.753,883,1.838,884,2.086,885,2.907,890,2.679,1056,3.883,1072,3.135,1076,2.887,1091,3.135,1103,4.323,1107,2.701,1110,3.824,1123,2.43,1145,4.85,1166,3.824,1174,3.639,1299,4.695,1307,3.22,1308,4.695,1552,4.323,1905,3.639,2053,8.111,2054,6.306,2055,6.306,2056,4.584,2057,6.306,2058,5.629,2059,3.512,2060,3.512,2061,3.135,2062,3.512,2063,3.512,2064,3.512,2065,3.512,2066,3.512,2067,5.26,2068,5.26,2069,4.695,2070,3.512,2071,3.512,2072,3.512,2073,3.512,2074,3.512,2075,3.135,2076,3.512,2077,3.512,2078,3.512,2079,5.26,2080,2.887,2081,3.512,2082,3.512,2083,3.512,2084,3.512,2085,3.512,2086,3.512,2087,3.512,2088,3.512]],["title/controllers/IssuanceController.html",[139,1.501,2089,3.69]],["body/controllers/IssuanceController.html",[3,0.064,4,0.071,5,0.057,13,0.235,16,1.812,17,0.884,19,0.533,20,0.346,21,0.006,30,0.071,31,0.004,32,0.004,33,0.228,42,1.349,45,0.52,50,0.217,88,2.257,95,1.414,102,1.399,117,2.408,139,1.703,141,1.926,143,1.649,146,2.128,147,0.932,149,1.679,249,3.113,280,2.786,281,1.963,298,3.973,302,3.604,317,2.347,318,2.342,342,1.899,466,2.453,501,3.446,511,3.46,555,2.571,601,2.297,656,4.902,907,4.756,911,3.604,926,2.347,928,2.347,930,3.019,949,3.959,956,3.604,1140,4.098,1143,5.886,1163,3.749,1179,5.209,1326,6.582,1329,4.861,1335,3.461,1336,3.461,1337,3.461,1339,3.767,1340,4.476,1448,3.333,2089,5.511,2090,4.861,2091,7.164,2092,7.164,2093,7.148,2094,5.445,2095,5.445,2096,5.445,2097,5.445,2098,5.445,2099,4.861,2100,5.445,2101,4.861,2102,5.445,2103,5.445,2104,5.445,2105,5.511,2106,5.445]],["title/classes/IssuanceDto.html",[33,0.201,1143,3.32]],["body/classes/IssuanceDto.html",[3,0.074,4,0.083,5,0.066,9,0.767,13,0.274,14,1.024,16,1.353,19,0.573,20,0.274,21,0.006,26,2.861,27,2.421,30,0.103,31,0.005,32,0.005,33,0.36,35,1.232,38,3.407,42,1.07,45,0.412,50,0.202,52,3.969,56,2,58,1.417,63,2.998,88,2.284,102,1.632,342,1.764,369,4.505,420,1.737,507,2.916,511,3.534,664,1.792,702,3.234,818,3.922,819,4.026,1048,3.887,1137,4.884,1138,5.219,1139,7.076,1140,5.301,1142,5.219,1143,5.47,1144,7.057,1145,6.081,1146,6.081,1147,5.024,1148,7.684,2107,6.35]],["title/injectables/IssuanceService.html",[383,1.038,656,2.937]],["body/injectables/IssuanceService.html",[3,0.034,4,0.038,5,0.072,9,0.354,13,0.127,16,1.735,17,0.809,19,0.627,20,0.316,21,0.006,22,2.33,30,0.038,31,0.003,32,0.003,33,0.236,45,0.514,48,0.835,50,0.222,51,0.83,58,0.655,63,1.385,82,1.409,88,1.692,93,2.18,95,1.295,112,1.077,117,2.075,135,1.455,143,1.468,146,2.026,147,0.502,149,1.537,190,2.522,191,0.966,199,1.579,200,1.626,248,1.019,258,3.767,274,1.941,281,1.797,282,1.409,318,2.382,342,1.709,383,0.991,384,1.119,386,1.592,387,2.891,388,1.804,403,2.437,420,2.05,433,1.455,438,2.792,441,2.33,453,1.264,507,2.373,511,3.374,584,2.431,654,3.451,656,3.903,664,2.077,669,1.419,686,1.626,702,2.872,780,1.292,847,0.933,853,2.019,876,1.579,926,2.431,991,1.163,995,3.769,997,2.872,1008,2.541,1012,4.052,1056,2.541,1065,1.494,1124,2.918,1140,4.933,1142,2.411,1143,5.299,1145,4.338,1149,4.219,1151,2.132,1153,2.334,1155,3.171,1156,3.769,1163,2.398,1164,2.467,1174,3.171,1175,3.171,1180,3.452,1181,3.336,1184,1.535,1185,1.941,1186,1.864,1187,1.864,1188,1.796,1189,2.709,1194,1.864,1195,1.864,1196,3.171,1198,4.219,1199,2.029,1200,1.864,1201,2.912,1202,1.864,1203,1.864,1204,1.864,1205,1.864,1206,4.1,1207,3.163,1208,2.029,1209,2.029,1210,2.805,1211,4.577,1212,2.029,1213,4.689,1214,2.805,1215,2.132,1216,2.132,1217,2.132,1218,2.256,1219,2.411,1220,4.1,1222,3.171,1223,3.332,1224,2.256,1225,2.132,1226,2.256,1227,2.256,1229,1.941,1230,3.033,1232,1.941,1233,1.941,1234,1.864,1235,1.941,1236,1.941,1237,1.864,1238,1.941,1239,1.941,1251,2.541,1260,1.864,1261,2.029,1262,1.796,1263,3.902,1265,1.734,1266,1.734,1268,1.941,1271,2.618,1276,1.941,1277,2.029,1279,3.525,1326,3.767,1338,2.132,1408,2.467,1484,2.411,1597,4.338,1745,4.659,1756,2.132,2020,2.132,2021,4.1,2022,4.1,2023,2.132,2080,2.411,2093,4.091,2099,2.618,2108,2.618,2109,4.583,2110,5.64,2111,2.933,2112,6.375,2113,2.933,2114,5.64,2115,4.583,2116,2.933,2117,4.583,2118,2.933,2119,2.933,2120,2.933,2121,6.375,2122,2.933,2123,2.933,2124,2.933,2125,4.583,2126,2.933,2127,4.091,2128,2.618,2129,2.933,2130,2.933,2131,2.933,2132,2.933,2133,2.933,2134,5.64,2135,2.933,2136,2.933,2137,2.933,2138,2.933,2139,5.64,2140,2.411,2141,2.256,2142,4.583,2143,2.933,2144,2.933,2145,4.583,2146,2.933,2147,2.933,2148,2.933,2149,4.583,2150,2.933,2151,2.933,2152,2.933,2153,2.933,2154,2.933,2155,2.933,2156,2.933,2157,4.583,2158,2.933,2159,2.933,2160,2.933,2161,2.933]],["title/controllers/IssuerManagementController.html",[139,1.501,2162,3.69]],["body/controllers/IssuerManagementController.html",[3,0.054,4,0.059,5,0.048,9,0.551,13,0.197,17,0.503,19,0.304,20,0.395,21,0.006,25,1.81,30,0.059,31,0.004,32,0.004,33,0.191,41,1.774,42,0.769,45,0.296,50,0.218,65,1.675,74,2.61,81,1.925,93,2.352,95,0.806,102,1.173,127,2.697,138,1.81,139,1.427,141,1.614,143,1.463,146,1.034,147,0.781,154,2.456,194,2.53,246,3.372,248,1.585,249,2.471,257,2.207,268,4.62,271,3.015,280,3.504,281,1.118,298,2.264,299,4.62,301,5.224,302,3.02,317,1.966,318,1.859,321,6.084,324,2.8,338,3.317,345,4.073,386,2.208,387,2.451,411,2.388,420,1.396,438,2.13,446,1.774,466,2.056,500,3.827,501,3.053,507,2.057,539,3.001,555,2.154,565,4.612,567,2.29,597,2.864,601,1.925,609,3.509,632,5.235,771,5.027,783,3.317,796,4.206,837,1.503,907,3.925,909,3.075,928,1.966,930,2.53,1062,3.635,1240,3.509,1335,2.9,1336,2.9,1337,2.9,1339,3.157,1340,3.75,1448,4.477,1596,3.157,1848,3.317,1873,3.75,2101,4.073,2105,3.509,2162,4.888,2163,5.224,2164,5.224,2165,4.073,2166,6.529,2167,4.562,2168,6.414,2169,4.073,2170,5.673,2171,4.84,2172,5.317,2173,4.073,2174,4.073,2175,4.562,2176,4.562,2177,3.75,2178,4.84,2179,4.648,2180,3.317,2181,3.157,2182,3.75,2183,4.562,2184,4.073,2185,4.073,2186,5.673,2187,3.509,2188,7.061,2189,4.073,2190,6.012,2191,3.75,2192,7.061,2193,6.397,2194,4.073,2195,4.562,2196,4.562,2197,4.562,2198,4.562,2199,4.562,2200,4.562,2201,4.562,2202,4.888,2203,3.75,2204,4.562,2205,4.562,2206,4.562,2207,4.562,2208,4.562,2209,4.073,2210,4.562,2211,4.073,2212,4.073,2213,4.073,2214,4.073,2215,4.073,2216,4.073]],["title/interfaces/IssuerMetadata.html",[0,1.403,2217,3.488]],["body/interfaces/IssuerMetadata.html",[0,2.562,2,3.195,3,0.077,4,0.086,5,0.069,9,0.797,13,0.285,14,1.049,19,0.583,20,0.394,21,0.006,22,3.346,23,1.985,27,3.089,30,0.086,31,0.005,32,0.005,50,0.155,126,2.577,246,3.734,247,4.788,248,2.813,254,5.712,341,4.652,376,5.888,378,3.824,382,4.36,466,4.457,532,4.36,682,3.734,1285,5.428,1296,3.456,1303,7.23,1624,3.277,2217,5.888,2218,5.895]],["title/classes/IssuerMetadataCredentialConfig.html",[33,0.201,1069,3.32]],["body/classes/IssuerMetadataCredentialConfig.html",[3,0.048,4,0.054,5,0.043,9,0.714,13,0.178,14,0.765,16,0.877,17,0.652,19,0.628,20,0.396,21,0.006,23,1.009,25,2.742,28,2.344,30,0.098,31,0.004,32,0.004,33,0.367,34,3.834,35,0.799,37,2.355,39,3.834,40,4.467,42,1.165,45,0.449,48,1.674,50,0.213,51,1.673,55,2.824,56,2.368,57,2.841,58,1.319,63,1.944,65,1.511,66,2.355,67,2.355,71,3.834,78,3.834,81,1.737,82,1.817,84,4.19,93,2.247,95,1.413,99,3.381,100,2.442,101,2.434,102,1.058,104,2.637,117,1.165,130,2.434,131,4.467,134,3.494,135,2.043,136,2.434,137,2.434,248,1.43,304,1.992,342,1.319,511,1.57,539,1.944,552,3.618,633,5.027,634,2.849,664,0.933,702,3.521,805,2.053,812,1.543,813,3.722,827,4.051,829,2.493,831,2.277,833,3.121,834,2.856,836,1.737,837,1.356,845,1.666,846,2.856,847,1.31,848,1.666,849,2.917,855,2.933,857,3.093,880,2.097,883,2.155,884,1.633,885,3.84,982,2.355,1056,2.283,1057,2.993,1058,2.993,1059,2.993,1060,2.993,1061,2.283,1062,2.355,1063,3.167,1064,4.625,1065,3.01,1069,5.228,1079,3.167,1080,3.167,1081,3.167,1082,3.167,1083,2.993,1084,3.167,1085,3.167,1086,3.167,1087,3.167,1088,3.167,1089,3.167,1092,3.167,1102,4.394,1110,4.297,1111,3.167,1112,2.725,1113,2.993,1114,2.849,1115,3.167,1116,5.536,1117,4.619,1118,2.725,1119,3.167,1120,3.167,1121,3.167,1122,2.617,1123,4.09,1124,2.493,1125,3.167,1126,3.167,1127,3.167,1128,3.167,1129,2.993,1130,2.434,1131,2.617,1704,3.167,2219,4.117,2220,4.117,2221,4.117]],["title/modules/IssuerModule.html",[158,1.427,174,3.32]],["body/modules/IssuerModule.html",[3,0.054,4,0.059,5,0.048,21,0.006,30,0.059,31,0.004,32,0.004,33,0.191,50,0.234,63,2.154,82,1.403,141,2.248,147,0.781,158,2.175,160,1.925,161,2.207,162,2.324,163,2.324,164,2.056,165,3.453,166,3.453,171,4.926,174,6.945,179,5.272,183,3.237,184,2.324,185,2.324,188,2.8,190,2.409,191,1.503,203,3.02,210,3.317,324,2.01,420,1.002,466,2.056,553,5.625,594,5.785,653,2.61,656,5.785,690,3.509,702,3.237,990,2.61,991,1.81,1056,3.524,1114,3.157,1149,6.255,1151,3.317,1323,5.625,1338,3.317,1342,5.7,1347,5.625,1349,3.75,1358,4.073,1391,3.157,1405,2.61,1711,5.625,1721,5.959,1730,4.039,2080,3.75,2089,5.625,2128,4.073,2162,5.625,2164,3.75,2179,6.006,2222,4.073,2223,4.073,2224,4.073,2225,4.073,2226,5.7,2227,5.7,2228,5.473,2229,4.562,2230,5.625,2231,4.397,2232,2.53,2233,6.355,2234,3.75,2235,4.562,2236,4.562,2237,4.562,2238,4.562,2239,4.562,2240,4.562,2241,4.562,2242,4.562,2243,4.562,2244,4.562,2245,4.562,2246,4.562,2247,3.75,2248,4.562,2249,6.355,2250,4.073,2251,4.562,2252,4.562]],["title/classes/JwksResponseDto.html",[33,0.201,1787,3.32]],["body/classes/JwksResponseDto.html",[3,0.07,4,0.078,5,0.063,9,0.725,13,0.259,14,0.988,19,0.558,20,0.329,21,0.006,22,3.957,23,2.348,25,3.327,30,0.099,31,0.005,32,0.005,33,0.351,35,1.165,45,0.39,50,0.141,76,4.015,106,2.048,112,2.204,246,3.868,247,4.959,248,2.651,254,4.511,271,2.513,341,4.925,368,3.434,378,3.603,411,3.142,478,3.549,617,4.618,682,4.07,797,4.154,965,4.959,1283,5.051,1504,3.815,1528,5.548,1549,7.085,1601,3.973,1624,2.979,1628,5.28,1774,6.812,1775,6.812,1776,4.364,1777,4.618,1778,5.548,1779,5.87,1781,5.359,1782,4.935,1783,5.359,1785,5.87,1787,5.28,2253,5.359]],["title/injectables/JwtAuthGuard.html",[354,3.488,383,1.038]],["body/injectables/JwtAuthGuard.html",[3,0.078,4,0.086,5,0.069,13,0.286,17,0.895,20,0.35,21,0.006,30,0.086,31,0.005,32,0.005,33,0.277,38,3.495,45,0.526,48,1.206,50,0.215,95,1.432,143,1.867,146,1.5,147,1.132,149,1.7,281,1.988,317,2.851,354,5.895,359,5.089,383,1.754,384,2.523,388,1.873,420,1.454,1899,6.665,2048,6.324,2254,5.906,2255,8.108,2256,7.238,2257,5.438,2258,7.845,2259,6.616,2260,7.238,2261,6.616,2262,4.205,2263,5.089,2264,6.616,2265,6.665,2266,6.616,2267,6.616,2268,5.906,2269,5.438,2270,5.906,2271,6.616]],["title/injectables/JwtService.html",[355,3.175,383,1.038]],["body/injectables/JwtService.html",[0,1.364,3,0.055,4,0.061,5,0.049,13,0.201,17,0.816,19,0.577,20,0.319,21,0.006,28,2.559,30,0.084,31,0.004,32,0.004,33,0.195,45,0.518,50,0.197,74,3.69,95,1.307,138,1.849,143,1.485,146,1.677,147,0.798,149,1.552,190,2.855,191,1.535,249,3.576,262,3.376,270,4.1,281,1.813,282,2.455,285,5.327,294,4.298,317,2.009,337,3.389,355,4.27,383,1.396,384,1.778,386,2.241,387,2.906,388,1.32,400,5.074,401,3.389,406,3.259,407,2.806,408,3.226,409,6.89,410,6.447,411,2.44,418,2.854,420,2.021,429,3.671,433,2.313,438,2.162,441,3.582,448,5.303,452,3.226,453,2.781,457,2.963,465,3.586,466,3.333,653,2.667,714,2.149,715,4.27,747,4.195,760,2.44,780,3.259,805,1.619,876,3.983,907,3.201,1265,3.814,1485,3.226,1580,4.69,1596,4.464,1624,2.313,1938,6.141,1939,3.832,1940,4.162,1941,4.962,1942,4.162,1943,4.162,1944,4.162,1945,4.162,1946,3.832,1947,4.162,1948,5.303,1949,6.604,1950,5.759,1951,5.759,1952,5.759,1953,5.759,1954,4.162,1955,4.162,1956,6.604,1957,5.759,1958,4.162,1959,5.303,1960,4.162,1961,4.162,1962,4.162,1963,4.162,1964,4.162,1965,4.162,1966,4.162,1967,5.303,1968,5.759,1969,3.832,1970,4.162,1971,4.162,1972,3.832,1973,7.127,2272,6.451,2273,4.662,2274,4.662,2275,4.662,2276,4.662,2277,4.662]],["title/injectables/JwtStrategy.html",[356,3.488,383,1.038]],["body/injectables/JwtStrategy.html",[3,0.05,4,0.056,5,0.045,9,0.517,13,0.185,17,0.896,19,0.285,20,0.35,21,0.006,23,1.731,30,0.056,31,0.004,32,0.004,33,0.179,38,2.618,45,0.527,48,1.287,50,0.204,77,2.719,95,1.434,117,2.176,143,1.398,146,1.84,147,0.732,149,1.769,151,4.202,190,3.145,191,1.409,248,2.11,254,3.59,256,3.093,260,3.516,270,2.719,273,3.818,281,1.99,282,1.868,293,6.304,294,2.303,318,1.251,347,2.447,356,4.416,359,3.29,383,1.314,384,1.631,387,2.367,388,1.719,400,4.886,401,3.11,402,5.129,403,2.726,406,1.884,407,1.384,420,1.982,433,2.122,438,1.434,441,3.778,442,2.238,453,2.618,465,3.29,466,3.801,482,3.86,571,2.447,584,3.313,653,2.447,668,2.303,714,1.972,747,4.198,780,3.577,812,1.117,831,2,876,4.139,982,2.447,1012,2.719,1124,1.805,1262,2.619,1265,2.529,1408,3.27,1485,4.886,1948,3.516,1959,3.516,2202,3.29,2278,3.818,2279,6.074,2280,6.933,2281,6.074,2282,7.062,2283,4.278,2284,6.074,2285,4.278,2286,6.074,2287,4.278,2288,6.074,2289,7.062,2290,4.278,2291,4.278,2292,6.074,2293,4.278,2294,6.074,2295,4.278,2296,6.074,2297,3.818,2298,4.278,2299,4.278,2300,3.818,2301,4.278,2302,7.688,2303,4.278,2304,4.278,2305,4.278,2306,4.278,2307,4.278,2308,4.278,2309,4.278,2310,4.278,2311,6.074,2312,4.278,2313,7.062,2314,4.278,2315,4.278,2316,3.818,2317,4.278,2318,4.278,2319,3.818,2320,4.278,2321,4.886,2322,6.074,2323,3.818,2324,5.422,2325,3.818,2326,4.278,2327,6.074,2328,4.278,2329,4.278,2330,4.278,2331,4.278,2332,4.278,2333,3.29,2334,3.818,2335,3.818,2336,4.278,2337,4.278,2338,4.278,2339,4.278,2340,4.278,2341,4.278,2342,4.278,2343,4.278,2344,4.278]],["title/classes/Key.html",[23,1.176,33,0.201]],["body/classes/Key.html",[3,0.064,4,0.071,5,0.057,7,2.343,9,0.864,13,0.235,14,0.927,15,3.762,16,1.158,17,0.6,19,0.659,20,0.414,21,0.006,23,2.367,24,3.328,25,2.839,30,0.071,31,0.004,32,0.004,33,0.356,35,1.055,42,1.558,45,0.6,50,0.188,51,1.539,55,2.46,56,2.495,57,2.317,58,1.213,93,1.617,95,0.96,103,3.015,106,1.855,112,2.627,341,4.33,369,2.845,403,2.201,682,3.92,760,4.187,1502,3.598,1504,3.455,1528,3.953,1549,6.181,1607,3.328,1624,2.698,1640,6.577,1776,5.817,1777,6.154,1778,6.181,1779,6.54,1785,5.505,2345,6.493,2346,4.469,2347,7.142,2348,5.437,2349,5.437,2350,5.437,2351,5.437,2352,5.437,2353,5.437,2354,5.437,2355,5.437,2356,4.853,2357,4.853]],["title/controllers/KeyController.html",[139,1.501,1562,3.69]],["body/controllers/KeyController.html",[3,0.054,4,0.06,5,0.048,9,0.559,13,0.2,16,2.018,17,0.879,19,0.576,20,0.344,21,0.006,22,1.914,23,2.34,30,0.06,31,0.004,32,0.004,33,0.194,42,1.341,45,0.517,50,0.216,95,1.406,139,1.449,141,1.639,143,1.479,146,1.961,147,0.793,149,1.546,227,2.65,249,3.756,280,3.711,281,1.952,282,2.661,298,3.658,318,2.686,341,4.055,342,1.433,386,3.006,387,2.9,388,1.311,403,1.424,407,2.079,420,1.018,438,2.153,555,2.187,601,1.954,654,3.322,813,2.494,907,4.736,911,3.066,926,3.178,928,1.997,930,2.569,949,4.669,956,3.066,966,4.444,1153,3.271,1335,2.944,1336,2.944,1337,2.944,1339,3.205,1408,3.458,1562,6.124,1563,4.135,1573,4.444,1574,4.88,1607,4.874,1629,4.94,1630,3.368,1631,3.368,1633,3.563,1838,3.368,2358,4.135,2359,7.373,2360,6.423,2361,5.734,2362,7.373,2363,4.632,2364,4.632,2365,4.632,2366,4.632,2367,4.632,2368,4.632,2369,4.632,2370,6.124,2371,4.632,2372,4.632,2373,6.423,2374,5.279,2375,3.808,2376,4.135,2377,4.632,2378,4.632,2379,4.632,2380,4.632,2381,4.632,2382,4.632,2383,4.632,2384,4.632,2385,4.632]],["title/entities/KeyEntity.html",[812,1.253,1566,3.175]],["body/entities/KeyEntity.html",[3,0.067,4,0.074,5,0.059,13,0.245,14,0.953,16,1.908,19,0.575,20,0.409,21,0.006,23,2.398,26,3.316,27,2.807,30,0.096,31,0.004,32,0.004,33,0.238,42,1.509,45,0.581,48,1.673,50,0.192,342,2.085,664,1.852,682,3.767,805,2.557,812,1.922,814,2.679,825,5.192,829,3.647,831,2.847,832,3.147,833,3.571,834,3.041,836,3.105,837,2.424,845,2.297,846,3.041,847,1.805,848,2.297,849,3.446,885,2.617,1066,4.126,1530,3.926,1566,4.871,1624,2.816,1803,4.665,1817,7.544,2386,4.665,2387,5.675,2388,5.675,2389,7.36,2390,5.675,2391,5.675,2392,6.715,2393,5.652,2394,5.675]],["title/classes/KeyImportDto.html",[33,0.201,1607,2.937]],["body/classes/KeyImportDto.html",[3,0.067,4,0.074,5,0.059,7,3.172,9,1.108,13,0.245,14,0.953,15,5.652,16,1.209,17,1.013,19,0.647,20,0.396,21,0.006,23,2.42,24,4.506,25,3.428,30,0.074,31,0.004,32,0.004,33,0.362,35,1.101,42,1.376,45,0.53,50,0.192,51,1.606,55,2.512,56,2.421,57,2.382,58,1.266,93,1.688,95,1.002,103,3.147,106,1.936,112,2.083,341,4.403,369,3.852,403,2.512,542,6.05,682,3.986,760,2.97,1502,5.407,1504,3.607,1528,4.126,1549,6.284,1607,4.506,1624,2.816,1640,4.665,1704,4.365,1776,4.126,1777,4.365,1778,5.351,1779,5.661,1785,5.661,2345,5.981,2346,4.665,2347,5.066,2356,5.066,2357,6.57,2395,5.675,2396,5.675,2397,5.675]],["title/modules/KeyModule.html",[158,1.427,175,3.488]],["body/modules/KeyModule.html",[3,0.068,4,0.076,5,0.061,21,0.006,30,0.076,31,0.005,32,0.005,33,0.244,45,0.378,50,0.229,143,1.342,146,1.321,147,0.998,149,1.735,158,2.461,160,2.459,165,2.752,166,2.752,175,6.016,188,2.568,189,5.445,190,3.045,191,1.92,227,3.335,228,4.238,253,5.761,407,2.424,420,1.281,654,3.728,813,3.138,989,5.204,990,3.335,991,2.312,997,3.728,1004,4.792,1264,4.427,1375,4.588,1403,4.032,1404,3.705,1474,5.445,1566,4.957,1569,5.204,1570,5.761,1574,4.957,1583,6.365,1584,6.156,1625,3.858,1631,4.238,1632,5.204,1633,5.761,1685,4.792,2231,5.182,2232,3.233,2280,6.156,2398,5.83,2399,7.387,2400,5.83,2401,7.387,2402,6.25,2403,5.83,2404,5.761,2405,5.83,2406,5.83,2407,7.49,2408,5.204,2409,4.792,2410,5.83,2411,5.83]],["title/classes/KeyObj.html",[33,0.201,2412,3.69]],["body/classes/KeyObj.html",[3,0.076,4,0.085,5,0.068,7,3.917,9,0.786,13,0.281,14,1.039,15,6.023,16,1.854,19,0.605,20,0.376,21,0.006,22,3.754,23,2.385,24,4.914,25,3.604,26,4.095,27,3.465,30,0.085,31,0.005,32,0.005,33,0.273,35,1.263,45,0.565,50,0.153,218,4.504,304,3.149,682,3.701,812,2.096,965,4.745,1501,5.761,1601,5.761,1628,4.504,2345,6.288,2412,6.175,2413,5.811,2414,6.509,2415,6.509,2416,6.509]],["title/classes/KeyResponseDto.html",[33,0.201,263,3.69]],["body/classes/KeyResponseDto.html",[3,0.087,4,0.097,5,0.078,13,0.321,14,1.125,20,0.321,21,0.006,30,0.097,31,0.005,32,0.005,33,0.311,35,1.441,45,0.482,50,0.174,218,5.139,263,6.685,304,3.594,341,4.692,368,4.249,1601,6.097,1628,5.139,2345,6.013,2417,6.631]],["title/classes/KeyService.html",[33,0.201,1574,3.175]],["body/classes/KeyService.html",[0,1.588,3,0.043,4,0.048,5,0.038,7,2.34,9,0.443,13,0.158,16,1.849,17,0.989,19,0.667,20,0.41,21,0.006,22,2.243,23,2.367,24,4.377,30,0.048,31,0.003,32,0.003,33,0.153,35,0.711,45,0.581,50,0.21,95,1.582,96,3.129,143,1.25,146,2.095,147,0.627,149,1.139,190,2.633,191,1.207,280,2.78,281,2.196,282,2.946,318,2.42,375,5.316,386,2.777,388,1.537,406,1.614,407,2.093,441,2.243,446,1.425,611,2.819,653,2.096,664,2.203,668,4.304,678,2.329,682,3.52,729,2.166,759,4.726,813,1.973,839,5.198,847,1.166,909,2.627,997,3.222,1061,5.313,1164,2.923,1258,2.819,1394,2.096,1466,2.425,1482,4.462,1491,3.593,1495,3.947,1534,3.323,1574,3.593,1575,4.462,1578,7.134,1579,4.176,1580,4.701,1581,6.275,1582,4.462,1583,4.974,1586,4.176,1589,3.947,1590,4.462,1602,5.316,1606,4.462,1607,4.377,1611,4.462,1613,3.012,1614,4.947,1617,4.462,1619,2.535,1624,1.818,1629,2.819,1630,2.664,1631,2.664,1663,3.271,1969,3.012,2418,3.271,2419,9.819,2420,3.664,2421,3.664,2422,3.664,2423,3.664,2424,3.664,2425,3.664,2426,3.664,2427,3.664,2428,4.846,2429,3.664,2430,4.846,2431,3.664,2432,3.45,2433,7.15,2434,3.664,2435,3.664,2436,3.664]],["title/injectables/KeycloakClientsProvider.html",[383,1.038,999,3.69]],["body/injectables/KeycloakClientsProvider.html",[3,0.031,4,0.034,5,0.027,9,0.722,13,0.113,14,0.541,16,1.982,17,0.84,19,0.643,20,0.328,21,0.006,30,0.034,31,0.003,32,0.003,33,0.109,45,0.534,48,1.271,50,0.207,82,1.286,95,1.541,112,0.959,117,1.184,143,0.963,146,1.779,147,0.447,149,1.536,190,1.968,191,0.86,256,3.044,260,2.147,281,1.795,282,2.145,285,3.323,287,3.04,288,3.733,320,2.147,342,1.459,369,2.736,383,0.905,384,0.996,386,1.453,387,3.007,388,1.184,403,2.34,407,1.353,408,2.893,416,5.078,417,3.04,418,1.599,420,2.044,429,2.594,433,1.296,438,3.087,441,1.079,442,4.793,444,4.135,453,1.126,482,1.66,501,1.535,535,1.494,546,1.599,664,1.977,669,2.529,694,2.009,783,1.899,812,0.682,824,2.411,847,0.831,850,2.899,882,1.599,901,3.216,902,3.216,903,3.216,904,4.021,906,3.955,909,2.023,922,5.036,925,2.893,928,3.156,929,1.494,932,2.56,933,2.009,935,1.729,936,3.216,937,2.009,940,3.437,963,1.544,975,3.216,991,1.036,997,2.693,999,3.216,1002,1.808,1006,3.437,1014,4.297,1023,3.437,1024,3.437,1026,3.437,1028,3.437,1030,3.437,1032,3.437,1035,3.437,1037,2.147,1124,2.206,1129,1.899,1131,2.657,1184,1.367,1207,2.075,1245,2.009,1254,3.216,1273,2.332,1408,1.406,1449,1.729,1455,2.767,1525,2.332,1579,4.597,1596,1.808,1597,2.009,1624,1.296,1754,1.729,1838,1.899,1932,2.009,1981,3.437,1989,3.733,1996,2.147,2009,2.332,2040,5.836,2319,2.332,2321,1.808,2324,3.733,2376,2.332,2437,7.473,2438,5.364,2439,2.612,2440,5.228,2441,4.182,2442,2.612,2443,2.612,2444,2.612,2445,2.612,2446,2.612,2447,2.612,2448,7.323,2449,2.612,2450,2.612,2451,2.612,2452,5.976,2453,3.733,2454,3.216,2455,2.612,2456,2.612,2457,2.612,2458,3.733,2459,4.182,2460,2.612,2461,2.612,2462,2.612,2463,2.612,2464,2.612,2465,4.182,2466,2.332,2467,2.612,2468,2.612,2469,4.182,2470,2.612,2471,2.612,2472,2.147,2473,2.332,2474,2.612,2475,2.612,2476,2.612,2477,2.612,2478,1.808,2479,2.612,2480,1.899,2481,2.612,2482,2.612,2483,2.612,2484,2.612,2485,2.332,2486,2.332,2487,2.612,2488,2.612,2489,2.612,2490,2.612,2491,2.612,2492,5.976,2493,2.612,2494,2.612,2495,2.612,2496,2.612,2497,2.332,2498,2.147,2499,2.612,2500,2.612,2501,2.612,2502,2.612,2503,2.612,2504,2.612,2505,2.612,2506,2.612,2507,5.228,2508,2.612,2509,2.612,2510,2.612,2511,2.612,2512,2.612,2513,2.612,2514,2.332,2515,2.612,2516,2.612,2517,2.612,2518,4.182,2519,4.182,2520,2.612,2521,4.182,2522,2.612,2523,4.182,2524,4.182,2525,2.612,2526,4.182,2527,2.612,2528,2.612,2529,2.612,2530,2.612,2531,2.612,2532,2.332,2533,2.612,2534,2.612,2535,4.182,2536,4.182,2537,4.182,2538,4.182,2539,4.182,2540,4.182,2541,4.182,2542,5.228,2543,5.228,2544,4.182,2545,4.182,2546,3.733,2547,4.182,2548,4.182,2549,4.182,2550,5.976,2551,4.182,2552,5.228,2553,4.182,2554,2.612,2555,2.612,2556,2.612,2557,2.612,2558,4.182,2559,4.182,2560,4.182,2561,5.228,2562,4.182,2563,2.612,2564,4.182,2565,2.612,2566,4.182,2567,2.612,2568,2.612,2569,2.332,2570,2.612,2571,2.612,2572,2.612,2573,2.612,2574,2.612,2575,2.612,2576,2.612,2577,2.612,2578,2.612,2579,2.612]],["title/classes/LocalFileStorage.html",[33,0.201,2580,3.69]],["body/classes/LocalFileStorage.html",[3,0.062,4,0.069,5,0.055,13,0.228,17,0.966,19,0.654,20,0.378,21,0.006,23,2.337,30,0.069,31,0.004,32,0.004,33,0.221,35,1.026,45,0.568,48,0.964,50,0.197,95,1.546,112,2.579,143,1.618,146,1.906,149,1.764,280,3.404,281,2.146,282,2.16,317,2.278,387,2.645,388,1.496,407,1.711,420,1.923,438,1.772,668,2.846,853,2.329,926,3.028,1181,3.677,1188,3.236,1189,3.125,1834,5.223,1837,5.404,1838,5.737,1839,5.404,1841,5.775,1845,5.404,1847,4.345,1848,5.737,1849,6.733,1850,6.486,1851,6.113,1853,5.108,1854,3.36,1859,3.658,1863,4.066,1932,4.066,2325,4.719,2580,5.404,2581,4.719,2582,5.287,2583,5.287,2584,7.026,2585,5.287,2586,5.287,2587,5.287,2588,5.287,2589,5.287,2590,5.287,2591,5.287,2592,5.287,2593,5.287,2594,5.287,2595,5.287,2596,4.345,2597,7.026,2598,7.026,2599,5.287,2600,5.287,2601,5.287,2602,7.026,2603,4.719,2604,5.287,2605,5.287,2606,5.287,2607,5.287,2608,5.287,2609,4.719,2610,5.287,2611,5.287,2612,5.287,2613,5.287,2614,4.719,2615,5.287,2616,5.287,2617,5.287]],["title/injectables/LoggerConfigService.html",[383,1.038,2618,3.175]],["body/injectables/LoggerConfigService.html",[0,1.232,3,0.07,4,0.055,5,0.084,9,0.509,13,0.182,14,0.778,17,0.663,19,0.558,20,0.302,21,0.006,28,3.754,30,0.078,31,0.004,32,0.004,33,0.176,45,0.614,50,0.141,88,2.227,95,1.061,106,2.05,117,1.982,143,1.383,146,2.112,147,0.721,149,1.912,176,3.819,190,2.764,191,1.388,246,3.229,281,1.473,317,1.816,383,1.3,384,1.607,386,2.087,388,1.192,403,2.764,420,0.926,453,3.291,601,1.777,653,2.41,780,2.647,853,2.647,1008,2.707,1012,3.819,1065,2.146,1124,3.221,1152,3.24,1153,3.06,1159,5.364,1449,5.053,1539,6.209,1754,5.053,2141,5.387,2478,4.846,2618,3.977,2619,7.831,2620,6.816,2621,6.816,2622,6.816,2623,6.816,2624,6.816,2625,6.816,2626,6.816,2627,6.816,2628,6.816,2629,6.008,2630,6.816,2631,6.816,2632,4.213,2633,6.209,2634,4.213,2635,5.555,2636,4.213,2637,5.873,2638,4.213,2639,7.492,2640,4.213,2641,4.213,2642,4.213,2643,4.213,2644,4.213,2645,5.364,2646,4.213,2647,4.213,2648,5.364,2649,5.364,2650,4.368,2651,4.213,2652,5.364,2653,4.368,2654,5.364,2655,5.364,2656,4.939,2657,5.364,2658,5.364,2659,4.939,2660,4.939,2661,5.364,2662,5.364,2663,3.761,2664,3.761,2665,3.463,2666,3.463,2667,3.463,2668,3.463,2669,3.761,2670,3.463,2671,3.761,2672,3.761,2673,4.939,2674,4.939,2675,4.939,2676,4.939,2677,3.761,2678,3.761,2679,3.761,2680,3.761,2681,3.761,2682,3.761,2683,3.761,2684,3.761,2685,3.761]],["title/interfaces/LoggerConfiguration.html",[0,1.403,2633,3.69]],["body/interfaces/LoggerConfiguration.html",[0,1.432,2,2.368,3,0.078,4,0.064,5,0.079,13,0.211,14,0.864,19,0.567,20,0.389,21,0.006,28,3.892,30,0.087,31,0.004,32,0.004,33,0.205,50,0.157,88,2.014,106,1.67,117,1.385,147,0.838,149,1.971,176,3.111,190,2.499,191,1.612,246,3.757,317,2.11,383,1.443,386,1.7,403,2.334,420,1.075,453,2.875,601,2.065,780,2.939,853,2.156,1008,2.205,1012,3.111,1065,2.493,1124,3.438,1152,3.765,1153,2.493,1449,4.415,1539,6.559,1754,4.415,2141,6.559,2478,5.251,2618,3.239,2619,4.023,2620,4.369,2621,4.369,2622,4.369,2623,4.369,2624,4.369,2625,4.369,2626,4.369,2627,4.369,2628,4.369,2630,4.369,2631,4.369,2633,6.268,2635,5.022,2637,6.559,2639,7.855,2645,4.369,2648,4.369,2649,4.369,2650,3.558,2652,4.369,2653,3.558,2654,4.369,2655,7.612,2656,7.009,2657,7.612,2658,7.612,2659,7.009,2660,7.009,2661,5.955,2662,5.955,2663,4.369,2664,4.369,2665,4.023,2666,4.023,2667,4.023,2668,4.023,2669,4.369,2670,4.023,2671,4.369,2672,4.369,2673,5.483,2674,5.483,2675,5.483,2676,5.483,2677,4.369,2678,4.369,2679,4.369,2680,4.369,2681,4.369,2682,4.369,2683,4.369,2684,4.369,2685,4.369]],["title/modules/LoggerModule.html",[158,1.427,176,3.049]],["body/modules/LoggerModule.html",[3,0.077,4,0.085,5,0.069,21,0.006,30,0.085,31,0.005,32,0.005,33,0.274,50,0.214,147,1.122,158,2.597,160,2.766,161,3.172,162,3.339,163,3.339,164,2.954,165,4.123,166,4.123,176,6.339,183,4.107,184,3.339,185,3.339,567,2.905,1008,2.954,1338,4.766,2618,6.303,2686,5.852,2687,5.852,2688,5.852,2689,6.339,2690,6.106,2691,6.556,2692,5.043,2693,4.766]],["title/modules/MetricModule.html",[158,1.427,177,3.488]],["body/modules/MetricModule.html",[3,0.086,4,0.095,5,0.077,21,0.006,30,0.095,31,0.005,32,0.005,33,0.307,50,0.202,147,1.253,158,2.563,160,3.089,177,6.266,188,3.226,255,4.061,446,2.848,993,4.654,994,4.847,1124,3.089,1408,3.942,1449,4.847,2694,7.323,2695,7.323,2696,5.633,2697,7.323,2698,5.633,2699,7.323,2700,7.323]],["title/classes/NoneTrustPolicy.html",[33,0.201,78,2.661]],["body/classes/NoneTrustPolicy.html",[3,0.066,4,0.073,5,0.058,9,0.675,13,0.241,14,0.943,19,0.54,20,0.395,21,0.006,30,0.121,31,0.004,32,0.004,33,0.395,34,3.098,35,1.084,36,3.551,37,4.638,38,3.841,39,5.162,40,5.503,41,3.153,42,0.941,44,3.866,45,0.363,48,1.625,50,0.19,51,1.581,52,4.109,53,5.899,54,2.216,55,2.493,56,2.388,57,2.885,58,1.247,59,4.023,60,4.023,61,4.023,62,3.866,63,2.638,64,3.551,65,3.154,66,4.638,67,4.638,68,3.866,69,5.946,70,4.312,71,3.098,72,3.866,73,3.866,74,3.196,75,3.866,76,2.408,77,3.551,78,4.04,79,3.098,80,5.153,81,2.357,82,1.718,83,3.866,84,3.098,85,3.866,519,4.988,2701,5.588]],["title/classes/NotificationRequestDto.html",[33,0.201,2702,3.69]],["body/classes/NotificationRequestDto.html",[3,0.083,4,0.092,5,0.074,13,0.305,14,1.092,19,0.561,20,0.364,21,0.006,30,0.092,31,0.005,32,0.005,33,0.353,35,1.371,42,1.421,45,0.548,50,0.198,56,2.282,58,1.577,103,3.918,529,4.326,639,6.308,643,6.308,1251,5.003,1391,4.889,2702,6.49,2703,8.054,2704,9.022,2705,7.416,2706,7.067,2707,8.438,2708,7.067]],["title/classes/Oauth2AuthorizationServerResponse.html",[33,0.201,2709,3.488]],["body/classes/Oauth2AuthorizationServerResponse.html",[3,0.059,4,0.066,5,0.053,9,0.611,12,1.753,13,0.218,14,0.883,19,0.653,20,0.404,21,0.006,23,1.672,28,2.705,29,5.607,30,0.066,31,0.004,32,0.004,33,0.212,35,0.981,45,0.607,126,3.009,246,3.145,247,4.032,248,2.369,249,2.652,254,4.032,255,5.245,262,5.063,270,5.772,271,1.666,278,5.255,347,3.902,368,2.893,415,5.716,466,3.477,467,5.611,469,5.611,560,4.514,570,7.374,578,6.79,709,5.936,712,5.936,716,5.936,717,5.936,719,5.936,721,5.936,741,4.959,965,2.99,1283,6.26,1296,4.323,1485,5.716,1905,4.72,2253,4.515,2393,4.72,2709,4.959,2710,8.443,2711,5.058,2712,5.058,2713,8.886,2714,5.058,2715,5.058,2716,4.158,2717,5.058,2718,5.058,2719,6.821,2720,4.515]],["title/classes/OfferRequestDto.html",[33,0.201,2168,3.32]],["body/classes/OfferRequestDto.html",[3,0.058,4,0.065,5,0.052,9,0.99,12,1.275,13,0.214,14,1.061,16,1.746,17,1.015,19,0.612,20,0.411,21,0.006,30,0.088,31,0.004,32,0.004,33,0.343,35,0.963,41,3.436,42,1.488,45,0.597,50,0.201,51,1.404,52,3.104,55,2.635,56,1.933,57,2.179,58,1.107,81,3.932,88,2.175,93,1.475,100,3.157,102,1.275,103,2.751,104,2.567,110,2.426,117,1.906,125,3.008,268,5.556,271,2.217,497,2.093,507,2.86,511,3.125,529,3.037,539,2.342,567,3.183,597,2.235,632,5.058,714,3.104,771,4.857,796,4.456,805,3.069,837,2.217,895,4.429,1065,3.429,1146,5.179,1319,4.078,1651,5.534,2056,5.556,2168,4.658,2171,3.284,2178,3.284,2181,5.288,2182,4.078,2193,3.816,2202,6.304,2203,4.078,2721,7.428,2722,6.822,2723,4.961,2724,4.961,2725,4.961,2726,4.961,2727,4.961,2728,6.01,2729,4.961,2730,4.961,2731,5.179,2732,4.961,2733,4.961,2734,4.961,2735,4.961,2736,6.01,2737,6.01,2738,4.078,2739,4.429,2740,4.429,2741,4.429]],["title/classes/OfferResponse.html",[33,0.201,2171,3.175]],["body/classes/OfferResponse.html",[3,0.067,4,0.075,5,0.06,9,0.895,12,1.475,13,0.248,14,1.063,16,1.579,19,0.623,20,0.397,21,0.006,30,0.096,31,0.004,32,0.004,33,0.363,35,1.113,41,3.193,45,0.533,50,0.211,51,1.624,52,3.418,55,2.764,56,1.875,57,2.399,58,1.28,81,3.662,88,1.967,93,1.706,100,3.393,102,1.475,103,3.182,104,2.827,110,2.067,117,1.624,125,3.015,268,5.389,271,1.89,497,2.421,507,2.658,511,2.827,529,3.512,539,3.877,567,3.238,597,2.585,632,3.797,771,3.646,796,3.797,805,2.853,837,1.89,1065,2.922,1146,4.413,1651,4.716,2056,4.171,2168,3.97,2171,4.906,2178,3.797,2181,5.129,2182,4.716,2193,4.413,2202,5.702,2203,4.716,2721,6.75,2722,5.122,2728,5.122,2731,4.413,2736,5.122,2737,6.617,2738,4.716,2739,5.122,2740,5.122,2741,5.122,2742,5.738,2743,5.738]],["title/controllers/Oid4vciController.html",[139,1.501,2230,3.69]],["body/controllers/Oid4vciController.html",[3,0.058,4,0.064,5,0.051,9,0.594,12,2.318,13,0.212,17,0.84,20,0.369,21,0.006,30,0.064,31,0.004,32,0.004,33,0.206,42,1.282,45,0.494,48,1.22,50,0.221,82,2.059,95,1.443,102,1.265,116,1.952,128,5.037,139,2.38,141,1.741,143,1.542,146,1.937,147,0.842,148,3.128,149,1.713,194,2.729,255,4.737,280,3.427,281,1.865,282,2.059,287,4.868,298,2.442,315,3.257,317,2.121,318,1.958,420,1.081,446,2.603,498,5.089,507,2.765,510,3.128,511,2.553,531,3.405,536,3.322,555,2.323,560,4.431,567,3.61,571,5.322,586,3.257,589,2.649,590,5.265,591,3.785,597,2.217,601,2.076,824,2.269,892,3.013,1156,2.909,1307,4.099,1391,3.405,1790,4.431,2179,4.836,2180,3.578,2230,5.15,2689,3.128,2692,3.785,2702,6.282,2744,4.393,2745,4.921,2746,5.503,2747,4.921,2748,4.921,2749,4.921,2750,6.695,2751,4.921,2752,4.921,2753,4.921,2754,4.921,2755,4.921,2756,4.921,2757,4.045,2758,5.15,2759,4.921,2760,3.257,2761,4.921,2762,4.045,2763,3.785,2764,4.921,2765,4.921,2766,4.393,2767,4.921,2768,4.393,2769,4.921,2770,4.921,2771,4.921,2772,4.921,2773,4.921,2774,4.921,2775,4.921,2776,4.921,2777,4.921,2778,4.921,2779,4.045,2780,4.921]],["title/controllers/Oid4vpController.html",[139,1.501,2781,3.69]],["body/controllers/Oid4vpController.html",[3,0.055,4,0.061,5,0.049,9,0.57,12,2.423,13,0.204,17,0.822,19,0.433,20,0.322,21,0.006,30,0.061,31,0.004,32,0.004,33,0.198,42,1.255,45,0.483,48,1.186,50,0.217,95,1.418,102,1.214,116,1.873,139,2.33,141,1.671,143,1.499,146,2.116,147,0.808,148,3.001,149,1.562,194,2.619,255,3.609,271,2.144,278,4.201,280,3.586,281,1.826,287,4.732,298,3.23,304,2.285,315,3.126,317,2.035,318,2.546,388,1.337,420,1.43,506,4.965,527,5.903,531,4.504,536,3.23,537,3.406,555,2.23,560,4.308,567,3.597,571,5.393,589,2.542,590,5.554,591,3.632,601,1.992,620,5.554,655,4.978,890,3.315,1130,2.792,1164,4.322,1515,3.632,1790,4.93,2689,3.001,2692,3.632,2757,3.882,2758,5.007,2760,3.126,2762,3.882,2763,5.007,2766,4.216,2768,6.649,2781,5.729,2782,4.216,2783,4.723,2784,7.449,2785,7.449,2786,6.649,2787,4.723,2788,4.723,2789,4.723,2790,5.554,2791,4.723,2792,4.723,2793,4.723,2794,4.216,2795,4.723,2796,4.723,2797,4.216,2798,4.216,2799,4.723,2800,4.723,2801,5.811,2802,6.509,2803,4.216,2804,4.723]],["title/modules/Oid4vpModule.html",[158,1.427,2226,3.175]],["body/modules/Oid4vpModule.html",[3,0.07,4,0.078,5,0.063,21,0.006,30,0.078,31,0.005,32,0.005,33,0.251,50,0.229,141,2.699,147,1.027,158,2.495,160,2.533,161,2.904,162,3.058,163,3.058,164,2.705,165,3.961,166,3.961,171,5.329,178,4.85,179,5.702,183,3.887,184,3.058,185,3.058,188,3.362,203,3.973,209,4.618,210,4.364,655,5.828,2226,6.602,2228,5.92,2231,5.28,2232,3.329,2234,4.935,2689,5.92,2692,4.618,2763,4.618,2781,6.453,2798,5.359,2805,5.359,2806,6.003,2807,5.359,2808,5.359,2809,6.003,2810,7.489,2811,5.051,2812,5.359,2813,6.003]],["title/injectables/Oid4vpService.html",[383,1.038,655,2.836]],["body/injectables/Oid4vpService.html",[3,0.029,4,0.032,5,0.026,11,2.383,12,2.085,13,0.108,16,0.859,17,0.642,19,0.567,20,0.251,21,0.006,23,0.612,25,0.99,28,2.011,30,0.032,31,0.002,32,0.002,33,0.104,41,2.263,45,0.415,50,0.209,82,2.101,89,1.384,93,1.199,95,1.028,96,2.453,116,0.99,117,0.706,126,1.613,127,1.475,138,0.99,143,0.928,146,1.448,147,0.427,149,1.063,190,2.368,191,0.822,254,1.475,257,3.478,262,1.306,271,1.917,278,3.343,280,1.567,281,1.675,282,1.79,295,2.93,298,1.238,304,1.95,318,2.103,324,1.099,341,1.271,342,0.557,366,1.814,370,2.789,371,3.313,380,1.031,383,0.872,384,0.952,386,0.867,387,2.59,388,1.141,403,2.376,406,1.776,407,1.884,415,1.727,418,2.467,420,2.057,433,2,438,2.925,441,1.031,446,2.263,453,1.076,454,2.228,464,3.356,471,2.228,478,2.383,483,3.598,484,1.92,485,1.814,491,2,498,1.384,506,3.678,511,0.952,527,3.852,531,2.789,534,2.383,535,2.306,536,2,537,2.109,538,2.383,539,1.178,546,1.528,565,2.811,567,3.294,586,2.668,587,1.727,589,1.344,592,3.762,593,1.652,597,1.124,606,1.586,620,5.346,632,1.652,654,3.078,655,2.383,664,1.752,669,1.207,686,1.384,701,3.222,704,1.814,705,4.911,714,3.315,747,2.816,760,2.109,764,1.384,773,1.95,778,4.477,780,3.167,791,1.92,793,1.814,820,1.344,824,1.151,837,1.327,850,1.384,880,2.053,886,2.997,888,2.235,889,2.467,909,1.95,1008,1.124,1061,2.235,1166,1.814,1189,1.475,1207,2.888,1216,2.93,1269,2.228,1341,3.1,1372,2.228,1375,3.986,1394,1.428,1402,1.92,1403,1.344,1404,1.586,1410,2.228,1437,2.051,1454,2.051,1455,3.356,1463,1.814,1464,1.92,1468,1.814,1490,3.598,1495,4.232,1526,1.814,1531,2.051,1560,4.569,1626,3.1,1627,1.814,1813,2.228,1821,2.228,2056,2.93,2069,2.228,2171,1.652,2228,4.569,2234,2.051,2262,4.06,2472,2.051,2569,2.228,2635,3.852,2690,3.563,2693,1.814,2746,5.251,2760,3.356,2763,3.1,2786,3.598,2790,5.177,2794,3.598,2797,2.228,2814,2.228,2815,5.07,2816,5.07,2817,4.569,2818,4.569,2819,2.496,2820,2.496,2821,2.496,2822,3.598,2823,3.313,2824,3.313,2825,2.496,2826,4.477,2827,5.702,2828,2.496,2829,2.496,2830,4.031,2831,2.496,2832,2.051,2833,2.051,2834,2.051,2835,1.92,2836,3.222,2837,2.496,2838,2.496,2839,2.051,2840,2.496,2841,4.913,2842,2.562,2843,3.1,2844,3.313,2845,2.228,2846,4.031,2847,6.388,2848,5.196,2849,4.031,2850,5.07,2851,2.496,2852,4.031,2853,6.388,2854,2.496,2855,4.031,2856,2.496,2857,2.496,2858,2.496,2859,2.051,2860,2.228,2861,2.496,2862,2.496,2863,2.496,2864,2.496,2865,6.388,2866,3.313,2867,2.496,2868,2.496,2869,2.496,2870,2.496,2871,2.496,2872,2.496,2873,2.496,2874,2.496,2875,2.496,2876,2.496,2877,2.496,2878,2.496,2879,2.496,2880,4.031,2881,4.031,2882,2.496,2883,2.496,2884,2.496,2885,2.496,2886,2.496,2887,2.496,2888,2.496,2889,2.496,2890,2.228,2891,2.228,2892,2.496,2893,2.051,2894,2.228,2895,2.496,2896,2.496,2897,4.031,2898,2.496,2899,5.821,2900,2.051,2901,2.496,2902,2.051,2903,2.051,2904,2.496,2905,2.496,2906,2.496,2907,2.496,2908,4.031,2909,4.031,2910,6.388,2911,5.07,2912,2.496,2913,2.496,2914,2.496,2915,4.031,2916,2.496,2917,2.496,2918,4.526,2919,2.496,2920,2.496,2921,4.031,2922,4.031,2923,3.598,2924,4.031,2925,4.031,2926,2.496,2927,4.031,2928,2.496,2929,2.496,2930,4.031,2931,2.228,2932,2.496,2933,2.496,2934,1.814,2935,2.496,2936,2.496,2937,4.031,2938,2.496,2939,5.07,2940,1.92,2941,2.496,2942,4.031,2943,2.496,2944,2.496,2945,4.031,2946,4.031,2947,2.496,2948,2.496,2949,2.228,2950,2.496,2951,2.496,2952,2.496,2953,2.496,2954,2.496,2955,2.051,2956,2.496,2957,2.496,2958,2.496,2959,2.496]],["title/classes/ParResponseDto.html",[33,0.201,598,3.69]],["body/classes/ParResponseDto.html",[3,0.082,4,0.091,5,0.073,12,2.487,13,0.303,14,1.087,19,0.559,20,0.363,21,0.006,30,0.091,31,0.005,32,0.005,33,0.294,35,1.361,45,0.545,278,4.395,331,6.537,368,4.011,462,4.805,539,4.401,578,6.904,598,6.46,606,5.715,884,3.331,1456,6.904,1457,7.498,2716,5.764,2720,6.259,2960,8.027]],["title/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.403,693,3.488]],["body/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.364,2,1.452,3,0.035,4,0.039,5,0.031,12,2.052,13,0.13,14,0.604,19,0.568,20,0.319,21,0.006,22,1.24,30,0.061,31,0.003,32,0.003,33,0.126,41,1.814,48,0.547,50,0.209,65,1.102,82,0.923,88,1.238,90,2.702,93,0.892,107,3.503,110,2.326,116,2.56,117,0.849,125,1.712,126,2.053,129,2.839,138,2.56,147,0.514,149,1.552,190,1.885,191,0.988,194,1.664,257,1.452,262,1.571,265,3.173,271,2.544,280,2.718,282,1.435,294,1.616,336,2.182,338,2.182,370,3.228,379,2.718,383,1.009,387,2.589,388,0.849,403,2.276,406,3.403,407,2.655,411,2.441,414,3.588,416,1.664,420,2.1,433,1.489,438,3.083,446,2.225,452,2.076,453,1.293,457,1.907,464,1.986,466,2.578,467,2.182,469,2.182,473,2.308,478,2.758,491,3.469,497,1.266,500,4.179,504,2.856,505,1.774,506,1.616,507,1.51,511,2.182,513,2.587,561,2.308,565,3.579,566,4.102,567,3.373,571,1.717,574,2.182,575,3.392,586,3.788,587,2.076,589,1.616,592,2.995,593,1.986,594,1.837,596,2.308,597,1.352,606,3.637,620,3.96,625,4.965,629,2.182,645,2.308,646,2.308,648,2.467,650,2.467,652,2.467,654,2.578,655,3.383,656,3.503,662,2.467,664,1.585,665,5.305,670,2.467,674,2.467,678,4.443,679,6.083,680,5.305,681,5.305,682,2.976,683,2.467,684,5.305,685,2.182,686,1.664,687,2.467,688,2.467,689,2.308,690,2.308,691,2.182,692,2.467,693,4.16,694,5.377,695,3.392,696,2.467,697,2.467,698,3.835,699,2.467,700,3.835,701,2.965,702,3.287,703,5.305,704,4.692,705,4.909,706,5.305,707,2.467,708,2.467,709,2.308,710,2.467,711,2.467,712,2.308,713,4.704,714,1.384,715,1.986,716,2.308,717,2.308,718,2.467,719,2.308,720,2.467,721,2.308,722,2.467,723,2.467,724,3.835,725,2.467,726,2.308,727,2.467,728,2.467,729,4.375,730,2.467,731,2.467,732,2.467,733,2.467,734,2.467,735,4.704,736,4.402,737,4.402,738,2.467,739,5.305,740,3.835,741,5.615,742,2.467,743,3.835,744,3.835,745,3.835,746,3.835,747,2.257,748,3.835,749,2.467,750,2.467,751,2.467,752,2.467,753,2.467,754,2.467,755,2.467,756,3.835,757,2.467,758,2.467,759,1.774,760,1.571,761,2.467,762,2.308,763,2.467,764,1.664,765,2.467,766,2.467,767,2.308,768,2.467,769,2.467,770,4.704,771,3.637,772,2.467,773,1.452,774,3.835,775,2.467,776,2.467,777,2.467,778,2.308,779,2.467,780,2.521,781,2.467,782,2.467,783,2.182,784,2.467,785,3.835,786,2.467,787,3.835,788,2.441,789,2.467,790,4.704,791,2.308,792,2.467,793,2.182,794,2.467,795,2.467,796,1.986,797,2.076,798,2.467,799,2.467,800,4.402,801,2.467,802,2.467,803,2.467,804,4.704,805,1.042,806,2.308,807,2.467,808,4.402,809,2.467,810,2.467,811,2.467]],["title/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.403,695,3.488]],["body/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.357,2,1.441,3,0.035,4,0.039,5,0.031,12,2.047,13,0.129,14,0.601,17,0.512,19,0.584,20,0.333,21,0.006,22,1.231,30,0.06,31,0.003,32,0.003,33,0.125,41,1.804,48,0.543,50,0.208,65,1.094,82,0.916,88,1.231,90,2.689,93,0.886,107,3.487,110,2.316,116,2.55,117,0.843,125,1.703,126,2.045,129,2.826,138,2.55,147,0.51,149,1.547,190,1.876,191,0.981,194,1.652,257,1.441,262,1.559,265,3.158,271,2.537,280,2.709,282,1.426,294,1.604,336,2.166,338,2.166,370,3.209,379,2.709,383,1.003,387,2.582,388,0.843,403,2.269,406,3.394,407,2.649,411,2.427,414,3.568,416,1.652,420,2.098,433,1.478,438,3.079,446,2.215,452,2.061,453,1.284,457,1.893,464,1.972,466,2.566,467,2.166,469,2.166,473,2.291,478,2.742,491,3.457,497,1.257,500,3.646,504,2.839,505,1.761,506,1.604,507,1.501,511,2.172,513,2.572,561,2.291,565,3.565,566,4.086,567,3.369,571,1.704,574,2.166,575,3.372,586,3.77,587,2.061,589,1.604,592,2.981,593,1.972,594,1.824,596,2.291,597,1.342,606,3.62,620,3.941,625,4.945,629,2.166,645,2.291,646,2.291,648,2.449,650,2.449,652,2.449,654,2.566,655,3.367,656,3.487,662,2.449,664,1.579,665,5.284,670,2.449,674,2.449,678,4.427,679,5.284,680,5.284,681,5.284,682,2.964,683,2.449,684,6.065,685,2.166,686,1.652,687,2.449,688,2.449,689,2.291,690,2.291,691,2.166,692,2.449,693,3.372,694,5.358,695,4.141,696,5.284,697,5.284,698,3.813,699,2.449,700,3.813,701,2.948,702,3.274,703,5.284,704,4.674,705,4.896,706,5.284,707,2.449,708,2.449,709,2.291,710,2.449,711,2.449,712,2.291,713,4.682,714,1.373,715,1.972,716,2.291,717,2.291,718,2.449,719,2.291,720,2.449,721,2.291,722,2.449,723,2.449,724,3.813,725,2.449,726,2.291,727,2.449,728,2.449,729,4.361,730,2.449,731,2.449,732,2.449,733,2.449,734,2.449,735,4.682,736,4.381,737,4.381,738,2.449,739,5.284,740,3.813,741,5.6,742,2.449,743,3.813,744,3.813,745,3.813,746,3.813,747,2.244,748,3.813,749,2.449,750,2.449,751,2.449,752,2.449,753,2.449,754,2.449,755,2.449,756,3.813,757,2.449,758,2.449,759,1.761,760,1.559,761,2.449,762,2.291,763,2.449,764,1.652,765,2.449,766,2.449,767,2.291,768,2.449,769,2.449,770,4.682,771,3.62,772,2.449,773,1.441,774,3.813,775,2.449,776,2.449,777,2.449,778,2.291,779,2.449,780,2.509,781,2.449,782,2.449,783,2.166,784,2.449,785,3.813,786,2.449,787,3.813,788,2.427,789,2.449,790,4.682,791,2.291,792,2.449,793,2.166,794,2.449,795,2.449,796,1.972,797,2.061,798,2.449,799,2.449,800,4.381,801,2.449,802,2.449,803,2.449,804,4.682,805,1.035,806,2.291,807,2.449,808,4.381,809,2.449,810,2.449,811,2.449]],["title/classes/PolicyCredential.html",[33,0.201,80,3.049]],["body/classes/PolicyCredential.html",[3,0.063,4,0.07,5,0.056,9,0.649,13,0.232,14,0.919,17,0.934,19,0.529,20,0.409,21,0.006,30,0.12,31,0.004,32,0.004,33,0.392,34,2.979,35,1.042,36,3.414,37,4.55,38,3.648,39,4.88,40,5.202,41,3.093,42,1.34,45,0.516,48,1.604,50,0.187,51,1.521,52,4.058,53,5.824,54,2.131,55,2.446,56,2.368,57,2.848,58,1.199,59,4.199,60,4.199,61,4.199,62,3.717,63,2.537,64,3.414,65,2.92,66,4.55,67,4.841,68,3.717,69,5.856,70,4.258,71,2.979,72,3.717,73,3.717,74,3.073,75,3.717,76,2.316,77,3.414,78,2.979,79,2.979,80,5.378,81,3.356,82,2.446,83,5.504,84,2.979,85,3.717,236,4.796,237,6.118,2961,7.101,2962,5.373,2963,5.373,2964,5.373]],["title/classes/PresentationAttachment.html",[33,0.201,862,2.836]],["body/classes/PresentationAttachment.html",[3,0.045,4,0.05,5,0.04,7,1.667,9,0.806,12,2.218,13,0.167,14,0.731,16,1.563,17,0.736,19,0.629,20,0.408,21,0.006,25,2.91,26,1.743,27,1.475,28,2.24,30,0.112,31,0.003,32,0.003,33,0.374,35,0.75,41,2.196,42,1.124,45,0.433,48,1.701,50,0.198,51,1.095,52,4.124,54,1.534,55,2.846,56,2.293,57,2.793,58,0.863,59,1.919,60,3.311,61,3.311,70,3.944,76,2.435,81,1.632,82,1.189,88,1.499,100,2.333,102,0.994,104,2.154,106,1.32,110,2.035,116,1.534,125,2.449,126,1.23,248,1.343,271,1.274,342,1.489,377,4.388,378,1.826,379,2.595,380,2.757,382,2.082,446,2.853,462,2.212,497,1.632,507,1.828,534,4.338,535,4.198,536,3.873,537,3.84,538,3.945,549,2.212,552,3.492,584,1.667,588,4.338,597,1.743,664,0.877,764,2.145,773,1.871,788,2.024,805,1.343,812,1.742,818,1.919,819,1.97,820,3.041,821,3.231,823,3.231,824,1.783,827,3.465,829,2.383,831,2.198,833,2.333,834,1.598,836,1.632,837,1.274,841,3.231,843,2.145,844,2.145,845,1.565,846,2.333,847,1.23,848,1.565,849,2.815,850,3.7,851,4.492,852,2.212,853,2.488,855,2.803,856,4.241,857,2.956,858,3.7,859,2.458,860,4.664,861,3.458,862,4.338,863,4.241,864,4.664,865,2.458,866,2.458,867,3.945,868,2.458,869,2.458,870,2.458,871,2.458,872,2.286,873,2.458,874,2.458,875,3.59,876,2.082,877,4.338,878,2.458,879,2.458,880,2.877,881,2.458,882,2.368,883,2.024,884,1.534,885,3.383,886,2.286,887,2.212,888,2.145,889,2.368,890,1.97,891,2.458,892,2.368,1053,3.452,2965,3.867,2966,3.867,2967,3.867]],["title/entities/PresentationConfig.html",[773,2.321,812,1.253]],["body/entities/PresentationConfig.html",[3,0.038,4,0.043,5,0.034,7,2.153,9,0.926,12,2.367,13,0.142,14,0.647,16,1.698,17,0.977,19,0.617,20,0.414,21,0.006,25,1.981,26,2.251,27,1.905,28,1.981,30,0.107,31,0.003,32,0.003,33,0.36,41,1.942,42,1.471,45,0.567,48,1.691,50,0.187,51,0.928,52,3.96,54,1.301,55,2.755,56,2.173,57,2.66,58,0.732,59,1.628,60,3.002,61,3.002,70,3.71,76,2.153,81,1.384,82,1.009,88,1.795,100,2.064,102,0.843,104,1.905,106,1.704,110,2.623,116,1.301,125,2.483,126,1.589,248,1.14,271,1.645,342,1.78,377,4.766,378,2.359,379,2.982,380,1.355,382,2.689,446,2.63,462,2.858,497,1.384,507,1.617,534,3.998,535,3.869,536,3.805,537,3.54,538,3.576,549,2.858,552,3.166,584,1.414,588,4.303,597,1.478,664,1.371,764,2.77,773,2.417,788,2.614,805,1.735,812,1.766,814,1.549,818,3.002,819,3.081,820,3.641,821,3.461,823,3.869,824,2.303,825,3.175,827,3.88,829,2.854,831,2.228,832,1.819,833,2.794,834,2.064,836,2.107,837,1.645,841,3.461,843,2.77,844,2.77,845,1.328,846,2.064,847,1.044,848,1.328,849,2.552,850,3.355,851,5.42,852,1.876,853,2.201,855,2.479,856,3.175,857,2.614,858,3.751,859,2.085,860,4.874,861,2.008,862,3.998,863,2.085,864,4.299,865,2.085,866,2.085,867,3.576,868,2.085,869,2.085,870,2.085,871,2.085,872,1.939,873,2.085,874,2.085,875,3.175,876,1.766,877,4.533,878,2.085,879,3.175,880,3.707,881,3.175,882,3.058,883,1.717,884,1.981,885,3.119,886,3.576,887,2.858,888,2.77,889,3.704,890,2.544,891,2.085,892,3.058,1066,2.385,1070,2.928,1103,2.696,1107,2.523,2061,2.928,2075,2.928,2968,3.28,2969,3.28,2970,3.28,2971,3.28,2972,3.28,2973,3.28,2974,3.28,2975,3.28,2976,3.28,2977,3.28,2978,3.28,2979,3.28,2980,3.28,2981,3.28]],["title/classes/PresentationConfigCreateDto.html",[33,0.201,2982,3.488]],["body/classes/PresentationConfigCreateDto.html",[3,0.084,4,0.093,5,0.075,14,0.929,21,0.006,30,0.093,31,0.005,32,0.005,33,0.301,35,1.393,38,3.671,50,0.2,63,3.389,102,1.845,117,2.411,342,1.901,369,3.757,379,2.791,420,1.871,617,5.521,664,1.931,773,3.473,818,4.226,819,4.338,909,3.473,1048,4.394,1134,5.521,2982,6.192,2983,6.408,2984,8.517,2985,5.9]],["title/classes/PresentationDuringIssuanceConfig.html",[33,0.201,508,3.049]],["body/classes/PresentationDuringIssuanceConfig.html",[0,1.576,3,0.063,4,0.07,5,0.056,9,0.651,12,1.829,13,0.233,14,0.921,17,0.595,19,0.53,20,0.404,21,0.006,30,0.12,31,0.004,32,0.004,33,0.386,35,1.046,42,0.908,45,0.35,50,0.187,51,1.525,54,2.137,55,2.188,56,2.334,57,2.742,58,1.203,65,3.11,79,2.988,88,2.401,90,4.272,97,3.624,104,3.038,105,2.744,106,2.891,110,2.564,112,2.924,117,2.014,125,2.924,126,2.534,138,3.494,257,4.099,379,3.295,487,3.299,488,4.522,489,3.425,490,5.385,491,4.578,492,5.063,497,2.273,498,3.945,499,4.923,500,3.724,501,1.978,502,4.923,503,3.728,504,3.299,505,5.207,506,3.83,507,2.303,508,5.385,509,4.923,510,4.522,511,2.713,512,4.522,513,2.988,514,3.728,515,3.728,516,3.299,517,3.425,518,3.566,2986,5.389]],["title/controllers/PresentationManagementController.html",[139,1.501,2987,3.69]],["body/controllers/PresentationManagementController.html",[3,0.045,4,0.05,5,0.04,9,0.464,12,2.353,13,0.166,16,1.732,17,0.807,19,0.487,20,0.395,21,0.006,25,1.524,30,0.05,31,0.003,32,0.003,33,0.161,41,1.494,42,1.232,45,0.475,50,0.215,88,2.158,89,3.118,93,1.977,95,1.292,97,2.863,102,0.988,110,1.385,117,2.204,127,2.272,139,1.202,141,1.359,143,1.294,146,1.992,147,0.658,149,1.394,194,2.131,246,3.065,248,1.335,249,2.845,268,4.087,271,2.894,280,3.267,281,1.793,298,3.299,299,4.087,301,4.621,302,2.543,318,2.277,321,5.114,324,2.477,379,3.417,387,2.228,388,1.088,403,1.729,411,2.011,420,1.235,438,1.884,446,1.494,500,3.479,501,3.393,539,2.654,555,1.814,565,4.51,571,4.185,597,2.533,601,2.372,609,2.956,632,4.4,655,3.93,837,1.266,844,3.118,907,4.587,909,2.72,911,2.543,926,1.656,928,1.656,930,2.131,956,2.543,1062,3.216,1140,3.216,1156,3.324,1163,2.942,1180,3.442,1181,2.942,1192,2.659,1240,2.956,1335,2.442,1336,2.442,1337,2.442,1448,4.07,1596,2.659,1848,2.794,1873,3.159,2105,5.627,2166,5.935,2169,3.43,2170,5.019,2171,4.4,2172,4.833,2173,3.43,2174,3.43,2177,3.159,2178,4.4,2181,2.659,2184,3.43,2185,3.43,2186,5.019,2187,2.956,2188,6.531,2189,3.43,2190,5.465,2191,3.159,2192,5.019,2193,5.114,2194,3.43,2211,5.019,2212,3.43,2213,3.43,2214,3.43,2215,3.43,2216,3.43,2790,4.6,2801,3.43,2803,3.43,2818,4.225,2833,3.159,2839,3.159,2934,4.087,2982,5.319,2987,4.324,2988,3.43,2989,5.622,2990,5.935,2991,3.843,2992,3.843,2993,3.843,2994,3.843,2995,3.843,2996,6.255,2997,3.843,2998,3.843,2999,3.843,3000,3.843,3001,3.843,3002,3.843,3003,3.43,3004,3.843,3005,3.843,3006,3.843,3007,5.622,3008,3.843,3009,3.843,3010,3.843,3011,3.843,3012,3.843,3013,3.843,3014,3.843,3015,3.843,3016,3.843,3017,3.843,3018,3.843]],["title/classes/PresentationRequest.html",[33,0.201,2996,3.69]],["body/classes/PresentationRequest.html",[3,0.066,4,0.073,5,0.059,9,0.679,12,2.396,13,0.243,14,0.947,16,1.558,17,0.807,19,0.487,20,0.419,21,0.006,27,2.79,30,0.095,31,0.004,32,0.004,33,0.306,35,1.091,42,1.37,45,0.528,50,0.172,55,2.25,56,2.057,58,1.255,88,2.429,89,4.057,103,3.118,104,2.79,105,3.726,106,2.775,110,3.359,125,2.985,129,3.63,271,3.198,369,3.829,378,3.454,379,3.625,497,2.372,500,2.942,529,3.442,539,3.84,632,5.383,635,5.019,638,5.019,890,3.726,1012,4.65,2178,4.842,2181,5.627,2190,4.621,2731,6.255,2738,6.014,2790,5.627,2934,5.319,2996,5.627,3019,6.625,3020,5.622,3021,5.622,3022,7.26,3023,6.014,3024,5.019]],["title/interfaces/PresentationRequestOptions.html",[0,1.403,2826,3.69]],["body/interfaces/PresentationRequestOptions.html",[0,1.989,2,3.291,3,0.08,4,0.088,5,0.071,9,0.821,12,2.281,13,0.294,14,1.068,17,1.082,19,0.591,20,0.356,21,0.006,27,3.145,30,0.088,31,0.005,32,0.005,50,0.16,88,2.188,110,3.461,125,3.387,271,2.716,369,4.316,497,2.869,567,3.461,890,4.2,2826,7.097,3019,5.232,3025,6.072,3026,7.361]],["title/modules/PresentationsModule.html",[158,1.427,2811,3.175]],["body/modules/PresentationsModule.html",[3,0.075,4,0.083,5,0.067,21,0.006,30,0.083,31,0.005,32,0.005,33,0.267,50,0.228,63,3.014,141,2.806,147,1.092,158,2.566,160,2.693,161,3.088,162,3.251,163,3.251,164,2.876,165,4.074,166,4.074,183,4.039,184,3.251,185,3.251,188,3.494,773,3.088,990,3.651,991,2.532,2226,5.249,2231,5.488,2232,3.54,2810,7.08,2811,6.469,2818,6.317,2985,5.247,2987,6.637,3003,5.698,3027,5.698,3028,5.698,3029,5.698,3030,5.698,3031,6.878,3032,6.383,3033,5.698,3034,6.383,3035,6.383,3036,6.383]],["title/injectables/PresentationsService.html",[383,1.038,2818,3.049]],["body/injectables/PresentationsService.html",[3,0.023,4,0.026,5,0.059,7,2.632,9,0.823,12,0.856,13,0.085,14,0.431,16,2.04,17,0.717,19,0.621,20,0.325,21,0.006,22,1.78,23,0.485,30,0.026,31,0.002,32,0.002,33,0.18,41,0.77,45,0.511,48,1.113,50,0.211,51,0.56,58,0.442,63,0.935,76,1.435,88,2.244,93,1.503,95,1.294,96,1.611,112,0.727,117,1.728,135,0.982,143,0.767,146,1.895,147,0.339,149,1.754,188,2.226,190,2.138,191,0.652,199,1.066,200,1.098,248,0.688,271,1.097,274,1.31,281,1.796,282,2.421,304,0.958,318,2.543,324,2.226,342,1.906,366,3.674,371,2.737,377,1.793,379,3.381,380,2.816,383,0.72,384,0.755,386,1.157,387,2.525,388,1.43,403,2.504,406,1.899,407,2.295,412,1.439,420,1.975,433,1.652,438,2.525,441,2.93,453,0.853,531,2.304,536,1.652,537,1.743,539,2.883,560,2.204,565,2.802,584,1.435,610,4.439,654,1.942,664,2,678,1.258,682,2.33,714,1.535,715,4.297,729,1.969,747,3.939,773,3.545,780,1.467,788,2.644,797,3.496,805,1.497,812,1.595,814,1.572,818,0.982,853,1.467,861,2.638,887,3.493,925,2.304,926,2.429,991,0.785,995,2.987,997,2.751,1008,1.942,1060,2.421,1124,2.576,1130,3.838,1131,2.116,1140,4.192,1153,2.574,1156,4.029,1163,1.743,1164,1.793,1165,5.603,1166,1.439,1170,3.093,1174,1.37,1179,3.674,1180,1.212,1181,1.036,1183,2.421,1184,1.036,1185,2.204,1186,1.258,1187,1.258,1188,1.212,1189,1.17,1192,1.37,1194,1.258,1195,1.258,1196,2.304,1198,3.344,1199,1.37,1200,1.258,1201,2.116,1202,1.258,1203,1.258,1204,1.258,1205,1.258,1206,3.133,1207,1.652,1208,1.37,1209,1.37,1210,2.039,1211,1.31,1212,1.37,1213,3.738,1214,2.039,1215,1.439,1216,1.439,1217,1.439,1218,1.523,1219,1.627,1220,1.439,1222,2.304,1223,2.421,1224,1.523,1225,2.421,1226,1.523,1227,1.523,1229,1.31,1230,1.31,1231,1.523,1232,1.31,1233,1.31,1234,1.258,1235,1.31,1236,1.31,1237,1.258,1238,1.31,1239,1.31,1251,1.847,1260,1.258,1261,1.37,1262,1.212,1263,1.37,1264,1.969,1265,1.17,1266,1.17,1268,1.31,1276,1.31,1277,1.37,1296,1.743,1375,2.802,1392,3.847,1394,4.783,1395,1.523,1396,1.523,1399,5.796,1400,1.523,1401,4.72,1402,1.523,1403,1.066,1404,1.258,1442,2.973,1459,3.847,1466,1.31,1499,5.933,1501,1.31,1503,6.056,1614,2.304,1619,1.37,1624,0.982,1625,1.31,1745,3.881,1756,1.439,1790,3.344,2020,1.439,2021,1.439,2022,1.439,2023,1.439,2232,1.098,2321,1.37,2402,4.907,2432,1.258,2653,2.421,2779,2.737,2818,3.211,2839,1.627,2982,4.098,2985,1.627,2990,3.847,3037,1.767,3038,3.33,3039,6.816,3040,6.493,3041,4.31,3042,5.053,3043,3.33,3044,4.31,3045,3.33,3046,4.31,3047,4.31,3048,1.523,3049,5.07,3050,5.053,3051,3.33,3052,3.33,3053,2.973,3054,3.33,3055,3.33,3056,1.98,3057,3.33,3058,3.33,3059,1.98,3060,1.98,3061,3.33,3062,1.98,3063,1.98,3064,5.053,3065,4.511,3066,1.98,3067,1.98,3068,5.636,3069,5.053,3070,1.98,3071,3.33,3072,3.33,3073,1.98,3074,5.636,3075,1.98,3076,1.98,3077,1.98,3078,5.053,3079,1.98,3080,3.33,3081,1.98,3082,3.33,3083,1.98,3084,3.33,3085,1.439,3086,1.31,3087,1.98,3088,1.98,3089,1.98,3090,3.33,3091,1.98,3092,1.98,3093,1.98,3094,4.31,3095,1.98,3096,3.33,3097,1.98,3098,1.98,3099,1.523,3100,1.627,3101,1.98,3102,1.98,3103,1.98,3104,1.98,3105,1.98,3106,1.98,3107,1.98,3108,1.98,3109,1.98,3110,1.98,3111,1.98,3112,1.98,3113,1.98,3114,1.98,3115,1.98,3116,3.33,3117,1.98,3118,1.98,3119,3.33,3120,1.767,3121,1.98,3122,1.98,3123,1.98,3124,1.98,3125,1.98,3126,4.31,3127,1.98,3128,1.98,3129,1.98,3130,1.98,3131,3.33,3132,1.523,3133,1.98]],["title/entities/RegistrarEntity.html",[812,1.253,3134,3.488]],["body/entities/RegistrarEntity.html",[3,0.076,4,0.084,5,0.067,13,0.278,14,1.034,19,0.631,20,0.391,21,0.006,30,0.084,31,0.005,32,0.005,33,0.27,42,1.526,45,0.588,48,1.651,50,0.187,342,2.078,664,1.965,812,2.085,814,3.046,825,5.51,829,3.368,831,2.984,832,3.577,833,3.743,834,3.298,836,3.368,837,2.629,845,2.611,846,3.298,847,2.052,848,2.611,849,3.658,3134,5.804,3135,5.759,3136,7.739,3137,7.739,3138,6.451,3139,6.451,3140,6.451,3141,6.451]],["title/modules/RegistrarModule.html",[158,1.427,178,3.049]],["body/modules/RegistrarModule.html",[3,0.073,4,0.081,5,0.065,9,0.754,21,0.006,30,0.081,31,0.005,32,0.005,33,0.261,50,0.221,147,1.068,158,2.54,160,3.603,161,3.019,162,3.178,163,3.178,164,2.812,165,4.032,166,4.032,171,5.381,178,6.325,183,3.983,184,3.178,185,3.178,188,3.944,203,4.13,258,6.428,386,2.717,888,4.336,990,3.57,991,2.475,1153,3.983,1573,5.411,2811,6.226,2817,6.347,3134,4.537,3142,5.571,3143,5.571,3144,5.571,3145,6.241,3146,6.241,3147,6.428,3148,6.241,3149,5.571,3150,6.241,3151,6.241]],["title/injectables/RegistrarService.html",[383,1.038,2817,3.049]],["body/injectables/RegistrarService.html",[3,0.027,4,0.03,5,0.024,7,3.815,9,0.586,11,5.188,13,0.101,14,0.495,16,1.316,17,0.772,19,0.612,20,0.326,21,0.006,24,1.432,28,0.928,30,0.03,31,0.002,32,0.003,33,0.098,41,1.487,45,0.536,48,0.697,50,0.191,74,3.793,82,1.176,88,1.639,89,2.121,95,1.536,106,1.305,112,0.859,117,0.662,138,0.928,143,0.881,146,1.873,147,0.4,149,1.733,190,2.488,191,0.771,248,0.813,249,2.578,256,4.605,262,1.224,270,3.561,271,0.771,280,1.886,281,1.715,282,1.723,285,2.431,292,3.987,294,2.059,318,1.939,342,1.561,343,2.261,346,1.923,383,0.827,384,0.892,386,1.946,387,2.942,388,1.586,402,1.383,403,2.722,406,2.137,407,2.628,410,2.942,411,2.539,416,2.121,417,2.781,420,1.784,438,2.769,446,2.179,453,1.648,457,1.487,491,1.898,530,3.144,537,2.002,560,2.531,565,2.121,571,2.188,588,1.383,597,1.054,653,1.338,654,3.501,664,1.873,669,1.132,686,1.297,762,1.8,780,1.685,788,2.002,800,1.8,817,5.001,820,2.059,824,3.226,831,1.845,847,0.744,848,0.947,853,2.137,858,3.107,884,0.928,886,3.312,887,4.551,888,2.121,982,1.338,991,0.928,997,2.524,1061,2.69,1124,1.614,1130,3.919,1140,2.188,1153,1.948,1155,2.646,1156,1.383,1163,2.002,1175,2.646,1179,2.781,1180,4.059,1181,3.47,1184,1.224,1207,1.161,1213,1.432,1258,2.942,1341,2.942,1381,4.073,1408,3.016,1449,3.708,1450,1.8,1455,1.548,1468,2.781,1484,1.923,1501,1.548,1504,1.487,1515,2.942,1544,2.089,1573,2.646,1589,1.701,1593,1.701,1665,2.089,1790,2.531,1795,3.144,1814,3.987,1981,3.144,2034,5.919,2035,2.089,2250,2.089,2323,2.089,2333,2.942,2374,4.605,2430,3.414,2432,2.431,2438,5.1,2458,2.089,2466,4.33,2480,1.701,2498,1.923,2532,5.919,2603,2.089,2779,1.923,2790,3.877,2817,4.214,2818,4.938,2848,2.089,2940,1.8,3023,4.605,3134,1.701,3136,3.414,3137,6.246,3147,7.625,3149,2.089,3152,2.089,3153,3.825,3154,8.388,3155,3.825,3156,6.997,3157,4.851,3158,4.851,3159,3.825,3160,3.825,3161,5.001,3162,5.603,3163,4.851,3164,3.825,3165,2.942,3166,3.825,3167,2.34,3168,2.34,3169,2.34,3170,2.34,3171,3.825,3172,2.34,3173,3.825,3174,8.119,3175,3.825,3176,2.34,3177,2.34,3178,3.144,3179,2.34,3180,2.34,3181,3.414,3182,3.825,3183,2.34,3184,5.603,3185,2.34,3186,3.825,3187,3.825,3188,3.825,3189,2.34,3190,5.603,3191,2.34,3192,2.089,3193,2.34,3194,2.34,3195,3.825,3196,3.825,3197,3.825,3198,3.825,3199,3.825,3200,2.34,3201,2.34,3202,3.414,3203,2.34,3204,2.34,3205,3.825,3206,2.089,3207,2.089,3208,2.34,3209,2.34,3210,2.34,3211,2.34,3212,2.34,3213,2.34,3214,6.63,3215,2.34,3216,2.34,3217,3.825,3218,3.825,3219,3.825,3220,2.34,3221,2.34,3222,2.34,3223,2.34,3224,2.34,3225,2.34,3226,3.144,3227,2.34,3228,2.34,3229,2.34,3230,2.34,3231,2.34,3232,2.34,3233,2.34,3234,2.089,3235,2.089,3236,2.089,3237,2.089,3238,2.089,3239,2.34,3240,2.34,3241,2.34,3242,2.34,3243,5.603,3244,2.34,3245,2.34,3246,2.34,3247,2.34,3248,2.34,3249,2.34,3250,2.34,3251,2.34,3252,2.34,3253,2.34,3254,2.34,3255,4.851,3256,5.603,3257,3.825,3258,2.34,3259,2.34,3260,3.825,3261,2.34,3262,2.34,3263,2.34,3264,2.34,3265,2.089,3266,3.825,3267,2.089,3268,2.34,3269,2.34,3270,2.34,3271,2.34,3272,2.34,3273,2.34,3274,3.825,3275,2.34,3276,2.34,3277,2.34,3278,2.34,3279,2.34,3280,2.34]],["title/classes/RegistrationCertificateRequest.html",[33,0.201,858,2.661]],["body/classes/RegistrationCertificateRequest.html",[3,0.077,4,0.086,5,0.069,7,3.932,9,0.795,12,2.077,13,0.284,14,1.046,16,1.863,17,0.892,19,0.538,20,0.349,21,0.006,27,3.082,30,0.086,31,0.005,32,0.005,33,0.338,35,1.277,42,1.361,45,0.524,50,0.19,55,2.485,56,2.044,58,1.468,104,3.335,261,5.875,280,3.641,369,4.229,378,3.815,529,4.028,549,4.623,634,4.553,642,5.874,858,5.058,887,5.218,888,4.481,3281,7.808,3282,8.747,3283,6.58,3284,6.58]],["title/modules/ResolverModule.html",[158,1.427,3031,3.488]],["body/modules/ResolverModule.html",[3,0.082,4,0.09,5,0.073,21,0.006,30,0.09,31,0.005,32,0.005,33,0.291,50,0.21,147,1.191,158,2.665,160,2.935,161,3.366,162,3.544,163,3.544,164,3.135,165,4.231,166,4.231,183,4.258,184,3.544,185,3.544,188,3.065,2231,5.785,2232,3.858,3031,7.1,3049,6.952,3285,6.211,3286,6.211,3287,6.211,3288,6.958,3289,6.958]],["title/injectables/ResolverService.html",[383,1.038,3049,3.32]],["body/injectables/ResolverService.html",[3,0.061,4,0.067,5,0.054,7,2.236,9,0.627,13,0.224,17,0.766,20,0.3,21,0.006,22,3.448,23,2.194,25,2.058,30,0.067,31,0.004,32,0.004,33,0.217,45,0.45,50,0.21,95,1.226,96,4.422,143,1.597,146,1.573,147,0.888,149,1.639,265,3.847,271,1.709,281,1.701,282,2.134,317,2.236,318,2.029,341,3.534,383,1.501,384,1.978,386,2.41,387,2.62,388,1.468,406,3.677,407,2.816,420,1.834,427,3.991,438,1.739,441,2.866,446,2.017,453,2.99,466,4.033,532,3.735,584,2.236,587,3.59,678,3.297,682,4.283,729,4.102,747,3.357,1258,5.337,1401,3.772,1463,5.044,1614,5.775,1624,2.574,1667,5.703,2217,3.772,2232,2.877,2402,6.194,2432,4.41,2546,4.631,2609,6.194,3048,3.991,3049,4.801,3053,6.194,3085,5.044,3086,3.434,3265,4.631,3290,4.631,3291,6.938,3292,6.938,3293,5.188,3294,6.938,3295,5.188,3296,6.194,3297,6.938,3298,5.188,3299,5.188,3300,4.631,3301,5.188,3302,5.188,3303,5.188,3304,5.188,3305,5.188,3306,5.188,3307,5.188,3308,5.188,3309,5.188,3310,5.188,3311,5.188,3312,5.188,3313,5.188,3314,5.188,3315,6.938,3316,4.631,3317,5.188,3318,5.188,3319,5.188,3320,5.188,3321,5.188,3322,5.188,3323,5.188,3324,5.188,3325,5.188]],["title/classes/RoleDto.html",[33,0.201,311,3.69]],["body/classes/RoleDto.html",[3,0.084,4,0.093,5,0.075,9,0.863,13,0.309,14,1.1,20,0.309,21,0.006,30,0.093,31,0.005,32,0.005,33,0.299,35,1.387,42,1.204,45,0.464,50,0.199,100,3.51,102,1.838,105,4.328,270,5.4,311,6.536,442,4.447,714,3.297,928,4.265,929,4.09,2191,6.985,2485,6.383,3326,6.383,3327,7.15,3328,7.15]],["title/guards/RolesGuard.html",[2696,3.69,3329,3.944]],["body/guards/RolesGuard.html",[3,0.077,4,0.085,5,0.068,13,0.282,17,0.888,20,0.347,21,0.006,28,3.191,30,0.085,31,0.005,32,0.005,33,0.273,45,0.522,48,1.191,50,0.214,95,1.421,112,2.398,143,1.852,146,1.481,147,1.118,149,1.687,281,1.972,317,2.816,383,1.741,388,1.849,420,1.768,501,2.398,928,2.816,2048,6.296,2256,8.123,2257,5.37,2258,7.821,2260,7.182,2262,4.152,2263,5.025,2268,5.831,2269,5.37,2270,5.831,3329,6.613,3330,6.533,3331,5.831,3332,6.533,3333,6.533,3334,6.533,3335,6.613,3336,6.533,3337,8.046,3338,5.831,3339,6.533,3340,6.533]],["title/classes/RootOfTrustPolicy.html",[33,0.201,71,2.661]],["body/classes/RootOfTrustPolicy.html",[3,0.065,4,0.072,5,0.058,9,0.665,13,0.238,14,0.934,19,0.568,20,0.4,21,0.006,30,0.121,31,0.004,32,0.004,33,0.394,34,3.051,35,1.068,36,3.497,37,4.604,38,3.823,39,5.143,40,5.482,41,3.449,42,1.215,44,3.807,45,0.468,48,1.617,50,0.189,51,1.558,52,4.089,53,5.87,54,2.183,55,2.475,56,2.38,57,2.871,58,1.228,59,3.993,60,3.993,61,3.993,62,3.807,63,2.598,64,3.497,65,2.954,66,4.887,67,4.604,68,3.807,69,5.911,70,4.291,71,4,72,3.807,73,3.807,74,3.148,75,3.807,76,2.372,77,3.497,78,3.051,79,3.051,80,5.115,81,2.321,82,1.692,83,3.807,84,3.051,85,3.807,3341,5.503,3342,5.503,3343,5.503,3344,5.503]],["title/classes/S3FileStorage.html",[33,0.201,3345,3.69]],["body/classes/S3FileStorage.html",[3,0.052,4,0.058,5,0.047,12,1.142,13,0.192,17,0.988,19,0.654,20,0.369,21,0.006,22,2.979,23,2.396,30,0.058,31,0.004,32,0.004,33,0.186,35,0.862,45,0.554,48,0.81,50,0.184,95,1.509,112,2.291,126,2.294,143,1.437,146,1.867,149,1.728,280,3.203,281,2.094,282,1.919,387,3.153,388,1.766,403,2.218,407,2.764,418,2.721,420,1.718,433,2.206,438,2.761,532,2.393,668,3.36,669,3.019,714,2.877,926,2.69,1124,1.875,1181,3.266,1834,4.773,1836,6.438,1837,4.8,1838,5.243,1839,4.8,1841,5.13,1843,5.571,1845,4.8,1847,3.654,1848,5.243,1849,6.336,1850,5.928,1851,5.685,1853,5.243,1854,4.583,1855,3.654,1857,3.419,1859,3.076,1862,3.968,1863,4.8,1932,3.419,2393,4.318,2596,3.654,2614,5.571,3345,4.8,3346,3.968,3347,4.445,3348,6.981,3349,8.123,3350,7.212,3351,4.445,3352,5.243,3353,4.445,3354,4.445,3355,4.445,3356,4.445,3357,4.445,3358,6.241,3359,7.212,3360,7.212,3361,6.241,3362,4.8,3363,3.654,3364,3.968,3365,3.968,3366,4.445,3367,8.237,3368,8.541,3369,4.445,3370,6.241,3371,4.445,3372,4.445,3373,4.445,3374,4.445,3375,4.445,3376,4.445,3377,4.445,3378,4.445,3379,4.445,3380,4.445,3381,4.445,3382,4.445,3383,4.445,3384,4.445,3385,4.445,3386,4.445,3387,4.445]],["title/classes/SchemaResponse.html",[33,0.201,1102,3.049]],["body/classes/SchemaResponse.html",[3,0.072,4,0.08,5,0.064,9,1.074,13,0.264,14,1.187,17,1.033,19,0.623,20,0.41,21,0.006,30,0.08,31,0.005,32,0.005,33,0.324,35,1.188,42,1.577,45,0.608,50,0.144,52,3.904,55,2.604,56,2.142,58,1.367,104,3.229,116,3.359,246,3.563,368,3.504,551,5.467,584,3.331,634,5.347,837,2.017,1062,5.245,1065,3.936,1102,4.912,1112,6.292,1237,4.912,1348,7.312,1786,5.467,3388,8.468,3389,6.125,3390,8.468,3391,8.468,3392,6.125,3393,6.125,3394,6.125,3395,6.125,3396,6.125,3397,6.125,3398,6.125,3399,6.125,3400,6.125]],["title/entities/Session.html",[567,1.729,812,1.253]],["body/entities/Session.html",[3,0.031,4,0.034,5,0.027,9,0.316,12,2.392,13,0.113,14,0.774,16,1.672,17,1.056,19,0.619,20,0.405,21,0.006,26,2.357,27,1.995,28,1.659,30,0.068,31,0.003,32,0.003,33,0.109,42,1.567,45,0.604,48,1.775,50,0.179,82,2.253,88,1.851,89,2.32,100,1.728,102,0.672,105,2.131,106,1.428,110,2.154,122,2.895,125,2.401,126,1.902,127,3.534,128,4.328,138,2.371,153,3.735,154,2.252,248,1.453,257,2.024,271,1.378,278,4.213,324,2.881,342,1.635,343,2.473,378,2.823,379,3.392,382,2.252,411,2.19,412,3.042,441,1.728,497,1.103,498,2.32,500,3.129,501,1.92,507,2.541,511,0.997,512,2.659,536,2.076,539,2.823,549,3.42,566,3.324,567,3.206,575,4.347,597,1.885,606,3.324,614,4.669,664,1.186,714,1.205,747,1.265,771,3.324,796,5.629,805,2.077,808,4.023,812,1.708,814,1.234,818,2.595,819,2.664,820,3.756,821,2.992,823,3.991,824,1.929,825,5.117,827,4.563,831,1.969,832,1.45,833,2.47,834,1.728,836,1.765,837,1.969,841,2.992,843,2.32,844,2.32,845,1.058,846,1.728,847,0.832,848,1.058,849,3.469,885,3.378,890,2.131,965,1.545,986,2.011,1066,5.326,1123,1.809,1147,4.656,1153,1.331,1166,4.347,1251,1.45,1266,2.473,1307,4.659,1382,1.901,1391,1.809,1394,1.495,1400,2.011,1401,1.901,1753,3.092,1782,3.439,1905,2.895,2056,3.803,2058,4.669,2168,3.619,2334,3.735,2705,3.439,2746,5.376,2790,3.619,2822,3.735,2827,4.669,2833,2.149,2835,4.599,2860,4.669,2918,4.669,2923,4.669,2931,4.669,2934,3.042,2940,3.218,3022,3.735,3401,2.011,3402,4.3,3403,5.231,3404,2.614,3405,2.614,3406,2.614,3407,4.184,3408,2.614,3409,2.614,3410,4.669,3411,2.614,3412,4.184,3413,2.614,3414,2.614,3415,2.614,3416,2.614,3417,2.614,3418,2.614,3419,2.614,3420,2.614,3421,5.231,3422,2.614,3423,2.614,3424,2.614,3425,2.614,3426,2.614,3427,3.735,3428,2.614,3429,2.614,3430,2.614,3431,4.137,3432,2.614,3433,4.184,3434,2.614,3435,2.614,3436,4.184,3437,4.184,3438,2.614,3439,2.614,3440,2.614,3441,4.184,3442,2.614,3443,4.184,3444,2.614,3445,3.735,3446,3.042,3447,3.735,3448,1.809,3449,2.614,3450,2.614,3451,2.614]],["title/controllers/SessionController.html",[139,1.501,3452,3.69]],["body/controllers/SessionController.html",[3,0.057,4,0.064,5,0.051,9,0.805,13,0.211,16,2.036,17,0.837,19,0.542,20,0.368,21,0.006,27,1.864,30,0.064,31,0.004,32,0.004,33,0.205,42,1.372,45,0.529,50,0.221,82,2.049,93,2.255,95,1.439,102,1.256,139,1.529,141,1.729,143,1.534,146,1.994,147,0.837,149,1.708,154,3.588,249,2.949,280,1.901,281,1.859,282,2.505,298,2.425,302,3.235,318,2.493,324,2.936,343,3.94,388,1.383,403,2.049,501,3.304,555,2.308,567,3.578,592,3.969,601,2.812,907,4.466,911,3.235,925,4.611,926,2.107,928,2.107,930,2.71,945,4.018,949,3.554,956,3.235,1163,3.488,1164,3.588,1170,4.986,1335,3.106,1336,3.106,1337,3.106,1373,4.483,1405,2.796,1406,3.382,1448,2.992,2105,5.126,2375,4.018,2486,4.363,2758,5.126,3448,4.611,3452,5.126,3453,4.363,3454,7.583,3455,8.145,3456,6.665,3457,6.665,3458,4.888,3459,4.888,3460,4.888,3461,4.888,3462,4.888,3463,4.888,3464,4.888,3465,4.888,3466,5.921,3467,4.888,3468,4.888,3469,4.845,3470,4.018,3471,3.76,3472,5.126,3473,4.888,3474,4.018,3475,4.888,3476,4.888,3477,4.888,3478,4.888,3479,4.888,3480,4.888,3481,4.888,3482,4.888,3483,4.888]],["title/interfaces/SessionLogContext.html",[0,1.403,2836,3.049]],["body/interfaces/SessionLogContext.html",[0,1.765,2,2.919,3,0.071,4,0.078,5,0.063,9,0.729,13,0.26,14,0.991,16,1.631,17,1.007,19,0.653,20,0.409,21,0.006,23,1.876,26,3.449,27,3.373,30,0.078,31,0.005,32,0.005,45,0.392,154,4.121,257,4.416,342,1.877,498,5.061,506,4.914,530,4.959,567,3.455,664,2.005,1008,3.449,1147,4.865,1857,5.888,1967,6.292,2262,5.344,2514,6.834,2635,3.993,2836,4.865,2842,5.621,2843,6.803,2844,7.788,3026,6.834,3484,5.565,3485,5.386,3486,5.386,3487,6.033,3488,7.655,3489,7.655,3490,7.655]],["title/injectables/SessionLoggerInterceptor.html",[383,1.038,2689,3.049]],["body/injectables/SessionLoggerInterceptor.html",[3,0.046,4,0.051,5,0.041,9,0.888,12,2.401,13,0.168,17,0.739,20,0.338,21,0.006,23,0.953,30,0.051,31,0.003,32,0.003,33,0.163,45,0.434,50,0.198,95,1.182,112,1.427,126,2.749,143,1.306,146,1.668,147,0.665,149,1.543,154,3.96,249,1.512,255,2.156,265,2.156,271,2.204,280,3.568,281,1.641,294,2.093,318,2.288,326,3.196,327,2.991,380,2.343,383,1.227,384,1.483,386,2.325,388,2.082,403,2.405,406,1.713,420,2.052,429,1.929,453,1.676,458,3.196,491,4.288,501,1.427,532,4.396,560,3.753,567,3.175,601,2.392,664,1.285,780,3.241,909,2.743,1008,3.315,1130,3.352,1131,4.254,1223,2.827,1234,2.471,1251,3.711,1696,3.196,2048,5.09,2172,2.827,2257,3.196,2258,7.244,2262,5.19,2263,2.991,2269,3.196,2472,5.502,2478,5.09,2480,5.348,2635,5.177,2689,4.676,2690,5.395,2693,2.827,2762,3.196,2823,4.661,2824,3.196,2836,3.604,2841,5.659,2842,3.604,2843,4.362,2940,2.991,3086,2.573,3165,4.362,3338,3.471,3446,2.827,3484,5.348,3491,3.471,3492,5.671,3493,5.348,3494,5.671,3495,5.671,3496,5.671,3497,3.888,3498,6.693,3499,5.671,3500,5.671,3501,7.357,3502,3.888,3503,5.671,3504,5.671,3505,5.671,3506,5.671,3507,5.671,3508,7.822,3509,5.671,3510,5.671,3511,3.888,3512,5.671,3513,6.693,3514,5.671,3515,7.357,3516,5.671,3517,3.888,3518,3.888,3519,3.888,3520,4.661,3521,3.888,3522,3.888,3523,3.888,3524,3.888,3525,3.471,3526,3.888,3527,3.888,3528,3.888,3529,3.888,3530,3.888,3531,5.671,3532,3.888,3533,3.888,3534,5.062,3535,3.888,3536,3.888,3537,3.888,3538,6.693,3539,3.888,3540,3.888,3541,7.357,3542,3.471,3543,3.888,3544,3.888,3545,3.471,3546,3.888,3547,3.888,3548,3.888,3549,3.471,3550,3.888,3551,3.888,3552,3.888,3553,3.888,3554,3.888,3555,3.888,3556,3.888,3557,3.888,3558,3.888,3559,5.671,3560,3.888]],["title/injectables/SessionLoggerService.html",[383,1.038,2690,2.937]],["body/injectables/SessionLoggerService.html",[3,0.035,4,0.039,5,0.031,9,0.558,12,1.46,13,0.128,14,0.599,17,0.939,19,0.575,20,0.378,21,0.006,28,3.051,30,0.039,31,0.003,32,0.003,33,0.124,45,0.569,50,0.151,88,0.787,95,1.548,143,1.064,146,1.93,147,0.508,149,1.785,190,1.523,199,1.597,200,1.645,249,2.209,257,3.954,278,3.357,281,2.087,318,1.352,337,4.663,342,0.662,379,1.798,383,1,384,1.131,386,1.606,388,1.816,403,2.446,420,1.248,491,3.183,507,2.384,511,1.763,567,3.367,585,5.071,601,2.933,612,4.127,668,4.499,780,4.071,824,1.368,995,4.703,1008,3.133,1130,2.733,1251,4.411,1260,2.938,1262,2.83,1266,1.754,1276,5.265,1307,4.257,1338,2.157,1482,5.273,1754,5.531,1972,5.273,1978,4.127,2262,6.084,2478,6.431,2618,5.09,2635,4.875,2650,2.157,2690,3.927,2705,5.715,2824,3.8,2836,6.152,2844,6.322,2845,2.648,3161,5.071,3165,2.282,3202,4.127,3410,6.207,3446,2.157,3484,6.447,3493,3.361,3542,5.071,3561,2.648,3562,6.414,3563,4.623,3564,4.623,3565,5.681,3566,5.681,3567,4.623,3568,5.681,3569,4.623,3570,5.681,3571,5.681,3572,5.681,3573,4.623,3574,6.414,3575,2.967,3576,4.623,3577,4.623,3578,9.848,3579,2.967,3580,2.967,3581,6.953,3582,2.967,3583,2.967,3584,2.967,3585,4.623,3586,2.967,3587,2.967,3588,2.967,3589,4.623,3590,2.967,3591,2.967,3592,2.967,3593,2.967,3594,8.071,3595,2.967,3596,2.967,3597,2.967,3598,4.623,3599,2.967,3600,2.967,3601,2.967,3602,2.967,3603,8.357,3604,8.357,3605,2.967,3606,7.955,3607,2.967,3608,2.967,3609,2.967,3610,2.967,3611,2.967,3612,4.623,3613,3.8,3614,4.623,3615,2.967,3616,2.967,3617,2.967,3618,2.967,3619,2.967,3620,4.623]],["title/modules/SessionModule.html",[158,1.427,179,2.937]],["body/modules/SessionModule.html",[3,0.07,4,0.077,5,0.062,9,0.718,21,0.006,30,0.077,31,0.005,32,0.005,33,0.249,50,0.224,95,1.05,141,2.683,147,1.017,158,2.483,160,2.508,161,2.876,162,3.027,163,3.027,164,2.678,165,3.943,166,3.943,176,6.257,179,6.079,183,3.862,184,3.027,185,3.027,188,3.341,324,3.341,444,4.113,501,2.784,567,2.142,592,5.152,884,2.358,990,3.4,991,2.358,992,6.233,993,3.778,994,3.934,1018,4.886,1019,4.572,1153,3.862,1405,3.4,1573,5.247,2227,6.149,2247,4.886,3448,6.086,3452,6.423,3469,4.322,3471,4.572,3474,4.886,3621,5.306,3622,5.306,3623,5.306,3624,5.944,3625,5.944,3626,5.944,3627,5.944,3628,5.944,3629,5.944,3630,5.306]],["title/injectables/SessionPipe.html",[383,1.038,3472,3.69]],["body/injectables/SessionPipe.html",[3,0.077,4,0.085,5,0.069,12,1.685,13,0.283,16,1.718,17,0.89,19,0.581,20,0.348,21,0.006,30,0.085,31,0.005,32,0.005,33,0.274,45,0.523,50,0.205,95,1.424,112,2.407,143,1.856,146,1.486,147,1.122,149,1.375,281,2.14,282,2.479,317,2.826,383,1.744,384,2.5,388,1.856,406,3.552,407,2.61,567,3.146,592,4.984,601,2.766,729,4.767,2842,5.55,3471,5.043,3472,6.202,3474,5.389,3631,5.852,3632,8.063,3633,6.556,3634,6.556,3635,8.063,3636,6.556,3637,8.733,3638,8.063,3639,6.556]],["title/injectables/SessionService.html",[383,1.038,592,2.511]],["body/injectables/SessionService.html",[3,0.037,4,0.042,5,0.033,13,0.138,16,1.817,17,0.9,19,0.605,20,0.352,21,0.006,30,0.042,31,0.003,32,0.003,33,0.134,41,2.952,45,0.563,50,0.196,95,1.44,112,1.173,117,1.386,143,1.128,146,2.093,147,0.547,149,1.71,151,4.618,164,2.207,190,2.602,191,1.053,196,2.628,248,1.11,256,1.628,281,1.998,282,2.052,318,2.495,323,2.459,324,3.878,325,2.854,326,4.026,337,4.329,342,1.489,343,3.945,370,5.902,375,2.628,383,1.06,384,1.219,387,2.95,388,1.386,403,2.052,407,1.585,420,1.906,438,2.412,444,4.979,482,4.573,511,2.271,546,2.998,567,3.404,592,2.563,601,2.066,611,3.767,629,4.329,664,1.894,669,2.37,701,2.032,704,2.324,705,3.113,726,3.767,771,3.113,805,2.068,818,1.586,819,1.628,824,1.474,847,1.017,909,3.229,925,3.389,926,2.111,991,1.268,993,2.032,997,3.007,1012,3.113,1019,2.459,1155,3.389,1163,3.493,1175,3.389,1184,1.673,1266,2.895,1408,2.637,1455,3.242,1745,4.825,1753,2.895,1754,2.116,2374,4.026,2698,2.459,2835,5.535,2949,2.854,3099,2.459,3100,2.628,3431,4.12,3446,2.324,3448,5.783,3471,2.459,3630,6.423,3640,2.854,3641,5.486,3642,4.898,3643,6.674,3644,3.197,3645,7.902,3646,5.954,3647,5.486,3648,3.197,3649,4.898,3650,4.898,3651,6.674,3652,3.197,3653,4.898,3654,6.674,3655,3.197,3656,4.898,3657,3.197,3658,4.898,3659,3.197,3660,3.197,3661,4.898,3662,6.674,3663,3.197,3664,4.898,3665,3.197,3666,4.898,3667,5.958,3668,4.898,3669,4.898,3670,4.372,3671,4.372,3672,4.372,3673,4.372,3674,3.197,3675,4.898,3676,3.197,3677,4.898,3678,3.197,3679,4.898,3680,4.898,3681,2.628,3682,3.197,3683,2.459,3684,4.898,3685,3.197,3686,3.197,3687,3.197,3688,3.197,3689,3.197,3690,4.898,3691,4.898,3692,3.197,3693,4.898,3694,3.197,3695,3.197,3696,4.898,3697,3.197,3698,3.197,3699,3.197,3700,3.197,3701,4.898,3702,4.898,3703,3.197,3704,4.898,3705,4.898,3706,5.954,3707,4.898,3708,3.197,3709,4.894,3710,4.898,3711,3.197,3712,3.197,3713,5.954,3714,4.898,3715,3.197,3716,3.197,3717,3.197,3718,3.197,3719,3.197,3720,3.197,3721,4.898,3722,3.197,3723,3.197,3724,3.197]],["title/controllers/StatusListController.html",[139,1.501,3725,3.69]],["body/controllers/StatusListController.html",[3,0.077,4,0.086,5,0.069,13,0.285,17,0.729,19,0.583,20,0.378,21,0.006,30,0.086,31,0.005,32,0.005,33,0.276,42,1.112,45,0.429,48,1.204,50,0.206,95,1.166,96,3.195,102,1.697,139,2.065,141,2.336,143,1.865,146,1.836,147,1.13,148,4.197,149,1.385,281,1.619,302,4.371,315,4.371,317,2.846,318,1.932,324,3.86,555,3.118,664,1.836,1296,4.585,1373,5.179,1405,4.633,1406,4.569,1448,5.363,3725,6.23,3726,5.36,3727,5.895,3728,6.604,3729,7.23,3730,5.895,3731,6.604,3732,6.604,3733,8.099,3734,6.604,3735,6.604,3736,6.604,3737,6.604,3738,5.895,3739,6.604,3740,6.604]],["title/entities/StatusListEntity.html",[812,1.253,3741,3.488]],["body/entities/StatusListEntity.html",[3,0.061,4,0.067,5,0.054,9,0.627,13,0.224,14,0.898,16,1.478,17,0.766,19,0.555,20,0.386,21,0.006,30,0.067,31,0.004,32,0.004,33,0.217,42,1.508,45,0.581,48,1.632,50,0.184,70,3.357,106,2.367,246,3.199,247,4.102,249,2.698,324,4.32,342,2.099,382,3.735,408,4.801,664,1.772,747,4.209,812,2.179,814,2.45,825,4.41,827,3.276,829,2.927,831,2.749,832,2.877,833,3.448,834,2.866,836,2.927,837,2.285,845,2.1,846,2.866,847,1.651,848,2.1,849,2.927,883,2.715,884,3.55,885,3.199,967,6.194,1066,5.044,1210,5.325,1296,5.081,1394,2.968,1398,3.991,3613,7.15,3726,6.05,3741,5.044,3742,7.514,3743,4.631,3744,7.765,3745,7.818,3746,5.188,3747,5.188,3748,5.188,3749,5.188,3750,5.188,3751,6.194,3752,5.188,3753,5.188]],["title/modules/StatusListModule.html",[158,1.427,2227,3.175]],["body/modules/StatusListModule.html",[3,0.075,4,0.084,5,0.067,21,0.006,30,0.084,31,0.005,32,0.005,33,0.269,50,0.226,141,2.818,147,1.1,158,2.574,160,2.712,161,3.11,162,3.274,163,3.274,164,2.896,165,4.087,166,4.087,171,5.421,183,4.057,184,3.274,185,3.274,188,3.509,203,4.255,324,3.509,990,3.677,991,2.55,1373,5.881,1405,3.677,1406,4.448,2227,6.477,3725,6.658,3726,4.255,3741,5.791,3754,5.739,3755,6.428,3756,5.739,3757,5.739,3758,6.428,3759,7.111,3760,5.739,3761,4.674,3762,5.739,3763,6.428,3764,6.428]],["title/injectables/StatusListService.html",[383,1.038,1373,2.836]],["body/injectables/StatusListService.html",[3,0.034,4,0.038,5,0.087,9,0.549,13,0.242,16,1.555,17,0.872,19,0.609,20,0.341,21,0.006,30,0.038,31,0.003,32,0.003,33,0.122,45,0.513,50,0.202,65,1.066,76,1.252,88,1.487,93,2.415,95,1.395,96,2.2,143,1.047,146,1.841,147,0.497,149,1.175,190,2.405,191,0.957,246,2.097,281,1.936,282,1.399,318,2.014,324,4.255,339,5.003,342,1.763,343,2.689,347,1.662,383,0.984,384,1.108,386,1.58,387,2.99,388,1.287,403,2.347,406,2.004,407,2.628,420,1.995,438,2.838,441,1.879,446,1.13,464,3.71,478,1.717,481,3.498,482,4.375,485,2.112,507,1.814,539,1.372,546,1.778,567,2.926,589,1.564,653,1.662,654,3.438,664,2.122,669,1.405,678,2.891,686,1.611,701,1.846,705,4.03,714,1.339,729,2.689,747,3.532,760,1.52,843,1.611,847,0.924,853,1.28,884,2.896,909,3.692,925,4.388,926,1.96,966,3.147,991,1.152,997,3.438,1139,3.738,1155,3.147,1156,1.717,1175,3.147,1181,2.38,1183,4.61,1184,1.52,1189,3.313,1207,2.257,1210,3.431,1225,2.112,1296,5.013,1373,2.689,1382,5.005,1394,2.602,1397,2.593,1398,2.234,1405,4.645,1448,2.784,1450,6.076,1455,3.71,1463,2.112,1464,2.234,1466,3.01,1534,2.784,1593,2.112,1597,3.498,1614,3.147,1619,2.01,1754,1.923,1795,3.738,1808,4.06,1863,3.498,1920,2.593,2333,3.498,2375,2.388,2480,3.307,2842,2.891,2890,2.593,2893,2.388,2900,2.388,3099,3.498,3181,6.518,3466,4.61,3613,6.493,3726,5.375,3729,4.06,3730,4.06,3741,4.61,3744,2.593,3751,5.003,3759,4.06,3760,2.593,3761,2.112,3762,2.593,3765,2.593,3766,5.605,3767,4.548,3768,4.548,3769,4.548,3770,5.605,3771,5.605,3772,2.905,3773,2.905,3774,2.905,3775,4.548,3776,4.548,3777,2.905,3778,2.905,3779,2.905,3780,2.905,3781,4.548,3782,6.342,3783,4.548,3784,4.548,3785,4.548,3786,2.905,3787,4.548,3788,2.905,3789,4.548,3790,2.905,3791,4.548,3792,2.905,3793,2.905,3794,2.905,3795,2.905,3796,2.905,3797,2.905,3798,2.905,3799,2.905,3800,2.905,3801,2.905,3802,2.905,3803,2.905,3804,2.905,3805,4.548,3806,2.905,3807,2.905,3808,2.905,3809,2.905,3810,6.342,3811,4.548,3812,4.548,3813,2.905,3814,4.548,3815,4.548,3816,2.905,3817,2.905,3818,4.548,3819,6.885,3820,2.905,3821,2.905,3822,2.905,3823,2.905,3824,2.905,3825,2.905,3826,2.905,3827,4.548,3828,4.548,3829,2.905,3830,2.905,3831,2.905]],["title/entities/StatusMapping.html",[812,1.253,3761,3.488]],["body/entities/StatusMapping.html",[3,0.067,4,0.074,5,0.06,13,0.374,14,0.956,19,0.631,20,0.42,21,0.006,30,0.074,31,0.004,32,0.004,33,0.239,42,1.548,45,0.596,48,1.784,50,0.173,342,2.002,664,1.856,812,1.928,814,2.692,829,4.076,831,2.852,832,3.162,833,3.577,834,3.05,836,3.115,837,2.432,845,3.719,846,3.05,847,1.814,848,2.307,884,2.928,1296,4.285,1382,5.953,2842,5.204,3726,6.19,3742,7.688,3761,5.367,3832,5.09,3833,8.97,3834,9.479,3835,5.702,3836,7.383,3837,5.702,3838,5.702,3839,5.702,3840,5.702,3841,5.702]],["title/classes/StatusUpdateDto.html",[33,0.201,3466,3.488]],["body/classes/StatusUpdateDto.html",[3,0.073,4,0.081,5,0.065,13,0.269,14,1.012,16,1.907,17,0.988,18,7.992,19,0.596,20,0.369,21,0.006,30,0.081,31,0.005,32,0.005,33,0.327,35,1.211,42,1.439,45,0.554,50,0.147,54,2.475,55,2.405,56,2.265,58,1.393,82,2.405,88,2.075,129,3.88,324,4.062,501,2.871,507,2.898,542,5.13,546,5.481,567,3.226,788,4.092,857,4.092,884,3.102,1207,3.88,1382,6.209,2842,5.428,3466,5.685,3470,7.359,3726,5.926,3842,5.13,3843,6.241,3844,6.241,3845,6.241,3846,6.241,3847,6.241]],["title/controllers/StorageController.html",[139,1.501,3848,3.69]],["body/controllers/StorageController.html",[3,0.065,4,0.072,5,0.095,9,0.874,13,0.239,17,0.799,19,0.537,20,0.383,21,0.006,23,1.774,30,0.072,31,0.004,32,0.004,33,0.231,42,1.219,45,0.47,48,1.008,50,0.221,95,1.278,102,1.421,139,2.523,141,1.955,143,1.666,146,1.828,147,0.946,149,1.517,193,4.544,194,3.065,231,6.204,249,2.814,281,1.774,298,3.59,299,5.26,317,2.383,318,2.503,342,1.615,380,2.284,386,1.92,388,1.565,407,1.789,501,2.961,555,2.61,907,4.246,928,2.383,930,3.065,985,6.459,1158,5.239,1214,4.938,1296,3.787,1335,3.513,1336,3.513,1337,3.513,1339,3.825,1853,4.019,1870,5.566,1892,6.459,1898,7.201,1904,7.929,2757,4.544,3549,4.935,3848,5.566,3849,4.935,3850,7.236,3851,5.528,3852,5.528,3853,5.528,3854,5.528,3855,5.528,3856,5.528,3857,7.236,3858,5.528,3859,5.528,3860,5.528,3861,7.236,3862,5.528,3863,5.528,3864,5.528,3865,5.528,3866,4.935,3867,5.528,3868,5.528,3869,5.528,3870,5.528,3871,5.528,3872,5.528,3873,5.528,3874,5.528,3875,5.528,3876,5.528,3877,5.528,3878,5.528]],["title/modules/StorageModule.html",[158,1.427,180,3.488]],["body/modules/StorageModule.html",[3,0.069,4,0.077,5,0.062,20,0.254,21,0.006,30,0.077,31,0.005,32,0.005,33,0.246,45,0.382,50,0.228,82,1.81,141,2.082,143,1.355,146,1.334,147,1.007,149,1.743,158,2.472,160,2.483,165,2.779,166,2.779,180,6.043,188,2.593,190,2.738,191,1.939,227,3.367,228,4.28,253,5.797,255,3.264,407,2.691,420,1.293,990,3.367,991,2.335,1004,4.839,1006,4.839,1158,5.089,1827,4.28,1834,4.988,1867,5.797,1868,5.479,1909,5.255,2280,6.195,2399,7.42,2401,7.42,2580,5.797,2596,4.839,3345,5.797,3348,6.727,3352,6.043,3362,4.528,3363,4.839,3848,5.797,3866,5.255,3879,4.839,3880,5.887,3881,5.887,3882,5.887,3883,5.887,3884,6.394,3885,5.887,3886,5.887,3887,5.255,3888,5.887,3889,5.887,3890,5.887,3891,8.313,3892,5.255,3893,5.887,3894,5.255,3895,5.887,3896,5.255,3897,5.887,3898,5.887,3899,5.887]],["title/controllers/TenantController.html",[139,1.501,3900,3.69]],["body/controllers/TenantController.html",[3,0.064,4,0.071,5,0.057,9,0.966,13,0.234,16,2.092,17,0.882,19,0.603,20,0.345,21,0.006,30,0.071,31,0.004,32,0.004,33,0.227,42,1.431,45,0.551,50,0.207,95,1.412,139,2.501,141,1.92,143,1.646,146,2.095,147,0.929,149,1.782,280,2.111,281,1.96,298,3.967,317,2.34,318,2.485,342,2.2,380,3.303,402,4.726,555,2.563,601,2.29,911,3.593,914,4.846,926,3.446,928,2.34,929,3.105,930,3.01,931,4.846,935,3.593,945,4.462,956,3.593,984,4.377,1049,5.879,1163,3.742,1448,4.377,1534,4.377,3900,5.5,3901,4.846,3902,6.383,3903,6.383,3904,8.498,3905,7.15,3906,5.429,3907,5.429,3908,4.462,3909,5.429,3910,5.429,3911,5.429,3912,5.429,3913,4.462,3914,4.846,3915,5.429,3916,5.429,3917,5.429,3918,5.429,3919,5.429,3920,5.429,3921,5.429,3922,5.429,3923,5.429]],["title/entities/TenantEntity.html",[812,1.253,831,1.58]],["body/entities/TenantEntity.html",[3,0.066,4,0.073,5,0.059,9,1.107,13,0.244,14,0.95,16,1.736,17,0.81,19,0.61,20,0.396,21,0.006,26,3.306,27,2.798,30,0.095,31,0.004,32,0.004,33,0.307,42,1.506,45,0.58,48,1.573,50,0.191,55,2.256,56,2.183,58,1.261,95,1.58,150,6.032,256,3.737,324,3.94,342,2.182,390,5.684,805,1.962,812,1.916,814,2.667,825,3.59,827,3.848,831,2.417,845,3.299,847,1.797,849,2.383,963,5.101,965,4.338,966,5.077,968,5.042,970,5.042,986,5.644,1147,4.664,2140,6.032,3431,3.908,3924,4.643,3925,5.648,3926,7.338,3927,5.648,3928,5.648,3929,5.648,3930,5.648,3931,5.648,3932,6.7,3933,5.648,3934,7.338,3935,5.648]],["title/modules/TenantModule.html",[158,1.427,353,3.488]],["body/modules/TenantModule.html",[3,0.066,4,0.073,5,0.059,21,0.006,30,0.073,31,0.004,32,0.004,33,0.235,50,0.229,95,0.99,141,2.583,147,0.959,158,2.415,160,2.364,161,2.712,162,2.855,163,2.855,164,2.525,165,3.834,166,3.834,171,5.232,174,6.329,178,5.813,179,5.6,183,3.719,184,2.855,185,2.855,188,3.217,203,3.709,207,5.003,209,4.311,210,4.075,352,6.607,353,7.366,362,5.003,402,5.772,831,1.846,884,2.223,984,3.431,990,3.206,991,2.223,992,6.001,993,3.562,994,3.709,1017,5.003,1018,4.607,1019,4.311,1055,4.311,1405,3.206,2227,6.054,2247,4.607,3469,4.075,3900,6.246,3914,5.003,3936,5.003,3937,5.605,3938,5.003,3939,5.003,3940,5.605,3941,5.605,3942,5.605]],["title/injectables/TenantService.html",[383,1.038,402,2.836]],["body/injectables/TenantService.html",[0,1.434,3,0.038,4,0.042,5,0.075,9,0.719,13,0.138,16,1.937,17,0.794,19,0.543,20,0.311,21,0.006,30,0.064,31,0.003,32,0.003,33,0.249,45,0.529,48,0.893,50,0.221,51,0.906,58,0.714,93,0.951,95,1.272,112,1.174,117,0.906,123,3.115,135,1.587,138,1.269,143,1.128,146,1.934,147,0.548,149,1.028,151,3.391,190,2.603,191,1.054,199,1.722,200,1.774,227,1.83,248,1.703,256,2.496,281,1.764,282,1.507,318,1.953,324,2.159,342,2.149,380,2.025,383,1.06,384,1.22,386,1.111,387,3.048,388,1.387,390,3.786,398,2.033,399,2.63,402,2.897,403,2.668,404,2.63,407,1.586,416,1.774,420,1.934,429,1.587,438,3.048,441,2.461,442,1.674,446,1.244,501,1.174,584,2.568,610,3.563,654,3.561,664,1.35,686,1.774,812,1.28,814,1.511,831,2.199,909,2.371,926,2.568,928,1.379,929,1.83,932,4.087,935,2.118,975,2.461,982,1.83,984,4.407,991,1.269,993,2.033,994,2.118,995,3.947,997,3.008,1008,2.684,1049,5.254,1055,2.461,1124,2.817,1147,2.033,1158,4.839,1163,2.565,1184,1.674,1185,3.244,1186,2.033,1187,2.033,1188,1.959,1190,2.461,1194,2.033,1195,2.033,1200,3.115,1201,3.115,1202,2.033,1203,2.033,1204,2.033,1205,2.033,1207,1.587,1213,4.087,1214,1.959,1220,2.326,1229,2.118,1230,2.118,1232,2.118,1233,2.118,1234,2.033,1235,2.118,1236,2.118,1237,2.033,1238,2.118,1239,2.118,1251,3.303,1260,2.033,1261,2.214,1262,1.959,1263,2.214,1265,1.891,1266,1.891,1268,2.118,1279,2.461,1296,2.565,1373,4.673,1405,1.83,1406,2.214,1408,1.722,1534,1.959,1560,5.023,1589,2.326,1625,2.118,1745,4.826,1884,2.63,2020,2.326,2021,2.326,2022,2.326,2023,2.326,2179,5.023,2180,2.326,2438,5.841,2454,3.77,2698,2.461,2817,5.023,2832,2.63,2834,2.63,3226,4.029,3431,3.391,3469,2.326,3493,2.326,3641,5.488,3647,5.488,3681,2.63,3683,2.461,3709,4.029,3902,4.375,3903,4.375,3908,4.029,3913,2.63,3943,2.63,3944,4.901,3945,4.901,3946,3.199,3947,5.318,3948,5.318,3949,3.199,3950,4.375,3951,3.199,3952,4.375,3953,3.199,3954,3.199,3955,3.199,3956,3.199,3957,3.199,3958,4.375,3959,3.199,3960,3.77,3961,4.375,3962,4.375,3963,4.375,3964,4.375,3965,2.856,3966,2.856,3967,2.856,3968,4.375,3969,2.856,3970,2.856,3971,2.856,3972,2.856,3973,2.856,3974,2.63,3975,2.856,3976,2.856,3977,2.856,3978,2.856,3979,2.63,3980,2.856,3981,2.856,3982,2.856,3983,2.856,3984,2.856,3985,2.856,3986,4.375,3987,2.856,3988,2.856,3989,2.856,3990,2.856,3991,2.856,3992,2.856,3993,2.856,3994,2.856,3995,2.856,3996,2.856,3997,2.856,3998,2.856,3999,2.856,4000,2.856,4001,2.856]],["title/interfaces/Tenants.html",[0,1.403,984,2.937]],["body/interfaces/Tenants.html",[0,1.608,2,1.804,3,0.044,4,0.048,5,0.08,9,0.45,13,0.161,14,0.712,16,1.958,19,0.568,20,0.237,21,0.006,30,0.071,31,0.003,32,0.003,33,0.273,48,1.002,50,0.225,51,1.055,58,0.832,93,1.109,112,1.369,117,1.055,123,2.37,135,1.85,138,1.479,146,1.481,147,0.638,149,1.153,151,2.58,190,2.152,191,1.228,199,2.007,200,2.067,227,2.133,248,1.295,256,2.801,282,1.146,318,2.109,324,2.423,342,2.123,380,1.54,383,1.19,386,1.295,387,2.577,388,1.055,390,3.495,398,2.37,399,3.065,402,2.204,403,2.765,404,3.065,407,1.207,416,2.067,420,1.999,429,3.578,438,3.132,441,2.699,442,1.951,446,1.45,501,1.369,584,2.816,610,2.711,654,2.943,664,1.246,686,2.067,812,0.974,814,1.76,831,1.811,909,1.804,926,2.37,928,1.607,929,2.133,932,3.366,935,2.468,975,2.868,982,2.133,984,4.414,991,1.479,993,2.37,994,2.468,995,3.251,997,2.478,1008,1.68,1049,4.989,1055,2.868,1124,3.042,1147,2.37,1158,3.999,1163,1.951,1184,1.951,1185,3.639,1186,2.37,1187,2.37,1188,2.282,1190,2.868,1194,2.37,1195,2.37,1200,3.495,1201,3.495,1202,2.37,1203,2.37,1204,2.37,1205,2.37,1207,1.85,1213,4.414,1214,2.282,1220,2.711,1229,2.468,1230,2.468,1232,2.468,1233,2.468,1234,2.37,1235,2.468,1236,2.468,1237,2.37,1238,2.468,1239,2.468,1251,3.049,1260,2.37,1261,2.58,1262,2.282,1263,2.58,1265,2.204,1266,2.204,1268,2.468,1279,2.868,1296,1.951,1373,3.862,1405,2.133,1406,2.58,1408,2.007,1534,2.282,1560,4.152,1589,2.711,1625,2.468,1745,4.152,1884,3.065,2020,2.711,2021,2.711,2022,2.711,2023,2.711,2179,4.152,2180,2.711,2438,5.025,2454,4.229,2698,2.868,2817,4.152,2832,3.065,2834,3.065,3226,4.52,3431,3.805,3469,2.711,3493,2.711,3641,3.065,3647,4.52,3681,3.065,3683,2.868,3709,4.52,3908,3.065,3913,3.065,3943,3.065,3947,3.328,3948,3.328,3950,3.328,3952,3.328,3958,3.328,3960,2.868,3961,3.328,3962,3.328,3963,3.328,3964,3.328,3965,3.328,3966,3.328,3967,3.328,3968,4.909,3969,3.328,3970,3.328,3971,3.328,3972,3.328,3973,3.328,3974,3.065,3975,3.328,3976,3.328,3977,3.328,3978,3.328,3979,3.065,3980,3.328,3981,3.328,3982,3.328,3983,3.328,3984,3.328,3985,3.328,3986,4.909,3987,3.328,3988,3.328,3989,3.328,3990,3.328,3991,3.328,3992,3.328,3993,3.328,3994,3.328,3995,3.328,3996,3.328,3997,3.328,3998,3.328,3999,3.328,4000,3.328,4001,3.328]],["title/interfaces/TokenPayload.html",[0,1.403,907,2.381]],["body/interfaces/TokenPayload.html",[0,2.302,2,3.051,3,0.074,4,0.082,5,0.066,9,0.761,11,3.728,12,2.023,13,0.272,14,1.019,16,1.343,17,0.869,19,0.42,20,0.34,21,0.006,30,0.112,31,0.005,32,0.005,38,2.718,41,3.061,50,0.201,147,1.079,149,1.322,249,3.596,342,1.915,380,2.605,400,4.007,420,1.729,441,2.605,442,4.703,444,4.363,501,3.299,669,3.051,812,2.463,831,2.96,837,2.077,907,4.459,928,4.065,929,3.607,987,5.183,2046,4.85,2047,6.47,2048,5.446,2049,5.183,2050,5.183,2051,5.183,2052,5.183]],["title/classes/TokenResponse.html",[33,0.201,272,3.488]],["body/classes/TokenResponse.html",[3,0.083,4,0.092,5,0.074,13,0.307,14,1.096,17,0.934,19,0.623,20,0.39,21,0.006,30,0.092,31,0.005,32,0.005,33,0.298,35,1.379,45,0.608,272,6.156,327,6.957,329,7.434,330,5.843,331,6.575,368,4.066,458,7.434,884,3.358,1021,6.345,2417,6.345,2716,5.843,4002,8.539,4003,7.108]],["title/classes/TrustedAuthorityQuery.html",[33,0.201,867,2.836]],["body/classes/TrustedAuthorityQuery.html",[3,0.046,4,0.051,5,0.041,7,1.69,9,0.689,12,2.226,13,0.169,14,0.739,16,1.573,17,0.433,19,0.631,20,0.412,21,0.006,25,2.263,26,1.767,27,1.495,28,2.263,30,0.113,31,0.003,32,0.003,33,0.376,35,0.761,41,2.872,42,0.961,45,0.37,48,1.705,50,0.198,51,1.11,52,4.137,54,1.555,55,2.853,56,2.27,57,2.804,58,0.875,59,1.946,60,3.337,61,3.337,70,3.963,76,2.459,81,1.654,82,1.206,88,1.514,100,2.357,102,1.008,104,2.176,106,1.338,110,2.056,116,1.555,125,2.469,126,1.248,248,1.362,271,1.292,342,1.501,377,4.409,378,1.852,379,2.615,380,1.62,382,2.111,446,2.872,462,2.243,497,1.654,507,1.847,534,4.367,535,4.225,536,3.894,537,3.866,538,3.976,549,2.243,552,3.52,584,1.69,588,4.367,597,1.767,664,0.889,764,2.175,773,1.897,788,2.052,805,1.362,812,1.756,818,1.946,819,1.997,820,3.072,821,3.264,823,3.264,824,1.808,827,3.488,829,2.407,831,2.215,833,2.357,834,1.62,836,1.654,837,1.292,841,3.264,843,2.175,844,2.175,845,1.587,846,2.357,847,1.248,848,1.587,849,2.838,850,3.73,851,4.118,852,2.243,853,2.514,855,2.831,856,3.627,857,2.986,858,3.73,859,2.492,860,4.275,861,2.401,862,3.976,863,2.492,864,4.695,865,2.492,866,2.492,867,4.367,868,2.492,869,3.627,870,3.627,871,2.492,872,2.318,873,2.492,874,2.492,875,3.627,876,2.111,877,4.367,878,2.492,879,2.492,880,2.906,881,2.492,882,2.401,883,2.052,884,1.555,885,3.406,886,2.318,887,2.243,888,2.175,889,2.401,890,1.997,891,2.492,892,2.401,4004,3.922,4005,3.922,4006,3.922,4007,3.922]],["title/classes/UpdateClientDto.html",[33,0.201,922,3.175]],["body/classes/UpdateClientDto.html",[3,0.086,4,0.095,5,0.077,21,0.006,30,0.095,31,0.005,32,0.005,33,0.307,35,1.421,38,3.715,50,0.202,102,1.882,342,1.923,416,4.779,420,1.894,429,4.276,664,1.954,922,5.704,963,4.329,1002,5.067,1046,6.019,1047,7.693,1048,4.483,4008,6.537]],["title/classes/UpdateKeyDto.html",[33,0.201,2370,3.69]],["body/classes/UpdateKeyDto.html",[3,0.087,4,0.096,5,0.077,21,0.006,23,1.813,30,0.096,31,0.005,32,0.005,33,0.31,35,1.435,38,3.737,50,0.204,102,1.901,420,1.905,1048,4.529,1502,5.738,1607,4.529,1630,5.378,2345,5.119,2370,6.669,3842,6.081,4009,8.67]],["title/classes/VCT.html",[33,0.201,1064,2.937]],["body/classes/VCT.html",[3,0.07,4,0.078,5,0.062,9,1.011,13,0.258,14,0.985,17,1.097,19,0.661,20,0.408,21,0.006,30,0.078,31,0.005,32,0.005,33,0.318,35,1.159,38,3.608,42,1.592,45,0.614,50,0.179,55,2.907,56,2.392,58,1.333,95,1.478,100,3.143,102,1.535,116,2.369,634,6.437,1064,5.571,1124,2.52,1348,7.361,4010,5.333,4011,8.37,4012,8.37,4013,8.37,4014,5.974,4015,5.974,4016,5.974,4017,5.974,4018,5.974,4019,5.974,4020,5.974,4021,5.974,4022,5.974,4023,7.607]],["title/classes/VaultKeyService.html",[33,0.201,2404,3.69]],["body/classes/VaultKeyService.html",[3,0.029,4,0.032,5,0.026,7,1.07,12,0.638,13,0.107,14,0.52,15,2.776,16,1.643,17,0.939,19,0.666,20,0.402,21,0.006,22,2.087,23,1.83,24,3.9,30,0.032,31,0.002,32,0.002,33,0.104,35,0.482,38,1.73,44,5.166,45,0.566,50,0.2,89,1.376,93,2.027,95,1.504,96,2.807,126,0.79,143,0.924,146,1.996,149,1.785,190,2.362,191,0.817,249,1.56,265,3.779,280,1.964,281,2.087,282,2.792,318,2.317,341,3.244,342,1.127,347,2.295,376,1.804,386,1.394,387,3.043,388,1.136,403,2.491,406,2.556,407,2.417,415,1.717,418,1.519,420,1.641,427,1.909,433,1.232,438,2.585,441,2.087,446,1.964,501,1.854,565,2.225,584,1.07,654,2.276,664,2.156,668,3.123,669,1.941,682,3.443,729,1.467,747,2.444,759,3.766,780,3.002,793,1.804,813,1.336,837,1.322,909,2.807,982,1.42,997,2.614,1061,5.065,1124,1.047,1130,1.467,1164,1.336,1180,1.519,1181,1.299,1207,1.232,1245,1.909,1264,1.467,1305,2.216,1375,3.217,1394,1.42,1403,1.336,1404,1.577,1491,2.656,1495,4.218,1501,2.656,1503,1.909,1516,1.909,1530,1.717,1531,3.298,1539,1.909,1542,2.216,1572,2.04,1574,5.361,1575,3.298,1578,6.339,1579,3.087,1580,3.672,1581,3.298,1582,3.298,1583,4.463,1586,3.087,1590,3.298,1592,3.582,1593,2.917,1602,4.152,1606,3.298,1607,3.552,1611,3.298,1613,2.04,1614,4.014,1615,5.179,1617,2.04,1618,2.216,1619,1.717,1621,2.04,1624,1.232,1625,1.643,1626,3.087,1627,1.804,1629,3.087,1630,1.804,1631,1.804,1633,1.909,1634,2.216,1654,2.216,1660,2.216,1666,2.216,1667,3.298,1669,2.216,1778,2.917,1814,3.298,1857,1.909,2232,1.376,2321,1.717,2361,3.582,2393,3.495,2402,4.715,2404,3.885,2409,6.786,2412,3.087,2428,3.582,2480,1.804,2497,2.216,2498,2.04,3048,1.909,3085,5.215,3086,1.643,3120,2.216,3132,1.909,3234,2.216,3235,2.216,3236,2.216,3237,2.216,3238,2.216,3267,3.582,3316,4.509,3979,2.04,4024,6.885,4025,5.051,4026,4.013,4027,4.013,4028,2.482,4029,2.482,4030,4.013,4031,2.482,4032,4.013,4033,2.482,4034,2.482,4035,4.013,4036,2.482,4037,4.013,4038,4.013,4039,2.482,4040,2.482,4041,2.482,4042,2.482,4043,5.802,4044,2.482,4045,2.482,4046,4.013,4047,2.482,4048,2.482,4049,4.013,4050,4.013,4051,2.482,4052,2.482,4053,2.482,4054,2.482,4055,7.173,4056,2.216,4057,4.152,4058,2.482,4059,2.482,4060,2.482,4061,2.482,4062,2.482,4063,4.013,4064,2.482,4065,2.482,4066,2.482,4067,2.482,4068,2.482,4069,2.482,4070,2.482,4071,2.216,4072,2.482,4073,2.482,4074,2.482,4075,5.051,4076,2.482,4077,2.482,4078,5.051,4079,2.482,4080,4.013,4081,2.482,4082,2.482,4083,2.482,4084,2.482,4085,2.482,4086,2.482,4087,2.482,4088,2.482,4089,2.482,4090,2.482,4091,2.482,4092,2.482,4093,2.482,4094,2.482,4095,3.582,4096,2.482,4097,2.482,4098,2.482,4099,2.482,4100,2.482,4101,2.482]],["title/modules/VerifierModule.html",[158,1.427,181,3.488]],["body/modules/VerifierModule.html",[3,0.076,4,0.084,5,0.067,21,0.006,30,0.084,31,0.005,32,0.005,33,0.27,50,0.226,147,1.102,158,2.576,160,2.717,161,3.116,162,3.28,163,3.28,164,2.902,165,3.04,166,3.04,171,5.424,178,6.026,179,5.804,181,7.286,183,4.062,184,3.28,185,3.28,188,3.513,203,4.262,209,4.953,210,4.682,2226,6.275,2231,5.518,2232,3.571,2811,6.275,2812,5.749,3033,5.749,4102,6.44,4103,6.44,4104,6.44]],["title/classes/WebHookAuthConfig.html",[33,0.201,113,3.175]],["body/classes/WebHookAuthConfig.html",[3,0.061,4,0.067,5,0.054,13,0.223,14,0.897,17,0.571,19,0.519,20,0.421,21,0.006,23,2.043,30,0.116,31,0.004,32,0.004,33,0.382,35,1.004,42,0.871,45,0.336,48,0.943,50,0.183,51,1.464,54,2.052,56,2.263,57,2.241,58,1.155,65,2.542,86,5.166,87,3.424,88,2.306,89,4.623,90,4.383,91,4.961,92,3.761,93,2.479,95,1.379,96,3.35,97,3.527,99,2.959,100,2.861,101,3.058,102,1.33,103,2.869,104,2.977,105,3.527,106,2.965,107,4.779,108,3.58,109,4.401,110,3.131,111,5.517,112,2.542,113,5.752,114,3.761,115,5.035,116,2.052,117,1.464,118,5.166,119,3.761,120,5.035,121,5.035,122,3.58,123,3.288,124,3.761,125,1.899,126,2.203,127,3.058,128,3.424,129,2.567,130,3.058,131,4.094,132,3.761,133,3.761,134,3.058,135,2.567,136,3.058,137,3.058,138,2.052,4105,5.174]],["title/classes/WebHookAuthConfigHeader.html",[33,0.201,111,3.175]],["body/classes/WebHookAuthConfigHeader.html",[3,0.058,4,0.065,5,0.052,9,0.602,13,0.215,14,0.874,17,0.55,19,0.51,20,0.424,21,0.006,23,2.103,30,0.115,31,0.004,32,0.004,33,0.379,35,0.967,42,1.137,45,0.438,48,0.908,50,0.18,51,1.41,54,1.976,56,2.238,57,2.185,58,1.112,65,2.478,86,5.433,87,3.297,88,2.4,89,4.758,90,4.493,91,4.867,92,3.622,93,2.441,95,1.353,96,3.266,97,3.439,99,2.85,100,2.789,101,2.945,102,1.28,103,2.762,104,2.92,105,3.439,106,3.018,107,4.133,108,3.447,109,4.867,110,3.26,111,5.679,112,2.811,113,5.679,114,3.622,115,5.567,116,2.678,117,2.168,118,5.068,119,3.622,120,4.908,121,3.622,122,3.447,123,3.166,124,3.622,125,1.829,126,2.148,127,2.945,128,3.297,129,2.472,130,2.945,131,3.991,132,3.622,133,3.622,134,2.945,135,2.472,136,2.945,137,2.945,138,1.976,4106,4.982,4107,4.982,4108,4.447,4109,4.982]],["title/classes/WebHookAuthConfigNone.html",[33,0.201,118,3.175]],["body/classes/WebHookAuthConfigNone.html",[3,0.06,4,0.067,5,0.054,13,0.221,14,0.892,17,0.566,19,0.517,20,0.423,21,0.006,23,2.036,30,0.116,31,0.004,32,0.004,33,0.382,35,0.995,42,0.864,45,0.333,48,0.935,50,0.182,51,1.452,54,2.035,56,2.257,57,2.229,58,1.145,65,2.528,86,5.144,87,3.395,88,2.299,89,4.607,90,4.431,91,4.94,92,3.729,93,2.471,95,1.373,96,3.331,97,3.507,99,2.934,100,2.845,101,3.032,102,1.318,103,2.844,104,2.964,105,3.507,106,3.044,107,4.215,108,3.549,109,4.376,110,3.215,111,5.499,112,2.853,113,5.735,114,3.729,115,5.006,116,2.035,117,1.452,118,5.499,119,3.729,120,5.651,121,3.729,122,3.549,123,3.26,124,3.729,125,1.883,126,2.191,127,3.032,128,3.395,129,2.545,130,3.032,131,4.07,132,3.729,133,3.729,134,3.032,135,2.545,136,3.032,137,3.032,138,2.035,4108,4.579,4110,5.13]],["title/classes/WebhookConfig.html",[33,0.201,125,1.761]],["body/classes/WebhookConfig.html",[3,0.058,4,0.064,5,0.052,9,0.596,13,0.213,14,0.868,17,0.74,19,0.544,20,0.416,21,0.006,23,2.004,30,0.115,31,0.004,32,0.004,33,0.378,35,0.957,42,1.13,45,0.435,48,0.899,50,0.179,51,1.397,54,1.957,56,2.283,57,2.171,58,1.101,65,2.462,86,5.044,87,3.266,88,2.394,89,4.534,90,4.445,91,5.197,92,3.587,93,2.432,95,1.346,96,3.245,97,3.416,99,2.823,100,2.771,101,2.917,102,1.268,103,2.736,104,2.906,105,3.416,106,3.079,107,4.106,108,3.414,109,4.263,110,3.251,111,5.66,112,2.462,113,5.412,114,3.587,115,4.877,116,1.957,117,1.397,118,5.412,119,3.587,120,4.877,121,3.587,122,4.641,123,4.263,124,3.587,125,2.462,126,2.721,127,3.965,128,4.439,129,3.328,130,2.917,131,3.965,132,3.587,133,3.587,134,3.965,135,2.448,136,2.917,137,3.965,138,3.022,714,2.275,1076,4.056,4111,4.934,4112,4.934,4113,4.934,4114,4.934]],["title/classes/WebhookResponse.html",[33,0.201,4115,3.69]],["body/classes/WebhookResponse.html",[3,0.05,4,0.055,5,0.045,9,0.514,17,0.47,19,0.403,21,0.006,23,1.484,30,0.079,31,0.004,32,0.004,33,0.253,35,0.826,45,0.276,48,0.776,50,0.203,65,2.222,82,2.59,91,2.706,97,3.083,109,3.847,110,3.457,129,2.112,147,0.729,149,1.477,265,4.254,271,2.774,318,2.672,379,2.354,380,1.759,383,1.31,386,1.479,387,2.361,388,1.713,403,2.166,406,2.667,407,1.959,420,1.548,438,2.361,446,2.354,511,2.308,567,3.292,589,2.292,592,4.015,593,2.818,701,3.847,780,2.667,890,3.083,1008,1.918,1065,3.907,1156,4.535,1307,5.421,1753,2.517,1790,2.818,1905,2.946,2036,4.976,2038,4.976,2228,3.847,2232,2.361,2262,2.706,2321,5.827,2402,5.308,2690,3.706,2693,3.095,2760,4.006,2836,4.477,2841,6.93,2859,4.976,2902,5.79,2903,4.976,2955,3.499,3085,5.121,3086,2.818,3132,4.656,3402,4.976,3486,3.8,3960,4.656,4057,4.976,4115,5.901,4116,3.499,4117,4.257,4118,5.404,4119,6.288,4120,3.8,4121,3.8,4122,3.8,4123,3.8,4124,3.8,4125,3.8,4126,7.518,4127,6.848,4128,6.848,4129,5.404,4130,3.8,4131,5.404,4132,7.734,4133,5.404,4134,5.404,4135,5.404,4136,5.404,4137,5.404,4138,5.404,4139,5.404,4140,5.404,4141,3.8,4142,3.8,4143,3.8,4144,3.8,4145,3.8,4146,3.8,4147,5.404,4148,3.8]],["title/injectables/WebhookService.html",[383,1.038,2228,3.049]],["body/injectables/WebhookService.html",[3,0.045,4,0.05,5,0.04,9,0.681,13,0.167,17,0.861,19,0.257,20,0.288,21,0.006,23,0.946,30,0.073,31,0.003,32,0.003,33,0.236,45,0.433,48,1.028,50,0.197,65,2.07,82,2.652,91,3.584,93,1.148,95,1.177,97,2.872,109,3.584,110,3.445,129,2.798,143,1.298,146,1.278,147,0.66,149,1.537,265,4.065,271,2.77,281,1.634,318,2.615,379,2.193,380,2.33,383,1.22,384,1.472,386,1.959,387,2.614,388,2.075,403,2.049,406,2.485,407,1.825,420,1.464,438,2.234,446,2.193,511,2.151,567,3.427,589,2.078,592,4.513,593,2.554,668,2.078,701,3.584,780,2.485,805,1.341,890,1.966,1008,1.739,1065,3.394,1156,4.334,1307,5.663,1753,3.334,1790,3.733,1905,3.902,2036,4.636,2038,4.636,2228,4.659,2232,2.14,2262,2.453,2321,5.636,2402,5.82,2690,4.488,2693,2.806,2760,4.852,2836,5.346,2841,7.116,2859,4.636,2902,5.478,2903,4.636,2955,4.636,3048,2.968,3085,4.845,3086,2.554,3132,4.338,3402,4.636,3960,5.639,4057,4.636,4115,5.126,4116,3.172,4118,5.034,4119,6.962,4120,5.949,4121,3.445,4122,3.445,4123,3.445,4124,3.445,4125,3.445,4126,7.271,4127,6.544,4128,6.544,4129,5.034,4130,3.445,4131,5.034,4132,7.509,4133,5.034,4134,5.034,4135,5.034,4136,5.034,4137,5.034,4138,5.034,4139,5.034,4140,5.034,4141,5.949,4142,3.445,4143,3.445,4144,3.445,4145,3.445,4146,3.445,4147,5.034,4148,3.445,4149,3.859,4150,3.859,4151,3.859,4152,3.859,4153,3.859]],["title/controllers/WellKnownController.html",[139,1.501,187,3.69]],["body/controllers/WellKnownController.html",[3,0.056,4,0.062,5,0.05,9,0.901,13,0.204,17,0.823,20,0.364,21,0.006,23,1.598,30,0.062,31,0.004,32,0.004,33,0.198,42,1.256,45,0.484,48,1.189,50,0.217,95,1.42,96,2.291,102,1.217,116,1.878,139,2.333,141,1.675,143,1.501,146,2.117,147,0.81,148,3.009,149,1.564,182,5.561,187,5.737,218,5.161,219,6.182,221,4.227,246,3.007,247,3.855,248,2.591,254,3.855,262,4.671,278,4.671,281,1.828,282,2.471,300,5.821,304,3.155,315,3.134,317,2.041,318,2.182,321,3.642,342,1.455,388,1.34,466,4.097,507,2.111,532,4.805,555,2.236,557,8.118,558,5.016,567,3.522,589,2.549,590,5.161,591,3.642,601,1.998,611,3.642,646,5.737,660,4.227,664,1.073,1164,3.51,1170,3.992,1283,5.319,1787,3.276,1854,5.673,2177,3.892,2209,4.227,2217,5.423,2709,3.442,2758,5.016,3738,4.227,4154,4.227,4155,4.735,4156,7.174,4157,5.821,4158,4.735,4159,4.735,4160,4.735,4161,4.735,4162,6.521,4163,4.735,4164,4.735,4165,4.735,4166,6.606,4167,4.735,4168,4.735,4169,4.735,4170,4.735,4171,5.821,4172,4.735,4173,4.227,4174,4.227,4175,4.227,4176,4.735,4177,4.735,4178,4.735,4179,4.735,4180,4.227,4181,4.735,4182,4.735,4183,4.735,4184,4.735,4185,4.735,4186,4.735,4187,4.735,4188,4.735]],["title/injectables/WellKnownService.html",[182,3.32,383,1.038]],["body/injectables/WellKnownService.html",[3,0.047,4,0.052,5,0.042,9,0.487,11,3.441,12,1.036,13,0.174,17,0.826,19,0.455,20,0.39,21,0.006,23,1.675,30,0.052,31,0.003,32,0.003,33,0.169,45,0.486,50,0.212,93,1.731,95,1.322,143,1.34,146,2.046,147,0.69,149,1.569,182,5.177,218,4.027,219,6.103,246,3.812,247,4.423,248,2.022,249,2.263,254,3.441,261,2.93,262,3.575,278,3.575,281,1.834,282,2.44,294,4.028,304,2.816,318,2.321,341,2.053,342,1.845,378,2.748,383,1.259,384,1.537,386,2.022,387,2.29,388,2.118,403,2.301,420,1.279,438,2.29,441,2.405,455,3.598,466,3.841,481,3.1,482,2.562,484,3.1,485,2.93,507,1.884,532,5.059,546,2.467,558,4.477,567,3.294,574,4.232,589,2.17,594,5.343,601,3.156,654,3.932,664,1.319,669,2.816,686,2.235,705,4.342,747,3.305,760,2.109,880,2.053,1061,3.228,1083,2.93,1164,4.451,1170,3.563,1191,3.313,1282,4.477,1283,5.252,1375,4.727,1402,3.1,1403,2.17,1404,2.562,1408,2.17,1413,3.598,1437,3.313,1454,3.313,1455,2.668,1463,2.93,1464,3.1,1787,2.789,1854,5.043,2172,4.232,2179,5.418,2180,2.93,2187,4.477,2316,5.196,2709,2.93,2891,3.598,2893,3.313,2894,5.196,2900,3.313,3023,4.784,3296,5.196,3300,3.598,3427,6.099,3671,5.196,4156,5.196,4157,5.196,4166,6.15,4171,3.598,4173,3.598,4174,3.598,4175,3.598,4180,3.598,4189,3.598,4190,5.821,4191,6.832,4192,5.821,4193,4.031,4194,4.031,4195,4.031,4196,4.031,4197,5.196,4198,5.821,4199,4.031,4200,5.821,4201,5.821,4202,5.821,4203,5.821,4204,6.15,4205,5.196,4206,5.821,4207,4.031,4208,4.031,4209,4.031,4210,4.031,4211,4.031,4212,4.031,4213,5.821,4214,4.031,4215,3.598,4216,4.031,4217,4.031,4218,4.031]],["title/coverage.html",[4219,5.874]],["body/coverage.html",[0,2.48,1,1.647,5,0.021,6,1.789,7,0.864,8,1.789,12,0.515,20,0.341,21,0.006,22,0.828,23,0.491,27,0.764,31,0.002,32,0.002,33,0.413,34,1.111,36,4.15,39,1.111,59,0.994,60,0.994,61,0.994,64,1.274,71,1.111,78,1.111,80,1.274,84,1.111,86,1.326,87,3.756,111,1.326,113,1.326,117,0.952,118,1.326,125,0.736,139,2.679,140,1.541,142,1.789,164,0.903,182,1.387,187,1.541,212,1.647,215,1.647,219,2.587,239,1.541,240,1.789,249,0.779,262,1.049,263,1.541,267,1.541,272,1.457,278,1.049,297,2.765,305,1.387,311,1.541,354,1.457,355,1.326,356,1.457,366,1.457,367,1.789,368,4.21,383,1.977,385,1.789,391,1.457,398,1.274,400,1.274,402,1.185,407,0.649,429,0.994,442,1.049,466,0.903,487,1.227,488,3.905,489,3.905,490,1.274,492,1.274,508,1.274,513,1.111,516,1.227,527,2.226,528,2.765,529,3.997,553,1.541,554,1.789,566,1.274,567,0.722,590,1.387,592,1.049,594,1.227,598,1.541,624,1.789,645,3.344,654,0.903,655,1.185,656,1.227,691,1.457,693,1.457,695,1.457,702,1.713,759,1.185,767,7.601,773,0.97,812,2.064,813,1.079,815,2.765,831,0.66,839,1.457,850,1.111,851,4.194,852,4.21,858,1.111,862,1.185,867,1.185,877,1.185,897,1.541,898,1.789,906,1.326,907,0.994,922,1.326,930,1.111,932,1.227,934,1.541,959,1.789,960,1.789,963,1.185,964,1.789,984,1.227,999,1.541,1008,0.903,1020,1.789,1022,2.765,1045,1.789,1046,2.765,1049,1.387,1050,1.789,1051,1.789,1056,1.865,1057,4.126,1064,1.227,1069,1.387,1102,1.274,1112,1.326,1116,1.387,1117,1.079,1132,1.457,1133,1.789,1134,3.344,1137,1.541,1138,2.765,1143,1.387,1149,1.326,1150,1.789,1151,1.457,1152,3.344,1158,1.227,1207,4.952,1282,1.541,1283,4.066,1284,1.789,1285,2.765,1307,1.227,1323,1.541,1324,1.789,1342,1.326,1347,1.541,1348,3.344,1349,1.647,1350,1.789,1367,1.789,1373,1.185,1375,1.111,1403,3.515,1405,1.924,1478,4.741,1480,1.387,1481,4.185,1491,1.326,1499,1.541,1505,2.765,1516,1.541,1526,1.457,1560,1.274,1562,1.541,1566,1.326,1570,1.541,1571,1.789,1572,2.765,1574,1.326,1601,1.326,1607,1.227,1628,2.328,1711,1.541,1712,1.789,1717,1.457,1721,1.387,1728,1.789,1730,1.274,1732,3.344,1735,1.457,1738,1.457,1744,1.789,1787,1.387,1789,1.789,1827,1.457,1828,1.789,1834,1.326,1835,3.917,1851,1.457,1854,1.274,1859,1.387,1868,1.457,1870,1.541,1871,1.789,1872,1.789,1875,1.789,1938,1.541,1939,2.765,1941,1.541,1974,1.541,1975,1.789,1995,1.789,1996,2.765,2046,3.344,2053,3.003,2089,1.541,2090,1.789,2108,1.789,2162,1.541,2163,2.765,2164,1.647,2165,1.789,2168,1.387,2171,1.326,2179,1.274,2217,1.457,2218,1.789,2228,1.274,2230,1.541,2254,1.789,2265,1.647,2278,1.789,2345,3.927,2346,2.765,2358,1.789,2370,1.541,2386,2.765,2392,1.647,2404,1.541,2412,1.541,2413,1.789,2418,1.789,2432,4.678,2437,1.789,2580,1.541,2581,1.789,2618,1.326,2619,2.765,2633,1.541,2689,1.274,2690,1.227,2696,1.541,2702,1.541,2703,1.789,2709,1.457,2710,1.789,2721,2.765,2744,1.789,2760,1.326,2781,1.541,2782,1.789,2814,1.789,2817,1.274,2818,1.274,2826,1.541,2836,1.274,2866,2.765,2960,1.789,2982,1.457,2983,1.789,2987,1.541,2988,1.789,2996,1.541,3019,2.587,3025,1.789,3037,1.789,3049,1.387,3134,1.457,3135,1.789,3152,1.789,3281,1.789,3290,1.789,3326,1.789,3329,1.647,3331,1.789,3335,1.647,3345,1.541,3346,1.789,3401,2.587,3452,1.541,3453,1.789,3466,1.457,3470,1.647,3472,1.541,3484,4.126,3485,1.789,3491,1.789,3520,1.647,3561,1.789,3631,1.789,3640,1.789,3673,8.121,3725,1.541,3726,3.756,3727,1.789,3741,1.457,3742,2.765,3743,1.789,3761,1.457,3765,1.789,3832,1.789,3842,2.765,3848,1.541,3849,1.789,3879,1.647,3884,1.541,3900,1.541,3901,1.789,3924,2.765,3932,1.647,3943,2.765,3974,1.647,4002,1.789,4008,1.789,4010,1.789,4024,1.789,4115,1.541,4116,2.765,4154,1.789,4189,1.789,4219,1.789,4220,2.004,4221,2.004,4222,7.902,4223,2.004,4224,3.364,4225,3.364,4226,4.545,4227,7.054,4228,1.789,4229,9.492,4230,1.789,4231,1.789,4232,7.565,4233,8.043,4234,2.004,4235,2.004,4236,3.364,4237,2.004,4238,2.004,4239,9.139,4240,2.004,4241,2.004,4242,3.364,4243,5.675,4244,2.004,4245,2.004,4246,3.003,4247,3.003,4248,1.789,4249,7.744,4250,6.144,4251,2.004,4252,2.004,4253,5.066,4254,5.675,4255,7.565,4256,3.003,4257,2.004,4258,2.004,4259,1.789,4260,4.348,4261,6.529,4262,2.004,4263,2.004,4264,2.004,4265,2.004,4266,2.004,4267,3.881,4268,4.348,4269,1.789,4270,1.789,4271,5.092,4272,1.789,4273,1.789,4274,2.004,4275,1.789,4276,1.789,4277,5.675,4278,2.004,4279,2.004,4280,5.675,4281,2.004,4282,2.004,4283,2.004,4284,2.004,4285,2.004,4286,2.004,4287,4.348,4288,3.364,4289,3.003,4290,3.364,4291,2.004,4292,4.348,4293,4.348,4294,2.004,4295,2.004,4296,1.789,4297,2.004,4298,2.004,4299,2.004,4300,3.364,4301,3.364,4302,1.789,4303,2.004,4304,2.004,4305,1.789,4306,1.789,4307,1.789,4308,3.364,4309,1.789,4310,1.789,4311,1.789,4312,3.364,4313,3.364,4314,1.647,4315,2.004,4316,1.789,4317,1.789,4318,5.857,4319,1.789,4320,1.789,4321,1.789,4322,5.485,4323,1.789,4324,1.789,4325,1.789,4326,1.789,4327,1.789,4328,1.789,4329,1.789,4330,1.789,4331,1.789,4332,1.789,4333,2.004,4334,1.789,4335,3.003,4336,2.004,4337,1.647,4338,1.789,4339,2.004,4340,1.789,4341,2.004,4342,2.004,4343,2.004]],["title/dependencies.html",[161,2.796,4344,3.563]],["body/dependencies.html",[12,1.482,21,0.006,31,0.004,32,0.004,33,0.311,51,1.632,58,1.287,102,1.482,147,0.987,161,2.789,191,1.899,193,4.739,194,3.197,196,4.739,198,5.146,199,3.103,200,4.564,254,3.408,256,4.192,324,2.54,359,4.434,532,3.103,685,4.191,747,3.598,847,1.834,991,2.287,993,3.664,994,3.815,1296,3.017,1391,3.989,1394,4.974,1395,4.434,1396,4.434,1398,4.434,1400,4.434,1401,4.191,1619,3.989,1624,2.86,1627,4.191,1987,4.739,2178,3.815,2232,3.197,2263,4.434,2297,5.146,2300,5.146,2453,5.146,2454,4.434,2637,4.434,2653,4.191,3086,3.815,3192,5.146,3352,4.191,3362,5.719,3363,4.739,3364,5.146,3365,5.146,3683,4.434,4345,7.436,4346,5.765,4347,5.765,4348,7.436,4349,8.231,4350,5.765,4351,5.765,4352,5.765,4353,5.765,4354,5.765,4355,5.765,4356,5.765,4357,7.436,4358,8.696,4359,8.696,4360,8.696,4361,5.765,4362,5.765,4363,5.765,4364,5.765,4365,8.231,4366,5.765,4367,5.765,4368,5.765,4369,5.765,4370,5.765,4371,5.765,4372,5.765,4373,5.765,4374,5.765,4375,5.765,4376,5.765,4377,5.765,4378,5.765,4379,5.765,4380,5.765,4381,5.765,4382,5.765,4383,5.765,4384,5.765,4385,5.765,4386,5.765,4387,5.765,4388,5.765,4389,5.765,4390,5.765,4391,5.765,4392,5.765]],["title/miscellaneous/enumerations.html",[4393,2.537,4394,5.159]],["body/miscellaneous/enumerations.html",[12,1.579,13,0.265,20,0.334,21,0.006,31,0.005,32,0.005,65,3.268,87,4.067,89,3.408,90,2.902,91,3.906,93,3.013,105,3.945,106,2.643,107,4.741,108,4.252,109,3.906,138,3.072,271,2.024,379,2.39,390,3.906,488,3.906,489,4.922,505,3.633,517,4.922,518,4.067,529,4.741,537,3.216,539,3.657,928,3.338,965,3.633,984,3.762,1266,4.578,1530,4.252,1753,3.633,2178,5.126,2181,5.359,2187,4.727,2731,4.727,2835,5.957,2934,4.468,3019,4.727,3024,5.486,3401,4.727,3431,5.359,3445,6.914,3446,5.631,3447,6.914,4166,6.366,4204,5.051,4205,5.486,4337,5.051,4393,3.906,4394,5.486,4395,6.146,4396,6.146,4397,5.486,4398,7.745,4399,6.146,4400,6.146,4401,5.486,4402,6.146,4403,6.146,4404,6.146,4405,6.146,4406,6.146,4407,6.146,4408,6.146,4409,6.146,4410,6.146,4411,6.146,4412,6.146,4413,6.146]],["title/miscellaneous/functions.html",[4393,2.537,4414,5.159]],["body/miscellaneous/functions.html",[9,1.152,12,2.03,13,0.229,17,1.03,19,0.628,20,0.397,21,0.006,23,2.252,28,2.1,31,0.004,32,0.004,48,0.965,76,2.282,88,1.405,95,1.648,116,2.789,117,1.99,146,2.115,154,4.251,164,3.791,194,2.936,199,2.85,265,2.936,281,2.287,378,2.5,382,2.85,419,6.074,442,2.771,571,3.028,590,5.464,668,3.786,691,5.113,737,4.072,837,2.965,872,4.668,930,3.9,1062,4.517,1065,4.285,1124,2.233,1164,4.715,1450,6.074,1534,3.241,1753,3.13,2140,4.352,2432,4.469,2650,5.113,3100,4.352,3178,4.352,4248,4.726,4302,4.726,4305,4.726,4311,4.726,4318,4.352,4322,4.726,4323,6.278,4324,6.278,4325,6.278,4326,6.278,4327,6.278,4328,6.278,4393,3.365,4414,4.726,4415,5.294,4416,9.003,4417,5.294,4418,5.294,4419,5.294,4420,5.294,4421,5.294,4422,8.414,4423,5.294,4424,5.294,4425,5.294,4426,5.294,4427,5.294,4428,5.294,4429,5.294,4430,7.033,4431,5.294,4432,7.033,4433,5.294,4434,5.294,4435,4.352,4436,5.294,4437,7.897,4438,8.414,4439,7.897,4440,7.897,4441,5.294,4442,7.033,4443,5.294,4444,5.294,4445,5.294,4446,5.294,4447,5.294,4448,5.294,4449,5.294]],["title/index.html",[13,0.207,4450,4.283]],["body/index.html",[2,1.75,21,0.006,31,0.003,32,0.003,35,0.702,141,1.279,158,1.076,159,7.575,160,1.526,161,1.75,162,1.842,163,1.842,164,1.63,165,1.708,166,1.708,167,3.229,168,3.229,169,3.229,170,6.887,171,5.318,172,5.165,173,4.665,174,6.814,175,4.665,176,5.95,177,4.665,178,5.747,179,5.691,180,4.665,181,6.644,182,4.44,183,2.738,184,1.842,185,1.842,305,4.44,348,3.229,349,3.229,350,3.229,351,3.229,352,5.254,353,7.033,354,5.991,355,5.454,356,5.991,384,1.379,402,4.871,546,2.214,592,4.312,594,5.044,654,3.713,655,4.871,656,5.044,814,1.708,1149,5.454,1207,1.795,1342,4.247,1373,4.871,1375,4.569,1474,5.52,1475,3.229,1476,3.229,1477,3.229,1557,3.229,1558,3.229,1559,3.229,1560,5.237,1721,4.44,2179,5.237,2222,3.229,2223,3.229,2224,3.229,2225,3.229,2226,6.153,2227,5.826,2228,4.515,2618,4.247,2686,3.229,2687,3.229,2688,3.229,2689,5.38,2690,5.044,2696,2.782,2805,3.229,2807,3.229,2808,3.229,2811,5.725,2817,5.237,2818,5.237,3027,3.229,3028,3.229,3029,3.229,3030,3.229,3031,5.785,3049,5.701,3142,3.229,3143,3.229,3144,3.229,3285,3.229,3286,3.229,3287,3.229,3621,3.229,3622,3.229,3623,3.229,3754,3.229,3756,3.229,3757,3.229,3936,3.229,3938,3.229,3939,3.229,4314,2.973,4450,3.229,4451,3.229,4452,3.617,4453,3.617,4454,3.617,4455,3.617]],["title/modules.html",[160,2.776]],["body/modules.html",[21,0.005,31,0.005,32,0.005,159,5.061,160,2.776,170,4.784,171,3.764,172,4.784,173,4.784,174,4.553,175,4.784,176,4.182,177,4.784,178,4.182,179,4.028,180,4.784,181,4.784,352,4.553,353,4.784,408,6.595,412,7.304,1474,4.784,2226,4.355,2227,4.355,2811,4.355,3031,4.784,4456,10.046,4457,10.046,4458,10.17,4459,9.531]],["title/properties.html",[14,0.748,4344,3.563]],["body/properties.html",[9,0.904,14,0.97,21,0.006,31,0.005,32,0.005,156,7.178,531,5.182,997,3.374,4197,6.686,4460,7.489,4461,7.489,4462,7.489,4463,7.489,4464,7.489,4465,7.489,4466,8.733,4467,7.489,4468,7.489,4469,7.489,4470,7.489,4471,7.489,4472,7.489,4473,7.489]],["title/routes.html",[4474,5.874]],["body/routes.html",[21,0.005,31,0.005,32,0.005,4474,7.08]],["title/miscellaneous/typealiases.html",[4393,2.537,4475,5.779]],["body/miscellaneous/typealiases.html",[11,3.883,13,0.284,20,0.404,21,0.006,23,1.61,31,0.005,32,0.005,36,4.174,37,3.757,64,5.13,65,2.411,66,3.757,67,3.757,347,3.757,376,6.628,478,3.883,501,2.411,567,2.366,759,4.772,812,1.715,815,5.399,839,5.869,965,3.883,1153,3.345,1307,4.942,1403,4.346,1478,5.585,1481,7.493,1491,5.343,1499,6.209,1505,6.635,1516,6.209,1526,4.775,1530,4.544,1753,3.883,1803,5.399,1817,5.399,1835,5.052,1851,5.869,1859,5.585,1867,5.052,2386,5.399,2392,6.635,2393,4.544,2432,5.13,3352,4.775,3401,5.052,3448,4.544,3879,5.399,3884,6.209,3924,5.399,3932,6.635,4393,4.174,4401,5.863,4476,6.568,4477,6.568,4478,8.138,4479,6.568,4480,6.568,4481,6.568,4482,7.206,4483,6.568]],["title/miscellaneous/variables.html",[4393,2.537,4435,4.751]],["body/miscellaneous/variables.html",[3,0.055,5,0.049,9,0.216,11,2.363,12,1.487,13,0.077,16,1.007,19,0.496,20,0.347,21,0.006,22,1.954,23,1.515,25,0.709,31,0.002,32,0.002,48,1.127,50,0.094,88,1.255,93,2.653,95,1.022,106,0.61,116,0.709,117,1.75,123,1.136,126,2.073,138,3.023,143,0.412,149,1.426,151,1.237,158,1.189,190,1.006,200,1.694,212,2.51,215,2.51,231,5.587,246,0.824,249,2.065,255,0.991,256,1.555,257,0.865,262,0.936,265,1.694,285,4.322,294,0.962,323,2.349,347,1.023,380,1.954,386,1.061,387,1.78,398,2.541,407,0.989,411,2.475,419,1.375,420,1.708,429,2.635,438,2.072,441,0.739,442,2.78,453,0.771,457,1.136,462,1.747,466,1.801,491,1.515,498,0.991,501,1.121,506,0.962,532,0.962,539,1.442,565,1.694,567,2.227,571,2.287,609,1.375,664,0.405,669,1.478,682,2.18,714,1.408,715,2.021,736,1.375,747,2.288,760,1.598,780,0.788,805,3.1,837,1.906,853,1.761,872,5.621,876,2.152,907,0.887,928,0.771,1008,1.801,1022,1.47,1062,3.038,1124,2.241,1153,0.911,1156,1.057,1198,1.183,1211,2.646,1214,1.87,1243,1.47,1264,1.057,1265,3.14,1381,1.3,1403,0.962,1444,1.596,1445,2.349,1448,1.094,1449,2.021,1456,1.47,1468,1.3,1478,2.113,1480,1.237,1486,1.47,1491,1.183,1492,1.596,1496,1.47,1497,1.596,1500,1.596,1501,3.13,1502,3.13,1503,3.075,1504,1.136,1526,3.861,1527,1.47,1530,1.237,1540,1.596,1552,1.47,1593,1.3,1685,1.47,1686,1.596,1690,1.596,1692,1.596,1694,1.596,1696,1.47,1698,4.756,1700,4.741,1753,1.057,1835,1.375,1854,1.941,1867,3.637,1868,2.22,1869,1.596,1899,1.47,1941,2.349,1946,2.51,2046,1.375,2047,2.51,2048,2.113,2049,3.887,2050,2.51,2051,2.51,2052,1.47,2127,1.596,2141,3.637,2163,1.47,2172,2.22,2265,2.51,2333,2.349,2335,1.596,2393,2.113,2408,1.596,2409,4.756,2432,1.136,2473,6.484,2478,4.876,2635,4.664,2637,4.085,2650,1.3,2653,1.3,2656,2.51,2659,2.51,2660,2.51,2665,1.47,2666,2.51,2667,1.47,2668,1.47,2670,1.47,2673,1.47,2674,3.286,2675,2.51,2676,1.47,2760,2.021,2823,1.47,2842,1.941,2843,2.349,2866,4.756,3065,1.596,3099,7.341,3147,5.59,3165,1.375,3178,6.694,3206,1.596,3207,1.596,3335,2.51,3349,4.741,3352,5.84,3362,1.375,3448,2.113,3484,1.3,3493,1.3,3520,2.51,3525,2.726,3534,2.726,3545,1.596,3594,1.596,3667,1.596,3670,1.596,3672,1.596,3884,1.375,3887,1.596,3892,1.596,3894,1.596,3896,1.596,4056,1.596,4071,1.596,4095,1.596,4204,1.47,4215,2.726,4226,1.596,4227,7.717,4228,3.569,4230,2.726,4231,2.726,4246,1.596,4247,1.596,4253,4.221,4256,1.596,4259,2.726,4267,2.726,4269,2.726,4270,1.596,4272,1.596,4273,2.726,4275,1.596,4276,2.726,4289,1.596,4296,2.726,4306,1.596,4307,2.726,4309,1.596,4310,2.726,4314,3.286,4316,1.596,4317,2.726,4318,3.286,4319,1.596,4320,1.596,4321,2.726,4329,1.596,4330,2.726,4331,1.596,4332,2.726,4334,1.596,4335,3.569,4337,1.47,4338,2.726,4340,2.726,4393,1.136,4397,1.596,4435,2.51,4451,5.816,4478,1.596,4482,1.596,4484,4.729,4485,1.788,4486,1.788,4487,1.788,4488,1.788,4489,1.788,4490,1.788,4491,1.788,4492,3.054,4493,1.788,4494,1.788,4495,1.788,4496,1.788,4497,3.054,4498,3.998,4499,1.788,4500,1.788,4501,1.788,4502,1.788,4503,7.264,4504,8.969,4505,5.311,4506,3.054,4507,9.508,4508,1.788,4509,1.788,4510,7.623,4511,1.788,4512,1.788,4513,7.623,4514,1.788,4515,1.788,4516,6.801,4517,3.054,4518,4.729,4519,1.788,4520,1.788,4521,1.788,4522,1.788,4523,1.788,4524,6.182,4525,1.788,4526,1.788,4527,1.788,4528,1.788,4529,1.788,4530,5.311,4531,1.788,4532,5.311,4533,1.788,4534,3.998,4535,1.788,4536,1.788,4537,1.788,4538,1.788,4539,1.788,4540,1.788,4541,1.788,4542,3.054,4543,1.788,4544,1.788,4545,1.788,4546,1.788,4547,1.788,4548,3.054,4549,3.054,4550,1.788,4551,6.182,4552,5.787,4553,1.788,4554,1.788,4555,1.788,4556,1.788,4557,1.788,4558,1.788,4559,1.788,4560,1.788,4561,1.788,4562,1.788,4563,4.729,4564,1.788,4565,4.729,4566,1.788,4567,3.998,4568,3.998,4569,3.054,4570,3.054,4571,3.054,4572,3.054,4573,3.054,4574,3.054,4575,3.054,4576,3.054,4577,1.788,4578,3.054,4579,1.788,4580,1.788,4581,1.788,4582,1.788,4583,1.788,4584,1.788,4585,1.788,4586,1.788,4587,1.788,4588,1.788,4589,1.788,4590,3.054,4591,1.788,4592,1.788,4593,1.788,4594,1.788,4595,1.788,4596,1.788,4597,1.788,4598,1.788,4599,1.788,4600,1.788,4601,1.788,4602,1.788,4603,1.788,4604,8.032,4605,1.788,4606,1.788,4607,5.787,4608,1.788,4609,5.311,4610,7.91,4611,1.788,4612,1.788,4613,3.998,4614,1.788,4615,1.788,4616,1.788,4617,4.729,4618,1.788,4619,5.787,4620,1.788,4621,3.054,4622,1.788,4623,1.788,4624,3.054,4625,1.788,4626,3.054,4627,1.788,4628,1.788,4629,1.788,4630,3.054,4631,1.788,4632,1.788,4633,1.788,4634,1.788,4635,1.788,4636,1.788,4637,1.788,4638,3.054,4639,1.788,4640,1.788,4641,3.054,4642,1.788,4643,1.788,4644,1.788,4645,3.054,4646,3.054,4647,1.788,4648,1.788,4649,1.788,4650,1.788,4651,1.788,4652,3.998,4653,1.788,4654,1.788,4655,1.788,4656,1.788,4657,1.788,4658,1.788,4659,1.788,4660,1.788,4661,1.788,4662,1.788,4663,1.788,4664,1.788,4665,1.788,4666,1.788,4667,6.515,4668,1.788,4669,1.788,4670,1.788,4671,1.788,4672,1.788,4673,1.788,4674,1.788,4675,1.788,4676,1.788,4677,1.788,4678,1.788,4679,1.788,4680,1.788,4681,1.788,4682,1.788,4683,1.788,4684,1.788,4685,1.788,4686,1.788,4687,1.788,4688,1.788,4689,1.788]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"modules/ClientModule.html":{},"classes/ClientSecretResponseDto.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/LoggerModule.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateClientDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1207,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{},"coverage.html":{},"index.html":{}}}],["0.0.1",{"_index":4461,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":4371,"title":{},"body":{"dependencies.html":{}}}],["0.15.0",{"_index":4365,"title":{},"body":{"dependencies.html":{}}}],["0.15.1",{"_index":4366,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":4387,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":4358,"title":{},"body":{"dependencies.html":{}}}],["0.3.27",{"_index":4391,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":3802,"title":{},"body":{"injectables/StatusListService.html":{}}}],["0.5.1",{"_index":4370,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":4229,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":4278,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":4234,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":4279,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":4222,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":4233,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":4243,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":4241,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":4312,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":4313,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":4271,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":4238,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":546,"title":{"classes/AuthorizationResponse-1.html":{}},"body":{"entities/IssuanceConfig.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/WellKnownService.html":{},"index.html":{}}}],["1.12.2",{"_index":4369,"title":{},"body":{"dependencies.html":{}}}],["1.14.0",{"_index":4364,"title":{},"body":{"dependencies.html":{}}}],["1.5.4",{"_index":4385,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":4239,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":4235,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":4254,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":4288,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":4290,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":4245,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":4282,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":2473,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"miscellaneous/variables.html":{}}}],["10,000",{"_index":3782,"title":{},"body":{"injectables/StatusListService.html":{}}}],["10.5.0",{"_index":4382,"title":{},"body":{"dependencies.html":{}}}],["10/12",{"_index":4301,"title":{},"body":{"coverage.html":{}}}],["10/15",{"_index":4262,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":767,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["1000",{"_index":1455,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["10000",{"_index":3795,"title":{},"body":{"injectables/StatusListService.html":{}}}],["11",{"_index":4285,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":4357,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":4354,"title":{},"body":{"dependencies.html":{}}}],["11.1.6",{"_index":4349,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":4356,"title":{},"body":{"dependencies.html":{}}}],["12/14",{"_index":4336,"title":{},"body":{"coverage.html":{}}}],["12/schema",{"_index":3391,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["13",{"_index":4453,"title":{},"body":{"index.html":{}}}],["13.0.0",{"_index":4392,"title":{},"body":{"dependencies.html":{}}}],["13.1.1",{"_index":4383,"title":{},"body":{"dependencies.html":{}}}],["13/13",{"_index":4291,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":4281,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":4308,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":4611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["15.1.3",{"_index":4384,"title":{},"body":{"dependencies.html":{}}}],["16",{"_index":4244,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":4455,"title":{},"body":{"index.html":{}}}],["18.0.1",{"_index":4373,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":4452,"title":{},"body":{"index.html":{}}}],["1_0.html#claims_query",{"_index":874,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["1_0.html#name",{"_index":538,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["2",{"_index":3979,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{}}}],["2.0",{"_index":4197,"title":{},"body":{"injectables/WellKnownService.html":{},"properties.html":{}}}],["2.0.2",{"_index":4376,"title":{},"body":{"dependencies.html":{}}}],["2/17",{"_index":4286,"title":{},"body":{"coverage.html":{}}}],["2/2",{"_index":4277,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":4280,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":4451,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["200",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":2170,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["20250825150235",{"_index":4360,"title":{},"body":{"dependencies.html":{}}}],["21/23",{"_index":4258,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["24h",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["25",{"_index":4289,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["256",{"_index":1445,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["26",{"_index":4520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["26.3.4",{"_index":4347,"title":{},"body":{"dependencies.html":{}}}],["29",{"_index":4454,"title":{},"body":{"index.html":{}}}],["3",{"_index":2531,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["3.0.1",{"_index":4353,"title":{},"body":{"dependencies.html":{}}}],["3.15.0",{"_index":4378,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":4375,"title":{},"body":{"dependencies.html":{}}}],["3.3.1",{"_index":4346,"title":{},"body":{"dependencies.html":{}}}],["3.894.0",{"_index":4345,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":4255,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":4293,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":4242,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":4524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["300",{"_index":764,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["30d",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["33",{"_index":4287,"title":{},"body":{"coverage.html":{}}}],["36/36",{"_index":4225,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":535,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["4.0.1",{"_index":4348,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":4350,"title":{},"body":{"dependencies.html":{}}}],["4.4.1",{"_index":4379,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":4232,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":4268,"title":{},"body":{"coverage.html":{}}}],["4/9",{"_index":4266,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":4530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["401",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["44",{"_index":4265,"title":{},"body":{"coverage.html":{}}}],["47",{"_index":4263,"title":{},"body":{"coverage.html":{}}}],["4909",{"_index":2199,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["5",{"_index":2319,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["5.1.7",{"_index":4390,"title":{},"body":{"dependencies.html":{}}}],["5/15",{"_index":4333,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":4250,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":4298,"title":{},"body":{"coverage.html":{}}}],["5/9",{"_index":4252,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":4253,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["500",{"_index":615,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["55",{"_index":4251,"title":{},"body":{"coverage.html":{}}}],["6.0.1",{"_index":4355,"title":{},"body":{"dependencies.html":{}}}],["6.0.2",{"_index":4367,"title":{},"body":{"dependencies.html":{}}}],["6.1.0",{"_index":4374,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":4260,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":4237,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":2866,"title":{},"body":{"injectables/Oid4vpService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["66",{"_index":4261,"title":{},"body":{"coverage.html":{}}}],["7.8.2",{"_index":4388,"title":{},"body":{"dependencies.html":{}}}],["7/10",{"_index":4315,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":4284,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":4304,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":4314,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["71",{"_index":4297,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":4292,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":4303,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":3974,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["8.16.3",{"_index":4381,"title":{},"body":{"dependencies.html":{}}}],["8/12",{"_index":4274,"title":{},"body":{"coverage.html":{}}}],["8/17",{"_index":4264,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":4295,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":4267,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["83",{"_index":4300,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":4236,"title":{},"body":{"coverage.html":{}}}],["86400",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["87",{"_index":4283,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":4294,"title":{},"body":{"coverage.html":{}}}],["8a7a",{"_index":2200,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["8ad6",{"_index":2198,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["9/10",{"_index":4341,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":4339,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":4340,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["91",{"_index":4257,"title":{},"body":{"coverage.html":{}}}],["_d",{"_index":1641,"title":{},"body":{"classes/DBKeyService.html":{}}}],["_ext",{"_index":1645,"title":{},"body":{"classes/DBKeyService.html":{}}}],["_key_ops",{"_index":1643,"title":{},"body":{"classes/DBKeyService.html":{}}}],["a128gcm",{"_index":2884,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["a739c2c412c0",{"_index":2201,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["abstract",{"_index":2419,"title":{},"body":{"classes/KeyService.html":{}}}],["accept",{"_index":2209,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/WellKnownController.html":{}}}],["accepts",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":11,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"entities/CertEntity.html":{},"interfaces/InternalTokenPayload.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["access.token.claim",{"_index":2526,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["access_token",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{}}}],["accesscert",{"_index":2897,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscert?.length",{"_index":2907,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscertificatecontrollerregister",{"_index":3195,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["accesscertificateid",{"_index":3136,"title":{},"body":{"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificateresponse",{"_index":1,"title":{"interfaces/AccessCertificateResponse.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["accessible",{"_index":1907,"title":{},"body":{"injectables/FilesService.html":{}}}],["accessing",{"_index":3165,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["accesskeyid",{"_index":3893,"title":{},"body":{"modules/StorageModule.html":{}}}],["accesstoken",{"_index":2466,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{}}}],["accesstokenrequest",{"_index":735,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["according",{"_index":533,"title":{},"body":{"classes/AuthorizationResponse.html":{}}}],["accordingly",{"_index":3964,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["account",{"_index":2536,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["accounts",{"_index":983,"title":{},"body":{"entities/ClientEntity.html":{}}}],["accroding",{"_index":2887,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["acl",{"_index":1855,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/S3FileStorage.html":{}}}],["acl=public",{"_index":1864,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["action",{"_index":2848,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["activated",{"_index":3220,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["active",{"_index":3431,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/enumerations.html":{}}}],["actual",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{}}}],["adapt",{"_index":73,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["adapters/db",{"_index":2403,"title":{},"body":{"modules/KeyModule.html":{}}}],["adapters/internal",{"_index":998,"title":{},"body":{"modules/ClientModule.html":{}}}],["adapters/keycloak",{"_index":1000,"title":{},"body":{"modules/ClientModule.html":{}}}],["adapters/local.storage",{"_index":3881,"title":{},"body":{"modules/StorageModule.html":{}}}],["adapters/s3.storage",{"_index":3882,"title":{},"body":{"modules/StorageModule.html":{}}}],["adapters/vault",{"_index":2405,"title":{},"body":{"modules/KeyModule.html":{}}}],["add",{"_index":1408,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"injectables/KeycloakClientsProvider.html":{},"modules/MetricModule.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{}}}],["add(issuer_state",{"_index":3650,"title":{},"body":{"injectables/SessionService.html":{}}}],["addaccesscertificate",{"_index":3157,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addaccesscertificate(tenantid",{"_index":3167,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addclient",{"_index":1023,"title":{},"body":{"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["addclient(tenantid",{"_index":1026,"title":{},"body":{"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["adding",{"_index":2034,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/RegistrarService.html":{}}}],["addition",{"_index":4647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["additional",{"_index":1967,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/SessionLogContext.html":{}}}],["additionaldata",{"_index":3578,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["addkey",{"_index":2359,"title":{},"body":{"controllers/KeyController.html":{}}}],["addkey(token",{"_index":2363,"title":{},"body":{"controllers/KeyController.html":{}}}],["addregistrationcertificate",{"_index":3158,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addregistrationcertificate(req",{"_index":3169,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp",{"_index":3159,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp(name",{"_index":3171,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["adds",{"_index":3173,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["admin",{"_index":2454,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["against",{"_index":1229,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["agent",{"_index":3534,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["alg",{"_index":760,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["algorithm",{"_index":1504,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["algorithms",{"_index":1485,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["algorithmtype",{"_index":1553,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["alias",{"_index":4249,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":4476,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowedsigningalgs",{"_index":745,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["allowing",{"_index":3961,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["allowinsecureurls",{"_index":2252,"title":{},"body":{"modules/IssuerModule.html":{}}}],["allowlist",{"_index":37,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/typealiases.html":{}}}],["allowlistpolicy",{"_index":34,"title":{"classes/AllowListPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["allrealmroles",{"_index":2539,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["allrealmroles.find((ar",{"_index":2544,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["alpha",{"_index":4359,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":1180,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/VaultKeyService.html":{}}}],["always",{"_index":1783,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["amount",{"_index":1308,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{}}}],["any).$schema",{"_index":1425,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["any).issuer",{"_index":2337,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["any).jwk",{"_index":3121,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["any).method",{"_index":807,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["any).realm_access?.roles",{"_index":2344,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["any)[key",{"_index":2340,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apache",{"_index":4469,"title":{},"body":{"properties.html":{}}}],["api",{"_index":89,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["api_key",{"_index":108,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["apibody",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/StorageController.html":{}}}],["apibody({description",{"_index":577,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["apiconsumes",{"_index":3863,"title":{},"body":{"controllers/StorageController.html":{}}}],["apiconsumes(\"multipart/form",{"_index":3869,"title":{},"body":{"controllers/StorageController.html":{}}}],["apiexcludecontroller",{"_index":148,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiexcludecontroller(process.env.swagger_all",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiextramodels",{"_index":99,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["apiextramodels(roledto",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiextramodels(webhookauthconfignone",{"_index":124,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["apiheader",{"_index":4177,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apihideproperty",{"_index":855,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["apihideproperty()@column('varchar",{"_index":1107,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apikey",{"_index":109,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["apikeyconfig",{"_index":86,"title":{"classes/ApiKeyConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["apioperation",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{},"controllers/WellKnownController.html":{}}}],["apioperation({summary",{"_index":4167,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiparam",{"_index":2758,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{}}}],["apiparam({name",{"_index":3462,"title":{},"body":{"controllers/SessionController.html":{}}}],["apiproduces",{"_index":2177,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["apiproduces(\"application/json",{"_index":2189,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproduces(mediatype.application_json",{"_index":4179,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiproperty",{"_index":100,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/FileUploadDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RoleDto.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["apiproperty({description",{"_index":3327,"title":{},"body":{"classes/RoleDto.html":{}}}],["apiproperty({enum",{"_index":3429,"title":{},"body":{"entities/Session.html":{}}}],["apiproperty({examples",{"_index":2730,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["apiproperty({required",{"_index":4020,"title":{},"body":{"classes/VCT.html":{}}}],["apiproperty({type",{"_index":1319,"title":{},"body":{"classes/CredentialSetQuery.html":{},"classes/FileUploadDto.html":{},"classes/OfferRequestDto.html":{}}}],["apiresponse",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiresponse({description",{"_index":2169,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apitags",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClientController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{}}}],["apitags(\"authentication",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"client",{"_index":938,"title":{},"body":{"controllers/ClientController.html":{}}}],["apitags(\"issuer",{"_index":2101,"title":{},"body":{"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["apitags(\"presentation",{"_index":3004,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apitags(\"session",{"_index":3475,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags(\"status",{"_index":3735,"title":{},"body":{"controllers/StatusListController.html":{}}}],["app/app.controller",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":140,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1753,"title":{},"body":{"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["application/json",{"_index":2187,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["application/jwk",{"_index":4162,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["application/jwt",{"_index":4205,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["application/octet",{"_index":1914,"title":{},"body":{"injectables/FilesService.html":{}}}],["application/statuslist+jwt",{"_index":3733,"title":{},"body":{"controllers/StatusListController.html":{}}}],["application_json",{"_index":4402,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["application_jwt",{"_index":4403,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["applications",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["appmodule",{"_index":159,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["appropriate",{"_index":1521,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["ar.name",{"_index":2545,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["array",{"_index":76,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CryptoImplementationService.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/JwksResponseDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/StatusListService.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/functions.html":{}}}],["array(size",{"_index":3798,"title":{},"body":{"injectables/StatusListService.html":{}}}],["array(size).fill(0).map",{"_index":3796,"title":{},"body":{"injectables/StatusListService.html":{}}}],["array.isarray(dcql_query",{"_index":2863,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["assign",{"_index":2535,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["assigned",{"_index":975,"title":{},"body":{"entities/ClientEntity.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["associated",{"_index":1147,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"injectables/FilesService.html":{},"classes/IssuanceDto.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["assume",{"_index":787,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["async",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["att",{"_index":3126,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attached",{"_index":860,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["attachment",{"_index":3876,"title":{},"body":{"controllers/StorageController.html":{}}}],["attestation",{"_index":892,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/Oid4vciController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["attestationbased",{"_index":67,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/typealiases.html":{}}}],["attestationbasedpolicy",{"_index":84,"title":{"classes/AttestationBasedPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["attestations",{"_index":861,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["attestations.map((att",{"_index":3127,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attributes",{"_index":2513,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["aud",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{},"injectables/Oid4vpService.html":{}}}],["audience",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth",{"_index":138,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":360,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":361,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/roles/role.enum",{"_index":1335,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{}}}],["auth/secure.decorator",{"_index":1336,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{}}}],["auth/tenant/entitites/tenant.entity",{"_index":848,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"modules/CryptoModule.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["auth/token.decorator",{"_index":1337,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{}}}],["auth_client_id",{"_index":4540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth_client_secret",{"_index":4538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth_queries",{"_index":614,"title":{},"body":{"controllers/AuthorizeController.html":{},"entities/Session.html":{}}}],["auth_session",{"_index":625,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth_validation_schema",{"_index":4228,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["authconfig",{"_index":107,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["authconfig.api_key",{"_index":115,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["authconfig.method",{"_index":799,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authconfig.none",{"_index":120,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["authcontroller",{"_index":239,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["authenticate(req",{"_index":2284,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authenticating",{"_index":3188,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["authentication",{"_index":90,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["authentication.'})@apiresponse({status",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticationconfig",{"_index":2054,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethod",{"_index":517,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/enumerations.html":{}}}],["authenticationmethod.auth",{"_index":2087,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethod.none",{"_index":2086,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethod.presentation_during_issuance",{"_index":2088,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethodauth",{"_index":487,"title":{"classes/AuthenticationMethodAuth.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationmethodinterface",{"_index":490,"title":{"interfaces/AuthenticationMethodInterface.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationmethodnone",{"_index":516,"title":{"classes/AuthenticationMethodNone.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationmethodpresentation",{"_index":513,"title":{"classes/AuthenticationMethodPresentation.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationurlconfig",{"_index":492,"title":{"classes/AuthenticationUrlConfig.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authfixed",{"_index":2195,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["authguard",{"_index":2264,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard(\"jwt",{"_index":2255,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authheader",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["authheader.startswith(\"basic",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["authheader.substring(6",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["authmodule",{"_index":170,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"modules.html":{}}}],["author",{"_index":4471,"title":{},"body":{"properties.html":{}}}],["authorities",{"_index":866,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["authorization",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["authorization_challenge_endpoint",{"_index":721,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_code",{"_index":808,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorization_encrypted_response_alg",{"_index":2882,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_encrypted_response_enc",{"_index":2883,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_endpoint",{"_index":709,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_request",{"_index":2845,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{}}}],["authorization_server",{"_index":1286,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["authorization_servers",{"_index":1287,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["authorizationchallengeendpoint",{"_index":561,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationchallengeendpoint(req",{"_index":564,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorizationchallengeendpoint(res",{"_index":658,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["authorizationcodegrantidentifier",{"_index":679,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationresponse",{"_index":527,"title":{"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{}},"body":{"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["authorizationserver",{"_index":698,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata",{"_index":680,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.dpop_signing_alg_values_supported",{"_index":746,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.issuer",{"_index":765,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorize",{"_index":562,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(@query",{"_index":602,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(queries",{"_index":572,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize.service",{"_index":595,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize/authorize.controller",{"_index":2236,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorize/authorize.service",{"_index":2237,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorizecontroller",{"_index":553,"title":{"controllers/AuthorizeController.html":{}},"body":{"controllers/AuthorizeController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["authorized",{"_index":499,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["authorizequeries",{"_index":566,"title":{"classes/AuthorizeQueries.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"coverage.html":{}}}],["authorizequeries})@post('par",{"_index":579,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorizeservice",{"_index":594,"title":{"injectables/AuthorizeService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["authresponse",{"_index":366,"title":{"interfaces/AuthResponse.html":{}},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["authserver",{"_index":700,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/.well",{"_index":711,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize",{"_index":710,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/challenge",{"_index":722,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/par",{"_index":718,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/token",{"_index":708,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authservice",{"_index":305,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"index.html":{}}}],["authtenant",{"_index":3986,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["authtype",{"_index":4129,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["authz",{"_index":2895,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authzmetadata",{"_index":646,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/WellKnownController.html":{}}}],["authzmetadata(session",{"_index":660,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/WellKnownController.html":{}}}],["auto",{"_index":3989,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["autoloadentities",{"_index":1689,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["autologging",{"_index":4585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["automatic",{"_index":2652,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["available",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/KeycloakClientsProvider.html":{},"entities/StatusListEntity.html":{},"modules.html":{}}}],["avoid",{"_index":1234,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["await",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":3362,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["axios",{"_index":4368,"title":{},"body":{"dependencies.html":{}}}],["back",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["backend",{"_index":1042,"title":{},"body":{"interfaces/ClientsProvider.html":{}}}],["background_color",{"_index":1119,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["background_image",{"_index":1121,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["badgateway/oauth2",{"_index":3192,"title":{},"body":{"injectables/RegistrarService.html":{},"dependencies.html":{}}}],["badrequestexception",{"_index":2831,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["badrequestexception(error.message",{"_index":2959,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["base",{"_index":4549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base/realm",{"_index":1011,"title":{},"body":{"modules/ClientModule.html":{}}}],["base64",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FileStorage.html":{},"injectables/ResolverService.html":{},"classes/VaultKeyService.html":{}}}],["base64credentials",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["base64url",{"_index":4095,"title":{},"body":{"classes/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["base_validation_schema",{"_index":4330,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["base_validation_schema.concat",{"_index":4679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":1381,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["basedir",{"_index":2584,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["baseurl",{"_index":2458,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{}}}],["basic",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["batch",{"_index":1299,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{}}}],["batch_credential_issuance",{"_index":1288,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batch_size",{"_index":1309,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batchsize",{"_index":2055,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["bearer",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/TokenResponse.html":{}}}],["before",{"_index":783,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"injectables/KeycloakClientsProvider.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["behavior",{"_index":3499,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["being",{"_index":3488,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["belong",{"_index":985,"title":{},"body":{"entities/ClientEntity.html":{},"controllers/StorageController.html":{}}}],["belongs",{"_index":967,"title":{},"body":{"entities/ClientEntity.html":{},"entities/StatusListEntity.html":{}}}],["better",{"_index":4131,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["between",{"_index":374,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["binary",{"_index":1873,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["binding",{"_index":1409,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["bindings",{"_index":2068,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["bit",{"_index":2475,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["bits",{"_index":3744,"title":{},"body":{"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["bitsperstatus",{"_index":3745,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["body",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"interfaces/FileStorage.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/TenantController.html":{},"classes/VaultKeyService.html":{}}}],["body.auth_session",{"_index":785,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.client_id",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["body.client_secret",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["body.grant_type",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["body.issuer_state",{"_index":770,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.privatekey",{"_index":1637,"title":{},"body":{"classes/DBKeyService.html":{}}}],["body.requestid",{"_index":3009,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body.response",{"_index":2933,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["body.response_type",{"_index":2211,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["body.sendresponse",{"_index":2958,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["body.webhook",{"_index":3010,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["boolean",{"_index":28,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthorizationResponse-1.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"guards/RolesGuard.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"modules/IssuerModule.html":{},"modules/LoggerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["both",{"_index":609,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"miscellaneous/variables.html":{}}}],["bound",{"_index":2035,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/RegistrarService.html":{}}}],["break",{"_index":804,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["browse",{"_index":4458,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":4456,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":3349,"title":{},"body":{"classes/S3FileStorage.html":{},"miscellaneous/variables.html":{}}}],["buffer",{"_index":1848,"title":{},"body":{"interfaces/FileStorage.html":{},"controllers/IssuerManagementController.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"classes/S3FileStorage.html":{}}}],["buffer.from",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["buffer.from(json.stringify(header)).tostring",{"_index":4094,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["buffer.from(json.stringify(payload)).tostring",{"_index":4097,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["buffer.from(signature).tostring(\"base64url",{"_index":4627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.from(signaturebase64url",{"_index":4629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.from(value).tostring(\"base64",{"_index":4088,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["bugs",{"_index":4465,"title":{},"body":{"properties.html":{}}}],["builder/querypartialentity",{"_index":3687,"title":{},"body":{"injectables/SessionService.html":{}}}],["cache",{"_index":2316,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/WellKnownService.html":{}}}],["cacheddefaultalg",{"_index":1506,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["call",{"_index":3505,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["callback",{"_index":375,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{}}}],["callbacks",{"_index":504,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["called",{"_index":3184,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["callhandler",{"_index":3501,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["canactivate",{"_index":2256,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":2260,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canonical",{"_index":1860,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["cascade",{"_index":833,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["cascading",{"_index":4000,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["case",{"_index":800,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["catch",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{},"classes/VaultKeyService.html":{}}}],["catch((err",{"_index":2497,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"classes/VaultKeyService.html":{}}}],["catcherror",{"_index":3517,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["catcherror((error",{"_index":3550,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["cats",{"_index":3857,"title":{},"body":{"controllers/StorageController.html":{}}}],["causing",{"_index":3221,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cb",{"_index":2322,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cb(err",{"_index":2326,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cert",{"_index":1258,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["cert.crt",{"_index":2435,"title":{},"body":{"classes/KeyService.html":{}}}],["cert.id",{"_index":1665,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/RegistrarService.html":{}}}],["cert.publickey.export",{"_index":3313,"title":{},"body":{"injectables/ResolverService.html":{}}}],["cert.revoked",{"_index":3269,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cert.subjectaltname?.includes(new",{"_index":3309,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certentity",{"_index":813,"title":{"entities/CertEntity.html":{}},"body":{"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{},"coverage.html":{}}}],["certificate",{"_index":7,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VaultKeyService.html":{},"coverage.html":{}}}],["certificatechainlength",{"_index":2906,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["certificates",{"_index":817,"title":{},"body":{"entities/CertEntity.html":{},"injectables/RegistrarService.html":{}}}],["certificatetype",{"_index":839,"title":{},"body":{"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["certrepository",{"_index":1583,"title":{},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{}}}],["certs",{"_index":3265,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["certs?.length",{"_index":3271,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["certs[0",{"_index":3308,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certs[0].jwt",{"_index":3272,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cfg",{"_index":1006,"title":{},"body":{"modules/ClientModule.html":{},"injectables/KeycloakClientsProvider.html":{},"modules/StorageModule.html":{}}}],["cfg.get",{"_index":3891,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"oidc",{"_index":1010,"title":{},"body":{"modules/ClientModule.html":{}}}],["cfg.get(\"s3_bucket",{"_index":3897,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_endpoint",{"_index":3889,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_public_base_url",{"_index":3898,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_region",{"_index":3888,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"storage_driver",{"_index":3886,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.getorthrow(\"local_storage_dir",{"_index":3899,"title":{},"body":{"modules/StorageModule.html":{}}}],["chain",{"_index":3304,"title":{},"body":{"injectables/ResolverService.html":{}}}],["challenge",{"_index":570,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["check",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["checked",{"_index":792,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["checking",{"_index":3781,"title":{},"body":{"injectables/StatusListService.html":{}}}],["checks",{"_index":1981,"title":{},"body":{"controllers/HealthController.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{}}}],["checksum",{"_index":1856,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["checksumsha256",{"_index":3372,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["checl",{"_index":3314,"title":{},"body":{"injectables/ResolverService.html":{}}}],["child",{"_index":2147,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["children",{"_index":1271,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{}}}],["circular",{"_index":3222,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["claim",{"_index":850,"title":{"classes/Claim.html":{}},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["claim.name",{"_index":2523,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["claim.value",{"_index":2522,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["claims",{"_index":81,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["claims?.[credentialconfigurationid",{"_index":1432,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["claims_supported",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["claimsquery",{"_index":59,"title":{"classes/ClaimsQuery.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["claimswebhook",{"_index":2056,"title":{},"body":{"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["class",{"_index":33,"title":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"classes/AuthorizeQueries.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientSecretResponseDto.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayCreateDto.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/FileUploadDto.html":{},"classes/IssuanceDto.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RoleDto.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateClientDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"modules/ClientModule.html":{},"classes/ClientSecretResponseDto.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/LoggerModule.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateClientDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":35,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"classes/AuthorizeQueries.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientSecretResponseDto.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayCreateDto.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/FileUploadDto.html":{},"classes/IssuanceDto.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RoleDto.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateClientDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"index.html":{}}}],["clear",{"_index":2948,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/ClientController.html":{},"entities/ClientEntity.html":{},"injectables/InternalClientsProvider.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["client.controller",{"_index":1001,"title":{},"body":{"modules/ClientModule.html":{}}}],["client.description",{"_index":2574,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["client.dto",{"_index":936,"title":{},"body":{"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["client.dto.ts",{"_index":1046,"title":{},"body":{"classes/CreateClientDto.html":{},"classes/UpdateClientDto.html":{},"coverage.html":{}}}],["client.provider",{"_index":933,"title":{},"body":{"controllers/ClientController.html":{},"modules/ClientModule.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["client.roles",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["client.tenant",{"_index":3926,"title":{},"body":{"entities/TenantEntity.html":{}}}],["client.tenantid",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["client/adapters/internal",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["client/client.module",{"_index":362,"title":{},"body":{"modules/AuthModule.html":{},"modules/TenantModule.html":{}}}],["client/client.provider",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["client/entities/client.entity",{"_index":3935,"title":{},"body":{"entities/TenantEntity.html":{}}}],["client/lib/utils/auth",{"_index":2455,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["client_credentials",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["client_id",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"injectables/Oid4vpService.html":{}}}],["client_metadata",{"_index":2874,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_name",{"_index":2885,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_secret",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{}}}],["client_secret_basic",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["client_secret_post",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["clientcontroller",{"_index":897,"title":{"controllers/ClientController.html":{}},"body":{"controllers/ClientController.html":{},"modules/ClientModule.html":{},"coverage.html":{}}}],["clientcredentialsdto",{"_index":267,"title":{"classes/ClientCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["cliententity",{"_index":963,"title":{"entities/ClientEntity.html":{}},"body":{"entities/ClientEntity.html":{},"modules/ClientModule.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"entities/TenantEntity.html":{},"classes/UpdateClientDto.html":{},"coverage.html":{}}}],["clientexists",{"_index":2015,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clientid",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"entities/ClientEntity.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/UpdateClientDto.html":{}}}],["clientid).catch",{"_index":2013,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clientmodule",{"_index":352,"title":{"modules/ClientModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/ClientModule.html":{},"modules/TenantModule.html":{},"index.html":{},"modules.html":{}}}],["clientrepo",{"_index":2440,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ClientController.html":{},"classes/CreateTenantDto.html":{},"injectables/InternalClientsProvider.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/enumerations.html":{}}}],["clients.service",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{},"modules/ClientModule.html":{}}}],["clients.service.ts",{"_index":1996,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"coverage.html":{}}}],["clients.service.ts:101",{"_index":2445,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients.service.ts:107",{"_index":2442,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients.service.ts:116",{"_index":2001,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clients.service.ts:129",{"_index":2000,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clients.service.ts:140",{"_index":2002,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clients.service.ts:146",{"_index":1998,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clients.service.ts:16",{"_index":2441,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients.service.ts:168",{"_index":2006,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clients.service.ts:179",{"_index":2005,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clients.service.ts:183",{"_index":2007,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clients.service.ts:186",{"_index":2451,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients.service.ts:20",{"_index":1997,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clients.service.ts:24",{"_index":2449,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients.service.ts:251",{"_index":2450,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients.service.ts:27",{"_index":2004,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clients.service.ts:45",{"_index":2003,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clients.service.ts:51",{"_index":2446,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients.service.ts:58",{"_index":2447,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients.service.ts:88",{"_index":2444,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients.service.ts:94",{"_index":2443,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients:manage",{"_index":4412,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["clients[0].secret",{"_index":2504,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients_provider",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ClientController.html":{},"modules/ClientModule.html":{},"interfaces/ClientsProvider.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["clientsecret",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{}}}],["clientsecretresponsedto",{"_index":934,"title":{"classes/ClientSecretResponseDto.html":{}},"body":{"controllers/ClientController.html":{},"classes/ClientSecretResponseDto.html":{},"coverage.html":{}}}],["clientsprovider",{"_index":932,"title":{"interfaces/ClientsProvider.html":{}},"body":{"controllers/ClientController.html":{},"modules/ClientModule.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["cloudfront",{"_index":3366,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["cluster_appmodule",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":348,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_exports",{"_index":349,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_imports",{"_index":351,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_providers",{"_index":350,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule",{"_index":1475,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule_exports",{"_index":1477,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule_providers",{"_index":1476,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptomodule",{"_index":1557,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_cryptomodule_exports",{"_index":1559,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_cryptomodule_providers",{"_index":1558,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_issuermodule",{"_index":2222,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_exports",{"_index":2225,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_imports",{"_index":2224,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_providers",{"_index":2223,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_loggermodule",{"_index":2686,"title":{},"body":{"modules/LoggerModule.html":{},"index.html":{}}}],["cluster_loggermodule_exports",{"_index":2687,"title":{},"body":{"modules/LoggerModule.html":{},"index.html":{}}}],["cluster_loggermodule_providers",{"_index":2688,"title":{},"body":{"modules/LoggerModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule",{"_index":2805,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule_exports",{"_index":2807,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule_imports",{"_index":2806,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["cluster_oid4vpmodule_providers",{"_index":2808,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_presentationsmodule",{"_index":3027,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_exports",{"_index":3028,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_imports",{"_index":3029,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_providers",{"_index":3030,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_registrarmodule",{"_index":3142,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_registrarmodule_exports",{"_index":3143,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_registrarmodule_imports",{"_index":3145,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["cluster_registrarmodule_providers",{"_index":3144,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_resolvermodule",{"_index":3285,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_resolvermodule_exports",{"_index":3286,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_resolvermodule_providers",{"_index":3287,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_sessionmodule",{"_index":3621,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_sessionmodule_exports",{"_index":3623,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_sessionmodule_imports",{"_index":3624,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":3622,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_statuslistmodule",{"_index":3754,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_statuslistmodule_exports",{"_index":3756,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_statuslistmodule_imports",{"_index":3755,"title":{},"body":{"modules/StatusListModule.html":{}}}],["cluster_statuslistmodule_providers",{"_index":3757,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_tenantmodule",{"_index":3936,"title":{},"body":{"modules/TenantModule.html":{},"index.html":{}}}],["cluster_tenantmodule_exports",{"_index":3939,"title":{},"body":{"modules/TenantModule.html":{},"index.html":{}}}],["cluster_tenantmodule_imports",{"_index":3937,"title":{},"body":{"modules/TenantModule.html":{}}}],["cluster_tenantmodule_providers",{"_index":3938,"title":{},"body":{"modules/TenantModule.html":{},"index.html":{}}}],["cluster_verifiermodule",{"_index":4102,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cluster_verifiermodule_imports",{"_index":4103,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cnf",{"_index":1459,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["cnonce",{"_index":756,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["cnonceexpiresin",{"_index":766,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["code",{"_index":500,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{}}}],["code_challenge",{"_index":626,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_method",{"_index":627,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_methods_supported",{"_index":719,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["colorize",{"_index":4569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":845,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column(\"boolean",{"_index":1123,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/Session.html":{}}}],["column(\"date",{"_index":3450,"title":{},"body":{"entities/Session.html":{}}}],["column(\"int",{"_index":883,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column(\"json",{"_index":885,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column(\"varchar",{"_index":849,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column('boolean",{"_index":3439,"title":{},"body":{"entities/Session.html":{}}}],["column('date",{"_index":3413,"title":{},"body":{"entities/Session.html":{}}}],["column('int",{"_index":3746,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["column('json",{"_index":1066,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column('json')@validatenested()@apiproperty({oneof",{"_index":2059,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["column('json')@validatenested()@type(undefined",{"_index":1070,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{}}}],["column('varchar",{"_index":825,"title":{},"body":{"entities/CertEntity.html":{},"entities/FileEntity.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/TenantEntity.html":{}}}],["column({nullable",{"_index":980,"title":{},"body":{"entities/ClientEntity.html":{}}}],["column({type",{"_index":3833,"title":{},"body":{"entities/StatusMapping.html":{}}}],["combined",{"_index":4689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commonoptions",{"_index":1687,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["comparison",{"_index":3276,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["compatible",{"_index":4674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complete",{"_index":3058,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["completed",{"_index":3446,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["completion",{"_index":3542,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["components",{"_index":1671,"title":{},"body":{"classes/DBKeyService.html":{}}}],["computed",{"_index":3374,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["concat(config_validation_schema",{"_index":4681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(crypto_validation_schema",{"_index":4685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(db_validation_schema",{"_index":4680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(issuer_validation_schema",{"_index":4686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(key_validation_schema",{"_index":4684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(log_validation_schema",{"_index":4682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(registrar_validation_schema",{"_index":4683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(session_validation_schema",{"_index":4687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(storage_validation_schema",{"_index":4688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["condition",{"_index":3664,"title":{},"body":{"injectables/SessionService.html":{}}}],["conditions",{"_index":4422,"title":{},"body":{"miscellaneous/functions.html":{}}}],["config",{"_index":117,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["config.config.display",{"_index":1244,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.config.display.map(async",{"_index":1246,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.dto",{"_index":689,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["config.dto.ts",{"_index":489,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["config.dto.ts:21",{"_index":524,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:29",{"_index":526,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:41",{"_index":2986,"title":{},"body":{"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.dto.ts:49",{"_index":523,"title":{},"body":{"classes/AuthenticationMethodPresentation.html":{}}}],["config.dto.ts:53",{"_index":521,"title":{},"body":{"classes/AuthenticationMethodPresentation.html":{}}}],["config.dto.ts:59",{"_index":496,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{}}}],["config.dto.ts:63",{"_index":494,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{}}}],["config.dto.ts:69",{"_index":520,"title":{},"body":{"classes/AuthenticationMethodNone.html":{}}}],["config.entity",{"_index":63,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationConfigCreateDto.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{}}}],["config.entity.ts",{"_index":852,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["config.entity.ts:104",{"_index":1321,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["config.entity.ts:108",{"_index":1322,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["config.entity.ts:114",{"_index":2060,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:115",{"_index":1680,"title":{},"body":{"classes/DCQL.html":{}}}],["config.entity.ts:121",{"_index":1678,"title":{},"body":{"classes/DCQL.html":{}}}],["config.entity.ts:123",{"_index":2064,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:129",{"_index":2078,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:134",{"_index":2975,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:138",{"_index":2063,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:141",{"_index":2978,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:147",{"_index":2075,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:155",{"_index":2973,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:156",{"_index":2062,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:163",{"_index":2976,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:164",{"_index":2073,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:171",{"_index":2971,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:179",{"_index":2977,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:187",{"_index":2981,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:193",{"_index":2970,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:199",{"_index":2979,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:209",{"_index":2969,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:31",{"_index":2967,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:34",{"_index":2966,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:38",{"_index":2965,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:44",{"_index":4005,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["config.entity.ts:48",{"_index":4007,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["config.entity.ts:49",{"_index":2074,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:53",{"_index":854,"title":{},"body":{"classes/Claim.html":{}}}],["config.entity.ts:56",{"_index":2077,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:60",{"_index":1313,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:62",{"_index":2076,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:63",{"_index":1312,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:67",{"_index":1316,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:70",{"_index":2071,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:72",{"_index":1311,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:75",{"_index":1314,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:80",{"_index":2066,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:81",{"_index":1318,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:87",{"_index":893,"title":{},"body":{"classes/ClaimsQuery.html":{}}}],["config.entity.ts:90",{"_index":894,"title":{},"body":{"classes/ClaimsQuery.html":{}}}],["config.entity.ts:94",{"_index":896,"title":{},"body":{"classes/ClaimsQuery.html":{}}}],["config.id",{"_index":1418,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["config.keyid",{"_index":1257,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.oidc",{"_index":4512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.service",{"_index":1338,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"modules/LoggerModule.html":{},"injectables/SessionLoggerService.html":{}}}],["config.service.ts",{"_index":1152,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["config.service.ts:100",{"_index":2634,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:107",{"_index":2647,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:115",{"_index":2651,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:19",{"_index":1159,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{}}}],["config.service.ts:200",{"_index":1176,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:209",{"_index":1169,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:222",{"_index":1172,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:236",{"_index":1178,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:249",{"_index":1162,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:25",{"_index":2644,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:36",{"_index":1173,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:54",{"_index":2646,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:66",{"_index":2632,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:70",{"_index":2643,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:74",{"_index":2642,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:78",{"_index":2640,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:82",{"_index":2638,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:86",{"_index":2636,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:93",{"_index":2641,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.type",{"_index":775,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["config.value",{"_index":1764,"title":{},"body":{"injectables/DisplayService.html":{}}}],["config.value.map(async",{"_index":1765,"title":{},"body":{"injectables/DisplayService.html":{}}}],["config/credential",{"_index":1151,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["config_folder",{"_index":4557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config_import",{"_index":4550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config_import_force",{"_index":4555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config_validation_schema",{"_index":4321,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["configfile",{"_index":3971,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["configmodule",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configmodule.forroot",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["configpath",{"_index":1194,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["configpath}/${tenant.name}/info.json",{"_index":3970,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["configs",{"_index":1174,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["configservice",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"modules/ClientModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["configservice.get",{"_index":1685,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["configservice.get(\"jwt_issuer",{"_index":2336,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"jwt_secret",{"_index":2330,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"log_file_path",{"_index":4562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get(\"log_level",{"_index":4568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get(\"log_to_file",{"_index":4561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get(\"oidc",{"_index":2303,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"oidc_algorithm",{"_index":2328,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"oidc_internal_issuer_url",{"_index":2312,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow(\"db_database",{"_index":1699,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_host",{"_index":1691,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_password",{"_index":1697,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_port",{"_index":1693,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_username",{"_index":1695,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"folder",{"_index":1701,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configurable",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["configuration",{"_index":88,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"injectables/DisplayService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["configuration(@token",{"_index":3014,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configuration(user",{"_index":2991,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configurations",{"_index":1140,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["configure",{"_index":4564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configured",{"_index":1012,"title":{},"body":{"modules/ClientModule.html":{},"injectables/CryptoImplementationService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/PresentationRequest.html":{},"injectables/SessionService.html":{}}}],["configuring",{"_index":4601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conflictexception",{"_index":678,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{}}}],["conflictexception(\"certificate",{"_index":2436,"title":{},"body":{"classes/KeyService.html":{}}}],["conflictexception(\"issuer",{"_index":3320,"title":{},"body":{"injectables/ResolverService.html":{}}}],["conflictexception(`request",{"_index":3103,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["connect",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["connect/certs",{"_index":2315,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["connect/token",{"_index":3210,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["connection",{"_index":1982,"title":{},"body":{"controllers/HealthController.html":{}}}],["consistent",{"_index":3498,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["console",{"_index":4565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error",{"_index":2323,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{}}}],["console.error(\"error",{"_index":2498,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{},"classes/VaultKeyService.html":{}}}],["console.error(json.stringify(err.response.data",{"_index":4059,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["console.log('session",{"_index":2778,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["console.log(err",{"_index":3116,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["console.warn",{"_index":1944,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["const",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"modules/ClientModule.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"classes/DisplayCreateDto.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateClientDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["constraints",{"_index":1263,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["constructor",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["constructor(@inject(clients_provider",{"_index":942,"title":{},"body":{"controllers/ClientController.html":{}}}],["constructor(basedir",{"_index":2582,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["constructor(cfg",{"_index":2439,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["constructor(clients",{"_index":3946,"title":{},"body":{"injectables/TenantService.html":{}}}],["constructor(configservice",{"_index":653,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/InternalClientsProvider.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["constructor(credentialconfigrepository",{"_index":1157,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["constructor(cryptoservice",{"_index":1372,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["constructor(displayrepository",{"_index":1746,"title":{},"body":{"injectables/DisplayService.html":{}}}],["constructor(httpservice",{"_index":3048,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["constructor(issuanceconfigrepo",{"_index":2111,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["constructor(jwtservice",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(keyrepository",{"_index":1796,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["constructor(logger",{"_index":3575,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["constructor(oid4vciservice",{"_index":4193,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["constructor(private",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoImplementationService.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"injectables/SessionPipe.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{}}}],["constructor(reflector",{"_index":2257,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["constructor(s3",{"_index":3347,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["constructor(sessionrepository",{"_index":3644,"title":{},"body":{"injectables/SessionService.html":{}}}],["constructor(sessionservice",{"_index":3633,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["constructor(storage",{"_index":1880,"title":{},"body":{"injectables/FilesService.html":{}}}],["containing",{"_index":378,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse-1.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["content",{"_index":2172,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["contenttype",{"_index":1854,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":2262,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/Oid4vpService.html":{},"guards/RolesGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["context.flowtype",{"_index":3604,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.getclass",{"_index":2270,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":2269,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.sessionid",{"_index":3606,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.switchtohttp().getrequest",{"_index":3338,"title":{},"body":{"guards/RolesGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":3526,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.tenantid",{"_index":3607,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.ts",{"_index":3485,"title":{},"body":{"interfaces/SessionLogContext.html":{},"coverage.html":{}}}],["context.ts:21",{"_index":3487,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["continue",{"_index":1222,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["controller",{"_index":139,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["controller(\":session/.well",{"_index":4176,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["controller(\":session/authorize",{"_index":600,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["controller(\":session/oid4vp",{"_index":2799,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["controller(\":session/vci",{"_index":2765,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["controller(\":tenantid/credentials",{"_index":1359,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["controller(\":tenantid/status",{"_index":3736,"title":{},"body":{"controllers/StatusListController.html":{}}}],["controller(\"client",{"_index":941,"title":{},"body":{"controllers/ClientController.html":{}}}],["controller(\"display",{"_index":1724,"title":{},"body":{"controllers/DisplayController.html":{}}}],["controller(\"health",{"_index":1988,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"issuer",{"_index":1340,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["controller(\"key",{"_index":2377,"title":{},"body":{"controllers/KeyController.html":{}}}],["controller(\"presentation",{"_index":3006,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["controller(\"session",{"_index":3477,"title":{},"body":{"controllers/SessionController.html":{}}}],["controller(\"storage",{"_index":3867,"title":{},"body":{"controllers/StorageController.html":{}}}],["controller(\"tenant",{"_index":3916,"title":{},"body":{"controllers/TenantController.html":{}}}],["controllers",{"_index":141,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"controllers/ClientController.html":{},"modules/ClientModule.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"modules/CryptoModule.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["convert",{"_index":1666,"title":{},"body":{"classes/DBKeyService.html":{},"classes/VaultKeyService.html":{}}}],["converts",{"_index":4037,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["coordinate",{"_index":1785,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["copy",{"_index":3553,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["correct",{"_index":793,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/VaultKeyService.html":{}}}],["count",{"_index":3709,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["counter",{"_index":1206,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["coverage",{"_index":4219,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covered",{"_index":3261,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["create",{"_index":909,"title":{},"body":{"controllers/ClientController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{}}}],["create(session",{"_index":3653,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(tenantid",{"_index":1586,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{}}}],["create.dto",{"_index":1192,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["create.dto.ts",{"_index":1134,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"classes/DisplayCreateDto.html":{},"classes/PresentationConfigCreateDto.html":{},"coverage.html":{}}}],["create_authorization_request",{"_index":2849,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest",{"_index":2815,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest(session",{"_index":2820,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationservermetadata",{"_index":707,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["createclient",{"_index":899,"title":{},"body":{"controllers/ClientController.html":{}}}],["createclient(createclientdto",{"_index":905,"title":{},"body":{"controllers/ClientController.html":{}}}],["createclientdto",{"_index":906,"title":{"classes/CreateClientDto.html":{}},"body":{"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"coverage.html":{}}}],["created",{"_index":824,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"entities/IssuanceConfig.html":{},"injectables/KeycloakClientsProvider.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["created.id",{"_index":2530,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["createdat",{"_index":818,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["createdatecolumn",{"_index":821,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["createdisplay",{"_index":1713,"title":{},"body":{"controllers/DisplayController.html":{}}}],["createdisplay(user",{"_index":1715,"title":{},"body":{"controllers/DisplayController.html":{}}}],["createdsession",{"_index":3707,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.issuanceid",{"_index":3712,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.tenantid",{"_index":3711,"title":{},"body":{"injectables/SessionService.html":{}}}],["createentry",{"_index":3766,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createentry(session",{"_index":3773,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createheaderandpayload",{"_index":3789,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createkeydto",{"_index":4069,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["createlist",{"_index":3767,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist(entry",{"_index":3776,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createloggeroptions",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createparamdecorator",{"_index":2047,"title":{},"body":{"interfaces/InternalTokenPayload.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["createreadstream",{"_index":2589,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createreadstream(fullpath",{"_index":2615,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createrequest",{"_index":2816,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createrequest(requestid",{"_index":2825,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["creates",{"_index":1495,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"classes/VaultKeyService.html":{}}}],["createtenant",{"_index":3944,"title":{},"body":{"injectables/TenantService.html":{}}}],["createtenant(data",{"_index":3950,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["createtenantdto",{"_index":1049,"title":{"classes/CreateTenantDto.html":{}},"body":{"classes/CreateTenantDto.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["createwritestream",{"_index":2590,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createwritestream(fullpath",{"_index":2604,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["creation",{"_index":882,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["credential",{"_index":507,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["credential(req",{"_index":2747,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credential.issuanceconfigs",{"_index":2082,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["credential.issuanceconfigs)@jointable",{"_index":2065,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["credential_configurations_supported",{"_index":1289,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{}}}],["credential_creation",{"_index":3616,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_endpoint",{"_index":1290,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["credential_ids",{"_index":863,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["credential_issuance",{"_index":3615,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_issuer",{"_index":1291,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["credential_revoked",{"_index":2707,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["credential_set",{"_index":878,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["credential_sets",{"_index":83,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["credential_signing_alg_values_supported",{"_index":1414,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_verification",{"_index":3618,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credentialconfig",{"_index":1056,"title":{"entities/CredentialConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialconfig).key",{"_index":1267,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfig.schema",{"_index":1473,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct",{"_index":1467,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct.vct",{"_index":1469,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigcreate",{"_index":1132,"title":{"classes/CredentialConfigCreate.html":{}},"body":{"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"coverage.html":{}}}],["credentialconfigid",{"_index":2157,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfigids",{"_index":1148,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{}}}],["credentialconfigmapping",{"_index":1137,"title":{"classes/CredentialConfigMapping.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["credentialconfigrepo",{"_index":1374,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigrepository",{"_index":1160,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfigs",{"_index":1145,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["credentialconfigservice",{"_index":1149,"title":{"injectables/CredentialConfigService.html":{}},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["credentialconfiguration",{"_index":1428,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.claims",{"_index":1434,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.disclosureframe",{"_index":1435,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.keybinding",{"_index":1460,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.lifetime",{"_index":1458,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.statusmanagement",{"_index":1451,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration?.keyid",{"_index":1436,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigurationid",{"_index":1382,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["credentialconfigurationids",{"_index":2722,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["credentialconfigurationsupported",{"_index":1390,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigurationsupported).vct",{"_index":1421,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialcount",{"_index":2945,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialid",{"_index":1389,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialissuer",{"_index":4210,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["credentialissuermetadatadto",{"_index":1282,"title":{"classes/CredentialIssuerMetadataDto.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["credentialofferobject",{"_index":3421,"title":{},"body":{"entities/Session.html":{}}}],["credentialpayload",{"_index":3402,"title":{},"body":{"entities/Session.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["credentialquery",{"_index":60,"title":{"classes/CredentialQuery.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["credentialresponse",{"_index":2759,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credentials",{"_index":82,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/NoneTrustPolicy.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["credentials.dto",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":960,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:5",{"_index":961,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:7",{"_index":962,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.length",{"_index":2944,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentials.push(credential",{"_index":2160,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentials.split",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["credentials/credential",{"_index":2128,"title":{},"body":{"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials/credentials.controller",{"_index":2238,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials/credentials.service",{"_index":1358,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{}}}],["credentials/entities/credential.entity",{"_index":2080,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials?.length",{"_index":2946,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialsconfigservice",{"_index":2112,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialscontroller",{"_index":1323,"title":{"controllers/CredentialsController.html":{}},"body":{"controllers/CredentialsController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsetquery",{"_index":61,"title":{"classes/CredentialSetQuery.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["credentialsmetadatacontroller",{"_index":1347,"title":{"controllers/CredentialsMetadataController.html":{}},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsservice",{"_index":1342,"title":{"injectables/CredentialsService.html":{}},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["credentialtype",{"_index":3581,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["creds",{"_index":2462,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["cron",{"_index":3668,"title":{},"body":{"injectables/SessionService.html":{}}}],["crt",{"_index":15,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/VaultKeyService.html":{}}}],["crv",{"_index":1776,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["crypto",{"_index":1264,"title":{},"body":{"injectables/CredentialConfigService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"classes/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["crypto.getverifier(jwk",{"_index":3123,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["crypto.getverifier(publickey",{"_index":3113,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["crypto.service",{"_index":1563,"title":{},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{}}}],["crypto.webcrypto.subtle.exportkey",{"_index":4621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.generatekey",{"_index":4620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.importkey",{"_index":4624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.sign",{"_index":4625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.verify",{"_index":4631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto/crypto.module",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{}}}],["crypto/crypto.service",{"_index":686,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{}}}],["crypto/encryption/encryption.service",{"_index":2832,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["crypto/key/crypto",{"_index":1402,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/WellKnownService.html":{}}}],["crypto/key/dto/key",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["crypto/key/entities/cert.entity",{"_index":1111,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["crypto/key/key.module",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto_alg",{"_index":1540,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"miscellaneous/variables.html":{}}}],["crypto_validation_schema",{"_index":4269,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptographic",{"_index":3166,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cryptographic_binding_methods_supported",{"_index":1415,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["cryptoimplementatationmodule",{"_index":1474,"title":{"modules/CryptoImplementatationModule.html":{}},"body":{"modules/CryptoImplementatationModule.html":{},"modules/KeyModule.html":{},"index.html":{},"modules.html":{}}}],["cryptoimplementation",{"_index":1480,"title":{"interfaces/CryptoImplementation.html":{}},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptoimplementationservice",{"_index":1375,"title":{"injectables/CryptoImplementationService.html":{}},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"classes/VaultKeyService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["cryptokey",{"_index":1620,"title":{},"body":{"classes/DBKeyService.html":{}}}],["cryptomap",{"_index":1507,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["cryptomodule",{"_index":171,"title":{"modules/CryptoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["cryptoservice",{"_index":654,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["cryptoservice.getcrypto",{"_index":1636,"title":{},"body":{"classes/DBKeyService.html":{}}}],["cryptotype",{"_index":1516,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"classes/VaultKeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ctx",{"_index":2050,"title":{},"body":{"interfaces/InternalTokenPayload.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2051,"title":{},"body":{"interfaces/InternalTokenPayload.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":2140,"title":{},"body":{"injectables/IssuanceService.html":{},"entities/TenantEntity.html":{},"miscellaneous/functions.html":{}}}],["currently",{"_index":1525,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["currentroles",{"_index":2564,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["curve",{"_index":1528,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["customprops",{"_index":4589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d",{"_index":1640,"title":{},"body":{"classes/DBKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["data",{"_index":380,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"interfaces/CryptoImplementation.html":{},"classes/DCQL.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"interfaces/InternalTokenPayload.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["data')@apibody({description",{"_index":3856,"title":{},"body":{"controllers/StorageController.html":{}}}],["data.roles",{"_index":3991,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["database",{"_index":1698,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["database/database.module",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["database/iam",{"_index":2039,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["databasemodule",{"_index":172,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"index.html":{},"modules.html":{}}}],["date",{"_index":820,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["date().gettime",{"_index":1454,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["date(date.now",{"_index":3724,"title":{},"body":{"injectables/SessionService.html":{}}}],["date(token.expiresat",{"_index":3232,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["date.gettime",{"_index":3242,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["date.now",{"_index":2472,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["day",{"_index":3680,"title":{},"body":{"injectables/SessionService.html":{}}}],["db",{"_index":1989,"title":{},"body":{"controllers/HealthController.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["db_database",{"_index":4616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_host",{"_index":4608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_password",{"_index":4615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_port",{"_index":4612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_type",{"_index":1686,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_username",{"_index":4614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_validation_schema",{"_index":4276,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbkeyservice",{"_index":1570,"title":{"classes/DBKeyService.html":{}},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["dbtype",{"_index":1684,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dc",{"_index":2934,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["dc+sd",{"_index":2879,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dc_api",{"_index":3024,"title":{},"body":{"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["dc_api.jwt",{"_index":2872,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcql",{"_index":877,"title":{"classes/DCQL.html":{}},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["dcql_query",{"_index":886,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["dcql_query.length",{"_index":2864,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcqlquerycount",{"_index":2862,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dd",{"_index":4573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deal",{"_index":2185,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["debug",{"_index":2674,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["debugging",{"_index":2307,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["declarations",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/LoggerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["declare",{"_index":69,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["decodedvc",{"_index":3107,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.header",{"_index":3110,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.payload",{"_index":3109,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodejwt",{"_index":2456,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["decodejwt(accesstoken",{"_index":2468,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["decodeuri(id",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodeuri(secret",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorator",{"_index":2049,"title":{},"body":{"interfaces/InternalTokenPayload.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":42,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/FileEntity.html":{},"classes/FileUploadDto.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/RegistrarEntity.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RoleDto.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["decrease",{"_index":3716,"title":{},"body":{"injectables/SessionService.html":{}}}],["decryption",{"_index":1792,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe",{"_index":1793,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe(response",{"_index":1798,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["dedicated",{"_index":2952,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["deeppartial",{"_index":3654,"title":{},"body":{"injectables/SessionService.html":{}}}],["default",{"_index":805,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtService.html":{},"entities/KeyEntity.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["default(\"../../assets/config",{"_index":4558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"../../tmp",{"_index":4544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"./logs/session.log",{"_index":4648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"db",{"_index":4636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"es256",{"_index":4603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"http://localhost:3000",{"_index":4634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"local",{"_index":4665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"sqlite",{"_index":4606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(24",{"_index":4660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(60",{"_index":4657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(false",{"_index":4552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(process.env.node_env",{"_index":4641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default_auth_client_id",{"_index":4230,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_auth_client_secret",{"_index":4231,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_jwt_secret",{"_index":1941,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultmetrics",{"_index":2700,"title":{},"body":{"modules/MetricModule.html":{}}}],["defaults",{"_index":1520,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["define",{"_index":617,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/PresentationConfigCreateDto.html":{}}}],["defined",{"_index":45,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["defines",{"_index":4653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delete",{"_index":926,"title":{},"body":{"controllers/ClientController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["delete(\":id",{"_index":956,"title":{},"body":{"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/TenantController.html":{}}}],["delete(':id",{"_index":911,"title":{},"body":{"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/TenantController.html":{}}}],["delete(id",{"_index":3656,"title":{},"body":{"injectables/SessionService.html":{}}}],["delete(key",{"_index":1839,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["delete(tenantid",{"_index":1161,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["deletebytenant",{"_index":1876,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletebytenant(tenantid",{"_index":1885,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteclient",{"_index":900,"title":{},"body":{"controllers/ClientController.html":{}}}],["deleteclient(@param(\"id",{"_index":957,"title":{},"body":{"controllers/ClientController.html":{}}}],["deleteclient(id",{"_index":910,"title":{},"body":{"controllers/ClientController.html":{}}}],["deleteconfiguration",{"_index":2989,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(@param(\"id",{"_index":3017,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(id",{"_index":2993,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleted",{"_index":1884,"title":{},"body":{"injectables/FilesService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["deleteissuanceconfiguration",{"_index":1326,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["deleteissuanceconfiguration(id",{"_index":1329,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{}}}],["deleteissuanceconfiguration(tenantid",{"_index":2115,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["deletekey",{"_index":2360,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(@token",{"_index":2384,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(token",{"_index":2365,"title":{},"body":{"controllers/KeyController.html":{}}}],["deleteobjectcommand",{"_index":3358,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["deletepresentationconfig",{"_index":3043,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletepresentationconfig(id",{"_index":3055,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletes",{"_index":1163,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["deletesession",{"_index":3454,"title":{},"body":{"controllers/SessionController.html":{}}}],["deletesession(id",{"_index":3458,"title":{},"body":{"controllers/SessionController.html":{}}}],["deletetenant",{"_index":3902,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{}}}],["deletetenant(@param(\"id",{"_index":3922,"title":{},"body":{"controllers/TenantController.html":{}}}],["deletetenant(id",{"_index":3906,"title":{},"body":{"controllers/TenantController.html":{}}}],["deletetenant(tenantid",{"_index":3952,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["deletion",{"_index":3057,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dependencies",{"_index":161,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/LoggerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{},"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":3223,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["desc",{"_index":3100,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"miscellaneous/functions.html":{}}}],["description",{"_index":9,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayImage.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"classes/NoneTrustPolicy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["description(\"application",{"_index":4642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"claim",{"_index":4523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"client",{"_index":4518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"database",{"_index":4607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"enable",{"_index":4505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"expected",{"_index":4529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"file",{"_index":4649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"force",{"_index":4556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"internal",{"_index":4514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"interval",{"_index":4658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"local",{"_index":4534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"log",{"_index":4644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"path",{"_index":4559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"root",{"_index":4545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"run",{"_index":4553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"the",{"_index":4604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"time",{"_index":4661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"whether",{"_index":4676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["destination",{"_index":4580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["details",{"_index":549,"title":{},"body":{"classes/AuthorizationResponse-1.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["determine",{"_index":1552,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"entities/IssuanceConfig.html":{},"miscellaneous/variables.html":{}}}],["determined",{"_index":1543,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["different",{"_index":1484,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{}}}],["digest",{"_index":1392,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["direct_post.jwt",{"_index":2871,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["directaccessgrantsenabled",{"_index":2510,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["directly",{"_index":1524,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["directory",{"_index":3065,"title":{},"body":{"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["dirname",{"_index":2595,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["disable",{"_index":3235,"title":{},"body":{"injectables/RegistrarService.html":{},"classes/VaultKeyService.html":{}}}],["disabled",{"_index":3522,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["disclosure",{"_index":1080,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["disclosure_policy",{"_index":1426,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["disclosureframe",{"_index":1058,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["discovery",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["discovery.dto",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["discovery.dto.ts",{"_index":4224,"title":{},"body":{"coverage.html":{}}}],["discoveryendpoint",{"_index":3211,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["discriminated",{"_index":1081,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["discriminator",{"_index":134,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["display",{"_index":1117,"title":{"classes/Display.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"coverage.html":{}}}],["display.background_image",{"_index":1253,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["display.background_image.uri",{"_index":1249,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["display.background_image?.uri",{"_index":1247,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["display.logo.uri",{"_index":1256,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["display.logo.url",{"_index":1768,"title":{},"body":{"injectables/DisplayService.html":{}}}],["display.logo.url.trim",{"_index":1767,"title":{},"body":{"injectables/DisplayService.html":{}}}],["display.logo?.uri",{"_index":1255,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["display.logo?.url",{"_index":1766,"title":{},"body":{"injectables/DisplayService.html":{}}}],["display.service",{"_index":1722,"title":{},"body":{"controllers/DisplayController.html":{}}}],["display/display.controller",{"_index":2240,"title":{},"body":{"modules/IssuerModule.html":{}}}],["display/display.service",{"_index":2241,"title":{},"body":{"modules/IssuerModule.html":{}}}],["display/entities/display.entity",{"_index":2242,"title":{},"body":{"modules/IssuerModule.html":{}}}],["displaycontroller",{"_index":1711,"title":{"controllers/DisplayController.html":{}},"body":{"controllers/DisplayController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["displaycreatedto",{"_index":1717,"title":{"classes/DisplayCreateDto.html":{}},"body":{"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"injectables/DisplayService.html":{},"coverage.html":{}}}],["displaydata",{"_index":1716,"title":{},"body":{"controllers/DisplayController.html":{},"injectables/DisplayService.html":{}}}],["displayentity",{"_index":1730,"title":{"entities/DisplayEntity.html":{}},"body":{"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["displayimage",{"_index":1116,"title":{"classes/DisplayImage.html":{}},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"coverage.html":{}}}],["displayinfo",{"_index":1735,"title":{"classes/DisplayInfo.html":{}},"body":{"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"coverage.html":{}}}],["displaylogo",{"_index":1738,"title":{"classes/DisplayLogo.html":{}},"body":{"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"coverage.html":{}}}],["displayrepository",{"_index":1748,"title":{},"body":{"injectables/DisplayService.html":{}}}],["displayservice",{"_index":1721,"title":{"injectables/DisplayService.html":{}},"body":{"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["disposition",{"_index":3875,"title":{},"body":{"controllers/StorageController.html":{}}}],["dns",{"_index":3254,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["document",{"_index":3296,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["documentation",{"_index":4220,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":3054,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["download",{"_index":3850,"title":{},"body":{"controllers/StorageController.html":{}}}],["download(@param(\"key",{"_index":3872,"title":{},"body":{"controllers/StorageController.html":{}}}],["download(key",{"_index":3851,"title":{},"body":{"controllers/StorageController.html":{}}}],["dpop",{"_index":741,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpop_jkt",{"_index":628,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["dpop_signing_alg_values_supported",{"_index":712,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpoprequired",{"_index":2057,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["dpopvalue",{"_index":739,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["driver",{"_index":3884,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["dto",{"_index":369,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"interfaces/ClientsProvider.html":{},"classes/CredentialConfigMapping.html":{},"injectables/InternalClientsProvider.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["dto.clientid",{"_index":2040,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["dto.description",{"_index":2507,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["dto.roles",{"_index":2542,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["dto/auth",{"_index":3088,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dto/authentication",{"_index":2081,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["dto/authorization",{"_index":2797,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["dto/authorize",{"_index":596,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dto/client",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClientController.html":{}}}],["dto/create",{"_index":935,"title":{},"body":{"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["dto/credential",{"_index":1191,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/WellKnownService.html":{}}}],["dto/display",{"_index":1723,"title":{},"body":{"controllers/DisplayController.html":{},"injectables/DisplayService.html":{}}}],["dto/file",{"_index":3864,"title":{},"body":{"controllers/StorageController.html":{}}}],["dto/issuance.dto",{"_index":2099,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["dto/issuer",{"_index":3299,"title":{},"body":{"injectables/ResolverService.html":{}}}],["dto/jwks",{"_index":4174,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/key",{"_index":1629,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{}}}],["dto/notification",{"_index":2764,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["dto/oauth",{"_index":4175,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/oidc",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/par",{"_index":599,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["dto/presentation",{"_index":2839,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["dto/role.dto",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/status",{"_index":3792,"title":{},"body":{"injectables/StatusListService.html":{}}}],["dto/token",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":937,"title":{},"body":{"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["dto/vp",{"_index":859,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["duration",{"_index":3541,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["duration}ms",{"_index":3543,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["during",{"_index":2036,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["dynamicmodule",{"_index":2401,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["e",{"_index":1273,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["e.clientid",{"_index":2029,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["e.description",{"_index":2030,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["e.g",{"_index":1857,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{},"interfaces/SessionLogContext.html":{},"classes/VaultKeyService.html":{}}}],["e.message",{"_index":1275,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["e.roles",{"_index":2031,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["e.secret",{"_index":2033,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["each",{"_index":70,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["eager",{"_index":3433,"title":{},"body":{"entities/Session.html":{}}}],["easier",{"_index":3274,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["ec",{"_index":1549,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["ec_public",{"_index":1601,"title":{"classes/EC_Public.html":{}},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["ecdh",{"_index":1821,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["ecdsa",{"_index":4071,"title":{},"body":{"classes/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["ecdsa_p256",{"_index":4259,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ed25519",{"_index":1526,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/Oid4vpService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["eddsa",{"_index":4619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["effectively",{"_index":4432,"title":{},"body":{"miscellaneous/functions.html":{}}}],["element",{"_index":1225,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["element.registrationcert!.id",{"_index":3105,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["elements",{"_index":1210,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["elliptic",{"_index":1774,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["embedded",{"_index":1079,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["embeddeddisclosurepolicy",{"_index":39,"title":{"classes/EmbeddedDisclosurePolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["embeddeddisclosurepolicy:31",{"_index":46,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["embeddeddisclosurepolicy:42",{"_index":3342,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["embeddeddisclosurepolicy:54",{"_index":2701,"title":{},"body":{"classes/NoneTrustPolicy.html":{}}}],["embeddeddisclosurepolicy:80",{"_index":235,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["emits",{"_index":3509,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["emitter",{"_index":4352,"title":{},"body":{"dependencies.html":{}}}],["empty",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StatusListService.html":{}}}],["enabled",{"_index":1449,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["enabledebugmode",{"_index":2657,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablehttplogger",{"_index":2656,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["enablement",{"_index":3523,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["enablesessionlogger",{"_index":2655,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["encoded",{"_index":544,"title":{},"body":{"classes/AuthorizationResponse.html":{}}}],["encodedheader",{"_index":4093,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["encodedheader}.${encodedpayload",{"_index":4099,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["encodedheader}.${encodedpayload}.${signature",{"_index":4101,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["encodedpayload",{"_index":4096,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["encodeuri(key",{"_index":3378,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["encodeuricomponent(key)}=${encodeuricomponent(value",{"_index":2917,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["encrypt",{"_index":1803,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"miscellaneous/typealiases.html":{}}}],["encrypted",{"_index":1804,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption",{"_index":1791,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption/encryption.service",{"_index":1564,"title":{},"body":{"modules/CryptoModule.html":{}}}],["encryptionservice",{"_index":1560,"title":{"injectables/EncryptionService.html":{}},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["encrypts",{"_index":1801,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["endpoint",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/HealthController.html":{},"modules/MetricModule.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":558,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/HealthController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["enhanced",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{}}}],["ensure",{"_index":2333,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":814,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/DisplayEntity.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"index.html":{}}}],["entities/cert.entity",{"_index":1631,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{}}}],["entities/client.entity",{"_index":1002,"title":{},"body":{"modules/ClientModule.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/UpdateClientDto.html":{}}}],["entities/credential.entity",{"_index":1136,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{}}}],["entities/display.entity",{"_index":1731,"title":{},"body":{"classes/DisplayCreateDto.html":{},"injectables/DisplayService.html":{}}}],["entities/files.entity",{"_index":1909,"title":{},"body":{"injectables/FilesService.html":{},"modules/StorageModule.html":{}}}],["entities/issuance",{"_index":1142,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["entities/keys.entity",{"_index":1632,"title":{},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{}}}],["entities/presentation",{"_index":2985,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["entities/registrar.entity",{"_index":3149,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{}}}],["entities/session.entity",{"_index":3471,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{}}}],["entities/status",{"_index":3759,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["entitites/tenant.entity",{"_index":1055,"title":{},"body":{"classes/CreateTenantDto.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["entity",{"_index":812,"title":{"entities/CertEntity.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{}},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["entity.clientid",{"_index":2041,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["entity.description",{"_index":2042,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["entity.roles",{"_index":2043,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["entries",{"_index":3181,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["entries.length",{"_index":3829,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry",{"_index":1450,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"miscellaneous/functions.html":{}}}],["entry.bits",{"_index":3809,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.elements",{"_index":3825,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.elements[id",{"_index":3824,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.key",{"_index":1826,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["entry.key.d",{"_index":1825,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["entry.relyingpartyid",{"_index":3266,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["entry.tenantid",{"_index":3810,"title":{},"body":{"injectables/StatusListService.html":{}}}],["enum",{"_index":105,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RoleDto.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":4394,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":2650,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["environments",{"_index":1947,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["equals",{"_index":3397,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals(\"https://json",{"_index":3398,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals(\"object",{"_index":3400,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals('https://json",{"_index":3389,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals('object",{"_index":3395,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["erika",{"_index":2739,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["err",{"_index":2321,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/PresentationsService.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["err.message",{"_index":3132,"title":{},"body":{"injectables/PresentationsService.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["error",{"_index":780,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["error(\"error",{"_index":3257,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["error(\"importing",{"_index":4062,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["error(\"invalid",{"_index":1545,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["error(\"issuer",{"_index":3302,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(\"key",{"_index":3325,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(\"no",{"_index":3120,"title":{},"body":{"injectables/PresentationsService.html":{},"classes/VaultKeyService.html":{}}}],["error(\"stack",{"_index":3821,"title":{},"body":{"injectables/StatusListService.html":{}}}],["error(\"subject",{"_index":3311,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error('credential",{"_index":795,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["error(`error",{"_index":4140,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["error(`invalid",{"_index":1971,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["error(`unsupported",{"_index":1556,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["error.children",{"_index":2145,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["error.children.length",{"_index":2146,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["error.constraints",{"_index":2022,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["error.message",{"_index":1972,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerService.html":{}}}],["error.name",{"_index":3612,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["error.property",{"_index":2021,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["error.stack",{"_index":3614,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["error.value",{"_index":2023,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["error_description",{"_index":782,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["errormessages",{"_index":2149,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["errors",{"_index":1262,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["es",{"_index":1813,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["es256",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{}}}],["es256\").default(\"rs256",{"_index":4528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eslint",{"_index":3234,"title":{},"body":{"injectables/RegistrarService.html":{},"classes/VaultKeyService.html":{}}}],["eslint/no",{"_index":3238,"title":{},"body":{"injectables/RegistrarService.html":{},"classes/VaultKeyService.html":{}}}],["etag",{"_index":1862,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["etsi_tl",{"_index":869,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["eudi",{"_index":4464,"title":{},"body":{"properties.html":{}}}],["eudiplo",{"_index":150,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"entities/TenantEntity.html":{}}}],["event",{"_index":1251,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"classes/NotificationRequestDto.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["events",{"_index":3562,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["example",{"_index":2191,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/RoleDto.html":{}}}],["examples",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{}}}],["exchange",{"_index":585,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["exclude",{"_index":4597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["execution",{"_index":3504,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["executioncontext",{"_index":2048,"title":{},"body":{"interfaces/InternalTokenPayload.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1597,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/StatusListService.html":{}}}],["existing",{"_index":2374,"title":{},"body":{"controllers/KeyController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{}}}],["existingroles",{"_index":2483,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["existingroles.filter",{"_index":2490,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["exists",{"_index":1181,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/StatusListService.html":{},"classes/VaultKeyService.html":{}}}],["exists(key",{"_index":1841,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["existssync",{"_index":2591,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["exp",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["expandvariables",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["expect",{"_index":2955,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["expected",{"_index":2731,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["expected_origins",{"_index":2873,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["expectedcode",{"_index":754,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedpreauthorizedcode",{"_index":749,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedtxcode",{"_index":751,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectresponse",{"_index":4119,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["expiration",{"_index":1456,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/ParResponseDto.html":{},"miscellaneous/variables.html":{}}}],["expirationdate",{"_index":3231,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["expirationdate.gettime",{"_index":3241,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["expire",{"_index":2334,"title":{},"body":{"injectables/JwtStrategy.html":{},"entities/Session.html":{}}}],["expired",{"_index":3447,"title":{},"body":{"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["expires_in",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{}}}],["expiresat",{"_index":2918,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["expiresin",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["expiresinseconds",{"_index":763,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expiry",{"_index":2476,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["export",{"_index":30,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"modules/ClientModule.html":{},"classes/ClientSecretResponseDto.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/LoggerModule.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateClientDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["exportable",{"_index":1654,"title":{},"body":{"classes/DBKeyService.html":{},"classes/VaultKeyService.html":{}}}],["exportjwk",{"_index":1621,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/VaultKeyService.html":{}}}],["exportjwk(cryptokey",{"_index":4084,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["exportjwk(secret.privatekey",{"_index":1815,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exports",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClientModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/LoggerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["exportspki",{"_index":1622,"title":{},"body":{"classes/DBKeyService.html":{}}}],["exportspki(publickeyinstance",{"_index":1674,"title":{},"body":{"classes/DBKeyService.html":{}}}],["expose",{"_index":2527,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["express",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"controllers/StorageController.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["express.multer.file",{"_index":1898,"title":{},"body":{"injectables/FilesService.html":{},"controllers/StorageController.html":{}}}],["ext",{"_index":1644,"title":{},"body":{"classes/DBKeyService.html":{}}}],["extend",{"_index":864,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["extends",{"_index":38,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/DBKeyService.html":{},"classes/DisplayCreateDto.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/InternalTokenPayload.html":{},"classes/IssuanceDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/RootOfTrustPolicy.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateClientDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{}}}],["extends#integrity",{"_index":4011,"title":{},"body":{"classes/VCT.html":{}}}],["external",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["extract",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialConfigService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["extractable",{"_index":1670,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["extractconditionsfromkeydesc",{"_index":4323,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["extractconditionsfromkeydesc(keydesc",{"_index":4420,"title":{},"body":{"miscellaneous/functions.html":{}}}],["extracted",{"_index":4425,"title":{},"body":{"miscellaneous/functions.html":{}}}],["extracterrormessages",{"_index":2138,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extracterrormessages(child",{"_index":2148,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extracterrormessages(error",{"_index":2151,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extractjwt",{"_index":2298,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2327,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":4421,"title":{},"body":{"miscellaneous/functions.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{}}}],["factory",{"_index":4600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failed",{"_index":1266,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/enumerations.html":{}}}],["failure",{"_index":3715,"title":{},"body":{"injectables/SessionService.html":{}}}],["failwitherror",{"_index":2309,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fall",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":1124,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["false})@isboolean",{"_index":1096,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["false})@isempty",{"_index":4021,"title":{},"body":{"classes/VCT.html":{}}}],["family_name",{"_index":2740,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["fatal",{"_index":2676,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["fd3ebf28",{"_index":2197,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["fetch",{"_index":3082,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fetched",{"_index":3445,"title":{},"body":{"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["fields",{"_index":2940,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"modules/ClientModule.html":{},"classes/ClientSecretResponseDto.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/LoggerModule.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateClientDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["file.buffer",{"_index":1923,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.jwt",{"_index":3816,"title":{},"body":{"injectables/StatusListService.html":{}}}],["file.mimetype",{"_index":1924,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.originalname",{"_index":1925,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.replace(\".json",{"_index":1219,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["file.stack.pop",{"_index":3820,"title":{},"body":{"injectables/StatusListService.html":{}}}],["file_storage",{"_index":1868,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fileentity",{"_index":1827,"title":{"entities/FileEntity.html":{}},"body":{"entities/FileEntity.html":{},"injectables/FilesService.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["fileinterceptor",{"_index":3862,"title":{},"body":{"controllers/StorageController.html":{}}}],["filename",{"_index":1829,"title":{},"body":{"entities/FileEntity.html":{},"injectables/FilesService.html":{}}}],["filename.startswith(\"http",{"_index":1917,"title":{},"body":{"injectables/FilesService.html":{}}}],["filerepository",{"_index":1881,"title":{},"body":{"injectables/FilesService.html":{}}}],["files",{"_index":1214,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/variables.html":{}}}],["files.service",{"_index":3866,"title":{},"body":{"controllers/StorageController.html":{},"modules/StorageModule.html":{}}}],["filesservice",{"_index":1158,"title":{"injectables/FilesService.html":{}},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["filestorage",{"_index":1834,"title":{"interfaces/FileStorage.html":{}},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["fileuploaddto",{"_index":1870,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"controllers/StorageController.html":{},"coverage.html":{}}}],["fileuploaddto})@post",{"_index":3858,"title":{},"body":{"controllers/StorageController.html":{}}}],["fill(0",{"_index":3799,"title":{},"body":{"injectables/StatusListService.html":{}}}],["filter((cr",{"_index":2567,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["filter((tenant",{"_index":1204,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["filter(boolean",{"_index":2547,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["finally",{"_index":3297,"title":{},"body":{"injectables/ResolverService.html":{}}}],["find",{"_index":1254,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["findoneby",{"_index":1919,"title":{},"body":{"injectables/FilesService.html":{}}}],["findonebyorfail",{"_index":1466,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/InternalClientsProvider.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["findoptionswhere",{"_index":3662,"title":{},"body":{"injectables/SessionService.html":{}}}],["first",{"_index":1667,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/ResolverService.html":{},"classes/VaultKeyService.html":{}}}],["firstvaluefrom",{"_index":3085,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["firstvaluefrom(this.httpservice.get(uri)).then",{"_index":3117,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fixed",{"_index":2196,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["flag",{"_index":3441,"title":{},"body":{"entities/Session.html":{}}}],["flags",{"_index":4438,"title":{},"body":{"miscellaneous/functions.html":{}}}],["flattened",{"_index":4428,"title":{},"body":{"miscellaneous/functions.html":{}}}],["flattenmetas",{"_index":4324,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["flattenmetas(desc",{"_index":4426,"title":{},"body":{"miscellaneous/functions.html":{}}}],["flattens",{"_index":4427,"title":{},"body":{"miscellaneous/functions.html":{}}}],["flow",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["flow_complete",{"_index":3610,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_error",{"_index":3611,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_start",{"_index":3608,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flowtype",{"_index":2843,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["folder",{"_index":1211,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["forbidnonwhitelisted",{"_index":1238,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["forbidunknownvalues",{"_index":1233,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["force",{"_index":1198,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["forcepathstyle",{"_index":3890,"title":{},"body":{"modules/StorageModule.html":{}}}],["format",{"_index":25,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EC_Public.html":{},"classes/FileUploadDto.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/ResolverService.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/variables.html":{}}}],["formats",{"_index":4202,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["formatters",{"_index":4587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forroot",{"_index":2399,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["forwardref",{"_index":2810,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{}}}],["found",{"_index":729,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionPipe.html":{},"injectables/StatusListService.html":{},"classes/VaultKeyService.html":{}}}],["foundation",{"_index":156,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"properties.html":{}}}],["free",{"_index":3775,"title":{},"body":{"injectables/StatusListService.html":{}}}],["fresh",{"_index":2909,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["fs",{"_index":1188,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["fullpath",{"_index":2597,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["function",{"_index":2432,"title":{},"body":{"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":4414,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":3407,"title":{},"body":{"entities/Session.html":{}}}],["g",{"_index":2855,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["gauge",{"_index":3647,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["general",{"_index":4548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generate",{"_index":1596,"title":{},"body":{"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/KeycloakClientsProvider.html":{},"controllers/PresentationManagementController.html":{}}}],["generated",{"_index":1589,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["generated/client.gen",{"_index":3200,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["generatekeypair",{"_index":1486,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["generatekeypair(\"ecdh",{"_index":1812,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generates",{"_index":1490,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{}}}],["generatesalt",{"_index":1393,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["generatetoken",{"_index":1949,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generatetoken(payload",{"_index":2274,"title":{},"body":{"injectables/JwtService.html":{}}}],["generatetokenoptions",{"_index":1938,"title":{"interfaces/GenerateTokenOptions.html":{}},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["generation",{"_index":1951,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generic",{"_index":1482,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/KeyService.html":{},"injectables/SessionLoggerService.html":{}}}],["get(\".well",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\":id",{"_index":945,"title":{},"body":{"controllers/ClientController.html":{},"controllers/SessionController.html":{},"controllers/TenantController.html":{}}}],["get(\":id/secret",{"_index":948,"title":{},"body":{"controllers/ClientController.html":{}}}],["get(\":key",{"_index":3871,"title":{},"body":{"controllers/StorageController.html":{}}}],["get(\"jwks.json",{"_index":4186,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"oauth",{"_index":4183,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"openid",{"_index":4181,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"request",{"_index":2800,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get(\"schema/:id",{"_index":1364,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get(\"status",{"_index":3737,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get(\"vct/:id",{"_index":1360,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('.well",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':id",{"_index":914,"title":{},"body":{"controllers/ClientController.html":{},"controllers/TenantController.html":{}}}],["get(':id/secret",{"_index":919,"title":{},"body":{"controllers/ClientController.html":{}}}],["get(':key",{"_index":3852,"title":{},"body":{"controllers/StorageController.html":{}}}],["get('oauth",{"_index":4158,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('request')@sessionlogger('session",{"_index":2792,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get('schema/:id",{"_index":1353,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('session",{"_index":2777,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["get('status",{"_index":3731,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get('vct/:id",{"_index":1356,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get()@healthcheck",{"_index":1983,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(state",{"_index":3658,"title":{},"body":{"injectables/SessionService.html":{}}}],["get(tenantid",{"_index":1168,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{}}}],["getalg",{"_index":1509,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getall",{"_index":3641,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["getallsessions",{"_index":3455,"title":{},"body":{"controllers/SessionController.html":{}}}],["getauthorizationserver",{"_index":647,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["getauthorizationserver(tenantid",{"_index":662,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["getauthzmetadata",{"_index":4191,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getauthzmetadata(session",{"_index":4195,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getby",{"_index":726,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["getby(where",{"_index":3661,"title":{},"body":{"injectables/SessionService.html":{}}}],["getbyid",{"_index":1154,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getbyid(tenantid",{"_index":1171,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getcertificate",{"_index":1582,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{}}}],["getcertificate(tenantid",{"_index":1617,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{}}}],["getclient",{"_index":901,"title":{},"body":{"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["getclient(@param(\"id",{"_index":946,"title":{},"body":{"controllers/ClientController.html":{}}}],["getclient(id",{"_index":913,"title":{},"body":{"controllers/ClientController.html":{}}}],["getclient(tenantid",{"_index":1028,"title":{},"body":{"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["getclients",{"_index":902,"title":{},"body":{"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["getclients(@token",{"_index":943,"title":{},"body":{"controllers/ClientController.html":{}}}],["getclients(tenantid",{"_index":1030,"title":{},"body":{"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["getclients(user",{"_index":916,"title":{},"body":{"controllers/ClientController.html":{}}}],["getclientsecret",{"_index":903,"title":{},"body":{"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["getclientsecret(id",{"_index":918,"title":{},"body":{"controllers/ClientController.html":{}}}],["getclientsecret(sub",{"_index":1032,"title":{},"body":{"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["getclientsecret(user.entity!.id",{"_index":951,"title":{},"body":{"controllers/ClientController.html":{}}}],["getconfigs",{"_index":1327,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(@token",{"_index":1343,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(user",{"_index":1331,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfiguration",{"_index":2620,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getcredential",{"_index":1368,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredential(credentialconfigurationid",{"_index":1377,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfigurationsupported",{"_index":1369,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfigurationsupported(session",{"_index":1383,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcrypto",{"_index":1510,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getcrypto(alg",{"_index":1517,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getcryptofromjwk",{"_index":1511,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getcryptofromjwk(jwk",{"_index":1522,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getdisplay",{"_index":1714,"title":{},"body":{"controllers/DisplayController.html":{}}}],["getdisplay(@token",{"_index":1725,"title":{},"body":{"controllers/DisplayController.html":{}}}],["getdisplay(user",{"_index":1719,"title":{},"body":{"controllers/DisplayController.html":{}}}],["getdownloadurl",{"_index":1877,"title":{},"body":{"injectables/FilesService.html":{}}}],["getdownloadurl(key",{"_index":1888,"title":{},"body":{"injectables/FilesService.html":{}}}],["getencryptionpublickey",{"_index":1794,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getencryptionpublickey(tenantid",{"_index":1805,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getexistingrp",{"_index":3160,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getexistingrp(name",{"_index":3175,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getexternaloidcconfig",{"_index":2281,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getexternaloidcconfig(configservice",{"_index":2286,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getglobaljwks",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["getheadersfromrequest",{"_index":691,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getheadersfromrequest(req",{"_index":737,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["getintegratedoauth2config",{"_index":2282,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getintegratedoauth2config(configservice",{"_index":2290,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getissuanceconfiguration",{"_index":2109,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfiguration(tenantid",{"_index":2117,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid",{"_index":2110,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid(issuanceconfigid",{"_index":2119,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurations",{"_index":2092,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(@token",{"_index":2102,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(user",{"_index":2095,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuermetadata",{"_index":4192,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getissuermetadata(session",{"_index":4198,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getjwk",{"_index":4026,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["getjwk(key",{"_index":4030,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["getjwks",{"_index":4157,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["getjwks(@sessionentity",{"_index":4187,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(session",{"_index":4160,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(tenantid",{"_index":4206,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getkeys",{"_index":2361,"title":{},"body":{"controllers/KeyController.html":{},"classes/VaultKeyService.html":{}}}],["getkeys(@token",{"_index":2379,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkeys(tenantid",{"_index":4032,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["getkeys(token",{"_index":2367,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkid",{"_index":1575,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{}}}],["getkid(tenantid",{"_index":1590,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{}}}],["getlist",{"_index":3729,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlist(@param(\"tenantid",{"_index":3739,"title":{},"body":{"controllers/StatusListController.html":{}}}],["getlist(tenantid",{"_index":3730,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlogfilepath",{"_index":2621,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getlogformat",{"_index":2622,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getloglevel",{"_index":2623,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getoauth2token",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getoauth2token(body",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getobjectcommand",{"_index":3359,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["getoffer",{"_index":2166,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoffer(req",{"_index":2995,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["getoffer(res",{"_index":2167,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["getoidcdiscovery",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getorthrow(\"public_url",{"_index":2250,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/RegistrarService.html":{}}}],["getpostrequestwithsession",{"_index":2784,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getpostrequestwithsession(session",{"_index":2787,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getpresentationconfig",{"_index":3044,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfig(id",{"_index":3059,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs",{"_index":3045,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs(tenantid",{"_index":3061,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getprivatekey",{"_index":1576,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getprivatekey(tenantid",{"_index":1594,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpubfromprivatekey",{"_index":1577,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpubfromprivatekey(privatekey",{"_index":1598,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpublickey",{"_index":1578,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{}}}],["getpublickey(type",{"_index":1602,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{}}}],["getrepositorytoken",{"_index":989,"title":{},"body":{"modules/ClientModule.html":{},"modules/KeyModule.html":{}}}],["getrepositorytoken(certentity",{"_index":2410,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrepositorytoken(cliententity",{"_index":1005,"title":{},"body":{"modules/ClientModule.html":{}}}],["getrepositorytoken(keyentity",{"_index":2411,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrequestwithsession",{"_index":2785,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(session",{"_index":2791,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getresponse",{"_index":2786,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["getresponse(body",{"_index":2794,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["gets",{"_index":1592,"title":{},"body":{"classes/DBKeyService.html":{},"classes/VaultKeyService.html":{}}}],["getschema",{"_index":1370,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschema(credentialconfigurationid",{"_index":1385,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschemapath",{"_index":101,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["getschemapath(allowlistpolicy",{"_index":1127,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["getschemapath(attestationbasedpolicy",{"_index":1125,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["getschemapath(authenticationmethodauth",{"_index":2084,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["getschemapath(authenticationmethodnone",{"_index":2083,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["getschemapath(authenticationmethodpresentation",{"_index":2085,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["getschemapath(nonetrustpolicy",{"_index":1126,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["getschemapath(rootoftrustpolicy",{"_index":1128,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["getschemapath(webhookauthconfigheader",{"_index":133,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["getschemapath(webhookauthconfignone",{"_index":132,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["getsession",{"_index":3456,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(@param(\"id",{"_index":3479,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(session",{"_index":3461,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsignedurl",{"_index":1836,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getsignedurl(key",{"_index":1843,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getsignedurl?(key",{"_index":1866,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["getsigner",{"_index":1487,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsigner(privatekeyjwk",{"_index":1492,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["getstream",{"_index":1837,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getstream(key",{"_index":1845,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getsupportedalgorithms",{"_index":1512,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["gettenant",{"_index":3903,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{}}}],["gettenant(@param(\"id",{"_index":3920,"title":{},"body":{"controllers/TenantController.html":{}}}],["gettenant(id",{"_index":3908,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["gettenant(sub",{"_index":2342,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["gettenants",{"_index":3904,"title":{},"body":{"controllers/TenantController.html":{}}}],["getting",{"_index":1305,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/VaultKeyService.html":{}}}],["getvct",{"_index":1371,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getvct(credentialid",{"_index":1387,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getverifier",{"_index":1488,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getverifier(publickeyjwk",{"_index":1497,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["given",{"_index":1164,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"classes/KeyService.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"classes/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["given_name",{"_index":2203,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["global",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"modules/CryptoImplementatationModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["globalthis.headers",{"_index":4447,"title":{},"body":{"miscellaneous/functions.html":{}}}],["grant",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["grant_type",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{}}}],["grant_types_supported",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["granttype",{"_index":694,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/KeycloakClientsProvider.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["graph",{"_index":4459,"title":{},"body":{"modules.html":{}}}],["group",{"_index":4507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":2696,"title":{"guards/RolesGuard.html":{}},"body":{"modules/MetricModule.html":{},"coverage.html":{},"index.html":{}}}],["guards",{"_index":3330,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handle",{"_index":574,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{}}}],["handled",{"_index":1969,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["handler",{"_index":3506,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["handles",{"_index":559,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["handlesigningkeyerror",{"_index":2320,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handling",{"_index":1790,"title":{},"body":{"injectables/EncryptionService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["hardcode",{"_index":2517,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["hardcoded",{"_index":2520,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["hash",{"_index":4618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashalg",{"_index":1443,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hasher",{"_index":1442,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["hasresponsedata",{"_index":4138,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["haswebhook",{"_index":2938,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["head",{"_index":3375,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.contentlength",{"_index":3381,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.contenttype",{"_index":3382,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.etag",{"_index":3380,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["header",{"_index":96,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["header(\"content",{"_index":3738,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["header('content",{"_index":4161,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["header.kid",{"_index":3324,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c",{"_index":3303,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c.map",{"_index":3306,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header[\"jwk",{"_index":3315,"title":{},"body":{"injectables/ResolverService.html":{}}}],["headername",{"_index":92,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["headers",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["headers.authorization",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["headers[session.claimswebhook!.auth.config.headername",{"_index":4123,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["headers[webhook.auth.config.headername",{"_index":4145,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["headobjectcommand",{"_index":3360,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["health",{"_index":1976,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1994,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1985,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1979,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1974,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":173,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"index.html":{},"modules.html":{}}}],["help",{"_index":1018,"title":{},"body":{"modules/ClientModule.html":{},"modules/SessionModule.html":{},"modules/TenantModule.html":{}}}],["here",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{},"injectables/WellKnownService.html":{}}}],["hh:mm:ss",{"_index":4574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["holdercnf",{"_index":1378,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["host",{"_index":1468,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["hostname",{"_index":2865,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${session.id}/oid4vp",{"_index":2869,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${session.tenantid",{"_index":2851,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid}/credentials",{"_index":1470,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hot",{"_index":2648,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["hour",{"_index":3671,"title":{},"body":{"injectables/SessionService.html":{},"injectables/WellKnownService.html":{}}}],["hours",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["hs256",{"_index":1959,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["http",{"_index":2653,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["httpmethod",{"_index":681,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["httpmodule",{"_index":2231,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules/VerifierModule.html":{}}}],["https://${req.headers.host",{"_index":622,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["https://${this.bucket}.s3.amazonaws.com/${encodeuri(key",{"_index":3379,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["https://github.com/openwallet",{"_index":4466,"title":{},"body":{"properties.html":{}}}],["https://json",{"_index":3399,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["https://openid.net/specs/openid",{"_index":534,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["https://openwallet",{"_index":155,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["https://self",{"_index":2888,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["httpservice",{"_index":2402,"title":{},"body":{"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["iat",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["id",{"_index":16,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["id.token.claim",{"_index":2525,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["id_token_signing_alg_values_supported",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["identifier",{"_index":27,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"classes/DCQL.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["ids",{"_index":1146,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["idx",{"_index":3819,"title":{},"body":{"injectables/StatusListService.html":{}}}],["ignore",{"_index":4575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ignoreexpiration",{"_index":2332,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":1240,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png",{"_index":2188,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png')@apibody({type",{"_index":2174,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["images",{"_index":1892,"title":{},"body":{"injectables/FilesService.html":{},"controllers/StorageController.html":{}}}],["imeplement",{"_index":1483,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation",{"_index":1519,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{}}}],["implementation.module",{"_index":2406,"title":{},"body":{"modules/KeyModule.html":{}}}],["implementation.module.ts",{"_index":1479,"title":{},"body":{"modules/CryptoImplementatationModule.html":{}}}],["implementation.service",{"_index":1404,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"classes/VaultKeyService.html":{},"injectables/WellKnownService.html":{}}}],["implementation.service.ts",{"_index":1505,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.service.ts:11",{"_index":1533,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:12",{"_index":1532,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:13",{"_index":1513,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:27",{"_index":1529,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:35",{"_index":1514,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:59",{"_index":1523,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:85",{"_index":1518,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.ts",{"_index":1481,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.ts:19",{"_index":1489,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:24",{"_index":1494,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:29",{"_index":1498,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation/crypto",{"_index":1403,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"classes/VaultKeyService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["implementation/ed25519.ts",{"_index":4270,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["implementations",{"_index":1535,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implements",{"_index":112,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["import",{"_index":50,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"modules/ClientModule.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/LoggerModule.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateClientDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["import(tenantid",{"_index":1606,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{}}}],["import.dto",{"_index":1630,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/UpdateKeyDto.html":{},"classes/VaultKeyService.html":{}}}],["import.dto.ts",{"_index":2346,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"coverage.html":{}}}],["import.dto.ts:11",{"_index":2354,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:13",{"_index":2355,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:15",{"_index":2349,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:17",{"_index":2350,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:19",{"_index":2348,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:31",{"_index":2397,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:38",{"_index":2395,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:45",{"_index":2396,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:7",{"_index":2351,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:9",{"_index":2353,"title":{},"body":{"classes/Key.html":{}}}],["imported",{"_index":1277,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["importerror",{"_index":1274,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["importing",{"_index":2357,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["importjwk",{"_index":1623,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["importjwk(keyentity.key",{"_index":1820,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["importjwk(privatekey",{"_index":1675,"title":{},"body":{"classes/DBKeyService.html":{}}}],["imports",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClientModule.html":{},"injectables/CredentialConfigService.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{}}}],["importspki",{"_index":4051,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["importspki(key",{"_index":4082,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["importwarning",{"_index":1252,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["include",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"injectables/RegistrarService.html":{}}}],["included",{"_index":2069,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{}}}],["includes",{"_index":2822,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["including",{"_index":530,"title":{},"body":{"classes/AuthorizationResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/SessionLogContext.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":3486,"title":{},"body":{"interfaces/SessionLogContext.html":{},"classes/WebhookResponse.html":{}}}],["indexes",{"_index":3751,"title":{},"body":{"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["indicates",{"_index":29,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["indicating",{"_index":3022,"title":{},"body":{"classes/PresentationRequest.html":{},"entities/Session.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"modules/ClientModule.html":{},"classes/ClientSecretResponseDto.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/LoggerModule.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateClientDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":154,"title":{},"body":{"controllers/AppController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"controllers/IssuerManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/functions.html":{}}}],["inherited",{"_index":44,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/DBKeyService.html":{},"classes/NoneTrustPolicy.html":{},"classes/RootOfTrustPolicy.html":{},"classes/VaultKeyService.html":{}}}],["init",{"_index":1579,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/VaultKeyService.html":{}}}],["init(tenant",{"_index":1609,"title":{},"body":{"classes/DBKeyService.html":{}}}],["init(tenantid",{"_index":2428,"title":{},"body":{"classes/KeyService.html":{},"classes/VaultKeyService.html":{}}}],["initialization",{"_index":3609,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["initialize",{"_index":1534,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/functions.html":{}}}],["initialized",{"_index":2430,"title":{},"body":{"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["initializes",{"_index":1341,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["initializing",{"_index":2499,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["inittenant",{"_index":3905,"title":{},"body":{"controllers/TenantController.html":{}}}],["inittenant(@body",{"_index":3918,"title":{},"body":{"controllers/TenantController.html":{}}}],["inittenant(data",{"_index":3911,"title":{},"body":{"controllers/TenantController.html":{}}}],["inject",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/ClientController.html":{},"modules/ClientModule.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["inject(\"keyservice",{"_index":2378,"title":{},"body":{"controllers/KeyController.html":{}}}],["inject(clients_provider",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["inject(file_storage",{"_index":1910,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectable",{"_index":383,"title":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["injectables",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"index.html":{}}}],["injectmetric",{"_index":3681,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["injectmetric(\"sessions",{"_index":3689,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectmetric(\"tenant_total",{"_index":3967,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["injectrepository",{"_index":1184,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["injectrepository(cliententity",{"_index":2009,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["injectrepository(credentialconfig",{"_index":1193,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{}}}],["injectrepository(displayentity",{"_index":1755,"title":{},"body":{"injectables/DisplayService.html":{}}}],["injectrepository(fileentity",{"_index":1911,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectrepository(issuanceconfig",{"_index":2129,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["injectrepository(keyentity",{"_index":1811,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["injectrepository(presentationconfig",{"_index":3089,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["injectrepository(registrarentity",{"_index":3201,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["injectrepository(session",{"_index":3688,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository(statuslistentity",{"_index":3794,"title":{},"body":{"injectables/StatusListService.html":{}}}],["injectrepository(statusmapping",{"_index":3793,"title":{},"body":{"injectables/StatusListService.html":{}}}],["injectrepository(tenantentity",{"_index":3966,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["input",{"_index":4087,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["instance",{"_index":1130,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/VaultKeyService.html":{}}}],["instance.decode(`${data}.${signature",{"_index":3108,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["instanceof",{"_index":2325,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalFileStorage.html":{}}}],["instantiate",{"_index":1084,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["instead",{"_index":77,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"interfaces/ClientsProvider.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["insufficient_authorization",{"_index":781,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["int",{"_index":3836,"title":{},"body":{"entities/StatusMapping.html":{}}}],["integrated",{"_index":1948,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["integration",{"_index":3965,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["intended",{"_index":1781,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["interact",{"_index":4463,"title":{},"body":{"properties.html":{}}}],["interacting",{"_index":3190,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["interaction",{"_index":3153,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["intercept",{"_index":3495,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercept(context",{"_index":3500,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interceptor",{"_index":3492,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercepts",{"_index":3503,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthenticationMethodInterface.html":{},"interfaces/ClientsProvider.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/InternalTokenPayload.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientsProvider.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/InternalTokenPayload.html":{},"interfaces/IssuerMetadata.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthenticationMethodInterface.html":{},"interfaces/ClientsProvider.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/InternalTokenPayload.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["internal",{"_index":1041,"title":{},"body":{"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{}}}],["internalclientsprovider",{"_index":391,"title":{"injectables/InternalClientsProvider.html":{}},"body":{"injectables/AuthService.html":{},"modules/ClientModule.html":{},"injectables/InternalClientsProvider.html":{},"coverage.html":{}}}],["internalclientsprovider(cfg",{"_index":1016,"title":{},"body":{"modules/ClientModule.html":{}}}],["internaltokenpayload",{"_index":400,"title":{"interfaces/InternalTokenPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/InternalTokenPayload.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interval",{"_index":3693,"title":{},"body":{"injectables/SessionService.html":{}}}],["intervaltime",{"_index":3691,"title":{},"body":{"injectables/SessionService.html":{}}}],["invalid",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["is_public_key",{"_index":2265,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":52,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isarray()@isoptional",{"_index":895,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/OfferRequestDto.html":{}}}],["isarray()@isoptional()@validatenested({each",{"_index":1317,"title":{},"body":{"classes/CredentialQuery.html":{},"classes/DCQL.html":{}}}],["isarray()@isstring({each",{"_index":4006,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["isarray()@validatenested({each",{"_index":1679,"title":{},"body":{"classes/DCQL.html":{}}}],["isboolean",{"_index":552,"title":{},"body":{"classes/AuthorizationResponse-1.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isboolean()@isoptional",{"_index":550,"title":{},"body":{"classes/AuthorizationResponse-1.html":{},"classes/CredentialSetQuery.html":{}}}],["isboolean()@isoptional()@column('boolean",{"_index":2072,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["isdebugmodeenabled",{"_index":2624,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isdefined",{"_index":53,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/CredentialConfigService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isdefined()@isarray()@validatenested({each",{"_index":236,"title":{},"body":{"classes/AttestationBasedPolicy.html":{},"classes/PolicyCredential.html":{}}}],["isdefined()@isstring",{"_index":3343,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["isdefined()@isstring({each",{"_index":47,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["iseffectivelyrequired",{"_index":4325,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["iseffectivelyrequired(key",{"_index":4429,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isempty",{"_index":4023,"title":{},"body":{"classes/VCT.html":{}}}],["isenabled",{"_index":3161,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{}}}],["isenum",{"_index":103,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/ClientEntity.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isenum([\"credential_accepted",{"_index":2708,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum([\"ec",{"_index":2356,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["isenum(['credential_accepted",{"_index":2706,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum(['ec",{"_index":2352,"title":{},"body":{"classes/Key.html":{}}}],["isenum(authconfig",{"_index":121,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isenum(responsetype",{"_index":2738,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isenum(role",{"_index":972,"title":{},"body":{"entities/ClientEntity.html":{}}}],["isfileloggingenabled",{"_index":2625,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isglobal",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["ishttploggerenabled",{"_index":2626,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isin",{"_index":54,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isin([\"aki",{"_index":868,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isin([\"allowlist",{"_index":68,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin([\"attestationbased",{"_index":85,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin([\"auth",{"_index":515,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isin([\"none",{"_index":79,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin([\"presentationduringissuance",{"_index":514,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isin([\"rootoftrust",{"_index":72,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin(['undefined'])@isstring",{"_index":4108,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{}}}],["isin([0",{"_index":3847,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isin([authconfig.api_key",{"_index":114,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isin([authconfig.none",{"_index":119,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isnotempty",{"_index":856,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isnull",{"_index":3684,"title":{},"body":{"injectables/SessionService.html":{}}}],["isnumber",{"_index":857,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isnumber()@isin(['0",{"_index":3845,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber()@isoptional()@column('int",{"_index":2061,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["isobject",{"_index":104,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isobject()@isoptional",{"_index":3020,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["isobject()@validatenested()@type(undefined",{"_index":493,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodPresentation.html":{}}}],["isoptional",{"_index":55,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"classes/AuthorizeQueries.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{}}}],["isoptional()@column('boolean",{"_index":1095,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@column('int",{"_index":1099,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@isarray()@validatenested()@type(undefined)@column('json",{"_index":2968,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["isoptional()@isarray()@validatenested({each",{"_index":2961,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["isoptional()@isboolean",{"_index":1315,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["isoptional()@isstring",{"_index":634,"title":{},"body":{"classes/AuthorizeQueries.html":{},"entities/CredentialConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{}}}],["isoptional()@isstring({each",{"_index":1053,"title":{},"body":{"classes/CreateTenantDto.html":{},"classes/PresentationAttachment.html":{}}}],["isoptional()@validatenested()@apiproperty({oneof",{"_index":1075,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@validatenested()@type(undefined",{"_index":525,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["isoptional()@validatenested()@type(undefined)@column('json",{"_index":1103,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["isoptional()@validatenested({each",{"_index":1310,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["ispublic",{"_index":1899,"title":{},"body":{"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["iss",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialsService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["issessionloggerenabled",{"_index":2627,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isstring",{"_index":56,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"classes/AuthorizeQueries.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isstring()@column('varchar",{"_index":1072,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["isstring()@column({default",{"_index":3930,"title":{},"body":{"entities/TenantEntity.html":{}}}],["isstring()@column({nullable",{"_index":976,"title":{},"body":{"entities/ClientEntity.html":{}}}],["isstring()@isin(['aki",{"_index":4004,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["isstring()@isin(['allowlist",{"_index":43,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["isstring()@isin(['attestationbased",{"_index":234,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["isstring()@isin(['auth",{"_index":495,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{}}}],["isstring()@isin(['none",{"_index":519,"title":{},"body":{"classes/AuthenticationMethodNone.html":{},"classes/NoneTrustPolicy.html":{}}}],["isstring()@isin(['presentationduringissuance",{"_index":522,"title":{},"body":{"classes/AuthenticationMethodPresentation.html":{}}}],["isstring()@isin(['rootoftrust",{"_index":3341,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["isstring()@isoptional",{"_index":542,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/KeyImportDto.html":{},"classes/StatusUpdateDto.html":{}}}],["isstring()@isoptional()@column('varchar",{"_index":2070,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["isstring()@isoptional()@column({nullable",{"_index":970,"title":{},"body":{"entities/ClientEntity.html":{},"entities/TenantEntity.html":{}}}],["isstring()@primarycolumn",{"_index":968,"title":{},"body":{"entities/ClientEntity.html":{},"entities/TenantEntity.html":{}}}],["issuance",{"_index":511,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["issuance.credentialconfigs",{"_index":1092,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["issuance.service",{"_index":2100,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["issuance/credentials",{"_index":1197,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["issuance/display.json",{"_index":1757,"title":{},"body":{"injectables/DisplayService.html":{}}}],["issuance/dto/authentication",{"_index":688,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuance/entities/issuance",{"_index":1114,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{}}}],["issuance/issuance",{"_index":2132,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuance/issuance.controller",{"_index":2243,"title":{},"body":{"modules/IssuerModule.html":{}}}],["issuance/issuance.service",{"_index":690,"title":{},"body":{"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuance:manage",{"_index":4409,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["issuance:offer",{"_index":4411,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["issuanceconfig",{"_index":702,"title":{"entities/IssuanceConfig.html":{}},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["issuanceconfig.authenticationconfig",{"_index":774,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig.claimswebhook",{"_index":801,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig.credentialconfigs.find",{"_index":1417,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuanceconfig.dpoprequired",{"_index":713,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfigid",{"_index":2121,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuanceconfigrepo",{"_index":2114,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuanceconfigs",{"_index":1059,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["issuancecontroller",{"_index":2089,"title":{"controllers/IssuanceController.html":{}},"body":{"controllers/IssuanceController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuancecounter",{"_index":3701,"title":{},"body":{"injectables/SessionService.html":{}}}],["issuancedto",{"_index":1143,"title":{"classes/IssuanceDto.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"coverage.html":{}}}],["issuanceid",{"_index":771,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["issuanceoffer",{"_index":4410,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["issuances",{"_index":4408,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["issuanceservice",{"_index":656,"title":{"injectables/IssuanceService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"index.html":{}}}],["issue",{"_index":2750,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["issued",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/WellKnownService.html":{}}}],["issued.me/v2",{"_index":2889,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["issuer",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["issuer/authorize/authorize.service",{"_index":4208,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["issuer/authorize/dto/authorize",{"_index":3444,"title":{},"body":{"entities/Session.html":{}}}],["issuer/issuer.module",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"modules/TenantModule.html":{}}}],["issuer/oid4vci/dto/offer",{"_index":2833,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{}}}],["issuer/oid4vci/oid4vci.service",{"_index":2180,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{}}}],["issuer/status",{"_index":3469,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["issuer_state",{"_index":629,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["issuer_validation_schema",{"_index":4296,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["issuermanagementcontroller",{"_index":2162,"title":{"controllers/IssuerManagementController.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuermetadata",{"_index":2217,"title":{"interfaces/IssuerMetadata.html":{}},"body":{"interfaces/IssuerMetadata.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["issuermetadata(session",{"_index":4165,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuermetadatacredentialconfig",{"_index":1069,"title":{"classes/IssuerMetadataCredentialConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"coverage.html":{}}}],["issuermodule",{"_index":174,"title":{"modules/IssuerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/TenantModule.html":{},"index.html":{},"modules.html":{}}}],["issues",{"_index":1380,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuing",{"_index":3617,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["isused",{"_index":1416,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["isused?.id",{"_index":1427,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["isusingexternaloidc",{"_index":1973,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["isuuid",{"_index":2737,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["isuuid()@isoptional",{"_index":2734,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["isverified",{"_index":4630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["it's",{"_index":2038,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["item.name",{"_index":3249,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["items",{"_index":875,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["iterate",{"_index":1208,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["job",{"_index":3669,"title":{},"body":{"injectables/SessionService.html":{}}}],["joi",{"_index":4372,"title":{},"body":{"dependencies.html":{}}}],["joi.boolean",{"_index":4551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.boolean().default(false",{"_index":4675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.exist",{"_index":4510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number",{"_index":4613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":4503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.objectschema",{"_index":4502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.optional",{"_index":4513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.required",{"_index":4610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string",{"_index":4504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default(\"24h",{"_index":4537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default(\"eudiplo",{"_index":4535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default(\"tenant_id",{"_index":4522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default((config",{"_index":4511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default((parent",{"_index":4668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default(default_auth_client_id",{"_index":4541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default(default_auth_client_secret",{"_index":4539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().min(32).default(default_jwt_secret",{"_index":4533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().optional",{"_index":4532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":4517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().valid(\"rs256",{"_index":4526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.when(\"oidc",{"_index":4516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":1189,"title":{},"body":{"injectables/CredentialConfigService.html":{},"modules/DatabaseModule.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["join(configpath",{"_index":1212,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["join(parent.folder",{"_index":4669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join(this.basedir",{"_index":2598,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["jointable",{"_index":2079,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["jose",{"_index":1624,"title":{},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/VaultKeyService.html":{},"dependencies.html":{}}}],["joseheaderparameters",{"_index":2433,"title":{},"body":{"classes/KeyService.html":{}}}],["json",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"entities/ClientEntity.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/SchemaResponse.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["json.parse",{"_index":1216,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["json.parse(configfile",{"_index":3975,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["json.parse(file.tostring",{"_index":1759,"title":{},"body":{"injectables/DisplayService.html":{}}}],["json.stringify",{"_index":3451,"title":{},"body":{"entities/Session.html":{}}}],["json.stringify(data",{"_index":3548,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["json.stringify(presentationconfig.dcql_query).replace",{"_index":2854,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["json.stringify(presentationconfig.registrationcert).replace",{"_index":2857,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["json.stringify(validationerrors",{"_index":3978,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["jsontype.label",{"_index":2524,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["jsonwebkey",{"_index":1493,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{}}}],["jwe",{"_index":1802,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwk",{"_index":682,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["jwk.crv",{"_index":1546,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["jwk.kid",{"_index":4085,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["jwk.kty",{"_index":1548,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["jwk_ec_private",{"_index":1599,"title":{},"body":{"classes/DBKeyService.html":{}}}],["jwk_ec_public",{"_index":1775,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["jwks",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["jwks_uri",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["jwksrequestsperminute",{"_index":2318,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksresponsedto",{"_index":1787,"title":{"classes/JwksResponseDto.html":{}},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["jwksuri",{"_index":2313,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jws",{"_index":4090,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["jwt",{"_index":747,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/VaultKeyService.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt.service",{"_index":363,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["jwt.setaudience(options.audience",{"_index":1965,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.sign(secretkey",{"_index":1966,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.strategy",{"_index":364,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt/crypto",{"_index":1395,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":1398,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt/sd",{"_index":1400,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt/types",{"_index":1619,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{},"classes/VaultKeyService.html":{},"dependencies.html":{}}}],["jwt_alg_values",{"_index":2880,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jwt_expires_in",{"_index":4536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_issuer",{"_index":2335,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":4531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":354,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{},"index.html":{}}}],["jwtdecrypt",{"_index":1810,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtdecrypt(response",{"_index":1822,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtfromrequest",{"_index":2289,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtheaderparameters",{"_index":1615,"title":{},"body":{"classes/DBKeyService.html":{},"classes/VaultKeyService.html":{}}}],["jwtpayload",{"_index":1614,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"classes/VaultKeyService.html":{}}}],["jwts",{"_index":1044,"title":{},"body":{"interfaces/ClientsProvider.html":{}}}],["jwtservice",{"_index":355,"title":{"injectables/JwtService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"index.html":{}}}],["jwtstrategy",{"_index":356,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["jwtstrategy.getexternaloidcconfig(configservice",{"_index":2304,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy.getintegratedoauth2config(configservice",{"_index":2305,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtverify",{"_index":1940,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwtverify(token",{"_index":1970,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwtwithstatuslistpayload",{"_index":1397,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/StatusListService.html":{}}}],["kb",{"_index":1410,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["kbverifier",{"_index":3040,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["kc",{"_index":1014,"title":{},"body":{"modules/ClientModule.html":{},"interfaces/ClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["kcclient",{"_index":2559,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["kcclient.id",{"_index":2561,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["kcclient?.id",{"_index":2577,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["keep",{"_index":1129,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["keepdiscriminatorproperty",{"_index":137,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["key",{"_index":23,"title":{"classes/Key.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"entities/CertEntity.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/StorageController.html":{},"classes/UpdateKeyDto.html":{},"classes/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["key.key",{"_index":1662,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.kid",{"_index":3323,"title":{},"body":{"injectables/ResolverService.html":{}}}],["key.service",{"_index":1633,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/VaultKeyService.html":{}}}],["key.service.ts",{"_index":1572,"title":{},"body":{"classes/DBKeyService.html":{},"classes/VaultKeyService.html":{},"coverage.html":{}}}],["key.service.ts:118",{"_index":1595,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:153",{"_index":1604,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:158",{"_index":1605,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:162",{"_index":4039,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["key.service.ts:167",{"_index":4040,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["key.service.ts:19",{"_index":4028,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["key.service.ts:191",{"_index":4031,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["key.service.ts:207",{"_index":4045,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["key.service.ts:21",{"_index":4027,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["key.service.ts:28",{"_index":1585,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:62",{"_index":1600,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:66",{"_index":4033,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["key/entities/cert.entity",{"_index":1565,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key/entities/keys.entity",{"_index":1567,"title":{},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{}}}],["key/key.controller",{"_index":1568,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key_ops",{"_index":1642,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key_validation_schema",{"_index":4273,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["keybinding",{"_index":1060,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/PresentationsService.html":{}}}],["keybindingnonce",{"_index":3069,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindings",{"_index":3080,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keycloak",{"_index":2324,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["keycloak/keycloak",{"_index":2453,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"dependencies.html":{}}}],["keycloakadminclient",{"_index":2452,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["keycloakclientsprovider",{"_index":999,"title":{"injectables/KeycloakClientsProvider.html":{}},"body":{"modules/ClientModule.html":{},"injectables/KeycloakClientsProvider.html":{},"coverage.html":{}}}],["keycloakclientsprovider(cfg",{"_index":1015,"title":{},"body":{"modules/ClientModule.html":{}}}],["keycloakissuerurl",{"_index":2311,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycloakissuerurl}/protocol/openid",{"_index":2314,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycontroller",{"_index":1562,"title":{"controllers/KeyController.html":{}},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{},"coverage.html":{}}}],["keydesc",{"_index":4423,"title":{},"body":{"miscellaneous/functions.html":{}}}],["keyentity",{"_index":1566,"title":{"entities/KeyEntity.html":{}},"body":{"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["keyid",{"_index":1061,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"classes/VaultKeyService.html":{},"injectables/WellKnownService.html":{}}}],["keyimportdto",{"_index":1607,"title":{"classes/KeyImportDto.html":{}},"body":{"classes/DBKeyService.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/UpdateKeyDto.html":{},"classes/VaultKeyService.html":{},"coverage.html":{}}}],["keylike",{"_index":4038,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["keymodule",{"_index":175,"title":{"modules/KeyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"index.html":{},"modules.html":{}}}],["keymodule.forroot",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["keyobj",{"_index":2412,"title":{"classes/KeyObj.html":{}},"body":{"classes/KeyObj.html":{},"classes/VaultKeyService.html":{},"coverage.html":{}}}],["keypair",{"_index":1491,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["keypair.privatekey",{"_index":4623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keypair.publickey",{"_index":4622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyrepository",{"_index":1584,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"modules/KeyModule.html":{}}}],["keyresponsedto",{"_index":263,"title":{"classes/KeyResponseDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["keys",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyResponseDto.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"classes/VaultKeyService.html":{},"injectables/WellKnownService.html":{}}}],["keys.privatekey",{"_index":1649,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice",{"_index":1574,"title":{"classes/KeyService.html":{}},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{},"coverage.html":{}}}],["keyservice:106",{"_index":4029,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["keyservice:109",{"_index":1612,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:128",{"_index":4034,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["keyservice:136",{"_index":1591,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:152",{"_index":1603,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:157",{"_index":4036,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["keyservice:195",{"_index":1616,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:232",{"_index":4048,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["keyservice:45",{"_index":4042,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["keyservice:46",{"_index":1608,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:62",{"_index":4041,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["keyservice:77",{"_index":1610,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:85",{"_index":1618,"title":{},"body":{"classes/DBKeyService.html":{},"classes/VaultKeyService.html":{}}}],["keyservice:86",{"_index":1587,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:95",{"_index":4047,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["keyusage",{"_index":2392,"title":{},"body":{"entities/KeyEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["kid",{"_index":2347,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["km_type",{"_index":2408,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["kmtype",{"_index":2407,"title":{},"body":{"modules/KeyModule.html":{}}}],["know",{"_index":3262,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["known",{"_index":4156,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["known.controller",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["known.controller.ts",{"_index":4154,"title":{},"body":{"controllers/WellKnownController.html":{},"coverage.html":{}}}],["known.controller.ts:45",{"_index":4170,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:57",{"_index":4159,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:69",{"_index":4164,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.service",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["known.service.ts",{"_index":4189,"title":{},"body":{"injectables/WellKnownService.html":{},"coverage.html":{}}}],["known.service.ts:16",{"_index":4194,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:39",{"_index":4199,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:77",{"_index":4196,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:89",{"_index":4207,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known/dto/credential",{"_index":1284,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"coverage.html":{}}}],["known/dto/jwks",{"_index":1628,"title":{},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["known/dto/oauth",{"_index":2710,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"coverage.html":{}}}],["known/jwks.json",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["known/jwks.json')@apioperation({summary",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["known/jwt",{"_index":3318,"title":{},"body":{"injectables/ResolverService.html":{}}}],["known/oauth",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["known/openid",{"_index":3213,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["known/well",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["kty",{"_index":1777,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["labelnames",{"_index":3629,"title":{},"body":{"modules/SessionModule.html":{}}}],["labs.github.io/eudiplo/latest",{"_index":157,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["labs/eudiplo.git",{"_index":4470,"title":{},"body":{"properties.html":{}}}],["labs/eudiplo/issues",{"_index":4467,"title":{},"body":{"properties.html":{}}}],["last",{"_index":843,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["later",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{}}}],["legend",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/LoggerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["length",{"_index":3549,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"controllers/StorageController.html":{}}}],["lessthan",{"_index":3685,"title":{},"body":{"injectables/SessionService.html":{}}}],["lessthan(new",{"_index":3723,"title":{},"body":{"injectables/SessionService.html":{}}}],["level",{"_index":2141,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["levels",{"_index":2672,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels[level.tolowercase",{"_index":2677,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["license",{"_index":4468,"title":{},"body":{"properties.html":{}}}],["lifetime",{"_index":880,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WellKnownService.html":{}}}],["line",{"_index":3236,"title":{},"body":{"injectables/RegistrarService.html":{},"classes/VaultKeyService.html":{}}}],["link",{"_index":509,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["links",{"_index":2067,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["list",{"_index":1296,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/PresentationsService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["list')@header('content",{"_index":3732,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller",{"_index":3763,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.controller.ts",{"_index":3727,"title":{},"body":{"controllers/StatusListController.html":{},"coverage.html":{}}}],["list.controller.ts:17",{"_index":3734,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.entity",{"_index":3760,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["list.entity.ts",{"_index":3743,"title":{},"body":{"entities/StatusListEntity.html":{},"coverage.html":{}}}],["list.entity.ts:14",{"_index":3753,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:20",{"_index":3752,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:26",{"_index":3748,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:32",{"_index":3750,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:38",{"_index":3747,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:44",{"_index":3749,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.map((e",{"_index":2028,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["list.module",{"_index":2247,"title":{},"body":{"modules/IssuerModule.html":{},"modules/SessionModule.html":{},"modules/TenantModule.html":{}}}],["list.module.ts",{"_index":3758,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.service",{"_index":1406,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["list.service.ts",{"_index":3765,"title":{},"body":{"injectables/StatusListService.html":{},"coverage.html":{}}}],["list.service.ts:114",{"_index":3778,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:124",{"_index":3774,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:176",{"_index":3786,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:192",{"_index":3788,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:20",{"_index":3772,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:36",{"_index":3780,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:60",{"_index":3779,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:68",{"_index":3777,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list/dto/status",{"_index":3470,"title":{},"body":{"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["list/entities/status",{"_index":3742,"title":{},"body":{"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["list/status",{"_index":1405,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["listen",{"_index":3962,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["literal",{"_index":376,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["live",{"_index":4662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["load",{"_index":2925,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["loadconfiguration",{"_index":2628,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loadedsession",{"_index":2927,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["loadtypemetadataformat",{"_index":1447,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["local",{"_index":1867,"title":{},"body":{"interfaces/FileStorage.html":{},"modules/StorageModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["local_storage_dir",{"_index":4666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locale",{"_index":1118,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["localfilestorage",{"_index":2580,"title":{"classes/LocalFileStorage.html":{}},"body":{"classes/LocalFileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["log",{"_index":2478,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["log_debug_mode",{"_index":2667,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["log_enable_http_logger",{"_index":2666,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["log_enable_session_logger",{"_index":2665,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["log_file_path",{"_index":2670,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["log_format",{"_index":2668,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["log_level",{"_index":4639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log_to_file",{"_index":4646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log_validation_schema",{"_index":4332,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logauthorizationrequest",{"_index":3564,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logauthorizationrequest(context",{"_index":3577,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcontext",{"_index":2841,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["logcredentialissuance",{"_index":3565,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialissuance(context",{"_index":3580,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification",{"_index":3566,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification(context",{"_index":3583,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logfilepath",{"_index":2660,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["logflowcomplete",{"_index":3567,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete(context",{"_index":3585,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror",{"_index":3568,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror(context",{"_index":3587,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart",{"_index":3569,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart(context",{"_index":3589,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logformat",{"_index":2658,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["logged",{"_index":3489,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["logger",{"_index":1008,"title":{},"body":{"modules/ClientModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/LoggerModule.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.decorator",{"_index":2762,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logger.decorator.ts",{"_index":4335,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.interceptor",{"_index":2692,"title":{},"body":{"modules/LoggerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["logger.interceptor.ts",{"_index":3491,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{}}}],["logger.interceptor.ts:122",{"_index":3511,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:18",{"_index":3497,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:35",{"_index":3502,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.service",{"_index":2693,"title":{},"body":{"modules/LoggerModule.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["logger.service.ts",{"_index":3561,"title":{},"body":{"injectables/SessionLoggerService.html":{},"coverage.html":{}}}],["logger.service.ts:12",{"_index":3576,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:121",{"_index":3584,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:143",{"_index":3579,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:160",{"_index":3599,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:177",{"_index":3592,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:199",{"_index":3595,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:218",{"_index":3597,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:27",{"_index":3600,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:34",{"_index":3590,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:53",{"_index":3586,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:72",{"_index":3588,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:99",{"_index":3582,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger/session",{"_index":4118,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["loggerconfigservice",{"_index":2618,"title":{"injectables/LoggerConfigService.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/LoggerModule.html":{},"injectables/SessionLoggerService.html":{},"coverage.html":{},"index.html":{}}}],["loggerconfiguration",{"_index":2633,"title":{"interfaces/LoggerConfiguration.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggermodule",{"_index":176,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/LoggerModule.html":{},"modules/SessionModule.html":{},"index.html":{},"modules.html":{}}}],["loggermodule.forrootasync",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":2635,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":2037,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["loglevel",{"_index":2639,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["lognotification",{"_index":3570,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["lognotification(context",{"_index":3591,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logo",{"_index":1122,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["logs",{"_index":2823,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["logs/session.log",{"_index":2671,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["logsession",{"_index":3571,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsession(context",{"_index":3593,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror",{"_index":3572,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror(context",{"_index":3596,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtofile",{"_index":2659,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["logtokenexchange",{"_index":3573,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange(context",{"_index":3598,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["long",{"_index":881,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["longer",{"_index":2569,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{}}}],["made",{"_index":879,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["main",{"_index":144,"title":{},"body":{"controllers/AppController.html":{}}}],["maintain",{"_index":373,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["maintained",{"_index":4577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["make",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["makegaugeprovider",{"_index":992,"title":{},"body":{"modules/ClientModule.html":{},"modules/SessionModule.html":{},"modules/TenantModule.html":{}}}],["makes",{"_index":1083,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/WellKnownService.html":{}}}],["making",{"_index":3052,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["manage",{"_index":816,"title":{},"body":{"entities/CertEntity.html":{},"controllers/ClientController.html":{},"entities/ClientEntity.html":{},"entities/IssuanceConfig.html":{}}}],["management",{"_index":1448,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{},"miscellaneous/variables.html":{}}}],["management.controller",{"_index":2244,"title":{},"body":{"modules/IssuerModule.html":{}}}],["management.controller.ts",{"_index":2165,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{}}}],["management.controller.ts:77",{"_index":2176,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management/credentials",{"_index":1325,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["management/issuance",{"_index":2091,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["management/issuer",{"_index":2164,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["managing",{"_index":1153,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["manytomany",{"_index":1110,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["manytomany(undefined",{"_index":1091,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["manytoone",{"_index":846,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["manytoone(undefined",{"_index":832,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{}}}],["map",{"_index":1531,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/Oid4vpService.html":{},"classes/VaultKeyService.html":{}}}],["map((_",{"_index":3800,"title":{},"body":{"injectables/StatusListService.html":{}}}],["map((error",{"_index":2150,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["map((r",{"_index":2543,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["mapper",{"_index":2521,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["mapping",{"_index":1139,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity",{"_index":3762,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity.ts",{"_index":3832,"title":{},"body":{"entities/StatusMapping.html":{},"coverage.html":{}}}],["mapping.entity.ts:13",{"_index":3840,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:16",{"_index":3839,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:19",{"_index":3838,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:22",{"_index":3837,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:25",{"_index":3835,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:7",{"_index":3841,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mark",{"_index":4656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marker",{"_index":2515,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["marks",{"_index":3677,"title":{},"body":{"injectables/SessionService.html":{}}}],["marshaling_algorithm",{"_index":4089,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["match",{"_index":3312,"title":{},"body":{"injectables/ResolverService.html":{}}}],["matching",{"_index":32,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"modules/ClientModule.html":{},"classes/ClientSecretResponseDto.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/LoggerModule.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateClientDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":2389,"title":{},"body":{"entities/KeyEntity.html":{}}}],["math.floor(date.now",{"_index":2890,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{}}}],["math.floor(new",{"_index":2891,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["math.max(5",{"_index":2470,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["math.random",{"_index":3803,"title":{},"body":{"injectables/StatusListService.html":{}}}],["math.round(new",{"_index":1453,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["max",{"_index":2204,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["maybe",{"_index":3277,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["mdoc",{"_index":2877,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["media",{"_index":4204,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mediatype",{"_index":4166,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["mediatype.application_jwt",{"_index":4180,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["mediatype.application_jwt)@get('openid",{"_index":4169,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["memorystorage",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":3594,"title":{},"body":{"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":2139,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.join",{"_index":2153,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.length",{"_index":2152,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.push",{"_index":2142,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["meta",{"_index":872,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":532,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["metadata+jwt",{"_index":4212,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.'})@apiproduces(mediatype.application_json",{"_index":4168,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["metadata.controller",{"_index":2239,"title":{},"body":{"modules/IssuerModule.html":{}}}],["metadata.controller.ts",{"_index":1350,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"coverage.html":{}}}],["metadata.controller.ts:15",{"_index":1357,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.controller.ts:25",{"_index":1354,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.credential_issuer",{"_index":4213,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.dto",{"_index":3300,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["metadata.dto.ts",{"_index":1285,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["metadata.dto.ts:12",{"_index":1295,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:16",{"_index":1301,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:20",{"_index":1306,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:24",{"_index":1298,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:33",{"_index":1304,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:37",{"_index":1300,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:41",{"_index":1293,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:8",{"_index":1302,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata/credentials",{"_index":1349,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["metadata/dto/schema",{"_index":1112,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["metadata/dto/vct.dto",{"_index":1113,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["metadata/dto/vct.dto.ts",{"_index":4010,"title":{},"body":{"classes/VCT.html":{},"coverage.html":{}}}],["metadata/dto/vct.dto.ts:12",{"_index":4017,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:15",{"_index":4014,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:18",{"_index":4015,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:21",{"_index":4016,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:24",{"_index":4018,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:27",{"_index":4019,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:9",{"_index":4022,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/vct/${credentialconfig.id",{"_index":1471,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["metadata/vct/${credentialconfigurationid",{"_index":1462,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["metadata/vct/${value.id",{"_index":1423,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["method",{"_index":491,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":143,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/InternalClientsProvider.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"classes/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["metric/metric.module",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["metricmodule",{"_index":177,"title":{"modules/MetricModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetricModule.html":{},"index.html":{},"modules.html":{}}}],["metrics",{"_index":2698,"title":{},"body":{"modules/MetricModule.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["middleware",{"_index":4462,"title":{},"body":{"properties.html":{}}}],["mirko",{"_index":4472,"title":{},"body":{"properties.html":{}}}],["mirror",{"_index":2553,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["miscellaneous",{"_index":4393,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":2494,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["missingroles",{"_index":2489,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["missingroles.length",{"_index":2493,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["missingroles.map((role",{"_index":2495,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["misused",{"_index":3239,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["mkdir",{"_index":4581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mkdirsync",{"_index":2592,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["mkdirsync(dirname(fullpath",{"_index":2599,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["mm",{"_index":4215,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":4506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modify",{"_index":2208,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["modifying",{"_index":3554,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["module",{"_index":158,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClientModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/LoggerModule.html":{},"modules/MetricModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClientModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/LoggerModule.html":{},"modules/MetricModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":160,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClientModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/LoggerModule.html":{},"modules/MetricModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["mollik",{"_index":4473,"title":{},"body":{"properties.html":{}}}],["more",{"_index":153,"title":{},"body":{"controllers/AppController.html":{},"entities/Session.html":{}}}],["move",{"_index":2951,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["mso_mdoc",{"_index":2878,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["multer",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["multermodule",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["multermodule.register",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["multi",{"_index":3436,"title":{},"body":{"entities/Session.html":{}}}],["multiple",{"_index":871,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["multivalued",{"_index":2529,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["mustermann",{"_index":2741,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["mysql2",{"_index":4377,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":95,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"modules/ClientModule.html":{},"interfaces/ClientsProvider.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name)?.id",{"_index":3250,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["namedcurve",{"_index":4617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["namespaced",{"_index":2505,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["necessary",{"_index":888,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["need",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"injectables/RegistrarService.html":{}}}],["needed",{"_index":74,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{}}}],["needs",{"_index":791,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["nested",{"_index":2926,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["nestinterceptor",{"_index":3516,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["nestjs",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":2232,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":147,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"modules/ClientModule.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/LoggerModule.html":{},"modules/MetricModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"modules/VerifierModule.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"modules/ClientModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2263,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":4351,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":359,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"controllers/StorageController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":102,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/FileUploadDto.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"classes/RoleDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateClientDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1987,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":991,"title":{},"body":{"modules/ClientModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"injectables/KeycloakClientsProvider.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["new",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"modules/ClientModule.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newroles",{"_index":2562,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["newroles.includes(cr.name",{"_index":2568,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["next",{"_index":2480,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{},"classes/VaultKeyService.html":{}}}],["next.handle",{"_index":3524,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.handle().pipe",{"_index":3539,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["node:crypto",{"_index":587,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{}}}],["nodejs",{"_index":1396,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["noncce",{"_index":3443,"title":{},"body":{"entities/Session.html":{}}}],["nonce",{"_index":2746,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["nonce(@sessionentity",{"_index":2775,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["nonce(session",{"_index":2751,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["none",{"_index":65,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/StatusListService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["nonetrustpolicy",{"_index":78,"title":{"classes/NoneTrustPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["not(isnull",{"_index":3703,"title":{},"body":{"injectables/SessionService.html":{}}}],["notfoundexception",{"_index":3637,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["notification",{"_index":1307,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["notification_endpoint",{"_index":1292,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["notification_id",{"_index":2704,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["notificationevent",{"_index":2705,"title":{},"body":{"classes/NotificationRequestDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["notificationrequestdto",{"_index":2702,"title":{"classes/NotificationRequestDto.html":{}},"body":{"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["notifications",{"_index":128,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["notifications(body",{"_index":2754,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["notifywebhook",{"_index":2058,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/Session.html":{}}}],["now",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["null",{"_index":982,"title":{},"body":{"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"injectables/CryptoImplementationService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{}}}],["nullable",{"_index":827,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["number",{"_index":884,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"modules/ClientModule.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"interfaces/FileStorage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/ParResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/TenantModule.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["oauth",{"_index":2894,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["oauth2",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{},"classes/RoleDto.html":{}}}],["oauth2authorizationserver",{"_index":665,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oauth2authorizationserverresponse",{"_index":2709,"title":{"classes/Oauth2AuthorizationServerResponse.html":{}},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["oauth2client",{"_index":3156,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["obj",{"_index":3383,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.body",{"_index":3384,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.contentlength",{"_index":3386,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.contenttype",{"_index":3385,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["object",{"_index":837,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CryptoImplementationService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/RegistrarEntity.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VaultKeyService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.dto",{"_index":4052,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["object.dto.ts",{"_index":2413,"title":{},"body":{"classes/KeyObj.html":{},"coverage.html":{}}}],["object.dto.ts:11",{"_index":2415,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.dto.ts:15",{"_index":2416,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.dto.ts:19",{"_index":2414,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.entries(params",{"_index":2916,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["object.hostname",{"_index":4588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(res.vp_token",{"_index":3125,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["object.values",{"_index":2143,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["objects",{"_index":1237,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"classes/SchemaResponse.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["observable",{"_index":3508,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["offer",{"_index":796,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["offerrequestdto",{"_index":2168,"title":{"classes/OfferRequestDto.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/Session.html":{},"coverage.html":{}}}],["offerresponse",{"_index":2171,"title":{"classes/OfferResponse.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["offerurl",{"_index":3403,"title":{},"body":{"entities/Session.html":{}}}],["oid4vci",{"_index":498,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"miscellaneous/variables.html":{}}}],["oid4vci/dto/offer",{"_index":2183,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["oid4vci/oid4vci.controller",{"_index":2245,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.service",{"_index":2246,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/util",{"_index":692,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oid4vcicontroller",{"_index":2230,"title":{"controllers/Oid4vciController.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["oid4vciservice",{"_index":2179,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["oid4vp",{"_index":506,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/SessionLogContext.html":{},"miscellaneous/variables.html":{}}}],["oid4vp.controller",{"_index":2813,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["oid4vp.service",{"_index":2798,"title":{},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vp/dto/presentation",{"_index":3001,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vp/oid4vp.module",{"_index":3033,"title":{},"body":{"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{}}}],["oid4vp/oid4vp.service",{"_index":3002,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vpcontroller",{"_index":2781,"title":{"controllers/Oid4vpController.html":{}},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"coverage.html":{}}}],["oid4vpmodule",{"_index":2226,"title":{"modules/Oid4vpModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["oid4vpservice",{"_index":655,"title":{"injectables/Oid4vpService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{},"index.html":{}}}],["oidc",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/ClientModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["oidc.split(\"/realms",{"_index":2460,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["oidc_algorithm",{"_index":4525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oidc_client_id",{"_index":4515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oidc_client_secret",{"_index":4519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oidc_internal_issuer_url",{"_index":4508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oidc_sub",{"_index":4521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oidcdiscoverydto",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["oidcissuerurl",{"_index":3203,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/.well",{"_index":3212,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/protocol/openid",{"_index":3209,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["old",{"_index":1224,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["older",{"_index":3679,"title":{},"body":{"injectables/SessionService.html":{}}}],["omittype",{"_index":1048,"title":{},"body":{"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/DisplayCreateDto.html":{},"classes/IssuanceDto.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/UpdateClientDto.html":{},"classes/UpdateKeyDto.html":{}}}],["omittype(cliententity",{"_index":1047,"title":{},"body":{"classes/CreateClientDto.html":{},"classes/UpdateClientDto.html":{}}}],["omittype(credentialconfig",{"_index":1135,"title":{},"body":{"classes/CredentialConfigCreate.html":{}}}],["omittype(displayentity",{"_index":1729,"title":{},"body":{"classes/DisplayCreateDto.html":{}}}],["omittype(issuanceconfig",{"_index":1144,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{}}}],["omittype(keyimportdto",{"_index":4009,"title":{},"body":{"classes/UpdateKeyDto.html":{}}}],["omittype(presentationconfig",{"_index":2984,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{}}}],["omittype(tenantentity",{"_index":1052,"title":{},"body":{"classes/CreateTenantDto.html":{}}}],["on(\"error",{"_index":2610,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["on(\"finish",{"_index":2608,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["onapplicationbootstrap",{"_index":1745,"title":{},"body":{"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["once",{"_index":2532,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{}}}],["ondelete",{"_index":834,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["one",{"_index":1593,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["oneof",{"_index":130,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["ones",{"_index":1430,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["onetomany",{"_index":3934,"title":{},"body":{"entities/TenantEntity.html":{}}}],["onetomany(undefined",{"_index":3925,"title":{},"body":{"entities/TenantEntity.html":{}}}],["onmoduleinit",{"_index":2438,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["ontenantdelete",{"_index":1155,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["ontenantdelete(tenantid",{"_index":1175,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit",{"_index":1795,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit(tenant",{"_index":3182,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["ontenantinit(tenantid",{"_index":1808,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/StatusListService.html":{}}}],["openid",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/KeycloakClientsProvider.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["openid4vc/oauth2",{"_index":685,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"dependencies.html":{}}}],["openid4vc/openid4vci",{"_index":1391,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["openid4vc/openid4vp",{"_index":4361,"title":{},"body":{"dependencies.html":{}}}],["openid4vc/utils",{"_index":4362,"title":{},"body":{"dependencies.html":{}}}],["openid4vci",{"_index":557,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/WellKnownController.html":{}}}],["openid4vp://?${(await",{"_index":776,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["openid4vp://?${querystring",{"_index":2924,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["openid4vp://?${values.uri",{"_index":3013,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["openid_federation",{"_index":870,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["openidvci",{"_index":4211,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["operation",{"_index":1167,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["operations",{"_index":1515,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"controllers/Oid4vpController.html":{},"injectables/RegistrarService.html":{}}}],["optional",{"_index":17,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"entities/ClientEntity.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":2575,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["options",{"_index":876,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/variables.html":{}}}],["options.audience",{"_index":1964,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.dto",{"_index":2840,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["options.dto.ts",{"_index":3025,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["options.expiresin",{"_index":1954,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["opts",{"_index":1850,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["opts?.acl",{"_index":3370,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["opts?.checksum",{"_index":3373,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["opts?.contenttype",{"_index":2614,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["opts?.metadata",{"_index":3369,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["order",{"_index":3099,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"miscellaneous/variables.html":{}}}],["origin",{"_index":620,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["origin)).uri",{"_index":779,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["original",{"_index":3555,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["originalname",{"_index":1915,"title":{},"body":{"injectables/FilesService.html":{}}}],["otherwhise",{"_index":2184,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["otherwise",{"_index":3178,"title":{},"body":{"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/LoggerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["output",{"_index":4645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["over",{"_index":1209,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["override",{"_index":2202,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["overrides",{"_index":2728,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["overview",{"_index":4450,"title":{"index.html":{}},"body":{"index.html":{}}}],["overwrite",{"_index":2127,"title":{},"body":{"injectables/IssuanceService.html":{},"miscellaneous/variables.html":{}}}],["overwritten",{"_index":1182,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["owns",{"_index":836,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["p",{"_index":1527,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["p256",{"_index":4072,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["package",{"_index":4344,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pairs",{"_index":381,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["par",{"_index":563,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(@body",{"_index":605,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(body",{"_index":576,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["param",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"controllers/ClientController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["param(\"id",{"_index":949,"title":{},"body":{"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/SessionController.html":{}}}],["param(\"tenantid",{"_index":1362,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["parameter",{"_index":372,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["parameterdecorator",{"_index":4449,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parameters",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"classes/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":2912,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["parresponsedto",{"_index":598,"title":{"classes/ParResponseDto.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"coverage.html":{}}}],["parse",{"_index":3071,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseaccesstokenrequest",{"_index":734,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest",{"_index":648,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest(body",{"_index":666,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["parsed",{"_index":3072,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parsedaccesstokenauthorizationcoderequestgrant",{"_index":693,"title":{"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenpreauthorizedcoderequestgrant",{"_index":695,"title":{"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenrequest",{"_index":733,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.accesstokenrequest",{"_index":744,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.dpop?.jwt",{"_index":748,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant",{"_index":743,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.granttype",{"_index":740,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.preauthorizedcode",{"_index":750,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.txcode",{"_index":752,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parseloglevel",{"_index":2629,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["parseloglevel(level",{"_index":2645,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["parseresponse",{"_index":3046,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseresponse(res",{"_index":3067,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["part",{"_index":3084,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parties",{"_index":3155,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["party",{"_index":3174,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pass",{"_index":2207,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["passed",{"_index":1429,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{}}}],["passport",{"_index":2300,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjwtsecret",{"_index":2296,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":358,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":2295,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":2279,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":1696,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":927,"title":{},"body":{"controllers/ClientController.html":{}}}],["patch(\":id",{"_index":953,"title":{},"body":{"controllers/ClientController.html":{}}}],["patch(':id",{"_index":923,"title":{},"body":{"controllers/ClientController.html":{}}}],["path",{"_index":853,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/VaultKeyService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["payload.clientid",{"_index":2017,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["payload.cnf",{"_index":3119,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["payload.exp",{"_index":2471,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["payload.id",{"_index":1220,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["payload.iss",{"_index":3301,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.iss}/.well",{"_index":3317,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.roles",{"_index":2343,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.secret",{"_index":2025,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["payload.tenant_id",{"_index":2338,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payloads",{"_index":3291,"title":{},"body":{"injectables/ResolverService.html":{}}}],["peculiar/x509",{"_index":4363,"title":{},"body":{"dependencies.html":{}}}],["pem",{"_index":24,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"classes/VaultKeyService.html":{}}}],["perform",{"_index":1980,"title":{},"body":{"controllers/HealthController.html":{}}}],["periodically",{"_index":3187,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pg",{"_index":4380,"title":{},"body":{"dependencies.html":{}}}],["pick",{"_index":1013,"title":{},"body":{"modules/ClientModule.html":{}}}],["pid",{"_index":2193,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{}}}],["pid,hostname",{"_index":4576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pino",{"_index":200,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["pino/file",{"_index":4579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pino/pinologger",{"_index":996,"title":{},"body":{"modules/ClientModule.html":{}}}],["pinohttp",{"_index":4584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pinologger",{"_index":995,"title":{},"body":{"modules/ClientModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["pipetransform",{"_index":3638,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["pkcecodechallengemethod",{"_index":683,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["pkcecodechallengemethod.s256",{"_index":720,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["plain",{"_index":1236,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["plaintoclass",{"_index":1185,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["plaintoclass(cliententity",{"_index":2019,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["plaintoclass(displaycreatedto",{"_index":1760,"title":{},"body":{"injectables/DisplayService.html":{}}}],["plaintoclass(issuancedto",{"_index":2135,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["png",{"_index":2186,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["point",{"_index":1438,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["policies.dto",{"_index":1115,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["policy",{"_index":40,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["policycredential",{"_index":80,"title":{"classes/PolicyCredential.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["policytype",{"_index":64,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["port",{"_index":1692,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["positives",{"_index":1235,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["possession",{"_index":4050,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["post",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{}}}],["post(\"challenge",{"_index":619,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post(\"credential",{"_index":2767,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"nonce",{"_index":2773,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"notification",{"_index":2770,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"oauth2/token",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"offer",{"_index":2205,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["post(\"par",{"_index":604,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post(\"request",{"_index":2803,"title":{},"body":{"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{}}}],["post(\"revoke",{"_index":3481,"title":{},"body":{"controllers/SessionController.html":{}}}],["post(\"token",{"_index":616,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('challenge",{"_index":568,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('credential')@sessionlogger('session",{"_index":2748,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('nonce')@sessionlogger('nonce",{"_index":2752,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification')@sessionlogger('notification_id",{"_index":2755,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('oauth2/token')@apibody({type",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('request')@sessionlogger('session",{"_index":2788,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["post('revoke",{"_index":3467,"title":{},"body":{"controllers/SessionController.html":{}}}],["post('token",{"_index":582,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post()@sessionlogger('session",{"_index":2795,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["postgres",{"_index":1690,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["pre",{"_index":2736,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["preauthorizedcode",{"_index":696,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["preauthorizedcodegrantidentifier",{"_index":684,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["predefined",{"_index":3064,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["preferred",{"_index":1294,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["prefix",{"_index":555,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"injectables/InternalClientsProvider.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{}}}],["preheader",{"_index":3812,"title":{},"body":{"injectables/StatusListService.html":{}}}],["prepare",{"_index":4092,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["prepayload",{"_index":3811,"title":{},"body":{"injectables/StatusListService.html":{}}}],["present",{"_index":1227,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["presentation",{"_index":379,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["presentation:manage",{"_index":4405,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["presentation:offer",{"_index":4407,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["presentation_during_issuance",{"_index":518,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/enumerations.html":{}}}],["presentationattachment",{"_index":862,"title":{"classes/PresentationAttachment.html":{}},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["presentationconfig",{"_index":773,"title":{"entities/PresentationConfig.html":{}},"body":{"injectables/AuthorizeService.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["presentationconfig.lifetime",{"_index":2919,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationconfig.webhook",{"_index":2922,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationconfigcreatedto",{"_index":2982,"title":{"classes/PresentationConfigCreateDto.html":{}},"body":{"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["presentationduringissuance",{"_index":505,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/enumerations.html":{}}}],["presentationduringissuanceconfig",{"_index":508,"title":{"classes/PresentationDuringIssuanceConfig.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["presentationexists",{"_index":3094,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["presentationid",{"_index":772,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["presentationmanagementcontroller",{"_index":2987,"title":{"controllers/PresentationManagementController.html":{}},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"coverage.html":{}}}],["presentationoffer",{"_index":4406,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["presentationrequest",{"_index":2996,"title":{"classes/PresentationRequest.html":{}},"body":{"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"coverage.html":{}}}],["presentationrequestoptions",{"_index":2826,"title":{"interfaces/PresentationRequestOptions.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["presentations",{"_index":537,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/enumerations.html":{}}}],["presentations.controller",{"_index":3035,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["presentations.service",{"_index":3003,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentations/dto/auth",{"_index":2837,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentations/presentations.module",{"_index":2812,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["presentations/presentations.service",{"_index":2838,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationsmodule",{"_index":2811,"title":{"modules/PresentationsModule.html":{}},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["presentationsservice",{"_index":2818,"title":{"injectables/PresentationsService.html":{}},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"coverage.html":{},"index.html":{}}}],["presigned",{"_index":1865,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["presigner",{"_index":3365,"title":{},"body":{"classes/S3FileStorage.html":{},"dependencies.html":{}}}],["pretty",{"_index":2637,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["primary",{"_index":829,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["primarycolumn",{"_index":986,"title":{},"body":{"entities/ClientEntity.html":{},"entities/FileEntity.html":{},"entities/Session.html":{},"entities/TenantEntity.html":{}}}],["primarycolumn(\"uuid",{"_index":3449,"title":{},"body":{"entities/Session.html":{}}}],["primarycolumn('uuid",{"_index":3415,"title":{},"body":{"entities/Session.html":{}}}],["printer/combined.schema",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["printer/combined.schema.ts",{"_index":4319,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["printer/config",{"_index":4320,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["printer/helpers.ts",{"_index":4322,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["printer/validation.schema.ts",{"_index":4329,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["private",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}}}],["private_key",{"_index":3557,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["privateencryptionkey",{"_index":1819,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privatekey",{"_index":1502,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/UpdateKeyDto.html":{},"miscellaneous/variables.html":{}}}],["privatekey.alg",{"_index":1652,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.ext",{"_index":1655,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.key_ops",{"_index":1656,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.kid",{"_index":1639,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekeyinstance",{"_index":1668,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekeyjwk",{"_index":1496,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"miscellaneous/variables.html":{}}}],["proceed",{"_index":3507,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["process",{"_index":512,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{}}}],["process_presentation_response",{"_index":2937,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processes",{"_index":2830,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["production",{"_index":1946,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"miscellaneous/variables.html":{}}}],["progress",{"_index":3490,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["prom",{"_index":3683,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["prometheus",{"_index":994,"title":{},"body":{"modules/ClientModule.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["prometheus/dist/injector",{"_index":3682,"title":{},"body":{"injectables/SessionService.html":{}}}],["prometheusmodule",{"_index":2695,"title":{},"body":{"modules/MetricModule.html":{}}}],["prometheusmodule.register",{"_index":2699,"title":{},"body":{"modules/MetricModule.html":{}}}],["promise",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["promise((resolve",{"_index":2601,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.all",{"_index":1245,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/VaultKeyService.html":{}}}],["promise.all(att",{"_index":3133,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["promise.all(files.map((file",{"_index":1935,"title":{},"body":{"injectables/FilesService.html":{}}}],["promise.resolve",{"_index":1932,"title":{},"body":{"injectables/FilesService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["promise.resolve((input",{"_index":4067,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["promise.resolve(existssync(join(this.basedir",{"_index":2617,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.resolve(rmsync(join(this.basedir",{"_index":2616,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.resolve(this.storage.delete(key",{"_index":1929,"title":{},"body":{"injectables/FilesService.html":{}}}],["promise.resolve(this.storage.getstream(key",{"_index":1928,"title":{},"body":{"injectables/FilesService.html":{}}}],["promises",{"_index":3240,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["proof",{"_index":4049,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["proof_signing_alg_values_supported",{"_index":1412,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["proof_types_supported",{"_index":1411,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/FileEntity.html":{},"classes/FileUploadDto.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RoleDto.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"entities/TenantEntity.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"properties.html":{}}}],["property",{"_index":135,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["protect",{"_index":2697,"title":{},"body":{"modules/MetricModule.html":{}}}],["protected",{"_index":1581,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{}}}],["protocol",{"_index":2518,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["protocolmapper",{"_index":2519,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["protocolmappers",{"_index":2516,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["provide",{"_index":1004,"title":{},"body":{"modules/ClientModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["provided",{"_index":129,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["provider",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{}}}],["providers",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClientModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/LoggerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["provides",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"injectables/IssuanceService.html":{},"modules/RegistrarModule.html":{}}}],["providing",{"_index":1977,"title":{},"body":{"controllers/HealthController.html":{}}}],["ps256",{"_index":4527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":22,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"classes/VaultKeyService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public.decorator",{"_index":2266,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["public_url",{"_index":4633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["publicbaseurl",{"_index":3350,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["publicclient",{"_index":2509,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["publicjwk",{"_index":761,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["publickey",{"_index":1501,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyObj.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["publickeyinstance",{"_index":1673,"title":{},"body":{"classes/DBKeyService.html":{}}}],["publickeyjwk",{"_index":1500,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["publicly",{"_index":1906,"title":{},"body":{"injectables/FilesService.html":{}}}],["publicurl",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["publicurl}/.well",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["publicurl}/oauth2/token",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["purpose",{"_index":3263,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pushed",{"_index":578,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["pushed_authorization_request_endpoint",{"_index":717,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["put",{"_index":1838,"title":{},"body":{"interfaces/FileStorage.html":{},"controllers/KeyController.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["put(\":id",{"_index":2382,"title":{},"body":{"controllers/KeyController.html":{}}}],["put(':id",{"_index":2371,"title":{},"body":{"controllers/KeyController.html":{}}}],["put(key",{"_index":1847,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["putobjectcommand",{"_index":3361,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["putoptions",{"_index":1851,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["qr",{"_index":2190,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["qrcode",{"_index":2178,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["qrcode.tobuffer(values.uri",{"_index":2213,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["qrcodebuffer",{"_index":2212,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["queries",{"_index":575,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["queries.request_uri",{"_index":724,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["query",{"_index":588,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["querydeeppartialentity",{"_index":3651,"title":{},"body":{"injectables/SessionService.html":{}}}],["querystring",{"_index":2915,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["r",{"_index":2546,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/ResolverService.html":{}}}],["r.data",{"_index":3319,"title":{},"body":{"injectables/ResolverService.html":{}}}],["r.id",{"_index":2552,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["r.name",{"_index":2492,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["random",{"_index":1650,"title":{},"body":{"classes/DBKeyService.html":{}}}],["randombytes",{"_index":2008,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["randombytes(32).tostring(\"hex",{"_index":1999,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["randomness",{"_index":3784,"title":{},"body":{"injectables/StatusListService.html":{}}}],["randomuuid",{"_index":586,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/FilesService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["ratelimit",{"_index":2317,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["raw",{"_index":4434,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rawenv",{"_index":4430,"title":{},"body":{"miscellaneous/functions.html":{}}}],["re",{"_index":769,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["reachable",{"_index":3321,"title":{},"body":{"injectables/ResolverService.html":{}}}],["react",{"_index":3963,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["read",{"_index":3371,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["readable",{"_index":1849,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["readable.from(body",{"_index":2606,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["readdirsync",{"_index":1186,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["readdirsync(configpath",{"_index":1202,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["readdirsync(path",{"_index":1215,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readfilesync",{"_index":1187,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["readfilesync(file",{"_index":3972,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["readfilesync(join(path",{"_index":1217,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readfilesync(path",{"_index":1758,"title":{},"body":{"injectables/DisplayService.html":{}}}],["readonly",{"_index":601,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoImplementationService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["realm",{"_index":2448,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["realmname",{"_index":2459,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["receive",{"_index":890,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["received",{"_index":4134,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["record",{"_index":1065,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"interfaces/FileStorage.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/SchemaResponse.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/functions.html":{}}}],["recursive",{"_index":2600,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["recursively",{"_index":2144,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["redacted",{"_index":3560,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["redirect_uri",{"_index":630,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["redirected",{"_index":502,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["ref",{"_index":131,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["reference",{"_index":1651,"title":{},"body":{"classes/DBKeyService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["references",{"_index":1241,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["reflect",{"_index":4386,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2258,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["refresh",{"_index":2474,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["refresh_token",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{}}}],["refreshaccesstoken",{"_index":3162,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["refreshes",{"_index":3186,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["refreshms",{"_index":2469,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["regcert",{"_index":2853,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["region",{"_index":3887,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["register",{"_index":3666,"title":{},"body":{"injectables/SessionService.html":{}}}],["registrar",{"_index":3147,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar.service",{"_index":3150,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar/generated",{"_index":3284,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrar/registrar.module",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"modules/Oid4vpModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{}}}],["registrar/registrar.service",{"_index":2834,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["registrar_oidc_client_id",{"_index":3206,"title":{},"body":{"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_client_secret",{"_index":3207,"title":{},"body":{"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_url",{"_index":4651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registrar_url",{"_index":4650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registrar_validation_schema",{"_index":4307,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["registrarentity",{"_index":3134,"title":{"entities/RegistrarEntity.html":{}},"body":{"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"coverage.html":{}}}],["registrarmodule",{"_index":178,"title":{"modules/RegistrarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["registrarrepository",{"_index":3163,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrarservice",{"_index":2817,"title":{"injectables/RegistrarService.html":{}},"body":{"injectables/Oid4vpService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["registration",{"_index":887,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["registrationcert",{"_index":889,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["registrationcertid",{"_index":3078,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["registrationcertificatecontrollerall",{"_index":3196,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrollerregister",{"_index":3197,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrationcertificatecreation",{"_index":3282,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrationcertificaterequest",{"_index":858,"title":{"classes/RegistrationCertificateRequest.html":{}},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["reject",{"_index":2602,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["related",{"_index":3493,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/variables.html":{}}}],["relations",{"_index":1279,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["relative",{"_index":1762,"title":{},"body":{"injectables/DisplayService.html":{}}}],["relevant",{"_index":510,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/InternalClientsProvider.html":{},"controllers/Oid4vciController.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["reload",{"_index":2649,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["reloadconfiguration",{"_index":2630,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["relying",{"_index":3154,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerfindall",{"_index":3198,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerregister",{"_index":3199,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartyid",{"_index":3137,"title":{},"body":{"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{}}}],["remove",{"_index":1131,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["removeclient",{"_index":1024,"title":{},"body":{"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["removeclient(tenantid",{"_index":1035,"title":{},"body":{"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["removed",{"_index":1226,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["replace",{"_index":1242,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{}}}],["replace(\"https",{"_index":3253,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["replaces",{"_index":1896,"title":{},"body":{"injectables/FilesService.html":{}}}],["replaceuriwithpublicurl",{"_index":1878,"title":{},"body":{"injectables/FilesService.html":{}}}],["replaceuriwithpublicurl(tenantid",{"_index":1894,"title":{},"body":{"injectables/FilesService.html":{}}}],["repo",{"_index":1007,"title":{},"body":{"modules/ClientModule.html":{},"injectables/InternalClientsProvider.html":{}}}],["repository",{"_index":997,"title":{},"body":{"modules/ClientModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{},"properties.html":{}}}],["representation",{"_index":4440,"title":{},"body":{"miscellaneous/functions.html":{}}}],["representing",{"_index":382,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/IssuerMetadata.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/functions.html":{}}}],["represents",{"_index":965,"title":{},"body":{"entities/ClientEntity.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"entities/Session.html":{},"entities/TenantEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["repsonse",{"_index":10,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{}}}],["req",{"_index":571,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/JwtStrategy.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["req+jwt",{"_index":2896,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["req.body",{"_index":3273,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["req.body.client_id",{"_index":768,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["req.get(\"host",{"_index":3011,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["req.get(\"origin",{"_index":2801,"title":{},"body":{"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{}}}],["req.headers.origin",{"_index":621,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["req.headers[\"content",{"_index":4594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.headers[\"user",{"_index":4593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.id",{"_index":3270,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["req.method",{"_index":736,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"miscellaneous/variables.html":{}}}],["req.params?.session",{"_index":4590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.params?.tenantid",{"_index":4595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.url",{"_index":4592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":12,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VaultKeyService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["request.'})@isenum(responsetype",{"_index":2732,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto",{"_index":597,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["request.dto.ts",{"_index":529,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["request.dto.ts:12",{"_index":543,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:13",{"_index":3283,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:15",{"_index":640,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:16",{"_index":545,"title":{},"body":{"classes/AuthorizationResponse.html":{}}}],["request.dto.ts:18",{"_index":642,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:21",{"_index":644,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:24",{"_index":636,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:25",{"_index":2733,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:27",{"_index":637,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:30",{"_index":638,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/PresentationRequest.html":{}}}],["request.dto.ts:31",{"_index":2729,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:33",{"_index":641,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:36",{"_index":635,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/PresentationRequest.html":{}}}],["request.dto.ts:38",{"_index":2727,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:44",{"_index":3021,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:58",{"_index":2724,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:6",{"_index":639,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.dto.ts:66",{"_index":2726,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:73",{"_index":2735,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:77",{"_index":2743,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:78",{"_index":2742,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:9",{"_index":643,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.header",{"_index":2898,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.headers[\"accept",{"_index":4560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.headers[\"content",{"_index":3536,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers[\"user",{"_index":3535,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.method",{"_index":3529,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params?.tenantid",{"_index":3528,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params[sessionidparam",{"_index":3527,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.payload",{"_index":2901,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.url",{"_index":3530,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.user",{"_index":2052,"title":{},"body":{"interfaces/InternalTokenPayload.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["request/response",{"_index":2654,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["request_error",{"_index":3552,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_start",{"_index":3533,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_success",{"_index":3544,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_uri",{"_index":606,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["request_uri_method",{"_index":2911,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["requested",{"_index":2779,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["requestid",{"_index":2790,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["requestmethod.all",{"_index":4599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestobject",{"_index":2931,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["requests",{"_index":560,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["requesturl",{"_index":2923,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["require_pushed_authorization_requests",{"_index":716,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["required",{"_index":116,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/SchemaResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["requiredclaimkeys",{"_index":3129,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requiredfields",{"_index":3068,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requiredroles",{"_index":3337,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":3339,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requires",{"_index":2719,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["res",{"_index":565,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["res.data",{"_index":3118,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["res.data![\"crt",{"_index":3259,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data![\"id",{"_index":3260,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data![\"jwt",{"_index":3280,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data.data.keys",{"_index":4075,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["res.data.data.keys.map(async",{"_index":4064,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["res.data.data.keys[\"1\"].public_key",{"_index":4080,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["res.data.data.signature.split(\":\")[2",{"_index":4091,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["res.data?.filter",{"_index":3268,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.error",{"_index":3256,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.payload",{"_index":1823,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["res.redirect(`${values.redirect_uri}?code=${code",{"_index":731,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send",{"_index":810,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send(qrcodebuffer",{"_index":2215,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.send(values",{"_index":2216,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.setheader(\"content",{"_index":2214,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.status(400).send(response",{"_index":803,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.statuscode",{"_index":4596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/LoggerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["resolve",{"_index":2609,"title":{},"body":{"classes/LocalFileStorage.html":{},"injectables/ResolverService.html":{}}}],["resolvepublickey",{"_index":3292,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolvepublickey(payload",{"_index":3294,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolver.service",{"_index":3289,"title":{},"body":{"modules/ResolverModule.html":{}}}],["resolver/resolver.module",{"_index":3034,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["resolver/resolver.service",{"_index":3087,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolvermodule",{"_index":3031,"title":{"modules/ResolverModule.html":{}},"body":{"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"index.html":{},"modules.html":{}}}],["resolverservice",{"_index":3049,"title":{"injectables/ResolverService.html":{}},"body":{"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"index.html":{}}}],["resolves",{"_index":1165,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{},"injectables/PresentationsService.html":{}}}],["resolving",{"_index":3053,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["resource",{"_index":631,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["response",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["response.data!.find((item",{"_index":3248,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.data![\"id",{"_index":3246,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.dto",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"controllers/ClientController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["response.dto.ts",{"_index":368,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse-1.html":{},"classes/ClientSecretResponseDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{},"coverage.html":{}}}],["response.dto.ts:11",{"_index":548,"title":{},"body":{"classes/AuthorizationResponse-1.html":{},"classes/EC_Public.html":{}}}],["response.dto.ts:13",{"_index":2712,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:14",{"_index":3392,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:15",{"_index":1780,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:16",{"_index":3396,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:17",{"_index":2717,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:18",{"_index":551,"title":{},"body":{"classes/AuthorizationResponse-1.html":{},"classes/SchemaResponse.html":{}}}],["response.dto.ts:19",{"_index":1784,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:2",{"_index":1021,"title":{},"body":{"classes/ClientSecretResponseDto.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:20",{"_index":3394,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:21",{"_index":2714,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:23",{"_index":1786,"title":{},"body":{"classes/EC_Public.html":{},"classes/SchemaResponse.html":{}}}],["response.dto.ts:25",{"_index":2715,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:26",{"_index":3393,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:29",{"_index":2718,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:3",{"_index":4003,"title":{},"body":{"classes/TokenResponse.html":{}}}],["response.dto.ts:33",{"_index":2253,"title":{},"body":{"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:37",{"_index":2711,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:4",{"_index":2417,"title":{},"body":{"classes/KeyResponseDto.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:5",{"_index":2716,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:9",{"_index":2720,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["response.error",{"_index":3244,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.jwks.keys.find((key",{"_index":3322,"title":{},"body":{"injectables/ResolverService.html":{}}}],["response.key",{"_index":1927,"title":{},"body":{"injectables/FilesService.html":{}}}],["response.statuscode",{"_index":3546,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["response.ts",{"_index":8,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["response_mode",{"_index":2870,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_processing",{"_index":2936,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_type",{"_index":632,"title":{},"body":{"classes/AuthorizeQueries.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["response_types_supported",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{},"injectables/Oid4vpService.html":{}}}],["response_uri",{"_index":2868,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responses",{"_index":3494,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsesize",{"_index":3547,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsestatus",{"_index":4136,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["responsetype",{"_index":2181,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["responsetype.dc_api",{"_index":3007,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["responsetype.qrcode",{"_index":2192,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsetype.uri",{"_index":2194,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsible",{"_index":1573,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/HealthController.html":{},"controllers/KeyController.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{}}}],["result",{"_index":1166,"title":{},"body":{"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["result.payload",{"_index":3130,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["results",{"_index":31,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"modules/ClientModule.html":{},"classes/ClientSecretResponseDto.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/LoggerModule.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateClientDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":4190,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["retrieve",{"_index":610,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["retrieves",{"_index":1170,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["return",{"_index":149,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"modules/ClientModule.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":3023,"title":{},"body":{"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["returning",{"_index":2310,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["returns",{"_index":146,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/InternalClientsProvider.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["reuse",{"_index":2953,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["review",{"_index":4214,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["revokeall",{"_index":3457,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(@body",{"_index":3482,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(value",{"_index":3465,"title":{},"body":{"controllers/SessionController.html":{}}}],["revoked",{"_index":18,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/StatusUpdateDto.html":{}}}],["right",{"_index":1085,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["rmsync",{"_index":2593,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["role",{"_index":928,"title":{},"body":{"controllers/ClientController.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"injectables/KeycloakClientsProvider.html":{},"controllers/PresentationManagementController.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.clients",{"_index":3990,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["role.enum",{"_index":3334,"title":{},"body":{"guards/RolesGuard.html":{}}}],["role.issuanceoffer",{"_index":2484,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["role.issuances",{"_index":2485,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"classes/RoleDto.html":{}}}],["role.presentationoffer",{"_index":2486,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"controllers/SessionController.html":{}}}],["role.presentations",{"_index":2376,"title":{},"body":{"controllers/KeyController.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["role.tenants",{"_index":940,"title":{},"body":{"controllers/ClientController.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["roledto",{"_index":311,"title":{"classes/RoleDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RoleDto.html":{},"coverage.html":{}}}],["roles",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/RoleDto.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["roles.decorator",{"_index":3336,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles.find((r",{"_index":2491,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["roles/role.enum",{"_index":929,"title":{},"body":{"controllers/ClientController.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/RoleDto.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{}}}],["roles_key",{"_index":3335,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":3329,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["root",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"injectables/InternalClientsProvider.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["rootoftrust",{"_index":66,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/typealiases.html":{}}}],["rootoftrustpolicy",{"_index":71,"title":{"classes/RootOfTrustPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["routes",{"_index":4474,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["row",{"_index":2554,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["rp",{"_index":3255,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["rpid",{"_index":3243,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["rsa",{"_index":2297,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["rules",{"_index":1089,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["run",{"_index":3670,"title":{},"body":{"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["running",{"_index":152,"title":{},"body":{"controllers/AppController.html":{}}}],["runs",{"_index":1087,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["rxjs",{"_index":3086,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":3519,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["s",{"_index":4443,"title":{},"body":{"miscellaneous/functions.html":{}}}],["s3",{"_index":3352,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["s3_access_key_id",{"_index":3894,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_bucket",{"_index":4672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["s3_endpoint",{"_index":4673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["s3_force_path_style",{"_index":3892,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_public_base_url",{"_index":4678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["s3_region",{"_index":4671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["s3_secret_access_key",{"_index":3896,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3client",{"_index":3348,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{}}}],["s3filestorage",{"_index":3345,"title":{"classes/S3FileStorage.html":{}},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["saltgenerator",{"_index":1446,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["same",{"_index":784,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sanitize",{"_index":3514,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody",{"_index":3496,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody(body",{"_index":3510,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized",{"_index":3515,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized[field",{"_index":3559,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizes",{"_index":3512,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["save",{"_index":608,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/DBKeyService.html":{}}}],["saved",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{},"injectables/Oid4vpService.html":{}}}],["saves",{"_index":1901,"title":{},"body":{"injectables/FilesService.html":{}}}],["saveuserupload",{"_index":1879,"title":{},"body":{"injectables/FilesService.html":{}}}],["saveuserupload(tenantid",{"_index":1897,"title":{},"body":{"injectables/FilesService.html":{}}}],["schedulemodule",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":3645,"title":{},"body":{"injectables/SessionService.html":{}}}],["schema",{"_index":1062,"title":{},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/SchemaResponse.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["schema(@param(\"id",{"_index":1365,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema(id",{"_index":1352,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema.org/draft/2020",{"_index":3390,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["schema_uri",{"_index":4012,"title":{},"body":{"classes/VCT.html":{}}}],["schema_uri#integrity",{"_index":4013,"title":{},"body":{"classes/VCT.html":{}}}],["schemaresponse",{"_index":1102,"title":{"classes/SchemaResponse.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["scope",{"_index":633,"title":{},"body":{"classes/AuthorizeQueries.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["scopes_supported",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["sd",{"_index":1394,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/VaultKeyService.html":{},"dependencies.html":{}}}],["sdjwt",{"_index":1439,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwt.issue",{"_index":1461,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwtinstance",{"_index":3041,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["sdjwtvcinstance",{"_index":1399,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["sdk/client",{"_index":3363,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":3364,"title":{},"body":{"classes/S3FileStorage.html":{},"dependencies.html":{}}}],["seconds",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/ParResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ClientController.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"classes/CreateClientDto.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"injectables/JwtService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/UpdateClientDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["secret.value",{"_index":2557,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["secretaccesskey",{"_index":3895,"title":{},"body":{"modules/StorageModule.html":{}}}],["secretkey",{"_index":1956,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["secretorkey",{"_index":2329,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkeyprovider",{"_index":2288,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":1945,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["secure.decorator",{"_index":931,"title":{},"body":{"controllers/ClientController.html":{},"controllers/TenantController.html":{}}}],["secured",{"_index":930,"title":{},"body":{"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["secured([role.clients",{"_index":939,"title":{},"body":{"controllers/ClientController.html":{}}}],["secured([role.issuanceoffer",{"_index":3476,"title":{},"body":{"controllers/SessionController.html":{}}}],["secured([role.issuances",{"_index":1339,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/StorageController.html":{}}}],["secured([role.presentations",{"_index":3005,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["secured([role.tenants",{"_index":3915,"title":{},"body":{"controllers/TenantController.html":{}}}],["secured(roles",{"_index":4448,"title":{},"body":{"miscellaneous/functions.html":{}}}],["see",{"_index":2935,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["send",{"_index":127,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["sendauthorizationcode",{"_index":649,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sendauthorizationcode(res",{"_index":670,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse",{"_index":650,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse(queries",{"_index":672,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sending",{"_index":4126,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendresponse",{"_index":547,"title":{},"body":{"classes/AuthorizationResponse-1.html":{}}}],["sends",{"_index":3960,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook",{"_index":4120,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook(session",{"_index":4150,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhooknotification",{"_index":4141,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhooknotification(session",{"_index":4152,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sense",{"_index":4216,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["sensitive",{"_index":3513,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields",{"_index":3556,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields.foreach((field",{"_index":3558,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sent",{"_index":97,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse-1.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["serializers",{"_index":4591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server')@apioperation({summary",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["server's",{"_index":2713,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["servers",{"_index":1297,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["service",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["service.db",{"_index":1702,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["service_documentation",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["serviceaccountsenabled",{"_index":2508,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["services",{"_index":123,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/variables.html":{}}}],["session",{"_index":567,"title":{"entities/Session.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/LoggerModule.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["session.auth_queries",{"_index":728,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.authorization_code",{"_index":755,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.claimswebhook",{"_index":2939,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.claimswebhook!.auth",{"_index":4121,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth.config.value",{"_index":4124,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth.type",{"_index":4122,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth?.type",{"_index":4130,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.url",{"_index":4128,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.controller",{"_index":3627,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.credentialpayload",{"_index":4135,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.credentialpayload!.claims",{"_index":4133,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.credentialpayload?.claims?.[credentialconfigurationid",{"_index":1433,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["session.credentials",{"_index":789,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.id",{"_index":701,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.issuanceid",{"_index":704,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["session.notifywebhook",{"_index":4142,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.pipe",{"_index":3473,"title":{},"body":{"controllers/SessionController.html":{}}}],["session.requestid",{"_index":2847,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.service",{"_index":3474,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{}}}],["session.tenant.name",{"_index":2886,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.tenantid",{"_index":705,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["session.usedcapi",{"_index":778,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.vp_nonce",{"_index":2942,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session/.well",{"_index":4155,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["session/:sessionid",{"_index":4598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["session/authorize",{"_index":556,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["session/entities/session.entity",{"_index":589,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["session/oid4vp",{"_index":2783,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["session/session.decorator",{"_index":591,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["session/session.module",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{}}}],["session/session.service",{"_index":593,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session/vci",{"_index":2745,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_id",{"_index":2780,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_logger_key",{"_index":3520,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["session_tidy_up_interval",{"_index":3672,"title":{},"body":{"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["session_ttl",{"_index":4659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["session_type",{"_index":3630,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session_validation_schema",{"_index":4310,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessioncontroller",{"_index":3452,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessionentity",{"_index":590,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sessionid",{"_index":2842,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionPipe.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["sessionidparam",{"_index":3525,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["sessionlogcontext",{"_index":2836,"title":{"interfaces/SessionLogContext.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["sessionlogger",{"_index":2760,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionlogger(\"nonce",{"_index":2774,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger(\"notification_id",{"_index":2771,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger(\"session",{"_index":2768,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["sessionloggerinterceptor",{"_index":2689,"title":{"injectables/SessionLoggerInterceptor.html":{}},"body":{"modules/LoggerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"index.html":{}}}],["sessionloggerservice",{"_index":2690,"title":{"injectables/SessionLoggerService.html":{}},"body":{"modules/LoggerModule.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["sessionmodule",{"_index":179,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/SessionModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["sessionpipe",{"_index":3472,"title":{"injectables/SessionPipe.html":{}},"body":{"controllers/SessionController.html":{},"injectables/SessionPipe.html":{},"coverage.html":{}}}],["sessionrepository",{"_index":3649,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessions",{"_index":3448,"title":{},"body":{"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sessionscounter",{"_index":3646,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionservice",{"_index":592,"title":{"injectables/SessionService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["sessionstatus",{"_index":2835,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["sessionstatus.active",{"_index":3697,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.completed",{"_index":2949,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionService.html":{}}}],["sessionstatus.expired",{"_index":3699,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.failed",{"_index":3700,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.fetched",{"_index":3698,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus})@column('varchar",{"_index":3430,"title":{},"body":{"entities/Session.html":{}}}],["sessiontype",{"_index":3713,"title":{},"body":{"injectables/SessionService.html":{}}}],["set",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizationResponse-1.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EC_Public.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["set+json",{"_index":4185,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["set+json')@get('jwks.json",{"_index":4163,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["setauthcode",{"_index":651,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["setauthcode(issuer_state",{"_index":674,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["setentry",{"_index":3768,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setentry(id",{"_index":3785,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setexpirationtime(expiresin",{"_index":1963,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setglobalconfig",{"_index":2233,"title":{},"body":{"modules/IssuerModule.html":{}}}],["setinterval(async",{"_index":2477,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["setinterval(callback",{"_index":3694,"title":{},"body":{"injectables/SessionService.html":{}}}],["setissuedat",{"_index":1960,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setissuer(issuer",{"_index":1961,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setmetadata(is_public_key",{"_index":4632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":4654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(session_logger_key",{"_index":4655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprotectedheader",{"_index":1958,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader(header",{"_index":1676,"title":{},"body":{"classes/DBKeyService.html":{}}}],["setstate",{"_index":3642,"title":{},"body":{"injectables/SessionService.html":{}}}],["setstate(session",{"_index":3675,"title":{},"body":{"injectables/SessionService.html":{}}}],["setsubject(options.subject",{"_index":1962,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["settimeout",{"_index":3233,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["setup",{"_index":3968,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["setuptenant",{"_index":3945,"title":{},"body":{"injectables/TenantService.html":{}}}],["setuptenant(tenant",{"_index":3958,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["sha",{"_index":1444,"title":{},"body":{"injectables/CredentialsService.html":{},"miscellaneous/variables.html":{}}}],["sha256",{"_index":1858,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["shape",{"_index":4442,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shouldenableautologging",{"_index":2631,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["shouldlog",{"_index":3574,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["show",{"_index":2533,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["shuffel",{"_index":3797,"title":{},"body":{"injectables/StatusListService.html":{}}}],["shuffled",{"_index":3783,"title":{},"body":{"injectables/StatusListService.html":{}}}],["sign",{"_index":2393,"title":{},"body":{"entities/KeyEntity.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/S3FileStorage.html":{},"classes/VaultKeyService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sign(privatekeyinstance",{"_index":1677,"title":{},"body":{"classes/DBKeyService.html":{}}}],["sign(value",{"_index":4044,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["signalg",{"_index":1441,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["signature",{"_index":1503,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"classes/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["signature).catch((err",{"_index":3115,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["signaturebase64url",{"_index":4628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signed",{"_index":3427,"title":{},"body":{"entities/Session.html":{},"injectables/WellKnownService.html":{}}}],["signedjwt",{"_index":2899,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwt.length",{"_index":2905,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwtlength",{"_index":2904,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signer",{"_index":759,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/VaultKeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["signer(tenantid",{"_index":1611,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{}}}],["signing",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/StatusListService.html":{},"classes/VaultKeyService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["signinginput",{"_index":4098,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["signjwt",{"_index":1580,"title":{},"body":{"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{}}}],["signjwt(payload",{"_index":1613,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"classes/VaultKeyService.html":{}}}],["signs",{"_index":4046,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["simplicity",{"_index":3131,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["singleline",{"_index":4570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["size",{"_index":1863,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"injectables/StatusListService.html":{}}}],["skip",{"_index":1223,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["skipping",{"_index":1761,"title":{},"body":{"injectables/DisplayService.html":{},"injectables/FilesService.html":{}}}],["someone",{"_index":3278,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["somewhere",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["sort",{"_index":3801,"title":{},"body":{"injectables/StatusListService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"modules/ClientModule.html":{},"classes/ClientSecretResponseDto.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/LoggerModule.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateClientDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["specific",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["specified",{"_index":4200,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["sqlite",{"_index":1700,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["sqlite3",{"_index":4389,"title":{},"body":{"dependencies.html":{}}}],["src",{"_index":2605,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src.pipe(write",{"_index":2607,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/.../auth",{"_index":4484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication",{"_index":4396,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../cert.entity.ts",{"_index":4477,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../client.provider.ts",{"_index":4486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../combined.schema.ts",{"_index":4501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../config",{"_index":4487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../crypto",{"_index":4478,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../crypto.service.ts",{"_index":4490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database",{"_index":4489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ed25519.ts",{"_index":4491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../helpers.ts",{"_index":4416,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../issuer",{"_index":4493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../key",{"_index":4494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../keys.entity.ts",{"_index":4480,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../log",{"_index":4495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.factory.ts",{"_index":4488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":4415,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../media",{"_index":4397,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../policies.dto.ts",{"_index":4481,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../presentation",{"_index":4399,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../public.decorator.ts",{"_index":4492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registrar",{"_index":4496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":4400,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":4497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../secure.decorator.ts",{"_index":4418,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../session",{"_index":4498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.decorator.ts",{"_index":4419,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../session.entity.ts",{"_index":4401,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../storage",{"_index":4499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../storage.module.ts",{"_index":4479,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../storage.types.ts",{"_index":4482,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../tenant.entity.ts",{"_index":4483,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../token.decorator.ts",{"_index":4500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../util.ts",{"_index":4417,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../validation.schema.ts",{"_index":4485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../webhook.dto.ts",{"_index":4395,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.controller.ts",{"_index":142,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:8",{"_index":145,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/dto/oidc",{"_index":4223,"title":{},"body":{"coverage.html":{}}}],["src/auth/auth",{"_index":4226,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.controller.ts",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:106",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:67",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:89",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":2254,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:12",{"_index":2261,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:7",{"_index":2259,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":357,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:119",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:14",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/client/adapters/internal",{"_index":1995,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"coverage.html":{}}}],["src/auth/client/adapters/keycloak",{"_index":2437,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"coverage.html":{}}}],["src/auth/client/client.controller.ts",{"_index":898,"title":{},"body":{"controllers/ClientController.html":{},"coverage.html":{}}}],["src/auth/client/client.controller.ts:35",{"_index":917,"title":{},"body":{"controllers/ClientController.html":{}}}],["src/auth/client/client.controller.ts:46",{"_index":915,"title":{},"body":{"controllers/ClientController.html":{}}}],["src/auth/client/client.controller.ts:51",{"_index":920,"title":{},"body":{"controllers/ClientController.html":{}}}],["src/auth/client/client.controller.ts:68",{"_index":924,"title":{},"body":{"controllers/ClientController.html":{}}}],["src/auth/client/client.controller.ts:83",{"_index":908,"title":{},"body":{"controllers/ClientController.html":{}}}],["src/auth/client/client.controller.ts:97",{"_index":912,"title":{},"body":{"controllers/ClientController.html":{}}}],["src/auth/client/client.module.ts",{"_index":988,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/auth/client/client.provider.ts",{"_index":1022,"title":{},"body":{"interfaces/ClientsProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/client/client.provider.ts:13",{"_index":1033,"title":{},"body":{"interfaces/ClientsProvider.html":{}}}],["src/auth/client/client.provider.ts:14",{"_index":1031,"title":{},"body":{"interfaces/ClientsProvider.html":{}}}],["src/auth/client/client.provider.ts:15",{"_index":1029,"title":{},"body":{"interfaces/ClientsProvider.html":{}}}],["src/auth/client/client.provider.ts:16",{"_index":1027,"title":{},"body":{"interfaces/ClientsProvider.html":{}}}],["src/auth/client/client.provider.ts:17",{"_index":1036,"title":{},"body":{"interfaces/ClientsProvider.html":{}}}],["src/auth/client/client.provider.ts:18",{"_index":1034,"title":{},"body":{"interfaces/ClientsProvider.html":{}}}],["src/auth/client/client.provider.ts:21",{"_index":1040,"title":{},"body":{"interfaces/ClientsProvider.html":{}}}],["src/auth/client/client.provider.ts:8",{"_index":1038,"title":{},"body":{"interfaces/ClientsProvider.html":{}}}],["src/auth/client/dto/client",{"_index":1020,"title":{},"body":{"classes/ClientSecretResponseDto.html":{},"coverage.html":{}}}],["src/auth/client/dto/create",{"_index":1045,"title":{},"body":{"classes/CreateClientDto.html":{},"coverage.html":{}}}],["src/auth/client/dto/update",{"_index":4008,"title":{},"body":{"classes/UpdateClientDto.html":{},"coverage.html":{}}}],["src/auth/client/entities/client.entity.ts",{"_index":964,"title":{},"body":{"entities/ClientEntity.html":{},"coverage.html":{}}}],["src/auth/client/entities/client.entity.ts:16",{"_index":969,"title":{},"body":{"entities/ClientEntity.html":{}}}],["src/auth/client/entities/client.entity.ts:23",{"_index":977,"title":{},"body":{"entities/ClientEntity.html":{}}}],["src/auth/client/entities/client.entity.ts:29",{"_index":981,"title":{},"body":{"entities/ClientEntity.html":{}}}],["src/auth/client/entities/client.entity.ts:37",{"_index":971,"title":{},"body":{"entities/ClientEntity.html":{}}}],["src/auth/client/entities/client.entity.ts:44",{"_index":974,"title":{},"body":{"entities/ClientEntity.html":{}}}],["src/auth/client/entities/client.entity.ts:54",{"_index":979,"title":{},"body":{"entities/ClientEntity.html":{}}}],["src/auth/dto/client",{"_index":959,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/dto/oidc",{"_index":4240,"title":{},"body":{"coverage.html":{}}}],["src/auth/dto/role.dto.ts",{"_index":3326,"title":{},"body":{"classes/RoleDto.html":{},"coverage.html":{}}}],["src/auth/dto/role.dto.ts:10",{"_index":3328,"title":{},"body":{"classes/RoleDto.html":{}}}],["src/auth/dto/token",{"_index":4002,"title":{},"body":{"classes/TokenResponse.html":{},"coverage.html":{}}}],["src/auth/jwt.service.ts",{"_index":1939,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["src/auth/jwt.service.ts:14",{"_index":2273,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:28",{"_index":2275,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:65",{"_index":2277,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:91",{"_index":2276,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":2278,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:10",{"_index":2283,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:24",{"_index":2285,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:31",{"_index":2287,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:59",{"_index":2291,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:83",{"_index":2293,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/public.decorator.ts",{"_index":4246,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/roles/role.enum.ts",{"_index":4404,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/roles/roles.decorator.ts",{"_index":4247,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/roles/roles.guard.ts",{"_index":3331,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/roles/roles.guard.ts:10",{"_index":3333,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/roles/roles.guard.ts:7",{"_index":3332,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/secure.decorator.ts",{"_index":4248,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/auth/tenant/dto/create",{"_index":1050,"title":{},"body":{"classes/CreateTenantDto.html":{},"coverage.html":{}}}],["src/auth/tenant/entitites/tenant.entity.ts",{"_index":3924,"title":{},"body":{"entities/TenantEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/tenant/entitites/tenant.entity.ts:17",{"_index":3929,"title":{},"body":{"entities/TenantEntity.html":{}}}],["src/auth/tenant/entitites/tenant.entity.ts:24",{"_index":3931,"title":{},"body":{"entities/TenantEntity.html":{}}}],["src/auth/tenant/entitites/tenant.entity.ts:32",{"_index":3928,"title":{},"body":{"entities/TenantEntity.html":{}}}],["src/auth/tenant/entitites/tenant.entity.ts:38",{"_index":3933,"title":{},"body":{"entities/TenantEntity.html":{}}}],["src/auth/tenant/entitites/tenant.entity.ts:47",{"_index":3927,"title":{},"body":{"entities/TenantEntity.html":{}}}],["src/auth/tenant/tenant.controller.ts",{"_index":3901,"title":{},"body":{"controllers/TenantController.html":{},"coverage.html":{}}}],["src/auth/tenant/tenant.controller.ts:20",{"_index":3910,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/auth/tenant/tenant.controller.ts:30",{"_index":3912,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/auth/tenant/tenant.controller.ts:40",{"_index":3909,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/auth/tenant/tenant.controller.ts:49",{"_index":3907,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/auth/tenant/tenant.module.ts",{"_index":3940,"title":{},"body":{"modules/TenantModule.html":{}}}],["src/auth/tenant/tenant.service.ts",{"_index":3943,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["src/auth/tenant/tenant.service.ts:104",{"_index":3956,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:114",{"_index":3954,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:123",{"_index":3951,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:142",{"_index":3955,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:153",{"_index":3959,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:169",{"_index":3953,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:34",{"_index":3949,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:51",{"_index":3957,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/token.decorator.ts",{"_index":2046,"title":{},"body":{"interfaces/InternalTokenPayload.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/crypto.module.ts",{"_index":1561,"title":{},"body":{"modules/CryptoModule.html":{}}}],["src/crypto/crypto.service.ts",{"_index":4256,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/encryption/encryption.service.ts",{"_index":1789,"title":{},"body":{"injectables/EncryptionService.html":{},"coverage.html":{}}}],["src/crypto/encryption/encryption.service.ts:12",{"_index":1797,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:26",{"_index":1809,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:44",{"_index":1807,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:54",{"_index":1799,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:74",{"_index":1806,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/key/adapters/db",{"_index":1571,"title":{},"body":{"classes/DBKeyService.html":{},"coverage.html":{}}}],["src/crypto/key/adapters/vault",{"_index":4024,"title":{},"body":{"classes/VaultKeyService.html":{},"coverage.html":{}}}],["src/crypto/key/crypto",{"_index":1478,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/dto/key",{"_index":2345,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["src/crypto/key/entities/cert.entity.ts",{"_index":815,"title":{},"body":{"entities/CertEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/entities/cert.entity.ts:21",{"_index":830,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:27",{"_index":838,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:33",{"_index":835,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:39",{"_index":826,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:45",{"_index":840,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:51",{"_index":828,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:57",{"_index":822,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:63",{"_index":842,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts",{"_index":2386,"title":{},"body":{"entities/KeyEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/entities/keys.entity.ts:16",{"_index":2387,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:22",{"_index":2391,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:28",{"_index":2390,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:34",{"_index":2388,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:40",{"_index":2394,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/key",{"_index":4272,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/key.controller.ts",{"_index":2358,"title":{},"body":{"controllers/KeyController.html":{},"coverage.html":{}}}],["src/crypto/key/key.controller.ts:37",{"_index":2368,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:48",{"_index":2364,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:63",{"_index":2372,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:77",{"_index":2366,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.module.ts",{"_index":2398,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.module.ts:16",{"_index":2400,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.service.ts",{"_index":2418,"title":{},"body":{"classes/KeyService.html":{},"coverage.html":{}}}],["src/crypto/key/key.service.ts:12",{"_index":2420,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:23",{"_index":2429,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:30",{"_index":2421,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:37",{"_index":2427,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:43",{"_index":2431,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:49",{"_index":2423,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:55",{"_index":2424,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:60",{"_index":2425,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:65",{"_index":2426,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:72",{"_index":2434,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:85",{"_index":2422,"title":{},"body":{"classes/KeyService.html":{}}}],["src/database/database",{"_index":4275,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/database.module.ts",{"_index":1681,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/health/health.controller.ts",{"_index":1975,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:25",{"_index":1984,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1992,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/issuer/authorize/authorize.controller.ts",{"_index":554,"title":{},"body":{"controllers/AuthorizeController.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.controller.ts:30",{"_index":573,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:44",{"_index":580,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:65",{"_index":583,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:81",{"_index":569,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.service.ts",{"_index":645,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.service.ts:113",{"_index":677,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:216",{"_index":667,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:244",{"_index":659,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:318",{"_index":671,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:325",{"_index":675,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:38",{"_index":657,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:49",{"_index":663,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:56",{"_index":661,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:88",{"_index":673,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/dto/authorize",{"_index":624,"title":{},"body":{"classes/AuthorizeQueries.html":{},"coverage.html":{}}}],["src/issuer/authorize/dto/par",{"_index":2960,"title":{},"body":{"classes/ParResponseDto.html":{},"coverage.html":{}}}],["src/issuer/credentials",{"_index":1348,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["src/issuer/credentials/credential",{"_index":1150,"title":{},"body":{"injectables/CredentialConfigService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts",{"_index":1324,"title":{},"body":{"controllers/CredentialsController.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts:25",{"_index":1332,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:35",{"_index":1334,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:48",{"_index":1330,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.service.ts",{"_index":1367,"title":{},"body":{"injectables/CredentialsService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.service.ts:107",{"_index":1379,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:203",{"_index":1388,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:229",{"_index":1386,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:23",{"_index":1376,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:46",{"_index":1384,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/dto/credential",{"_index":1133,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"coverage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts",{"_index":1057,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"coverage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:100",{"_index":1068,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:105",{"_index":1074,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:111",{"_index":1109,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:116",{"_index":1097,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:120",{"_index":1098,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:123",{"_index":1094,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:128",{"_index":1105,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:133",{"_index":1101,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:139",{"_index":1104,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:172",{"_index":1078,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:179",{"_index":1093,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:34",{"_index":1739,"title":{},"body":{"classes/DisplayImage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:38",{"_index":1709,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:40",{"_index":1706,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:42",{"_index":1707,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:44",{"_index":1703,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:46",{"_index":1710,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:49",{"_index":1705,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:52",{"_index":1708,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:57",{"_index":2220,"title":{},"body":{"classes/IssuerMetadataCredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:60",{"_index":2219,"title":{},"body":{"classes/IssuerMetadataCredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:63",{"_index":2221,"title":{},"body":{"classes/IssuerMetadataCredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:76",{"_index":1090,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:80",{"_index":1073,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:84",{"_index":1108,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:90",{"_index":1106,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:95",{"_index":1071,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts",{"_index":36,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:24",{"_index":1788,"title":{},"body":{"classes/EmbeddedDisclosurePolicy.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:35",{"_index":49,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:47",{"_index":3344,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:62",{"_index":2962,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:68",{"_index":2964,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:74",{"_index":2963,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:86",{"_index":238,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["src/issuer/display/display.controller.ts",{"_index":1712,"title":{},"body":{"controllers/DisplayController.html":{},"coverage.html":{}}}],["src/issuer/display/display.controller.ts:26",{"_index":1720,"title":{},"body":{"controllers/DisplayController.html":{}}}],["src/issuer/display/display.controller.ts:37",{"_index":1718,"title":{},"body":{"controllers/DisplayController.html":{}}}],["src/issuer/display/display.service.ts",{"_index":1744,"title":{},"body":{"injectables/DisplayService.html":{},"coverage.html":{}}}],["src/issuer/display/display.service.ts:127",{"_index":1750,"title":{},"body":{"injectables/DisplayService.html":{}}}],["src/issuer/display/display.service.ts:139",{"_index":1749,"title":{},"body":{"injectables/DisplayService.html":{}}}],["src/issuer/display/display.service.ts:18",{"_index":1747,"title":{},"body":{"injectables/DisplayService.html":{}}}],["src/issuer/display/display.service.ts:34",{"_index":1752,"title":{},"body":{"injectables/DisplayService.html":{}}}],["src/issuer/display/display.service.ts:41",{"_index":1751,"title":{},"body":{"injectables/DisplayService.html":{}}}],["src/issuer/display/dto/display",{"_index":1728,"title":{},"body":{"classes/DisplayCreateDto.html":{},"coverage.html":{}}}],["src/issuer/display/entities/display.entity.ts",{"_index":1732,"title":{},"body":{"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"coverage.html":{}}}],["src/issuer/display/entities/display.entity.ts:13",{"_index":1742,"title":{},"body":{"classes/DisplayInfo.html":{}}}],["src/issuer/display/entities/display.entity.ts:15",{"_index":1740,"title":{},"body":{"classes/DisplayInfo.html":{}}}],["src/issuer/display/entities/display.entity.ts:19",{"_index":1741,"title":{},"body":{"classes/DisplayInfo.html":{}}}],["src/issuer/display/entities/display.entity.ts:26",{"_index":1734,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/display/entities/display.entity.ts:32",{"_index":1733,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/display/entities/display.entity.ts:40",{"_index":1737,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/display/entities/display.entity.ts:9",{"_index":1743,"title":{},"body":{"classes/DisplayLogo.html":{}}}],["src/issuer/issuance/dto/authentication",{"_index":488,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts",{"_index":1138,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:13",{"_index":1141,"title":{},"body":{"classes/CredentialConfigMapping.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:30",{"_index":2107,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/entities/issuance",{"_index":2053,"title":{},"body":{"entities/IssuanceConfig.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts",{"_index":2090,"title":{},"body":{"controllers/IssuanceController.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts:20",{"_index":2096,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:30",{"_index":2098,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:46",{"_index":2094,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.service.ts",{"_index":2108,"title":{},"body":{"injectables/IssuanceService.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.service.ts:159",{"_index":2124,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:168",{"_index":2118,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:181",{"_index":2120,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:197",{"_index":2126,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:21",{"_index":2113,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:221",{"_index":2116,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:39",{"_index":2123,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:48",{"_index":2122,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuer",{"_index":2163,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/issuer/issuer.module.ts",{"_index":2229,"title":{},"body":{"modules/IssuerModule.html":{}}}],["src/issuer/oid4vci/dto/notification",{"_index":2703,"title":{},"body":{"classes/NotificationRequestDto.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/dto/offer",{"_index":2721,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts",{"_index":2744,"title":{},"body":{"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:29",{"_index":2749,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:43",{"_index":2756,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:53",{"_index":2753,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts",{"_index":4299,"title":{},"body":{"coverage.html":{}}}],["src/issuer/oid4vci/util.ts",{"_index":4302,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/issuer/status",{"_index":3726,"title":{},"body":{"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":4305,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/metric/metric.module.ts",{"_index":2694,"title":{},"body":{"modules/MetricModule.html":{}}}],["src/registrar/dto/access",{"_index":6,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["src/registrar/entities/registrar.entity.ts",{"_index":3135,"title":{},"body":{"entities/RegistrarEntity.html":{},"coverage.html":{}}}],["src/registrar/entities/registrar.entity.ts:13",{"_index":3140,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:16",{"_index":3139,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:19",{"_index":3138,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:7",{"_index":3141,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/registrar",{"_index":4306,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/registrar/registrar.module.ts",{"_index":3146,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["src/registrar/registrar.service.ts",{"_index":3152,"title":{},"body":{"injectables/RegistrarService.html":{},"coverage.html":{}}}],["src/registrar/registrar.service.ts:104",{"_index":3183,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:125",{"_index":3180,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:133",{"_index":3185,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:150",{"_index":3172,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:173",{"_index":3176,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:190",{"_index":3168,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:232",{"_index":3170,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:29",{"_index":3191,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:33",{"_index":3189,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:37",{"_index":3164,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:56",{"_index":3179,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:96",{"_index":3177,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/session/entities/session.entity.ts",{"_index":3401,"title":{},"body":{"entities/Session.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/session/entities/session.entity.ts:105",{"_index":3432,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:110",{"_index":3417,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:116",{"_index":3405,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:121",{"_index":3424,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:126",{"_index":3404,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:132",{"_index":3418,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:138",{"_index":3422,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:144",{"_index":3423,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:150",{"_index":3409,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:155",{"_index":3406,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:160",{"_index":3420,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:165",{"_index":3419,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:173",{"_index":3425,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:179",{"_index":3428,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:185",{"_index":3426,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:191",{"_index":3411,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:197",{"_index":3442,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:58",{"_index":3416,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:64",{"_index":3408,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:70",{"_index":3438,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:76",{"_index":3414,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:82",{"_index":3440,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:88",{"_index":3435,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:98",{"_index":3434,"title":{},"body":{"entities/Session.html":{}}}],["src/session/session",{"_index":4309,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/session/session.controller.ts",{"_index":3453,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{}}}],["src/session/session.controller.ts:25",{"_index":3460,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:35",{"_index":3464,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:46",{"_index":3459,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:59",{"_index":3468,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.decorator.ts",{"_index":4311,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/session/session.module.ts",{"_index":3625,"title":{},"body":{"modules/SessionModule.html":{}}}],["src/session/session.pipe.ts",{"_index":3631,"title":{},"body":{"injectables/SessionPipe.html":{},"coverage.html":{}}}],["src/session/session.pipe.ts:6",{"_index":3634,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["src/session/session.pipe.ts:9",{"_index":3636,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["src/session/session.service.ts",{"_index":3640,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/session/session.service.ts:118",{"_index":3676,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:144",{"_index":3652,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:152",{"_index":3660,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:163",{"_index":3659,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:172",{"_index":3663,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:179",{"_index":3678,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:19",{"_index":3648,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:192",{"_index":3657,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:34",{"_index":3665,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:89",{"_index":3674,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:98",{"_index":3655,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/storage/adapters/local.storage.ts",{"_index":2581,"title":{},"body":{"classes/LocalFileStorage.html":{},"coverage.html":{}}}],["src/storage/adapters/local.storage.ts:13",{"_index":2583,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:16",{"_index":2588,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:37",{"_index":2587,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:42",{"_index":2585,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:46",{"_index":2586,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts",{"_index":3346,"title":{},"body":{"classes/S3FileStorage.html":{},"coverage.html":{}}}],["src/storage/adapters/s3.storage.ts:13",{"_index":3351,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:20",{"_index":3357,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:56",{"_index":3356,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:68",{"_index":3353,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:74",{"_index":3354,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:85",{"_index":3355,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/dto/file",{"_index":1871,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["src/storage/entities/files.entity.ts",{"_index":1828,"title":{},"body":{"entities/FileEntity.html":{},"coverage.html":{}}}],["src/storage/entities/files.entity.ts:10",{"_index":1831,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/storage/entities/files.entity.ts:13",{"_index":1830,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/storage/entities/files.entity.ts:19",{"_index":1833,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/storage/entities/files.entity.ts:25",{"_index":1832,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/storage/files.service.ts",{"_index":1875,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/storage/files.service.ts:117",{"_index":1900,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:145",{"_index":1890,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:154",{"_index":1883,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:158",{"_index":1889,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:169",{"_index":1886,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:17",{"_index":1882,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:30",{"_index":1893,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:37",{"_index":1891,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:99",{"_index":1895,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/storage",{"_index":4316,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/storage/storage.controller.ts",{"_index":3849,"title":{},"body":{"controllers/StorageController.html":{},"coverage.html":{}}}],["src/storage/storage.controller.ts:43",{"_index":3859,"title":{},"body":{"controllers/StorageController.html":{}}}],["src/storage/storage.controller.ts:51",{"_index":3853,"title":{},"body":{"controllers/StorageController.html":{}}}],["src/storage/storage.module.ts",{"_index":3879,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/storage/storage.module.ts:17",{"_index":3880,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/storage/storage.types.ts",{"_index":1835,"title":{},"body":{"interfaces/FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/storage/storage.types.ts:21",{"_index":1852,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:27",{"_index":1846,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:31",{"_index":1840,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:33",{"_index":1842,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:35",{"_index":1844,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/utils/config",{"_index":4318,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/utils/logger/log",{"_index":4331,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/logger/logger",{"_index":2619,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["src/utils/logger/logger.factory.ts",{"_index":4334,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/logger/logger.module.ts",{"_index":2691,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/utils/logger/session",{"_index":3484,"title":{},"body":{"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/mediatype/media",{"_index":4337,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/utils/webhook/webhook.dto.ts",{"_index":87,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/utils/webhook/webhook.dto.ts:106",{"_index":4113,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:19",{"_index":94,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:24",{"_index":98,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:44",{"_index":4109,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{}}}],["src/utils/webhook/webhook.dto.ts:51",{"_index":4107,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{}}}],["src/utils/webhook/webhook.dto.ts:60",{"_index":4110,"title":{},"body":{"classes/WebHookAuthConfigNone.html":{}}}],["src/utils/webhook/webhook.dto.ts:65",{"_index":4105,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:77",{"_index":4114,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.service.ts",{"_index":4116,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["src/utils/webhook/webhook.service.ts:111",{"_index":4153,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:12",{"_index":4117,"title":{},"body":{"classes/WebhookResponse.html":{}}}],["src/utils/webhook/webhook.service.ts:20",{"_index":4149,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:40",{"_index":4151,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/verifier/oid4vp/dto/authorization",{"_index":528,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/dto/presentation",{"_index":3019,"title":{},"body":{"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts",{"_index":2782,"title":{},"body":{"controllers/Oid4vpController.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:40",{"_index":2793,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:56",{"_index":2789,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:72",{"_index":2796,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.module.ts",{"_index":2809,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts",{"_index":2814,"title":{},"body":{"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:21",{"_index":2819,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:217",{"_index":2828,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:297",{"_index":2829,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:42",{"_index":2821,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/presentations/dto/auth",{"_index":367,"title":{},"body":{"interfaces/AuthResponse.html":{},"coverage.html":{}}}],["src/verifier/presentations/dto/presentation",{"_index":2983,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{},"coverage.html":{}}}],["src/verifier/presentations/dto/vp",{"_index":3281,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{},"coverage.html":{}}}],["src/verifier/presentations/entities/presentation",{"_index":851,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts",{"_index":2988,"title":{},"body":{"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts:113",{"_index":2992,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:125",{"_index":3000,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:141",{"_index":2994,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:78",{"_index":2998,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.module.ts",{"_index":3032,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["src/verifier/presentations/presentations.service.ts",{"_index":3037,"title":{},"body":{"injectables/PresentationsService.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.service.ts:149",{"_index":3062,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:162",{"_index":3075,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:178",{"_index":3056,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:188",{"_index":3060,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:209",{"_index":3077,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:228",{"_index":3083,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:252",{"_index":3081,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:267",{"_index":3079,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:283",{"_index":3070,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:34",{"_index":3051,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:55",{"_index":3066,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:68",{"_index":3063,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/resolver/dto/issuer",{"_index":2218,"title":{},"body":{"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.module.ts",{"_index":3288,"title":{},"body":{"modules/ResolverModule.html":{}}}],["src/verifier/resolver/resolver.service.ts",{"_index":3290,"title":{},"body":{"injectables/ResolverService.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.service.ts:12",{"_index":3293,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:21",{"_index":3295,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/verifier.module.ts",{"_index":4104,"title":{},"body":{"modules/VerifierModule.html":{}}}],["src/well",{"_index":1283,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["st",{"_index":2611,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["st.size",{"_index":2613,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["stack",{"_index":3613,"title":{},"body":{"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["stage",{"_index":2844,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["standardflowenabled",{"_index":2511,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["start",{"_index":2824,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["started",{"_index":3605,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["starting",{"_index":3532,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["startswith(\"http",{"_index":2251,"title":{},"body":{"modules/IssuerModule.html":{}}}],["starttime",{"_index":3538,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["startup",{"_index":4554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state",{"_index":370,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["statements",{"_index":4221,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":3696,"title":{},"body":{"injectables/SessionService.html":{}}}],["static",{"_index":2280,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["statsync",{"_index":2594,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["statsync(fullpath",{"_index":2612,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["status",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTenantDto.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["status_list",{"_index":3823,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuscode",{"_index":3545,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["statuslist",{"_index":3790,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslist(entry.elements",{"_index":3808,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslist+jwt",{"_index":3813,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistcontroller",{"_index":3725,"title":{"controllers/StatusListController.html":{}},"body":{"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"coverage.html":{}}}],["statuslistentity",{"_index":3741,"title":{"entities/StatusListEntity.html":{}},"body":{"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{}}}],["statuslistfetcher",{"_index":3042,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["statuslistjwtheaderparameters",{"_index":3791,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistmodule",{"_index":2227,"title":{"modules/StatusListModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/TenantModule.html":{},"index.html":{},"modules.html":{}}}],["statuslistrepository",{"_index":3771,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistservice",{"_index":1373,"title":{"injectables/StatusListService.html":{}},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["statusmanagement",{"_index":1063,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["statusmapping",{"_index":3761,"title":{"entities/StatusMapping.html":{}},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["statusmappingrepository",{"_index":3770,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statusupdatedto",{"_index":3466,"title":{"classes/StatusUpdateDto.html":{}},"body":{"controllers/SessionController.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["step",{"_index":612,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["stopatfirsterror",{"_index":1239,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["storage",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"injectables/FilesService.html":{},"controllers/StorageController.html":{},"miscellaneous/variables.html":{}}}],["storage.controller",{"_index":3883,"title":{},"body":{"modules/StorageModule.html":{}}}],["storage.types",{"_index":2596,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"modules/StorageModule.html":{}}}],["storage/files.service",{"_index":1190,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["storage/storage.module",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["storage/storage.types",{"_index":1908,"title":{},"body":{"injectables/FilesService.html":{}}}],["storage_driver",{"_index":4663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["storage_validation_schema",{"_index":4317,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["storagecontroller",{"_index":3848,"title":{"controllers/StorageController.html":{}},"body":{"controllers/StorageController.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["storagemodule",{"_index":180,"title":{"modules/StorageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{},"index.html":{},"modules.html":{}}}],["storagemodule.forroot",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["store",{"_index":1156,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"controllers/Oid4vciController.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["store(tenantid",{"_index":1177,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["storecredentialconfiguration",{"_index":1328,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["storecredentialconfiguration(config",{"_index":1333,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["stored",{"_index":1183,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/FilesService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["storedobject",{"_index":1859,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["storeissuanceconfiguration",{"_index":2093,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["storeissuanceconfiguration(config",{"_index":2097,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["storeissuanceconfiguration(tenantid",{"_index":2125,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["storepresentationconfig",{"_index":2990,"title":{},"body":{"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["storepresentationconfig(config",{"_index":2999,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["storepresentationconfig(tenantid",{"_index":3073,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid",{"_index":3047,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid(registrationcertid",{"_index":3076,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["stores",{"_index":1179,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["strategy",{"_index":2299,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1853,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"controllers/StorageController.html":{}}}],["stream.contenttype",{"_index":3877,"title":{},"body":{"controllers/StorageController.html":{}}}],["stream.size",{"_index":3878,"title":{},"body":{"controllers/StorageController.html":{}}}],["streamablefile",{"_index":3860,"title":{},"body":{"controllers/StorageController.html":{}}}],["streamablefile(stream.stream",{"_index":3874,"title":{},"body":{"controllers/StorageController.html":{}}}],["string",{"_index":19,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"interfaces/ClientsProvider.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["string[]).length",{"_index":4076,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["string[])[0",{"_index":4077,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["strings",{"_index":4424,"title":{},"body":{"miscellaneous/functions.html":{}}}],["string})@get(':id",{"_index":3463,"title":{},"body":{"controllers/SessionController.html":{}}}],["structure",{"_index":797,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{}}}],["structured",{"_index":3563,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["style",{"_index":4677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sub",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["subclass",{"_index":1086,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["subclass’s",{"_index":1088,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["subfolder",{"_index":1196,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["subject",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["subject_types_supported",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["subtypes",{"_index":136,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["succeeded",{"_index":3619,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["success",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionService.html":{}}}],["successful",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{}}}],["successfully",{"_index":2903,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["such",{"_index":1782,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/Session.html":{}}}],["summarize",{"_index":4439,"title":{},"body":{"miscellaneous/functions.html":{}}}],["summarizeflags",{"_index":4326,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["summarizeflags(flags",{"_index":4436,"title":{},"body":{"miscellaneous/functions.html":{}}}],["summarizes",{"_index":4437,"title":{},"body":{"miscellaneous/functions.html":{}}}],["summarizeschemashape",{"_index":4327,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["summarizeschemashape(s",{"_index":4441,"title":{},"body":{"miscellaneous/functions.html":{}}}],["summarizewhenentry",{"_index":4328,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["summarizewhenentry(w",{"_index":4444,"title":{},"body":{"miscellaneous/functions.html":{}}}],["summary",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["super",{"_index":2267,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super(config",{"_index":2306,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(configservice",{"_index":1634,"title":{},"body":{"classes/DBKeyService.html":{},"classes/VaultKeyService.html":{}}}],["super.authenticate(req",{"_index":2308,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":2271,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["supersecret",{"_index":4543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["support",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"modules.html":{}}}],["supported",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/CryptoImplementationService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"classes/VaultKeyService.html":{}}}],["supportedalgorithms",{"_index":1508,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["supportedauthenticationscheme.clientattestationjwt",{"_index":723,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["supports",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CryptoImplementationService.html":{}}}],["svcuser",{"_index":2537,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["svcuser.id",{"_index":2550,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["svg",{"_index":4457,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":4178,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["switch",{"_index":798,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["symbol(\"file_storage",{"_index":1869,"title":{},"body":{"interfaces/FileStorage.html":{},"miscellaneous/variables.html":{}}}],["symmetric",{"_index":2331,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sync",{"_index":4578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":1688,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["synchronous",{"_index":4582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["system",{"_index":966,"title":{},"body":{"entities/ClientEntity.html":{},"classes/DBKeyService.html":{},"injectables/InternalClientsProvider.html":{},"controllers/KeyController.html":{},"injectables/StatusListService.html":{},"entities/TenantEntity.html":{}}}],["t",{"_index":1800,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["table",{"_index":4343,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":4342,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":4035,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["tap",{"_index":3518,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["tap((data",{"_index":3540,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["target",{"_index":4567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["targets",{"_index":4566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tell",{"_index":1269,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/Oid4vpService.html":{}}}],["temp",{"_index":4547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tenancy",{"_index":3437,"title":{},"body":{"entities/Session.html":{}}}],["tenant",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"classes/CreateClientDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateClientDto.html":{},"classes/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["tenant.clients",{"_index":978,"title":{},"body":{"entities/ClientEntity.html":{}}}],["tenant.controller",{"_index":3941,"title":{},"body":{"modules/TenantModule.html":{}}}],["tenant.dto",{"_index":3913,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenant.dto.ts",{"_index":1051,"title":{},"body":{"classes/CreateTenantDto.html":{},"coverage.html":{}}}],["tenant.dto.ts:12",{"_index":1054,"title":{},"body":{"classes/CreateTenantDto.html":{}}}],["tenant.id",{"_index":3226,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenant.isdirectory",{"_index":1205,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenant.name",{"_index":1213,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenant.service",{"_index":3914,"title":{},"body":{"controllers/TenantController.html":{},"modules/TenantModule.html":{}}}],["tenant/2025/08/14/uuid.ext",{"_index":1861,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["tenant/entitites/tenant.entity",{"_index":987,"title":{},"body":{"entities/ClientEntity.html":{},"interfaces/InternalTokenPayload.html":{},"interfaces/TokenPayload.html":{}}}],["tenant/tenant.module",{"_index":365,"title":{},"body":{"modules/AuthModule.html":{}}}],["tenant/tenant.service",{"_index":2301,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["tenant_id",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/InternalTokenPayload.html":{},"injectables/KeycloakClientsProvider.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/TokenPayload.html":{}}}],["tenant_total",{"_index":1017,"title":{},"body":{"modules/ClientModule.html":{},"modules/TenantModule.html":{}}}],["tenantcontroller",{"_index":3900,"title":{"controllers/TenantController.html":{}},"body":{"controllers/TenantController.html":{},"modules/TenantModule.html":{},"coverage.html":{}}}],["tenantdto",{"_index":3976,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenantentity",{"_index":831,"title":{"entities/TenantEntity.html":{}},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"modules/CryptoModule.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["tenantfolders",{"_index":1201,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenanthost",{"_index":2850,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenantid",{"_index":664,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateClientDto.html":{},"classes/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["tenantid/credentials",{"_index":1351,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["tenantid/status",{"_index":3728,"title":{},"body":{"controllers/StatusListController.html":{}}}],["tenantmodule",{"_index":353,"title":{"modules/TenantModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/TenantModule.html":{},"index.html":{},"modules.html":{}}}],["tenantrepository",{"_index":3947,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenants",{"_index":984,"title":{"interfaces/Tenants.html":{}},"body":{"entities/ClientEntity.html":{},"modules/ClientModule.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["tenants:manage",{"_index":4413,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tenantservice",{"_index":402,"title":{"injectables/TenantService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["tenantstatus",{"_index":3932,"title":{},"body":{"entities/TenantEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["tenanttotal",{"_index":3948,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["terminusmodule",{"_index":1993,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":4433,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tests",{"_index":4431,"title":{},"body":{"miscellaneous/functions.html":{}}}],["text_color",{"_index":1120,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["textencoder().encode(data",{"_index":4626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textencoder().encode(secret",{"_index":1957,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["then((cert",{"_index":1664,"title":{},"body":{"classes/DBKeyService.html":{}}}],["then((clients",{"_index":2503,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["then((cryptokey",{"_index":4083,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["then((e",{"_index":2032,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["then((entry",{"_index":1824,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["then((file",{"_index":1920,"title":{},"body":{"injectables/FilesService.html":{},"injectables/StatusListService.html":{}}}],["then((key",{"_index":1661,"title":{},"body":{"classes/DBKeyService.html":{}}}],["then((list",{"_index":2027,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["then((res",{"_index":3267,"title":{},"body":{"injectables/RegistrarService.html":{},"classes/VaultKeyService.html":{}}}],["then((response",{"_index":3247,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["then((roles",{"_index":2488,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["then((secret",{"_index":952,"title":{},"body":{"controllers/ClientController.html":{}}}],["then((session",{"_index":727,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["then(async",{"_index":1814,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"classes/VaultKeyService.html":{}}}],["this.accesstoken",{"_index":3217,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.addaccesscertificate",{"_index":3225,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.addclient(tenant.name",{"_index":2024,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["this.addrp(name",{"_index":3224,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.authorizeservice.authorizationchallengeendpoint",{"_index":623,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.authzmetadata",{"_index":4217,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.authorizeservice.sendauthorizationresponse(queries",{"_index":603,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.validatetokenrequest(body",{"_index":618,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authservice.getoauth2token(body",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getoidcdiscovery",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authzmetadata(session",{"_index":738,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.bucket",{"_index":3368,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.cacheddefaultalg",{"_index":1538,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["this.certrepository",{"_index":1663,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["this.cfg.getorthrow(\"oidc",{"_index":2457,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.cfg.getorthrow(\"oidc_client_id",{"_index":2463,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.cfg.getorthrow(\"oidc_client_secret",{"_index":2464,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.client",{"_index":3214,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.client.setconfig",{"_index":3215,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.clientrepo.create",{"_index":2555,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.clientrepo.delete",{"_index":2579,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.clientrepo.find",{"_index":2500,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.clientrepo.findonebyorfail",{"_index":2501,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.clientrepo.save(entity",{"_index":2556,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.clientrepo.update",{"_index":2576,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.clients",{"_index":950,"title":{},"body":{"controllers/ClientController.html":{}}}],["this.clients.addclient(tenant.id",{"_index":3988,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.clients.addclient(user.entity!.id",{"_index":955,"title":{},"body":{"controllers/ClientController.html":{}}}],["this.clients.getclient(user.entity!.id",{"_index":947,"title":{},"body":{"controllers/ClientController.html":{}}}],["this.clients.getclients(user.entity!.id",{"_index":944,"title":{},"body":{"controllers/ClientController.html":{}}}],["this.clients.removeclient(user.entity!.id",{"_index":958,"title":{},"body":{"controllers/ClientController.html":{}}}],["this.clients.updateclient(user.entity!.id",{"_index":954,"title":{},"body":{"controllers/ClientController.html":{}}}],["this.clients.validateclientcredentials",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.config",{"_index":2662,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enabledebugmode",{"_index":2680,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablehttplogger",{"_index":2679,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablesessionlogger",{"_index":2678,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.level",{"_index":2681,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.logfilepath",{"_index":2684,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.logformat",{"_index":2682,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.logtofile",{"_index":2683,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice",{"_index":3252,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.get",{"_index":1539,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/VaultKeyService.html":{}}}],["this.configservice.get(\"auth_client_tenant",{"_index":3987,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.configservice.get(\"config_import",{"_index":1200,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.configservice.get(\"config_import_force",{"_index":1199,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.configservice.get(\"jwt_secret",{"_index":1943,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.get(\"log_level",{"_index":2664,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice.get(\"log_to_file",{"_index":2669,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice.get(\"oidc",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["this.configservice.get(\"public_url\")}/storage/${file.id",{"_index":1921,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.configservice.get(\"public_url\")}/storage/${key",{"_index":1933,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.configservice.get(\"registrar_url",{"_index":3218,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.get(\"vault_url",{"_index":4054,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["this.configservice.getorthrow",{"_index":3205,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"auth_client_id",{"_index":2010,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["this.configservice.getorthrow(\"auth_client_secret",{"_index":2011,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["this.configservice.getorthrow(\"config_folder",{"_index":1195,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.configservice.getorthrow(\"jwt_expires_in",{"_index":1955,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"jwt_issuer",{"_index":1953,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"jwt_secret",{"_index":1952,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"oidc_sub",{"_index":2339,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.configservice.getorthrow(\"public_url",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{}}}],["this.configservice.getorthrow(\"public_url\")}${req.url",{"_index":732,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${session.id",{"_index":758,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${session.tenantid}/credentials",{"_index":1422,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${values.session}/oid4vp/request",{"_index":2914,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.configservice.getorthrow(\"registrar_oidc_url",{"_index":3204,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"registrar_url",{"_index":3216,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"session_tidy_up_interval",{"_index":3692,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservice.getorthrow(\"session_ttl",{"_index":3722,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.create(tenant",{"_index":1647,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.create(tenantid",{"_index":1660,"title":{},"body":{"classes/DBKeyService.html":{},"classes/VaultKeyService.html":{}}}],["this.createauthorizationrequest",{"_index":2929,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.createlist(entry",{"_index":3805,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.createtenant(tenantdto",{"_index":3980,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.credentialconfigrepo",{"_index":1465,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findby",{"_index":1407,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findonebyorfail",{"_index":1472,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepository.delete",{"_index":1228,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.find",{"_index":1278,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.findonebyorfail",{"_index":1280,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.save",{"_index":1281,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialsconfigservice.getbyid",{"_index":2159,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsconfigservice.import",{"_index":2131,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsservice.delete(user.entity!.id",{"_index":1346,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.get(user.entity!.id",{"_index":1344,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.getschema(id",{"_index":1366,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.getvct(id",{"_index":1363,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.store(user.entity!.id",{"_index":1345,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.crypto",{"_index":1635,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.alg",{"_index":1653,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.generatekeypair",{"_index":1648,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.getsigner(privatekey",{"_index":1658,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.cryptoimplementationservice.getalg",{"_index":1413,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoimplementationservice.getsupportedalgorithms",{"_index":2881,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.cryptomap",{"_index":1536,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["this.cryptomap.get(\"ed25519",{"_index":1547,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["this.cryptomap.get(\"es256",{"_index":1550,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["this.cryptomap.get(algorithmtype",{"_index":1555,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["this.cryptoservice.deletekey(token.entity!.id",{"_index":2385,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.getalg",{"_index":1669,"title":{},"body":{"classes/DBKeyService.html":{},"classes/VaultKeyService.html":{}}}],["this.cryptoservice.getcallbackcontext(tenantid",{"_index":699,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.cryptoservice.getcertchain",{"_index":1464,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.getcertentry",{"_index":1259,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.cryptoservice.getcerts(token.entity!.id",{"_index":2380,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.getcryptofromjwk(jwk",{"_index":3122,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.cryptoservice.getcryptofromjwk(publickey",{"_index":3112,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.cryptoservice.getjwks(tenantid).then((key",{"_index":4218,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.cryptoservice.import",{"_index":2130,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.cryptoservice.importkey(token.entity",{"_index":2381,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.keyservice.getkid",{"_index":1437,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.keyservice.getkid(tenantid",{"_index":3251,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.getpublickey",{"_index":762,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.signer",{"_index":1440,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.cryptoservice.ontenantinit(tenant",{"_index":3993,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.cryptoservice.signjwt",{"_index":2900,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.storeaccesscertificate",{"_index":3258,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.cryptoservice.updatecert(token.entity!.id",{"_index":2383,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.db.pingcheck(\"database",{"_index":1991,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.displayrepository.create",{"_index":1772,"title":{},"body":{"injectables/DisplayService.html":{}}}],["this.displayrepository.findone",{"_index":1771,"title":{},"body":{"injectables/DisplayService.html":{}}}],["this.displayrepository.findoneby",{"_index":1769,"title":{},"body":{"injectables/DisplayService.html":{}}}],["this.displayrepository.save",{"_index":1770,"title":{},"body":{"injectables/DisplayService.html":{}}}],["this.displayrepository.save(displayentity",{"_index":1773,"title":{},"body":{"injectables/DisplayService.html":{}}}],["this.displayservice.create(user.entity!.id",{"_index":1727,"title":{},"body":{"controllers/DisplayController.html":{}}}],["this.displayservice.get(user.entity!.id",{"_index":1726,"title":{},"body":{"controllers/DisplayController.html":{}}}],["this.encryptionservice.decryptjwe",{"_index":2932,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.getencryptionpublickey",{"_index":2875,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.ontenantinit(tenant.id",{"_index":3994,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.filerepository",{"_index":1918,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filerepository.delete",{"_index":1937,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filerepository.find",{"_index":1934,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filerepository.findoneby",{"_index":1912,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filerepository.save",{"_index":1916,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filesservice.deletebytenant(tenantid",{"_index":3999,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.filesservice.getstream(key).then",{"_index":3873,"title":{},"body":{"controllers/StorageController.html":{}}}],["this.filesservice.replaceuriwithpublicurl",{"_index":1248,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{}}}],["this.filesservice.saveuserupload(user.entity!.id",{"_index":3870,"title":{},"body":{"controllers/StorageController.html":{}}}],["this.getalg",{"_index":1554,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["this.getauthorizationserver",{"_index":706,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getauthorizationserver(tenantid).createaccesstokenresponse",{"_index":757,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getbyid",{"_index":1221,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.getcertificate(tenantid",{"_index":4066,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["this.getclient",{"_index":2016,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["this.getclient(\"root",{"_index":2012,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["this.getclient(tenantid",{"_index":2558,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.getdownloadurl(response.key",{"_index":1926,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.getexistingrp(name",{"_index":3245,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.getissuanceconfigurationbyid",{"_index":2133,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.getjwk",{"_index":4081,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["this.getkid(tenant).catch(async",{"_index":1646,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getkid(tenantid",{"_index":4078,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["this.getkid(tenantid).catch",{"_index":1659,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getpresentationconfig",{"_index":3095,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.getprivatekey(tenantid",{"_index":1657,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getpubfromprivatekey(privatekeyjwk",{"_index":1672,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getpublickey",{"_index":4065,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["this.headers",{"_index":4055,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["this.health.check",{"_index":1990,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpservice.get",{"_index":3316,"title":{},"body":{"injectables/ResolverService.html":{},"classes/VaultKeyService.html":{}}}],["this.httpservice.post",{"_index":4057,"title":{},"body":{"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.import",{"_index":1756,"title":{},"body":{"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.init",{"_index":2482,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.isenabled",{"_index":3202,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{}}}],["this.ishttploggerenabled",{"_index":2685,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.issuanceconfigrepo.delete",{"_index":2134,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.find",{"_index":2155,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.findoneorfail",{"_index":2156,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.save",{"_index":2161,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceservice.deleteissuanceconfiguration",{"_index":2106,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfiguration(user.entity!.id",{"_index":2103,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfigurationbyid",{"_index":703,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.issuanceservice.storeissuanceconfiguration",{"_index":2104,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.isusingexternaloidc",{"_index":1950,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.jwtservice.generatetoken(payload",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.isusingexternaloidc",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.kbverifier.bind(this",{"_index":3092,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.kc",{"_index":2461,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.auth(creds",{"_index":2465,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.clients",{"_index":2502,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.clients.create",{"_index":2506,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.clients.del",{"_index":2578,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.clients.find",{"_index":2560,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.clients.generatenewclientsecret",{"_index":2534,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.clients.getserviceaccountuser",{"_index":2538,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.clients.update",{"_index":2572,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.getaccesstoken",{"_index":2467,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.roles",{"_index":2487,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.roles.create",{"_index":2496,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.roles.find",{"_index":2540,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.users.addrealmrolemappings",{"_index":2549,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.users.delrealmrolemappings",{"_index":2571,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.users.listrealmrolemappings",{"_index":2565,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.keyrepository",{"_index":1638,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["this.keyrepository.delete",{"_index":1818,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.keyrepository.save",{"_index":1816,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.loadconfiguration",{"_index":2661,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.logger.error",{"_index":1260,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.logger.info",{"_index":1276,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.setcontext(\"sessionloggerservice",{"_index":3601,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.logger.warn",{"_index":1250,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.loggerconfigservice.issessionloggerenabled",{"_index":3602,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.oauth2client",{"_index":3208,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.oauth2client.clientcredentials().then((token",{"_index":3229,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.oid4vciservice.createoffer",{"_index":2210,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.oid4vciservice.getcredential(req",{"_index":2769,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.handlenotification(req",{"_index":2772,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.issuermetadata(session",{"_index":4209,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.oid4vciservice.noncerequest(session",{"_index":2776,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.ontenantinit(tenant.id",{"_index":3997,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.oid4vpservice.createauthorizationrequest(session",{"_index":2802,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.oid4vpservice.createrequest",{"_index":3008,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.oid4vpservice.createrequest(presentationconfig",{"_index":777,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.oid4vpservice.getresponse(body",{"_index":2804,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.ontenantinit(session.tenantid).then",{"_index":3817,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.parsechallengerequest",{"_index":802,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.parseloglevel",{"_index":2663,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.presentationsservice.deletepresentationconfig",{"_index":3018,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.getpresentationconfig",{"_index":2852,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.getpresentationconfigs",{"_index":3015,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.parseresponse",{"_index":2941,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.storepresentationconfig",{"_index":3016,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.storercid",{"_index":3279,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.publicbaseurl",{"_index":3376,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.publicbaseurl.replace",{"_index":3377,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.reflector.get",{"_index":3521,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.reflector.getallandoverride",{"_index":2268,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["this.refreshaccesstoken",{"_index":3219,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.delete",{"_index":3228,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.findonebyorfail",{"_index":3264,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.save",{"_index":3227,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarservice.addregistrationcertificate",{"_index":2858,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.isenabled",{"_index":2856,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.ontenantinit(tenant",{"_index":3996,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.repo",{"_index":2026,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["this.repo.delete",{"_index":2018,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["this.repo.findone",{"_index":2045,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["this.repo.save",{"_index":2014,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["this.repo.update",{"_index":2044,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["this.resolverservice.resolvepublickey",{"_index":3111,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.s3",{"_index":3387,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.s3.send",{"_index":3367,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.sanitizebody(request.body",{"_index":3537,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.schedulerregistry.addinterval(\"tidyupsessions",{"_index":3695,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sdjwtinstance",{"_index":3090,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.sendauthorizationcode(res",{"_index":790,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionlogger.logauthorizationrequest(logcontext",{"_index":2861,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logcredentialverification",{"_index":2943,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowcomplete(logcontext",{"_index":2956,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowerror(logcontext",{"_index":2908,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowstart(logcontext",{"_index":2846,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logsession",{"_index":2902,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsession(logcontext",{"_index":4125,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsessionerror",{"_index":4139,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionloggerservice.logsession",{"_index":3531,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.sessionloggerservice.logsessionerror",{"_index":3551,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.sessionrepository.countby",{"_index":3702,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.delete",{"_index":3706,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.find",{"_index":3718,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail",{"_index":3719,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail(where",{"_index":3720,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.save(session",{"_index":3708,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.update",{"_index":3714,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.dec",{"_index":3717,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.inc",{"_index":3710,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.set",{"_index":3704,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice",{"_index":725,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(body.issuer_state",{"_index":613,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.sessionservice.add(issuer_state",{"_index":811,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(res.state",{"_index":2947,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(session.id",{"_index":2859,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionservice.add(values.session",{"_index":2930,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.create",{"_index":2920,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.delete(id",{"_index":3480,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(body.auth_session",{"_index":786,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(body.issuer_state",{"_index":794,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(session.id",{"_index":2928,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.get(sessionid).catch",{"_index":3639,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["this.sessionservice.getall",{"_index":3478,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.setauthcode(issuer_state",{"_index":809,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setauthcode(values.issuer_state",{"_index":730,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setentry(entry.index",{"_index":3830,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.setuptenant(tenant",{"_index":3985,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.shouldlog",{"_index":3603,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.sign(input",{"_index":4068,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["this.sign(signinginput",{"_index":4100,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["this.statuslistfetcher.bind(this",{"_index":3093,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.statuslistrepository",{"_index":3815,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.delete",{"_index":3806,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.findonebyorfail",{"_index":3818,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.save",{"_index":3804,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.update",{"_index":3814,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistservice.createentry",{"_index":1452,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.statuslistservice.getlist(tenantid",{"_index":3740,"title":{},"body":{"controllers/StatusListController.html":{}}}],["this.statuslistservice.ontenantinit(tenant.id",{"_index":3995,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.statuslistservice.updatestatus(value",{"_index":3483,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.statusmappingrepository.delete",{"_index":3807,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.findby",{"_index":3826,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.save",{"_index":3822,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.storage.delete(file.id",{"_index":1936,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.getsignedurl",{"_index":1930,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.getsignedurl(key",{"_index":1931,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.put",{"_index":1913,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.put(key",{"_index":1922,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.store(tenant.name",{"_index":1272,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.storeissuanceconfiguration",{"_index":2154,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.storepresentationconfig(tenant.name",{"_index":3097,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.supportedalgorithms",{"_index":1537,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["this.supportedalgorithms.includes(this.cacheddefaultalg",{"_index":1541,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["this.tenantrepository.count",{"_index":3981,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.delete",{"_index":4001,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.find",{"_index":3983,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.findoneby",{"_index":3969,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.findoneorfail",{"_index":3992,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.save(data",{"_index":3984,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.update",{"_index":3998,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantservice",{"_index":2341,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.tenantservice.createtenant(data",{"_index":3919,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantservice.deletetenant(id",{"_index":3923,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantservice.getall",{"_index":3917,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantservice.gettenant(id",{"_index":3921,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenanttotal.set",{"_index":3982,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tidyupsessions",{"_index":3690,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.vaulturl",{"_index":4053,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["this.vaulturl}/v1/${tenantid}/keys/${id",{"_index":4073,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["this.vaulturl}/v1/${tenantid}/keys/${keyid",{"_index":4079,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["this.vaulturl}/v1/${tenantid}/keys?list=true",{"_index":4063,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["this.vaulturl}/v1/${tenantid}/sign/${keyid",{"_index":4086,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["this.vaulturl}/v1/sys/mounts/${tenantid",{"_index":4058,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["this.verifier.bind(this",{"_index":3091,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository",{"_index":3102,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.delete",{"_index":3096,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.find",{"_index":3098,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.findonebyorfail",{"_index":3104,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.save",{"_index":3101,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.save(element",{"_index":3106,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.webhookservice.sendwebhook",{"_index":2954,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.wellknownservice.getauthzmetadata(session",{"_index":4184,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getissuermetadata(session",{"_index":4182,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getjwks(session.tenantid",{"_index":4188,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["throw",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionPipe.html":{},"injectables/StatusListService.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["throws",{"_index":1542,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"classes/VaultKeyService.html":{}}}],["tick",{"_index":2481,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["tidy",{"_index":3667,"title":{},"body":{"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["tidyupsessions",{"_index":3643,"title":{},"body":{"injectables/SessionService.html":{}}}],["time",{"_index":1457,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/ParResponseDto.html":{}}}],["timestamp",{"_index":823,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["title",{"_index":3388,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["toassign",{"_index":2541,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["toassign.length",{"_index":2548,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["toassign.map((r",{"_index":2551,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["todo",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"modules/MetricModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VaultKeyService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["token",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/InternalTokenPayload.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"controllers/StorageController.html":{},"interfaces/TokenPayload.html":{},"classes/VaultKeyService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token(body",{"_index":581,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["token.accesstoken",{"_index":3230,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["token.decorator",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ClientController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["token_endpoint",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_endpoint_auth_methods_supported",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_exchange",{"_index":3620,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["token_type",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/TokenResponse.html":{}}}],["tokenpayload",{"_index":907,"title":{"interfaces/TokenPayload.html":{}},"body":{"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/InternalTokenPayload.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenresponse",{"_index":272,"title":{"classes/TokenResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/TokenResponse.html":{},"coverage.html":{}}}],["tokens",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["toodo",{"_index":2136,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["toremove",{"_index":2566,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["toremove.length",{"_index":2570,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["tostring(\"ascii",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["total",{"_index":1019,"title":{},"body":{"modules/ClientModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/TenantModule.html":{}}}],["tracking",{"_index":3026,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{}}}],["transform",{"_index":3632,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["transform(sessionid",{"_index":3635,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["transformer",{"_index":51,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["transit",{"_index":4043,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["translatetime",{"_index":4571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transport",{"_index":4586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transportconfig",{"_index":4563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":48,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"controllers/StorageController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["true})@column('json",{"_index":1077,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@column({type",{"_index":973,"title":{},"body":{"entities/ClientEntity.html":{}}}],["true})@isnumber",{"_index":1100,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isobject",{"_index":4112,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["true})@isoptional()@isobject",{"_index":1067,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isoptional()@isstring",{"_index":2972,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isoptional()@validate(webhookconfig)@type(undefined",{"_index":2980,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isstring",{"_index":2974,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@type(undefined",{"_index":237,"title":{},"body":{"classes/AttestationBasedPolicy.html":{},"classes/CredentialQuery.html":{},"classes/DCQL.html":{},"classes/PolicyCredential.html":{}}}],["trust",{"_index":3305,"title":{},"body":{"injectables/ResolverService.html":{}}}],["trusted",{"_index":865,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["trusted_authorities",{"_index":873,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["trustedauthorityquery",{"_index":867,"title":{"classes/TrustedAuthorityQuery.html":{}},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["try",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"classes/S3FileStorage.html":{},"classes/VaultKeyService.html":{}}}],["trying",{"_index":2479,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["ttl",{"_index":3721,"title":{},"body":{"injectables/SessionService.html":{}}}],["two",{"_index":4201,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["txcode",{"_index":697,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["typ",{"_index":2893,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["type",{"_index":20,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(undefined)@isobject",{"_index":4106,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{}}}],["type.decorator",{"_index":4172,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["type.decorator.ts",{"_index":4338,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":4173,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["type.enum.ts",{"_index":4398,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":4475,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1544,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/RegistrarService.html":{}}}],["typeorm",{"_index":847,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"modules/ClientModule.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"dependencies.html":{}}}],["typeorm/query",{"_index":3686,"title":{},"body":{"injectables/SessionService.html":{}}}],["typeorm/repository/repository",{"_index":1625,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{}}}],["typeormhealthindicator",{"_index":1986,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":990,"title":{},"body":{"modules/ClientModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/TenantModule.html":{}}}],["typeormmodule.forfeature",{"_index":2248,"title":{},"body":{"modules/IssuerModule.html":{}}}],["typeormmodule.forfeature([certentity",{"_index":1569,"title":{},"body":{"modules/CryptoModule.html":{},"modules/KeyModule.html":{}}}],["typeormmodule.forfeature([cliententity",{"_index":1003,"title":{},"body":{"modules/ClientModule.html":{}}}],["typeormmodule.forfeature([fileentity",{"_index":3885,"title":{},"body":{"modules/StorageModule.html":{}}}],["typeormmodule.forfeature([presentationconfig",{"_index":3036,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["typeormmodule.forfeature([registrarentity",{"_index":3151,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["typeormmodule.forfeature([session",{"_index":3628,"title":{},"body":{"modules/SessionModule.html":{}}}],["typeormmodule.forfeature([statusmapping",{"_index":3764,"title":{},"body":{"modules/StatusListModule.html":{}}}],["typeormmodule.forfeature([tenantentity",{"_index":3942,"title":{},"body":{"modules/TenantModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1683,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":1682,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1530,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"entities/KeyEntity.html":{},"classes/VaultKeyService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["types.get(this.cryptoservice.getalg",{"_index":4074,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["types.set(\"es256",{"_index":4070,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["typescript",{"_index":3237,"title":{},"body":{"injectables/RegistrarService.html":{},"classes/VaultKeyService.html":{}}}],["typically",{"_index":1303,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{}}}],["unable",{"_index":1551,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["unauthorizedexception",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(\"invalid",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":714,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/OfferRequestDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"classes/RoleDto.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"classes/WebhookConfig.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apiproduces('application/json",{"_index":2173,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["undefined})@apiresponse({status",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray",{"_index":1320,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["undefined})@isobject()@isoptional",{"_index":2723,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["undefined})@post('offer",{"_index":2175,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["undefined})@post('request",{"_index":2997,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["undefined})@type(undefined",{"_index":1076,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/WebhookConfig.html":{}}}],["union",{"_index":1082,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["unique",{"_index":26,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["unknown",{"_index":669,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ClientsProvider.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"injectables/IssuanceService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"classes/VaultKeyService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["unknown(true",{"_index":4542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsecure",{"_index":2249,"title":{},"body":{"modules/IssuerModule.html":{}}}],["unsigned",{"_index":4203,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["unsupported",{"_index":806,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["unused",{"_index":4060,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["up",{"_index":151,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/variables.html":{}}}],["update",{"_index":925,"title":{},"body":{"controllers/ClientController.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["update.dto",{"_index":2375,"title":{},"body":{"controllers/KeyController.html":{},"controllers/SessionController.html":{},"injectables/StatusListService.html":{}}}],["update.dto.ts",{"_index":3842,"title":{},"body":{"classes/StatusUpdateDto.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["update.dto.ts:16",{"_index":3843,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:24",{"_index":3846,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:8",{"_index":3844,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["updateclient",{"_index":904,"title":{},"body":{"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["updateclient(id",{"_index":921,"title":{},"body":{"controllers/ClientController.html":{}}}],["updateclient(tenantid",{"_index":1037,"title":{},"body":{"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["updateclientdto",{"_index":922,"title":{"classes/UpdateClientDto.html":{}},"body":{"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/UpdateClientDto.html":{},"coverage.html":{}}}],["updateclientdto.description",{"_index":2573,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["updateclientdto.roles",{"_index":2563,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["updated",{"_index":844,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["updatedat",{"_index":819,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["updatedatecolumn",{"_index":841,"title":{},"body":{"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["updatekey",{"_index":2362,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatekey(token",{"_index":2369,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatekeydto",{"_index":2370,"title":{"classes/UpdateKeyDto.html":{}},"body":{"controllers/KeyController.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["updates",{"_index":2373,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatestatus",{"_index":3769,"title":{},"body":{"injectables/StatusListService.html":{}}}],["updatestatus(value",{"_index":3787,"title":{},"body":{"injectables/StatusListService.html":{}}}],["upload",{"_index":1904,"title":{},"body":{"injectables/FilesService.html":{},"controllers/StorageController.html":{}}}],["upload(user",{"_index":3854,"title":{},"body":{"controllers/StorageController.html":{}}}],["upload.dto",{"_index":3865,"title":{},"body":{"controllers/StorageController.html":{}}}],["upload.dto.ts",{"_index":1872,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["upload.dto.ts:5",{"_index":1874,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["uploaded",{"_index":1902,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadedfile",{"_index":3861,"title":{},"body":{"controllers/StorageController.html":{}}}],["uploading",{"_index":1903,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploads",{"_index":4670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uri",{"_index":539,"title":{},"body":{"classes/AuthorizationResponse.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["uris",{"_index":1763,"title":{},"body":{"injectables/DisplayService.html":{}}}],["url",{"_index":126,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/variables.html":{}}}],["url(payload.iss).hostname",{"_index":3310,"title":{},"body":{"injectables/ResolverService.html":{}}}],["urls",{"_index":1243,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"miscellaneous/variables.html":{}}}],["urn:${randomuuid",{"_index":607,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["usage",{"_index":1817,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"miscellaneous/typealiases.html":{}}}],["use",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/EC_Public.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":106,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"interfaces/ClientsProvider.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CryptoImplementationService.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["usedcapi",{"_index":2827,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["usedclaims",{"_index":1431,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["useexternaloidc",{"_index":2302,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["useful",{"_index":2514,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"interfaces/SessionLogContext.html":{}}}],["useinterceptors",{"_index":2757,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StorageController.html":{}}}],["useinterceptors(fileinterceptor(\"file",{"_index":3868,"title":{},"body":{"controllers/StorageController.html":{}}}],["useinterceptors(sessionloggerinterceptor",{"_index":2766,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["useinterceptors(undefined)@secured(['undefined'])@apiconsumes('multipart/form",{"_index":3855,"title":{},"body":{"controllers/StorageController.html":{}}}],["usekeycloak",{"_index":1009,"title":{},"body":{"modules/ClientModule.html":{}}}],["user",{"_index":501,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"guards/RolesGuard.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/SessionModule.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/VaultKeyService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user.entity!.id",{"_index":2105,"title":{},"body":{"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["user.roles?.includes(role",{"_index":3340,"title":{},"body":{"guards/RolesGuard.html":{}}}],["usermodel",{"_index":2528,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["username",{"_index":1694,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":503,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["uses",{"_index":1978,"title":{},"body":{"controllers/HealthController.html":{},"injectables/SessionLoggerService.html":{}}}],["using",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["utf",{"_index":3973,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["utf8",{"_index":1218,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["utility",{"_index":4446,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utils/config",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/logger//session",{"_index":2761,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["utils/logger/logger.factory",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/logger/logger.module",{"_index":3626,"title":{},"body":{"modules/SessionModule.html":{}}}],["utils/logger/session",{"_index":2763,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["utils/mediatype/media",{"_index":4171,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["utils/webhook/webhook.dto",{"_index":497,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["utils/webhook/webhook.service",{"_index":2234,"title":{},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["uuid",{"_index":1627,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"classes/VaultKeyService.html":{},"dependencies.html":{}}}],["v4",{"_index":1626,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"classes/VaultKeyService.html":{}}}],["valid",{"_index":788,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["valid(\"db",{"_index":4635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid(\"es256",{"_index":4602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid(\"json",{"_index":4643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid(\"local",{"_index":4664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid(\"sqlite",{"_index":4605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid(\"trace",{"_index":4640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":584,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"interfaces/ClientsProvider.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CryptoImplementationService.html":{},"classes/DCQL.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VaultKeyService.html":{}}}],["validate(config",{"_index":1231,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/PresentationsService.html":{}}}],["validate(issuancedto",{"_index":2137,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["validate(payload",{"_index":2292,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(tenantdto",{"_index":3977,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["validate(webhookconfig",{"_index":891,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["validateclientcredentials",{"_index":1025,"title":{},"body":{"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{}}}],["validateclientcredentials(clientid",{"_index":1039,"title":{},"body":{"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{}}}],["validated",{"_index":2294,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":57,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["validatenested()@apiproperty({oneof",{"_index":4111,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["validatenested()@type(undefined",{"_index":1704,"title":{},"body":{"classes/Display.html":{},"classes/DisplayInfo.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/KeyImportDto.html":{}}}],["validatenested()@type(undefined)@column('json",{"_index":1736,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["validatenested()@type(undefined)@isoptional",{"_index":2725,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["validatetokenrequest",{"_index":652,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["validatetokenrequest(body",{"_index":676,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["validation",{"_index":1265,"title":{},"body":{"injectables/CredentialConfigService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/variables.html":{}}}],["validation.schema",{"_index":1942,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["validation.schema.ts",{"_index":4227,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["validation_schema",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validationerror",{"_index":1261,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["validationerrors",{"_index":1230,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["validationerrors.length",{"_index":1268,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["validationerrors.map((error",{"_index":2020,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["validationschema",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":58,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizationResponse-1.html":{},"classes/AuthorizeQueries.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["value",{"_index":93,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.config",{"_index":1420,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.credentialconfigids",{"_index":2158,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.credentialconfigurationid",{"_index":3828,"title":{},"body":{"injectables/StatusListService.html":{}}}],["value.embeddeddisclosurepolicy",{"_index":1424,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.id",{"_index":1419,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.sessionid",{"_index":3827,"title":{},"body":{"injectables/StatusListService.html":{}}}],["value.status",{"_index":3831,"title":{},"body":{"injectables/StatusListService.html":{}}}],["values",{"_index":41,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/AuthorizeService.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/InternalTokenPayload.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/SessionService.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["values.session",{"_index":2910,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["values.uri",{"_index":3012,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["values.webhook",{"_index":2921,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["varchar",{"_index":3834,"title":{},"body":{"entities/StatusMapping.html":{}}}],["variable",{"_index":3673,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["variables",{"_index":4435,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":122,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["vars",{"_index":4061,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["vault",{"_index":2409,"title":{},"body":{"modules/KeyModule.html":{},"classes/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["vault_token",{"_index":4056,"title":{},"body":{"classes/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["vault_url",{"_index":4637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vaultkeyservice",{"_index":2404,"title":{"classes/VaultKeyService.html":{}},"body":{"modules/KeyModule.html":{},"classes/VaultKeyService.html":{},"coverage.html":{}}}],["vaulturl",{"_index":4025,"title":{},"body":{"classes/VaultKeyService.html":{}}}],["vc",{"_index":1401,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["vcs",{"_index":3039,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vct",{"_index":1064,"title":{"classes/VCT.html":{}},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["vct(@param(\"id",{"_index":1361,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["vct(id",{"_index":1355,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["verbose",{"_index":2673,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["verifiable",{"_index":536,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["verification",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{}}}],["verification.'})@apiresponse({status",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["verificationcounter",{"_index":3705,"title":{},"body":{"injectables/SessionService.html":{}}}],["verificationresult",{"_index":3410,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verified",{"_index":3412,"title":{},"body":{"entities/Session.html":{}}}],["verifier",{"_index":1499,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["verifier(data",{"_index":3124,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verifier/oid4vp/dto/presentation",{"_index":2182,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["verifier/oid4vp/oid4vp.module",{"_index":2235,"title":{},"body":{"modules/IssuerModule.html":{}}}],["verifier/oid4vp/oid4vp.service",{"_index":687,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifier/presentations/dto/vp",{"_index":3193,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["verifier/presentations/entities/presentation",{"_index":62,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["verifier/presentations/presentations.module",{"_index":3148,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["verifier/presentations/presentations.service",{"_index":3194,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["verifier/verifier.module",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["verifier_attestations",{"_index":2892,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["verifiermodule",{"_index":181,"title":{"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["verify",{"_index":715,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["verify(data",{"_index":3114,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verify(res.vp_token[att",{"_index":3128,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verifyauthorizationcodeaccesstokenrequest",{"_index":753,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifying",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifypreauthorizedcodeaccesstokenrequest",{"_index":742,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifytoken",{"_index":2272,"title":{},"body":{"injectables/JwtService.html":{}}}],["verifytoken(token",{"_index":1968,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["version",{"_index":4460,"title":{},"body":{"properties.html":{}}}],["via",{"_index":611,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{}}}],["void",{"_index":1754,"title":{},"body":{"injectables/DisplayService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["vp",{"_index":377,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse-1.html":{},"entities/CertEntity.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["vp_formats",{"_index":2876,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vp_nonce",{"_index":2860,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["vp_token",{"_index":371,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["vprequest",{"_index":3074,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequestrepository",{"_index":3050,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vps",{"_index":3038,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["w",{"_index":4445,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wallet",{"_index":531,"title":{},"body":{"classes/AuthorizationResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"properties.html":{}}}],["wallet_metadata",{"_index":540,"title":{},"body":{"classes/AuthorizationResponse.html":{}}}],["wallet_nonce",{"_index":541,"title":{},"body":{"classes/AuthorizationResponse.html":{}}}],["want",{"_index":75,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["warn",{"_index":2675,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["we'll",{"_index":2206,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["web",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"entities/StatusListEntity.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["webhook",{"_index":110,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth",{"_index":4143,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth.config.value",{"_index":4146,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth.type",{"_index":4144,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth?.type",{"_index":4148,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.url",{"_index":4147,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhookauthconfig",{"_index":113,"title":{"classes/WebHookAuthConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookauthconfigheader",{"_index":111,"title":{"classes/WebHookAuthConfigHeader.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookauthconfignone",{"_index":118,"title":{"classes/WebHookAuthConfigNone.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookconfig",{"_index":125,"title":{"classes/WebhookConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/Claim.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookresponse",{"_index":4115,"title":{"classes/WebhookResponse.html":{}},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["webhookresponse.data",{"_index":4132,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhookresponse.status",{"_index":4137,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhooks",{"_index":91,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["webhooksent",{"_index":2957,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookservice",{"_index":2228,"title":{"injectables/WebhookService.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["webhookurl",{"_index":4127,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webook",{"_index":2950,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["weborigins",{"_index":2512,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["well",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"classes/DBKeyService.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["wellknowncontroller",{"_index":187,"title":{"controllers/WellKnownController.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["wellknownservice",{"_index":182,"title":{"injectables/WellKnownService.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["when(\"db_type",{"_index":4609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["when(\"km_type",{"_index":4638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["when(\"oidc",{"_index":4509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["when(\"registrar_url",{"_index":4652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["when(joi.ref(\"storage_driver",{"_index":4667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whether",{"_index":1905,"title":{},"body":{"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"entities/Session.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["whitelist",{"_index":1232,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["whose",{"_index":1887,"title":{},"body":{"injectables/FilesService.html":{}}}],["willsoto/nestjs",{"_index":993,"title":{},"body":{"modules/ClientModule.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/TenantModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["withfiletypes",{"_index":1203,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["working",{"_index":4546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["write",{"_index":2603,"title":{},"body":{"classes/LocalFileStorage.html":{},"injectables/RegistrarService.html":{}}}],["writes",{"_index":4583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["writing",{"_index":3275,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["wrong",{"_index":1270,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["wrtites",{"_index":1588,"title":{},"body":{"classes/DBKeyService.html":{}}}],["x",{"_index":1778,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/VaultKeyService.html":{}}}],["x509_san_dns",{"_index":2867,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509_san_dns:${hostname",{"_index":2913,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509certificate",{"_index":3298,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x509certificate(buffer.from(cert",{"_index":3307,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x5c",{"_index":1463,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["y",{"_index":1779,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["yes",{"_index":668,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"interfaces/FileStorage.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerService.html":{},"classes/VaultKeyService.html":{},"injectables/WebhookService.html":{},"miscellaneous/functions.html":{}}}],["you’ll",{"_index":1043,"title":{},"body":{"interfaces/ClientsProvider.html":{}}}],["yyyy",{"_index":4572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/LoggerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/TenantModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccessCertificateResponse.html":{"url":"interfaces/AccessCertificateResponse.html","title":"interface - AccessCertificateResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccessCertificateResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/dto/access-certificate-response.ts\n        \n\n\n            \n                Description\n            \n            \n                Repsonse of access certificate request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            crt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        crt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        crt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The public key in PEM format.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier of the access certificate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if the access certificate is revoked.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllowListPolicy.html":{"url":"classes/AllowListPolicy.html","title":"class - AllowListPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllowListPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                allowList\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['allowList'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:31\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiKeyConfig.html":{"url":"classes/ApiKeyConfig.html","title":"class - ApiKeyConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for API key authentication in webhooks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                headerName\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:19\n                        \n                    \n\n            \n                \n                    The name of the header where the API key will be sent.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:24\n                        \n                    \n\n            \n                \n                    The value of the API key to be sent in the header.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    @IsObject()\n    auth: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                main\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        main\n                        \n                    \n                \n            \n            \n                \n                        \n                    main()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { ApiExcludeController } from \"@nestjs/swagger\";\n\n@ApiExcludeController()\n@Controller()\nexport class AppController {\n    @Get()\n    main(): string {\n        return 'EUDIPLO is up and running, more information at https://openwallet-foundation-labs.github.io/eudiplo/latest/';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nStorageModule\n\nStorageModule\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WellKnownService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WellKnownController\n                        \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CryptoModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            KeyModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            MetricModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StorageModule\n                        \n                        \n                            VerifierModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { MulterModule } from \"@nestjs/platform-express\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\nimport { memoryStorage } from \"multer\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { AppController } from \"./app/app.controller\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { CryptoModule } from \"./crypto/crypto.module\";\nimport { KeyModule } from \"./crypto/key/key.module\";\nimport { DatabaseModule } from \"./database/database.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { IssuerModule } from \"./issuer/issuer.module\";\nimport { MetricModule } from \"./metric/metric.module\";\nimport { RegistrarModule } from \"./registrar/registrar.module\";\nimport { SessionModule } from \"./session/session.module\";\nimport { StorageModule } from \"./storage/storage.module\";\nimport { VALIDATION_SCHEMA } from \"./utils/config-printer/combined.schema\";\nimport { createLoggerOptions } from \"./utils/logger/logger.factory\";\nimport { VerifierModule } from \"./verifier/verifier.module\";\nimport { WellKnownController } from \"./well-known/well-known.controller\";\nimport { WellKnownService } from \"./well-known/well-known.service\";\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            validationSchema: VALIDATION_SCHEMA,\n            isGlobal: true,\n            expandVariables: true,\n        }),\n        LoggerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: createLoggerOptions,\n        }),\n        AuthModule,\n        KeyModule.forRoot(),\n        MulterModule.register({\n            storage: memoryStorage(),\n        }),\n        CryptoModule,\n        IssuerModule,\n        VerifierModule,\n        RegistrarModule,\n        ScheduleModule.forRoot(),\n        DatabaseModule,\n        SessionModule,\n        DatabaseModule,\n        HealthModule,\n        MetricModule,\n        StorageModule.forRoot(),\n    ],\n    controllers: [WellKnownController, AppController],\n    providers: [WellKnownService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AttestationBasedPolicy.html":{"url":"classes/AttestationBasedPolicy.html","title":"class - AttestationBasedPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AttestationBasedPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['attestationBased'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:80\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyCredential[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:86\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                getGlobalJwks\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getOAuth2Token\n                            \n                            \n                                    \n                                    \n                                    \n                                getOidcDiscovery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getGlobalJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGlobalJwks()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('.well-known/jwks.json')@ApiOperation({summary: 'JSON Web Key Set', description: 'Returns the JSON Web Key Set for token verification.'})@ApiResponse({status: 200, description: 'JSON Web Key Set'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:106\n                        \n                    \n\n\n            \n                \n                        Global JWKS endpoint for client credentials flow.\nThis provides the JSON Web Key Set for verifying tokens issued by this server.\n\n\n                        \n                            Returns :         KeyResponseDto\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getOAuth2Token\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOAuth2Token(body: any, headers: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('oauth2/token')@ApiBody({type: ClientCredentialsDto, examples: undefined})@ApiResponse({status: 200, description: 'OAuth2 token response', type: TokenResponse, examples: undefined})@ApiResponse({status: 401, description: 'Invalid client credentials'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:67\n                        \n                    \n\n\n            \n                \n                        OAuth2 Token endpoint - supports client credentials flow only\nAccepts client credentials either in Authorization header (Basic auth) or request body\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getOidcDiscovery\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOidcDiscovery()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('.well-known/oauth-authorization-server')@ApiOperation({summary: 'OIDC Discovery Configuration', description: 'Returns the OpenID Connect discovery configuration for client credentials authentication.'})@ApiResponse({status: 200, description: 'OIDC Discovery Configuration'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:89\n                        \n                    \n\n\n            \n                \n                        OIDC Discovery endpoint for client credentials flow.\nThis endpoint provides the OpenID Connect configuration for applications\nthat need to authenticate using client_id and client_secret.\n\n\n                        \n                            Returns :         OidcDiscoveryDto\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Headers, Post } from \"@nestjs/common\";\nimport {\n    ApiBody,\n    ApiExcludeController,\n    ApiExtraModels,\n    ApiOperation,\n    ApiResponse,\n    ApiTags,\n} from \"@nestjs/swagger\";\nimport { KeyResponseDto } from \"../crypto/key/dto/key-response.dto\";\nimport { AuthService } from \"./auth.service\";\nimport { ClientCredentialsDto } from \"./dto/client-credentials.dto\";\nimport { OidcDiscoveryDto } from \"./dto/oidc-discovery.dto\";\nimport { RoleDto } from \"./dto/role.dto\";\nimport { TokenResponse } from \"./dto/token-response.dto\";\n\n/**\n * Authentication Controller\n */\n@ApiExtraModels(RoleDto)\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiTags(\"Authentication\")\n@Controller()\nexport class AuthController {\n    constructor(private authService: AuthService) {}\n\n    /**\n     * OAuth2 Token endpoint - supports client credentials flow only\n     * Accepts client credentials either in Authorization header (Basic auth) or request body\n     * @param body\n     * @param headers\n     * @returns\n     */\n    @Post(\"oauth2/token\")\n    @ApiBody({\n        type: ClientCredentialsDto,\n        examples: {\n            client_credentials: {\n                summary: \"Client Credentials Flow\",\n                value: {\n                    grant_type: \"client_credentials\",\n                    client_id: \"root\",\n                    client_secret: \"root\",\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"OAuth2 token response\",\n        type: TokenResponse,\n        examples: {\n            success: {\n                summary: \"Successful response\",\n                value: {\n                    access_token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n                    token_type: \"Bearer\",\n                    expires_in: 86400,\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 401,\n        description: \"Invalid client credentials\",\n    })\n    getOAuth2Token(\n        @Body() body: any,\n        @Headers() headers: any,\n    ): Promise {\n        return this.authService.getOAuth2Token(body, headers);\n    }\n\n    /**\n     * OIDC Discovery endpoint for client credentials flow.\n     * This endpoint provides the OpenID Connect configuration for applications\n     * that need to authenticate using client_id and client_secret.\n     */\n    @Get(\".well-known/oauth-authorization-server\")\n    @ApiOperation({\n        summary: \"OIDC Discovery Configuration\",\n        description:\n            \"Returns the OpenID Connect discovery configuration for client credentials authentication.\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"OIDC Discovery Configuration\",\n    })\n    getOidcDiscovery(): OidcDiscoveryDto {\n        return this.authService.getOidcDiscovery();\n    }\n\n    /**\n     * Global JWKS endpoint for client credentials flow.\n     * This provides the JSON Web Key Set for verifying tokens issued by this server.\n     */\n    @Get(\".well-known/jwks.json\")\n    @ApiOperation({\n        summary: \"JSON Web Key Set\",\n        description: \"Returns the JSON Web Key Set for token verification.\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"JSON Web Key Set\",\n    })\n    getGlobalJwks(): KeyResponseDto {\n        // For now, return an empty key set since the actual keys are tenant-specific\n        // This can be enhanced later to include global signing keys if needed\n        return {\n            keys: [],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nClientModule->AuthModule\n\n\n\n\n\nTenantModule\n\nTenantModule\n\nAuthModule -->\n\nTenantModule->AuthModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            TenantModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { AuthController } from \"./auth.controller\";\nimport { JwtAuthGuard } from \"./auth.guard\";\nimport { AuthService } from \"./auth.service\";\nimport { ClientModule } from \"./client/client.module\";\nimport { JwtService } from \"./jwt.service\";\nimport { JwtStrategy } from \"./jwt.strategy\";\nimport { TenantModule } from \"./tenant/tenant.module\";\n@Module({\n    imports: [PassportModule, ConfigModule, TenantModule, ClientModule],\n    providers: [JwtStrategy, JwtAuthGuard, JwtService, AuthService],\n    controllers: [AuthController],\n    exports: [PassportModule, JwtStrategy, JwtAuthGuard, JwtService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponse.html":{"url":"interfaces/AuthResponse.html","title":"interface - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/auth-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResponse DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                        \n                                            vp_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state parameter to maintain state between the request and callback.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vp_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        vp_token:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The VP token containing the presentation data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthResponse {\n    /**\n     * The VP token containing the presentation data.\n     */\n    vp_token: {\n        /**\n         * Key-value pairs representing the VP token data.\n         */\n        [key: string]: string;\n    };\n    /**\n     * The state parameter to maintain state between the request and callback.\n     */\n    state: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getOAuth2Token\n                            \n                            \n                                getOidcDiscovery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, clients: InternalClientsProvider, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            Constructor for AuthService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                        JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clients\n                                                  \n                                                        \n                                                                        InternalClientsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOAuth2Token\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOAuth2Token(body: any, headers: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Get OAuth2 token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOidcDiscovery\n                        \n                    \n                \n            \n            \n                \ngetOidcDiscovery()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:119\n                        \n                    \n\n\n            \n                \n                        Get OIDC Discovery configuration\n\n\n                        \n                            Returns :         OidcDiscoveryDto\n\n                        \n                            \n                                OIDC Discovery configuration\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InternalClientsProvider } from \"./client/adapters/internal-clients.service\";\nimport { CLIENTS_PROVIDER } from \"./client/client.provider\";\nimport { OidcDiscoveryDto } from \"./dto/oidc-discovery.dto\";\nimport { TokenResponse } from \"./dto/token-response.dto\";\nimport { JwtService } from \"./jwt.service\";\nimport { InternalTokenPayload } from \"./token.decorator\";\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n    /**\n     * Constructor for AuthService\n     * @param jwtService\n     * @param tenantService\n     * @param configService\n     */\n    constructor(\n        private jwtService: JwtService,\n        @Inject(CLIENTS_PROVIDER) private clients: InternalClientsProvider,\n        private configService: ConfigService,\n    ) {}\n\n    /**\n     * Get OAuth2 token\n     * @param body\n     * @param headers\n     * @returns\n     */\n    async getOAuth2Token(body: any, headers: any): Promise {\n        if (this.jwtService.isUsingExternalOIDC()) {\n            throw new UnauthorizedException(\n                \"OAuth2 token endpoint is not available when using external OIDC provider. Use your external OIDC provider for authentication.\",\n            );\n        }\n\n        // Only support client credentials flow\n        if (body.grant_type !== \"client_credentials\") {\n            throw new UnauthorizedException(\n                \"Only client_credentials grant type is supported\",\n            );\n        }\n\n        let clientId: string;\n        let clientSecret: string;\n\n        // Try to extract credentials from Authorization header (Basic auth)\n        const authHeader = headers.authorization;\n        if (authHeader && authHeader.startsWith(\"Basic \")) {\n            try {\n                const base64Credentials = authHeader.substring(6);\n                const credentials = Buffer.from(\n                    base64Credentials,\n                    \"base64\",\n                ).toString(\"ascii\");\n                const [id, secret] = credentials.split(\":\");\n                clientId = decodeURI(id);\n                clientSecret = decodeURI(secret);\n            } catch {\n                throw new UnauthorizedException(\n                    \"Invalid Authorization header format\",\n                );\n            }\n        } else {\n            // Fall back to request body\n            clientId = body.client_id;\n            clientSecret = body.client_secret;\n        }\n\n        if (!clientId || !clientSecret) {\n            throw new UnauthorizedException(\n                \"Client credentials must be provided either in Authorization header (Basic auth) or request body\",\n            );\n        }\n\n        const client = await this.clients.validateClientCredentials(\n            clientId,\n            clientSecret,\n        );\n\n        if (!client) {\n            throw new UnauthorizedException(\"Invalid client credentials\");\n        }\n\n        const payload: InternalTokenPayload = {\n            roles: client.roles,\n            tenant_id: client.tenantId!,\n        };\n\n        //TODO: make expiresIn configurable?\n        const access_token = await this.jwtService.generateToken(payload, {\n            expiresIn: \"24h\",\n            audience: \"eudiplo-service\",\n            //TODO: check if the clientId should be saved here or somewhere else like in client_id\n            subject: clientId,\n        });\n\n        const refresh_token = await this.jwtService.generateToken(payload, {\n            expiresIn: \"30d\",\n            audience: \"eudiplo-service\",\n            subject: clientId,\n        });\n\n        return {\n            access_token,\n            refresh_token,\n            token_type: \"Bearer\",\n            expires_in: 86400, // 24 hours in seconds\n        };\n    }\n\n    /**\n     * Get OIDC Discovery configuration\n     * @returns OIDC Discovery configuration\n     */\n    getOidcDiscovery(): OidcDiscoveryDto {\n        const publicUrl = this.configService.getOrThrow(\"PUBLIC_URL\");\n        const oidc = this.configService.get(\"OIDC\");\n\n        return {\n            issuer: oidc ?? publicUrl,\n            token_endpoint: `${publicUrl}/oauth2/token`,\n            jwks_uri: `${publicUrl}/.well-known/jwks.json`,\n            response_types_supported: [\"token\"],\n            grant_types_supported: [\"client_credentials\"],\n            token_endpoint_auth_methods_supported: [\n                \"client_secret_basic\",\n                \"client_secret_post\",\n            ],\n            subject_types_supported: [\"public\"],\n            id_token_signing_alg_values_supported: [\"ES256\"],\n            scopes_supported: [\"openid\"],\n            claims_supported: [\"iss\", \"sub\", \"aud\", \"exp\", \"iat\"],\n            service_documentation:\n                \"https://openwallet-foundation-labs.github.io/eudiplo/latest/\",\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationMethodAuth.html":{"url":"classes/AuthenticationMethodAuth.html","title":"class - AuthenticationMethodAuth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationMethodAuth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AuthenticationMethodInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationUrlConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['auth'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:59\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticationMethodInterface.html":{"url":"interfaces/AuthenticationMethodInterface.html","title":"interface - AuthenticationMethodInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticationMethodInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            method\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:     \"none\" | \"auth\" | \"presentationDuringIssuance\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"none\" | \"auth\" | \"presentationDuringIssuance\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationMethodNone.html":{"url":"classes/AuthenticationMethodNone.html","title":"class - AuthenticationMethodNone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationMethodNone\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AuthenticationMethodInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['none'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:69\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationMethodPresentation.html":{"url":"classes/AuthenticationMethodPresentation.html","title":"class - AuthenticationMethodPresentation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationMethodPresentation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AuthenticationMethodInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationDuringIssuanceConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['presentationDuringIssuance'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationUrlConfig.html":{"url":"classes/AuthenticationUrlConfig.html","title":"class - AuthenticationUrlConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationUrlConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'auth'\nUsed for OID4VCI authorized code flow where the user will be redirected for authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                url\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:21\n                        \n                    \n\n            \n                \n                    The URL used in the OID4VCI authorized code flow.\nThis URL is where users will be redirected for authentication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:29\n                        \n                    \n\n            \n                \n                    Optional webhook configuration for authentication callbacks\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationResponse.html":{"url":"classes/AuthorizationResponse.html","title":"class - AuthorizationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/authorization-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO including wallet metadata according to https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-request-uri-method-post\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                wallet_metadata\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                wallet_nonce\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        wallet_metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-request.dto.ts:12\n                        \n                    \n\n            \n                \n                    JSON encoded wallet metadata\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        wallet_nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-request.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\n/**\n * DTO including wallet metadata according to https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-request-uri-method-post\n */\nexport class AuthorizationResponse {\n    /**\n     * JSON encoded wallet metadata\n     */\n    @IsString()\n    @IsOptional()\n    wallet_metadata?: string;\n\n    @IsString()\n    @IsOptional()\n    wallet_nonce?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationResponse-1.html":{"url":"classes/AuthorizationResponse-1.html","title":"class - AuthorizationResponse-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/authorization-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the authorization response containing the VP token.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                response\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                sendResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The response string containing the authorization details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        sendResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-response.dto.ts:18\n                        \n                    \n\n            \n                \n                    When set to true, the authorization response will be sent to the client.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsOptional, IsString } from \"class-validator\";\n\n/**\n * DTO for the authorization response containing the VP token.\n */\nexport class AuthorizationResponse {\n    /**\n     * The response string containing the authorization details.\n     */\n    @IsString()\n    response: string;\n\n    /**\n     * When set to true, the authorization response will be sent to the client.\n     */\n    @IsBoolean()\n    @IsOptional()\n    sendResponse?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorizeController.html":{"url":"controllers/AuthorizeController.html","title":"controller - AuthorizeController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AuthorizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.controller.ts\n        \n            \n                Prefix\n            \n            \n                :session/authorize\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI authorization endpoints.\nThis controller handles the authorization requests, token requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorizationChallengeEndpoint\n                            \n                            \n                                    \n                                authorize\n                            \n                            \n                                    \n                                    \n                                    Async\n                                par\n                            \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(req: Request, res: Response, body: AuthorizeQueries, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('challenge')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:81\n                        \n                    \n\n\n            \n                \n                        Endpoint for the authorization challenge.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorize\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorize(queries: AuthorizeQueries, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Authorization Request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        par\n                        \n                    \n                \n            \n            \n                \n                        \n                    par(body: AuthorizeQueries)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'Pushed Authorization Request', type: AuthorizeQueries})@Post('par')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:44\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Pushed Authorization Request (PAR).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n            \n                \n                        \n                    token(body: any, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:65\n                        \n                    \n\n\n            \n                \n                        Endpoint to validate the token request.\nThis endpoint is used to exchange the authorization code for an access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { Body, Controller, Get, Post, Query, Req, Res } from \"@nestjs/common\";\nimport { ApiBody, ApiExcludeController } from \"@nestjs/swagger\";\nimport type { Request, Response } from \"express\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionService } from \"../../session/session.service\";\nimport { AuthorizeService } from \"./authorize.service\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\nimport { ParResponseDto } from \"./dto/par-response.dto\";\n\n/**\n * Controller for the OpenID4VCI authorization endpoints.\n * This controller handles the authorization requests, token requests.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@Controller(\":session/authorize\")\nexport class AuthorizeController {\n    constructor(\n        private readonly authorizeService: AuthorizeService,\n        private sessionService: SessionService,\n    ) {}\n\n    /**\n     * Endpoint to handle the Authorization Request.\n     * @param queries\n     * @param res\n     */\n    @Get()\n    authorize(@Query() queries: AuthorizeQueries, @Res() res: Response) {\n        return this.authorizeService.sendAuthorizationResponse(queries, res);\n    }\n\n    /**\n     * Endpoint to handle the Pushed Authorization Request (PAR).\n     * @param body\n     * @returns\n     */\n    @ApiBody({\n        description: \"Pushed Authorization Request\",\n        type: AuthorizeQueries,\n    })\n    @Post(\"par\")\n    async par(@Body() body: AuthorizeQueries): Promise {\n        const request_uri = `urn:${randomUUID()}`;\n        // save both so we can retrieve the session also via the request_uri in the authorize step.\n        await this.sessionService.add(body.issuer_state!, {\n            request_uri,\n            auth_queries: body,\n        });\n        return {\n            expires_in: 500,\n            request_uri,\n        };\n    }\n\n    /**\n     * Endpoint to validate the token request.\n     * This endpoint is used to exchange the authorization code for an access token.\n     * @param body\n     * @param req\n     * @returns\n     */\n    @Post(\"token\")\n    token(\n        @Body() body: any,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        //TODO: define body\n        return this.authorizeService.validateTokenRequest(body, req, session);\n    }\n\n    /**\n     * Endpoint for the authorization challenge.\n     * @param res\n     * @param body\n     * @returns\n     */\n    @Post(\"challenge\")\n    authorizationChallengeEndpoint(\n        @Req() req: Request,\n        @Res() res: Response,\n        @Body() body: AuthorizeQueries,\n        @SessionEntity() session: Session,\n    ) {\n        const origin = req.headers.origin || `https://${req.headers.host}`;\n        return this.authorizeService.authorizationChallengeEndpoint(\n            res,\n            body,\n            session,\n            origin,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizeQueries.html":{"url":"classes/AuthorizeQueries.html","title":"class - AuthorizeQueries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizeQueries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/authorize-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                auth_session\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                client_id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge_method\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dpop_jkt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                issuer_state\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                redirect_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resource\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        auth_session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge_method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dpop_jkt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        issuer_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        redirect_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\nexport class AuthorizeQueries {\n    @IsOptional()\n    @IsString()\n    issuer_state?: string;\n    @IsOptional()\n    @IsString()\n    response_type?: string;\n    @IsOptional()\n    @IsString()\n    client_id?: string;\n    @IsOptional()\n    @IsString()\n    redirect_uri?: string;\n    @IsOptional()\n    @IsString()\n    resource?: string;\n    @IsOptional()\n    @IsString()\n    scope?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge_method?: string;\n    @IsOptional()\n    @IsString()\n    dpop_jkt?: string;\n    @IsOptional()\n    @IsString()\n    request_uri?: string;\n    @IsOptional()\n    @IsString()\n    auth_session?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizeService.html":{"url":"injectables/AuthorizeService.html","title":"injectable - AuthorizeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authorizationChallengeEndpoint\n                            \n                            \n                                    Async\n                                authzMetadata\n                            \n                            \n                                getAuthorizationServer\n                            \n                            \n                                    Async\n                                parseChallengeRequest\n                            \n                            \n                                    Private\n                                    Async\n                                sendAuthorizationCode\n                            \n                            \n                                    Async\n                                sendAuthorizationResponse\n                            \n                            \n                                    Async\n                                setAuthCode\n                            \n                            \n                                    Async\n                                validateTokenRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, oid4vpService: Oid4vpService, sessionService: SessionService, issuanceService: IssuanceService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/authorize/authorize.service.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vpService\n                                                  \n                                                        \n                                                                        Oid4vpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response>, body: AuthorizeQueries, session: Session, origin: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:244\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                origin\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    authzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthorizationServer\n                        \n                    \n                \n            \n            \n                \ngetAuthorizationServer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Oauth2AuthorizationServer\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        parseChallengeRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseChallengeRequest(body: AuthorizeQueries, session: Session, origin: string, webhook?: WebhookConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:216\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                origin\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                webhook\n                                            \n                                                            WebhookConfig\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        sendAuthorizationCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationCode(res: Response, issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:318\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendAuthorizationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationResponse(queries: AuthorizeQueries, res: Response>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setAuthCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAuthCode(issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:325\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateTokenRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateTokenRequest(body: any, req: Request, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { AuthenticationMethodPresentation } from \"../issuance/dto/authentication-config.dto\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    async authzMetadata(\n        session: Session,\n    ): Promise {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: issuanceConfig.dPopRequired\n                ? [\"ES256\"]\n                : undefined,\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n\n        const authorizationServerMetadata = await this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: req.body.client_id,\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        session: Session,\n        origin: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        //use the issuanceId to get the presentationId.\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n        const presentationConfig = (\n            issuanceConfig.authenticationConfig as AuthenticationMethodPresentation\n        ).config.type;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(presentationConfig, { session: auth_session, webhook }, session.tenantId, session.useDcApi, origin)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n        origin: string,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session,\n                    origin,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CertEntity.html":{"url":"entities/CertEntity.html","title":"entity - CertEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  CertEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/cert.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage certificates for keys.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                crt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:57\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:39\n                        \n                    \n\n            \n                \n                    Certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:51\n                        \n                    \n\n            \n                \n                    Description of the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:33\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:27\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CertificateType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'signing', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:45\n                        \n                    \n\n            \n                \n                    Type of the certificate (access or signing).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:63\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\n\nexport type CertificateType = \"access\" | \"signing\";\n\n/**\n * Entity to manage certificates for keys.\n */\n@Entity()\nexport class CertEntity {\n    /**\n     * Unique identifier for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Certificate in PEM format.\n     */\n    @Column(\"varchar\")\n    crt: string;\n\n    /**\n     * Type of the certificate (access or signing).\n     */\n    @Column(\"varchar\", { default: \"signing\", primary: true })\n    type: CertificateType;\n\n    /**\n     * Description of the key.\n     */\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Claim.html":{"url":"classes/Claim.html","title":"class - Claim","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Claim\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                path\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\nexport class Claim {\n    @IsArray()\n    path: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => Claim)\n    claims?: Claim[];\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClaimsQuery.html":{"url":"classes/ClaimsQuery.html","title":"class - ClaimsQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClaimsQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                path\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:94\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\nexport class Claim {\n    @IsArray()\n    path: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => Claim)\n    claims?: Claim[];\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ClientController.html":{"url":"controllers/ClientController.html","title":"controller - ClientController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  ClientController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client/client.controller.ts\n        \n            \n                Prefix\n            \n            \n                client\n            \n\n\n            \n                Description\n            \n            \n                Controller to manage clients.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createClient\n                            \n                            \n                                    \n                                deleteClient\n                            \n                            \n                                    \n                                getClient\n                            \n                            \n                                    \n                                getClients\n                            \n                            \n                                    \n                                getClientSecret\n                            \n                            \n                                    \n                                updateClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    createClient(createClientDto: CreateClientDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/client/client.controller.ts:83\n                        \n                    \n\n\n            \n                \n                        Create a new client\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createClientDto\n                                            \n                                                            CreateClientDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteClient(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/client/client.controller.ts:97\n                        \n                    \n\n\n            \n                \n                        Get a client by its id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClient(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/client/client.controller.ts:46\n                        \n                    \n\n\n            \n                \n                        Get a client by its id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClients(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/client/client.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Get all clients for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getClientSecret\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClientSecret(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/secret')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/client/client.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateClient(id: string, updateClientDto: UpdateClientDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/client/client.controller.ts:68\n                        \n                    \n\n\n            \n                \n                        Update a client by its id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateClientDto\n                                            \n                                                            UpdateClientDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Inject,\n    Param,\n    Patch,\n    Post,\n} from \"@nestjs/common\";\nimport { ApiTags } from \"@nestjs/swagger\";\nimport { Role } from \"../roles/role.enum\";\nimport { Secured } from \"../secure.decorator\";\nimport { Token, TokenPayload } from \"../token.decorator\";\nimport { CLIENTS_PROVIDER, ClientsProvider } from \"./client.provider\";\nimport { ClientSecretResponseDto } from \"./dto/client-secret-response.dto\";\nimport { CreateClientDto } from \"./dto/create-client.dto\";\nimport { UpdateClientDto } from \"./dto/update-client.dto\";\n\n/**\n * Controller to manage clients.\n */\n@ApiTags(\"client\")\n@Secured([Role.Clients, Role.Tenants])\n@Controller(\"client\")\nexport class ClientController {\n    constructor(@Inject(CLIENTS_PROVIDER) private clients: ClientsProvider) {}\n\n    /**\n     * Get all clients for a user\n     * @param user\n     * @returns\n     */\n    @Get()\n    getClients(@Token() user: TokenPayload) {\n        return this.clients.getClients(user.entity!.id);\n    }\n\n    /**\n     * Get a client by its id\n     * @param id\n     * @param user\n     * @returns\n     */\n    @Get(\":id\")\n    getClient(@Param(\"id\") id: string, @Token() user: TokenPayload) {\n        return this.clients.getClient(user.entity!.id, id);\n    }\n\n    @Get(\":id/secret\")\n    getClientSecret(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ): Promise {\n        return this.clients\n            .getClientSecret(user.entity!.id, id)\n            .then((secret) => ({ secret }));\n    }\n\n    /**\n     * Update a client by its id\n     * @param id\n     * @param updateClientDto\n     * @param user\n     * @returns\n     */\n    @Patch(\":id\")\n    updateClient(\n        @Param(\"id\") id: string,\n        @Body() updateClientDto: UpdateClientDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.clients.updateClient(user.entity!.id, id, updateClientDto);\n    }\n\n    /**\n     * Create a new client\n     * @param createClientDto\n     * @param user\n     * @returns\n     */\n    @Post()\n    createClient(\n        @Body() createClientDto: CreateClientDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.clients.addClient(user.entity!.id, createClientDto);\n    }\n\n    /**\n     * Get a client by its id\n     * @param id\n     * @param user\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteClient(@Param(\"id\") id: string, @Token() user: TokenPayload) {\n        return this.clients.removeClient(user.entity!.id, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientCredentialsDto.html":{"url":"classes/ClientCredentialsDto.html","title":"class - ClientCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                client_id\n                            \n                            \n                                    \n                                client_secret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\n\nexport class ClientCredentialsDto {\n    @IsString()\n    client_id: string;\n    @IsString()\n    client_secret: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ClientEntity.html":{"url":"entities/ClientEntity.html","title":"entity - ClientEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  ClientEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client/entities/client.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a client in the system that belongs to a tenant.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                clientId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                secret\n                            \n                            \n                                    \n                                    Optional\n                                tenant\n                            \n                            \n                                    \n                                    Optional\n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        clientId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/client/entities/client.entity.ts:16\n                        \n                    \n\n            \n                \n                    The unique identifier for the client.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/client/entities/client.entity.ts:37\n                        \n                    \n\n            \n                \n                    The description of the client.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Role, {each: true})@Column({type: 'json'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/client/entities/client.entity.ts:44\n                        \n                    \n\n            \n                \n                    The roles assigned to the client.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/client/entities/client.entity.ts:23\n                        \n                    \n\n            \n                \n                    The secret key for the client.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, tenant => tenant.clients, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/client/entities/client.entity.ts:54\n                        \n                    \n\n            \n                \n                    The tenant that the client belongs to.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/client/entities/client.entity.ts:29\n                        \n                    \n\n            \n                \n                    The unique identifier for the tenant that the client belongs to. Only null for accounts that manage tenants, that do not belong to a client\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsEnum, IsOptional, IsString } from \"class-validator\";\nimport { Column, Entity, ManyToOne, PrimaryColumn } from \"typeorm\";\nimport { Role } from \"../../roles/role.enum\";\nimport { TenantEntity } from \"../../tenant/entitites/tenant.entity\";\n\n/**\n * Represents a client in the system that belongs to a tenant.\n */\n@Entity()\nexport class ClientEntity {\n    /**\n     * The unique identifier for the client.\n     */\n    @IsString()\n    @PrimaryColumn()\n    clientId: string;\n\n    /**\n     * The secret key for the client.\n     */\n    @IsString()\n    @Column({ nullable: true })\n    secret?: string;\n\n    /**\n     * The unique identifier for the tenant that the client belongs to. Only null for accounts that manage tenants, that do not belong to a client\n     */\n    @Column({ nullable: true, primary: true })\n    tenantId?: string;\n\n    /**\n     * The description of the client.\n     */\n    @IsString()\n    @IsOptional()\n    @Column({ nullable: true })\n    description?: string;\n\n    /**\n     * The roles assigned to the client.\n     */\n    @IsEnum(Role, { each: true })\n    @Column({ type: \"json\" })\n    roles: Role[];\n\n    /**\n     * The tenant that the client belongs to.\n     */\n    @ManyToOne(\n        () => TenantEntity,\n        (tenant) => tenant.clients,\n        { onDelete: \"CASCADE\" },\n    )\n    tenant?: TenantEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClientModule.html":{"url":"modules/ClientModule.html","title":"module - ClientModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    ClientModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/client/client.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ClientController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { getRepositoryToken, TypeOrmModule } from \"@nestjs/typeorm\";\nimport { makeGaugeProvider } from \"@willsoto/nestjs-prometheus\";\nimport { PinoLogger } from \"nestjs-pino/PinoLogger\";\nimport { Repository } from \"typeorm\";\nimport { InternalClientsProvider } from \"./adapters/internal-clients.service\";\nimport { KeycloakClientsProvider } from \"./adapters/keycloak-clients.service\";\nimport { ClientController } from \"./client.controller\";\nimport { CLIENTS_PROVIDER, ClientsProvider } from \"./client.provider\";\nimport { ClientEntity } from \"./entities/client.entity\";\n\n@Module({\n    imports: [TypeOrmModule.forFeature([ClientEntity])],\n    providers: [\n        {\n            provide: CLIENTS_PROVIDER,\n            inject: [\n                ConfigService,\n                getRepositoryToken(ClientEntity),\n                PinoLogger,\n            ],\n            useFactory: (\n                cfg: ConfigService,\n                repo: Repository,\n                Logger: PinoLogger,\n            ): ClientsProvider => {\n                const useKeycloak = !!cfg.get(\"OIDC\"); // if OIDC base/realm is configured, pick KC\n                return useKeycloak\n                    ? new KeycloakClientsProvider(cfg, repo)\n                    : new InternalClientsProvider(cfg, Logger, repo);\n            },\n        },\n        makeGaugeProvider({\n            name: \"tenant_total\",\n            help: \"Total number of tenants\",\n        }),\n    ],\n    exports: [CLIENTS_PROVIDER],\n    controllers: [ClientController],\n})\nexport class ClientModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientSecretResponseDto.html":{"url":"classes/ClientSecretResponseDto.html","title":"class - ClientSecretResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientSecretResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client/dto/client-secret-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                secret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/client/dto/client-secret-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ClientSecretResponseDto {\n    secret: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClientsProvider.html":{"url":"interfaces/ClientsProvider.html","title":"interface - ClientsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ClientsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client/client.provider.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addClient\n                                    \n                                \n                                \n                                    \n                                        getClient\n                                    \n                                \n                                \n                                    \n                                        getClients\n                                    \n                                \n                                \n                                    \n                                        getClientSecret\n                                    \n                                \n                                \n                                    \n                                        import\n                                    \n                                \n                                \n                                    \n                                        removeClient\n                                    \n                                \n                                \n                                    \n                                        updateClient\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        validateClientCredentials\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addClient\n                        \n                    \n                \n            \n            \n                \naddClient(tenantId: string, dto: CreateClientDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/client.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateClientDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient(tenantId: string, clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/client.provider.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClients\n                        \n                    \n                \n            \n            \n                \ngetClients(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/client.provider.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClientSecret\n                        \n                    \n                \n            \n            \n                \ngetClientSecret(sub: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/client.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        import\n                        \n                    \n                \n            \n            \n                \nimport()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/client.provider.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeClient\n                        \n                    \n                \n            \n            \n                \nremoveClient(tenantId: string, clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/client.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateClient\n                        \n                    \n                \n            \n            \n                \nupdateClient(tenantId: string, clientId: string, updateClientDto: UpdateClientDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/client.provider.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateClientDto\n                                            \n                                                            UpdateClientDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        validateClientCredentials\n                        \n                    \n                \n            \n            \n                \nvalidateClientCredentials(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/client.provider.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateClientDto } from \"./dto/create-client.dto\";\nimport { UpdateClientDto } from \"./dto/update-client.dto\";\nimport { ClientEntity } from \"./entities/client.entity\";\n\nexport const CLIENTS_PROVIDER = \"CLIENTS_PROVIDER\";\n\nexport interface ClientsProvider {\n    updateClient(\n        tenantId: string,\n        clientId: string,\n        updateClientDto: UpdateClientDto,\n    ): unknown;\n    getClientSecret(sub: string, id: string): Promise;\n    getClients(tenantId: string): Promise;\n    getClient(tenantId: string, clientId: string): Promise;\n    addClient(tenantId: string, dto: CreateClientDto): Promise;\n    removeClient(tenantId: string, clientId: string): Promise;\n    import(): Promise;\n\n    // Only for internal backend (not used with KC; you’ll validate JWTs instead)\n    validateClientCredentials?(\n        clientId: string,\n        clientSecret: string,\n    ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateClientDto.html":{"url":"classes/CreateClientDto.html","title":"class - CreateClientDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateClientDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client/dto/create-client.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(ClientEntity, [\n    \"tenant\",\n    \"tenantId\",\n    \"secret\"\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { ClientEntity } from \"../entities/client.entity\";\n\nexport class CreateClientDto extends OmitType(ClientEntity, [\n    \"tenant\",\n    \"tenantId\",\n    \"secret\"\n] as const) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTenantDto.html":{"url":"classes/CreateTenantDto.html","title":"class - CreateTenantDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTenantDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant/dto/create-tenant.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(TenantEntity, [\n    \"clients\",\n    \"status\",\n] as const)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/tenant/dto/create-tenant.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { Role } from \"../../roles/role.enum\";\nimport { TenantEntity } from \"../entitites/tenant.entity\";\n\nexport class CreateTenantDto extends OmitType(TenantEntity, [\n    \"clients\",\n    \"status\",\n] as const) {\n    @IsOptional()\n    @IsString({ each: true })\n    roles?: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CredentialConfig.html":{"url":"entities/CredentialConfig.html","title":"entity - CredentialConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  CredentialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                disclosureFrame\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                embeddedDisclosurePolicy\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                issuanceConfigs\n                            \n                            \n                                    \n                                key\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                keyBinding\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                keyId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lifeTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusManagement\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IssuerMetadataCredentialConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        disclosureFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        embeddedDisclosurePolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EmbeddedDisclosurePolicy\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@ApiProperty({oneOf: undefined})@Type(undefined, {discriminator: undefined, keepDiscriminatorProperty: true})@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:172\n                        \n                    \n\n            \n                \n                    Embedded disclosure policy (discriminated union by policy).\nThe discriminator makes class-transformer instantiate the right subclass,\nand then class-validator runs that subclass’s rules.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IssuanceConfig[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, issuance => issuance.credentialConfigs, {cascade: undefined, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:179\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CertEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'SET NULL'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        keyBinding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('boolean', {default: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        keyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lifeTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('int', {nullable: true})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SchemaResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:139\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusManagement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('boolean', {default: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:90\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VCT\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:111\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // --- credential-config.entity.ts ---\n\nimport {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToMany, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../../issuance/entities/issuance-config.entity\";\nimport {\n    AllowListPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    RootOfTrustPolicy,\n} from \"./policies.dto\";\n\nexport class DisplayImage {\n    @IsString()\n    uri: string;\n}\nexport class Display {\n    @IsString()\n    name: string;\n    @IsString()\n    description: string;\n    @IsString()\n    locale: string;\n    @IsString()\n    background_color?: string;\n    @IsString()\n    text_color?: string;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    background_image?: DisplayImage;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    logo?: DisplayImage;\n}\n\nexport class IssuerMetadataCredentialConfig {\n    @IsString()\n    format: string;\n    @ValidateNested()\n    @Type(() => Display)\n    display: Display[];\n    @IsOptional()\n    @IsString()\n    scope?: string;\n}\n\n@ApiExtraModels(\n    AttestationBasedPolicy,\n    NoneTrustPolicy,\n    AllowListPolicy,\n    RootOfTrustPolicy,\n)\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => IssuerMetadataCredentialConfig)\n    config!: IssuerMetadataCredentialConfig;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity, { onDelete: \"SET NULL\" })\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AttestationBasedPolicy) },\n            { $ref: getSchemaPath(NoneTrustPolicy) },\n            { $ref: getSchemaPath(AllowListPolicy) },\n            { $ref: getSchemaPath(RootOfTrustPolicy) },\n        ],\n    })\n    @Type(() => AttestationBasedPolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: \"none\", value: NoneTrustPolicy },\n                { name: \"allowList\", value: AllowListPolicy },\n                { name: \"rootOfTrust\", value: RootOfTrustPolicy },\n                {\n                    name: \"attestationBased\",\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuance) => issuance.credentialConfigs,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    issuanceConfigs!: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialConfigCreate.html":{"url":"classes/CredentialConfigCreate.html","title":"class - CredentialConfigCreate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialConfigCreate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/dto/credential-config-create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(CredentialConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"issuanceConfigs\",\n    \"key\",\n])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { CredentialConfig } from \"../entities/credential.entity\";\n\nexport class CredentialConfigCreate extends OmitType(CredentialConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"issuanceConfigs\",\n    \"key\",\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialConfigMapping.html":{"url":"classes/CredentialConfigMapping.html","title":"class - CredentialConfigMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialConfigMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for mapping credential configurations in issuance.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:13\n                        \n                    \n\n            \n                \n                    Unique identifier for the credential configuration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\nimport { IssuanceConfig } from \"../entities/issuance-config.entity\";\n\n/**\n * DTO for mapping credential configurations in issuance.\n */\nexport class CredentialConfigMapping {\n    /**\n     * Unique identifier for the credential configuration.\n     */\n    @IsString()\n    id: string;\n}\n\n/**\n * DTO for mapping issuance configurations.\n */\nexport class IssuanceDto extends OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"credentialConfigs\",\n] as const) {\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    credentialConfigIds: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialConfigService.html":{"url":"injectables/CredentialConfigService.html","title":"injectable - CredentialConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credential-config/credential-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credential configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(credentialConfigRepository: Repository, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoService, filesService: FilesService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credential-config/credential-config.service.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialConfigService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        credentialConfigRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for CredentialConfig entity.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:249\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the CredentialConfig entity to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the result of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:209\n                        \n                    \n\n\n            \n                \n                        Retrieves all credential configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CredentialConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:222\n                        \n                    \n\n\n            \n                \n                        Retrieves a credential configuration by its ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Imports the configs\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:200\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore(tenantId: string, config: CredentialConfigCreate)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:236\n                        \n                    \n\n\n            \n                \n                        Stores a credential configuration for a given tenant.\nIf the configuration already exists, it will be overwritten.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                config\n                                            \n                                                            CredentialConfigCreate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CredentialConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored CredentialConfig entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../../crypto/crypto.service\";\nimport { FilesService } from \"../../../storage/files.service\";\nimport { CredentialConfigCreate } from \"../dto/credential-config-create.dto\";\nimport { CredentialConfig } from \"../entities/credential.entity\";\n\n/**\n * Service for managing credential configurations.\n */\n@Injectable()\nexport class CredentialConfigService {\n    /**\n     * Constructor for CredentialConfigService.\n     * @param credentialConfigRepository - Repository for CredentialConfig entity.\n     */\n    constructor(\n        @InjectRepository(CredentialConfig)\n        private readonly credentialConfigRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoService,\n        private filesService: FilesService,\n    ) {}\n\n    /**\n     * Imports the configs\n     */\n    public async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"issuance/credentials\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    try {\n                        const payload = JSON.parse(\n                            readFileSync(join(path, file), \"utf8\"),\n                        );\n\n                        const id = file.replace(\".json\", \"\");\n                        payload.id = id;\n                        const exists = await this.getById(\n                            tenant.name,\n                            id,\n                        ).catch(() => false);\n                        if (exists && !force) {\n                            continue; // Skip if config already exists and force is not set\n                        } else if (exists && force) {\n                            //delete old element so removed elements are not present\n                            await this.credentialConfigRepository.delete({\n                                id,\n                                tenantId: tenant.name,\n                            });\n                        }\n\n                        // Validate the payload against CredentialConfig\n                        const config = plainToClass(\n                            CredentialConfigCreate,\n                            payload,\n                        );\n                        const validationErrors = await validate(config, {\n                            whitelist: true,\n                            forbidUnknownValues: false, // avoid false positives on plain objects\n                            forbidNonWhitelisted: false,\n                            stopAtFirstError: false,\n                        });\n\n                        //check for image references and replace them with the actual urls\n                        config.config.display = await Promise.all(\n                            config.config.display.map(async (display) => {\n                                if (display.background_image?.uri) {\n                                    const url =\n                                        await this.filesService.replaceUriWithPublicUrl(\n                                            tenant.name,\n                                            display.background_image.uri,\n                                        );\n                                    if (url) {\n                                        display.background_image.uri = url;\n                                    } else {\n                                        this.logger.warn(\n                                            {\n                                                event: \"ImportWarning\",\n                                                file,\n                                                tenant: tenant.name,\n                                                uri: display.background_image\n                                                    .uri,\n                                            },\n                                            `Could not find image ${display.background_image.uri} for credentials config ${file} in tenant ${tenant.name}`,\n                                        );\n                                    }\n                                }\n                                if (display.logo?.uri) {\n                                    const url =\n                                        await this.filesService.replaceUriWithPublicUrl(\n                                            tenant.name,\n                                            display.logo.uri,\n                                        );\n                                    if (url) {\n                                        display.logo.uri = url;\n                                    } else {\n                                        this.logger.warn(\n                                            {\n                                                event: \"ImportWarning\",\n                                                file,\n                                                tenant: tenant.name,\n                                                uri: display.logo.uri,\n                                            },\n                                            `Could not find image ${display.logo.uri} for credentials config ${file} in tenant ${tenant.name}`,\n                                        );\n                                    }\n                                }\n\n                                return display;\n                            }),\n                        );\n\n                        // Check if keyId is provided and if the certificate exists\n                        if (config.keyId) {\n                            const cert = await this.cryptoService.getCertEntry(\n                                tenant.name,\n                                config.keyId,\n                            );\n                            if (!cert) {\n                                this.logger.error(\n                                    {\n                                        event: \"ValidationError\",\n                                        file,\n                                        tenant: tenant.name,\n                                        errors: [\n                                            {\n                                                property: \"keyId\",\n                                                constraints: {\n                                                    isDefined:\n                                                        \"Key ID must be defined in the crypto service.\",\n                                                },\n                                                value: config.keyId,\n                                            },\n                                        ],\n                                    },\n                                    `Validation failed for credentials config ${file} in tenant ${tenant.name}`,\n                                );\n                                continue; // Skip this invalid config\n                            }\n                            (config as CredentialConfig).key = cert;\n                        }\n\n                        if (validationErrors.length > 0) {\n                            this.logger.error(\n                                {\n                                    event: \"ValidationError\",\n                                    file,\n                                    tenant: tenant.name,\n                                    //we need to extract the constraints because they tell what is wrong, also from the children elements\n                                    errors: validationErrors,\n                                },\n                                `Validation failed for credentials config ${file} in tenant ${tenant.name}`,\n                            );\n                            continue; // Skip this invalid config\n                        }\n\n                        await this.store(tenant.name, config);\n                        counter++;\n                    } catch (e) {\n                        this.logger.error(\n                            {\n                                event: \"ImportError\",\n                                file,\n                                tenant: tenant.name,\n                                error: e.message,\n                            },\n                            `Failed to import credentials config ${file} in tenant ${tenant.name}`,\n                        );\n                    }\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} credential configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    async onTenantDelete(tenantId: string) {\n        await this.credentialConfigRepository.delete({ tenantId });\n    }\n\n    /**\n     * Retrieves all credential configurations for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @returns A promise that resolves to an array of CredentialConfig entities.\n     */\n    get(tenantId: string) {\n        return this.credentialConfigRepository.find({\n            where: { tenantId },\n            relations: [\"key\"],\n        });\n    }\n\n    /**\n     * Retrieves a credential configuration by its ID for a given tenant.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    getById(tenantId: string, id: string) {\n        return this.credentialConfigRepository.findOneByOrFail({\n            id,\n            tenantId,\n        });\n    }\n\n    /**\n     * Stores a credential configuration for a given tenant.\n     * If the configuration already exists, it will be overwritten.\n     * @param tenantId - The ID of the tenant.\n     * @param config - The CredentialConfig entity to store.\n     * @returns A promise that resolves to the stored CredentialConfig entity.\n     */\n    store(tenantId: string, config: CredentialConfigCreate) {\n        return this.credentialConfigRepository.save({\n            ...config,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a credential configuration for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @param id - The ID of the CredentialConfig entity to delete.\n     * @returns A promise that resolves to the result of the delete operation.\n     */\n    delete(tenantId: string, id: string) {\n        return this.credentialConfigRepository.delete({\n            id,\n            tenantId,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuerMetadataDto.html":{"url":"classes/CredentialIssuerMetadataDto.html","title":"class - CredentialIssuerMetadataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuerMetadataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/credential-issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the metadata for a credential issuer.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_server\n                            \n                            \n                                authorization_servers\n                            \n                            \n                                batch_credential_issuance\n                            \n                            \n                                credential_configurations_supported\n                            \n                            \n                                credential_endpoint\n                            \n                            \n                                credential_issuer\n                            \n                            \n                                display\n                            \n                            \n                                notification_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:41\n                        \n                    \n\n            \n                \n                    The URL of the preferred authorization server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_servers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:12\n                        \n                    \n\n            \n                \n                    List of authorization servers that support the credential issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        batch_credential_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:24\n                        \n                    \n\n            \n                \n                    Information about batch credential issuance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_configurations_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:37\n                        \n                    \n\n            \n                \n                    Object of credentials configurations supported by the issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:16\n                        \n                    \n\n            \n                \n                    The URL of the credential issuance endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:8\n                        \n                    \n\n            \n                \n                    The issuer identifier, typically a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:33\n                        \n                    \n\n            \n                \n                    Display information for the credentials that are getting issued.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notification_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:20\n                        \n                    \n\n            \n                \n                    The URL of the notification endpoint for credential issuance.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CredentialIssuerMetadataDto {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    credential_issuer: string;\n    /**\n     * List of authorization servers that support the credential issuer.\n     */\n    authorization_servers: string[];\n    /**\n     * The URL of the credential issuance endpoint.\n     */\n    credential_endpoint: string;\n    /**\n     * The URL of the notification endpoint for credential issuance.\n     */\n    notification_endpoint: string;\n    /**\n     * Information about batch credential issuance.\n     */\n    batch_credential_issuance: {\n        /**\n         * Amount of elements in a batch.\n         */\n        batch_size: number;\n    };\n    /**\n     * Display information for the credentials that are getting issued.\n     */\n    display: Array;\n    /**\n     * Object of credentials configurations supported by the issuer.\n     */\n    credential_configurations_supported: any;\n    /**\n     * The URL of the preferred authorization server.\n     */\n    authorization_server: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialQuery.html":{"url":"classes/CredentialQuery.html","title":"class - CredentialQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                format\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                meta\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                multiple\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                trusted_authorities\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        multiple\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        trusted_authorities\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TrustedAuthorityQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:81\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\nexport class Claim {\n    @IsArray()\n    path: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => Claim)\n    claims?: Claim[];\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialSetQuery.html":{"url":"classes/CredentialSetQuery.html","title":"class - CredentialSetQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialSetQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                options\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                required\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[][]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', items: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:108\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\nexport class Claim {\n    @IsArray()\n    path: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => Claim)\n    claims?: Claim[];\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsController.html":{"url":"controllers/CredentialsController.html","title":"controller - CredentialsController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  CredentialsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.controller.ts\n        \n            \n                Prefix\n            \n            \n                issuer-management/credentials\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing credential configurations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getConfigs\n                            \n                            \n                                    \n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:48\n                        \n                    \n\n\n            \n                \n                        Deletes an credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getConfigs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfigs(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Returns the credential configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(config: CredentialConfigCreate, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Stores the credential configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            CredentialConfigCreate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post } from \"@nestjs/common\";\nimport { Role } from \"../../auth/roles/role.enum\";\nimport { Secured } from \"../../auth/secure.decorator\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { CredentialConfigService } from \"./credential-config/credential-config.service\";\nimport { CredentialConfigCreate } from \"./dto/credential-config-create.dto\";\n\n/**\n * Controller for managing credential configurations.\n */\n@Secured([Role.Issuances])\n@Controller(\"issuer-management/credentials\")\nexport class CredentialsController {\n    /**\n     * Initializes the CredentialsController with the CredentialConfigService.\n     * @param credentialsService\n     */\n    constructor(private readonly credentialsService: CredentialConfigService) {}\n\n    /**\n     * Returns the credential configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getConfigs(@Token() user: TokenPayload) {\n        return this.credentialsService.get(user.entity!.id);\n    }\n\n    /**\n     * Stores the credential configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeCredentialConfiguration(\n        @Body() config: CredentialConfigCreate,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.store(user.entity!.id, config);\n    }\n\n    /**\n     * Deletes an credential configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteIssuanceConfiguration(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.delete(user.entity!.id, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsMetadataController.html":{"url":"controllers/CredentialsMetadataController.html","title":"controller - CredentialsMetadataController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  CredentialsMetadataController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/credentials-metadata.controller.ts\n        \n            \n                Prefix\n            \n            \n                :tenantId/credentials-metadata\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n            \n                \n                        \n                    schema(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('schema/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n            \n                \n                        \n                    vct(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('vct/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:15\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the credential configuration.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from \"@nestjs/common\";\nimport { ApiExcludeController } from \"@nestjs/swagger\";\nimport { CredentialsService } from \"../credentials/credentials.service\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@Controller(\":tenantId/credentials-metadata\")\nexport class CredentialsMetadataController {\n    constructor(private readonly credentialsService: CredentialsService) {}\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n     * @param id - The identifier of the credential configuration.\n     */\n    @Get(\"vct/:id\")\n    vct(@Param(\"id\") id: string, @Param(\"tenantId\") tenantId: string) {\n        return this.credentialsService.getVCT(id, tenantId);\n    }\n\n    /**\n     * Retrieves the schema for a specific credential\n     * @param id\n     * @returns\n     */\n    @Get(\"schema/:id\")\n    schema(@Param(\"id\") id: string, @Param(\"tenantId\") tenantId: string) {\n        return this.credentialsService.getSchema(id, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialsService.html":{"url":"injectables/CredentialsService.html","title":"injectable - CredentialsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credentials and their configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                getCredentialConfigurationSupported\n                            \n                            \n                                    Async\n                                getSchema\n                            \n                            \n                                    Async\n                                getVCT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, configService: ConfigService, statusListService: StatusListService, credentialConfigRepo: Repository, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credentials.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(credentialConfigurationId: string, holderCnf: Jwk, session: Session, issuanceConfig: IssuanceConfig, claims?: Record>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:107\n                        \n                    \n\n\n            \n                \n                        Issues a credential based on the provided configuration and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                holderCnf\n                                            \n                                                        Jwk\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuanceConfig\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                claims\n                                            \n                                                        Record>\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredentialConfigurationSupported\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredentialConfigurationSupported(session: Session, issuanceConfig: IssuanceConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration that is required for oid4vci\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuanceConfig\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSchema(credentialConfigurationId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:229\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVCT\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVCT(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:203\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport type { Jwk } from \"@openid4vc/oauth2\";\nimport { CredentialConfigurationSupported } from \"@openid4vc/openid4vci\";\nimport { digest, generateSalt } from \"@sd-jwt/crypto-nodejs\";\nimport { JWTwithStatusListPayload } from \"@sd-jwt/jwt-status-list\";\nimport { SDJwtVcInstance } from \"@sd-jwt/sd-jwt-vc\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { CryptoImplementationService } from \"../../crypto/key/crypto-implementation/crypto-implementation.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SchemaResponse } from \"../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../issuance/entities/issuance-config.entity\";\nimport { StatusListService } from \"../status-list/status-list.service\";\nimport { CredentialConfig } from \"./entities/credential.entity\";\n\n/**\n * Service for managing credentials and their configurations.\n */\n@Injectable()\nexport class CredentialsService {\n    /**\n     * Constructor for CredentialsService.\n     * @param cryptoService\n     * @param configService\n     * @param statusListService\n     * @param credentialConfigRepo\n     * @param cryptoImplementationService\n     */\n    constructor(\n        private cryptoService: CryptoService,\n        private configService: ConfigService,\n        private statusListService: StatusListService,\n        @InjectRepository(CredentialConfig)\n        private credentialConfigRepo: Repository,\n        private cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Returns the credential configuration that is required for oid4vci\n     * @param tenantId\n     * @returns\n     */\n    async getCredentialConfigurationSupported(\n        session: Session,\n        issuanceConfig: IssuanceConfig,\n    ): Promise> {\n        const credential_configurations_supported: Record = {};\n\n        const configs = await this.credentialConfigRepo.findBy({\n            tenantId: session.tenantId,\n        });\n\n        //add key binding when required:\n        const kb = {\n            proof_types_supported: {\n                jwt: {\n                    proof_signing_alg_values_supported: [\n                        this.cryptoImplementationService.getAlg(),\n                    ],\n                },\n            },\n            credential_signing_alg_values_supported: [\n                this.cryptoImplementationService.getAlg(),\n            ],\n            cryptographic_binding_methods_supported: [\"jwk\"],\n        };\n\n        for (const value of configs) {\n            const isUsed = issuanceConfig.credentialConfigs.find(\n                (config) => config.id === value.id,\n            );\n            (value.config as CredentialConfigurationSupported).vct =\n                `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.tenantId}/credentials-metadata/vct/${value.id}`;\n\n            if (value.embeddedDisclosurePolicy) {\n                delete (value.embeddedDisclosurePolicy as any).$schema;\n                (\n                    value.config as CredentialConfigurationSupported\n                ).disclosure_policy = value.embeddedDisclosurePolicy;\n            }\n\n            if (isUsed?.id)\n                value.config = {\n                    ...value.config,\n                    ...kb,\n                };\n            (\n                credential_configurations_supported as CredentialConfigurationSupported\n            )[value.id] = value.config;\n        }\n        return credential_configurations_supported;\n    }\n\n    /**\n     * Issues a credential based on the provided configuration and session.\n     * @param credentialConfigurationId\n     * @param holderCnf\n     * @param session\n     * @returns\n     */\n    async getCredential(\n        credentialConfigurationId: string,\n        holderCnf: Jwk,\n        session: Session,\n        issuanceConfig: IssuanceConfig,\n        claims?: Record>,\n    ) {\n        const credentialConfiguration = issuanceConfig.credentialConfigs.find(\n            (config) => config.id === credentialConfigurationId,\n        );\n        if (!credentialConfiguration)\n            throw new ConflictException(\n                `Credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        //use passed claims, if not provided try the ones stored in the session and the use default ones from the config is provided\n        const usedClaims =\n            claims?.[credentialConfigurationId] ??\n            session.credentialPayload?.claims?.[credentialConfigurationId] ??\n            credentialConfiguration.claims;\n        const disclosureFrame = credentialConfiguration.disclosureFrame;\n\n        const keyId =\n            credentialConfiguration?.keyId ??\n            (await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"signing\",\n            ));\n\n        //at this point it is sd-jwt specific.\n\n        const sdjwt = new SDJwtVcInstance({\n            signer: await this.cryptoService.keyService.signer(\n                session.tenantId,\n                keyId,\n            ),\n            signAlg: this.cryptoImplementationService.getAlg(),\n            hasher: digest,\n            hashAlg: \"sha-256\",\n            saltGenerator: generateSalt,\n            loadTypeMetadataFormat: true,\n        });\n\n        // If status management is enabled, create a status entry\n        let status: JWTwithStatusListPayload | undefined;\n        if (credentialConfiguration.statusManagement) {\n            status = await this.statusListService.createEntry(\n                session,\n                credentialConfigurationId,\n            );\n        }\n\n        const iat = Math.round(new Date().getTime() / 1000);\n        // Set expiration time if lifeTime is defined\n        let exp: number | undefined;\n        if (credentialConfiguration.lifeTime) {\n            exp = iat + credentialConfiguration.lifeTime;\n        }\n\n        // If key binding is enabled, include the JWK in the cnf\n        let cnf: { jwk: Jwk } | undefined;\n\n        if (credentialConfiguration.keyBinding) {\n            cnf = {\n                jwk: holderCnf,\n            };\n        }\n\n        return sdjwt.issue(\n            {\n                iss: this.configService.getOrThrow(\"PUBLIC_URL\"),\n                iat,\n                exp,\n                vct: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.tenantId}/credentials-metadata/vct/${credentialConfigurationId}`,\n                cnf,\n                ...usedClaims,\n                ...status,\n            },\n            disclosureFrame,\n            {\n                header: {\n                    x5c: await this.cryptoService.getCertChain(\n                        \"signing\",\n                        session.tenantId,\n                    ),\n                    alg: this.cryptoImplementationService.getAlg(),\n                },\n            },\n        );\n    }\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n     * @param credentialId\n     * @param tenantId\n     * @returns\n     */\n    async getVCT(credentialId: string, tenantId: string): Promise {\n        const credentialConfig = await this.credentialConfigRepo\n            .findOneByOrFail({\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialId} not found`,\n                );\n            });\n        if (!credentialConfig.vct) {\n            throw new ConflictException(\n                `VCT for credential configuration with id ${credentialId} not found`,\n            );\n        }\n        const host = this.configService.getOrThrow(\"PUBLIC_URL\");\n        credentialConfig.vct.vct = `${host}/${tenantId}/credentials-metadata/vct/${credentialConfig.id}`;\n        return credentialConfig.vct;\n    }\n\n    /**\n     * Retrieves the schema for a specific credential configuration.\n     * @param id\n     * @param tenantId\n     * @returns\n     */\n    async getSchema(\n        credentialConfigurationId: string,\n        tenantId: string,\n    ): Promise {\n        const credentialConfig =\n            await this.credentialConfigRepo.findOneByOrFail({\n                tenantId,\n            });\n        if (!credentialConfig) {\n            throw new ConflictException(\n                `Credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        if (!credentialConfig.schema) {\n            throw new ConflictException(\n                `Schema for credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        return credentialConfig.schema;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoImplementatationModule.html":{"url":"modules/CryptoImplementatationModule.html","title":"module - CryptoImplementatationModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    CryptoImplementatationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoImplementatationModule\n\n\n\ncluster_CryptoImplementatationModule_providers\n\n\n\ncluster_CryptoImplementatationModule_exports\n\n\n\n\nCryptoImplementationService \n\nCryptoImplementationService \n\n\n\nCryptoImplementatationModule\n\nCryptoImplementatationModule\n\nCryptoImplementationService  -->\n\nCryptoImplementatationModule->CryptoImplementationService \n\n\n\n\n\nCryptoImplementationService\n\nCryptoImplementationService\n\nCryptoImplementatationModule -->\n\nCryptoImplementationService->CryptoImplementatationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoImplementationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoImplementationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { CryptoImplementationService } from \"./crypto-implementation.service\";\n\n@Global()\n@Module({\n    imports: [ConfigModule],\n    providers: [CryptoImplementationService],\n    exports: [CryptoImplementationService],\n})\nexport class CryptoImplementatationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoImplementation.html":{"url":"interfaces/CryptoImplementation.html","title":"interface - CryptoImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface to imeplement different algorithms.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alg\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        generateKeyPair\n                                    \n                                \n                                \n                                    \n                                        getSigner\n                                    \n                                \n                                \n                                    \n                                        getVerifier\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyPair\n                        \n                    \n                \n            \n            \n                \ngenerateKeyPair()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a new keypair\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSigner\n                        \n                    \n                \n            \n            \n                \ngetSigner(privateKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:24\n                        \n                    \n\n\n            \n                \n                        creates a signer based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVerifier\n                        \n                    \n                \n            \n            \n                \ngetVerifier(publicKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:29\n                        \n                    \n\n\n            \n                \n                        creates a verifier based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                publicKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type KeyPair = {\n    publicKey: JsonWebKey;\n    privateKey: JsonWebKey;\n};\n\ntype Signer = (data: string) => Promise;\n\ntype Verifier = (data: string, signature: string) => Promise;\n\n/**\n * Generic interface to imeplement different algorithms.\n */\nexport interface CryptoImplementation {\n    //name of the algorithm\n    alg: string;\n    /**\n     * Generates a new keypair\n     */\n    generateKeyPair(): Promise;\n    /**\n     * creates a signer based on the passed key.\n     * @param privateKeyJWK\n     */\n    getSigner(privateKeyJWK: JsonWebKey): Promise;\n    /**\n     * creates a verifier based on the passed key.\n     * @param publicKeyJWK\n     */\n    getVerifier(publicKeyJWK: JsonWebKey): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoImplementationService.html":{"url":"injectables/CryptoImplementationService.html","title":"injectable - CryptoImplementationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoImplementationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cachedDefaultAlg\n                            \n                            \n                                    Private\n                                    Readonly\n                                cryptoMap\n                            \n                            \n                                    Private\n                                    Readonly\n                                supportedAlgorithms\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlg\n                            \n                            \n                                getCrypto\n                            \n                            \n                                getCryptoFromJwk\n                            \n                            \n                                getSupportedAlgorithms\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAlg\n                        \n                    \n                \n            \n            \n                \ngetAlg()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Return the algorithm that is used for the crypto operations like signing.\n\n\n                        \n                            Returns :         CryptoType\n\n                        \n                            \n                                The configured algorithm type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCrypto\n                        \n                    \n                \n            \n            \n                \ngetCrypto(alg?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Returns the crypto implementation based on the provided or configured algorithm.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                alg\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional algorithm type, defaults to the configured algorithm\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CryptoImplementation\n\n                        \n                            \n                                The appropriate crypto implementation\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCryptoFromJwk\n                        \n                    \n                \n            \n            \n                \ngetCryptoFromJwk(jwk: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Returns the crypto implementation directly based on the JWK properties.\nCurrently supports Ed25519 and ES256 (P-256 curve).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwk\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJSON Web Key\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CryptoImplementation\n\n                        \n                            \n                                The appropriate crypto implementation\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSupportedAlgorithms\n                        \n                    \n                \n            \n            \n                \ngetSupportedAlgorithms()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Returns the list of supported algorithm types\n\n\n                        \n                            Returns :         CryptoType[]\n\n                        \n                            \n                                Array of supported algorithm types\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cachedDefaultAlg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoType | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cryptoMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        supportedAlgorithms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoType[]\n\n                    \n                \n                \n                    \n                        Default value : [\"ES256\", \"Ed25519\"]\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ES256 } from \"@sd-jwt/crypto-nodejs\";\nimport { CryptoImplementation } from \"./crypto-implementation\";\nimport { ED25519 } from \"./ed25519\";\n\nexport type CryptoType = \"ES256\" | \"Ed25519\";\n\n@Injectable()\nexport class CryptoImplementationService {\n    private readonly supportedAlgorithms: CryptoType[] = [\"ES256\", \"Ed25519\"];\n    private readonly cryptoMap: Map;\n    private cachedDefaultAlg: CryptoType | null = null;\n\n    constructor(private configService: ConfigService) {\n        // Initialize the map of algorithms to implementations\n        this.cryptoMap = new Map([\n            [\"ES256\", ES256],\n            [\"Ed25519\", ED25519],\n        ]);\n    }\n\n    /**\n     * Returns the list of supported algorithm types\n     * @returns Array of supported algorithm types\n     */\n    getSupportedAlgorithms(): CryptoType[] {\n        return [...this.supportedAlgorithms];\n    }\n\n    /**\n     * Return the algorithm that is used for the crypto operations like signing.\n     * @returns The configured algorithm type\n     */\n    getAlg(): CryptoType {\n        if (!this.cachedDefaultAlg) {\n            this.cachedDefaultAlg = this.configService.get(\n                \"CRYPTO_ALG\",\n            ) as CryptoType;\n\n            // Validate the algorithm type\n            if (!this.supportedAlgorithms.includes(this.cachedDefaultAlg)) {\n                throw new Error(\n                    `Unsupported algorithm: ${this.cachedDefaultAlg}`,\n                );\n            }\n        }\n\n        return this.cachedDefaultAlg;\n    }\n\n    /**\n     * Returns the crypto implementation directly based on the JWK properties.\n     * Currently supports Ed25519 and ES256 (P-256 curve).\n     * @param jwk - JSON Web Key\n     * @returns The appropriate crypto implementation\n     * @throws Error if the crypto implementation cannot be determined from the JWK\n     */\n    getCryptoFromJwk(jwk: JsonWebKey): CryptoImplementation {\n        if (!jwk || typeof jwk !== \"object\") {\n            throw new Error(\"Invalid JWK provided\");\n        }\n\n        // Check for Ed25519 curve\n        if (jwk.crv === \"Ed25519\") {\n            return this.cryptoMap.get(\"Ed25519\")!;\n        }\n\n        // Check for ES256 (P-256 curve)\n        if (jwk.kty === \"EC\" && jwk.crv === \"P-256\") {\n            return this.cryptoMap.get(\"ES256\")!;\n        }\n\n        throw new Error(\n            `Unable to determine crypto implementation from JWK: unsupported key type or curve`,\n        );\n    }\n\n    /**\n     * Returns the crypto implementation based on the provided or configured algorithm.\n     * @param alg - Optional algorithm type, defaults to the configured algorithm\n     * @returns The appropriate crypto implementation\n     * @throws Error if the algorithm is not supported\n     */\n    getCrypto(alg?: string): CryptoImplementation {\n        const algorithmType = alg || this.getAlg();\n        const implementation = this.cryptoMap.get(algorithmType as CryptoType);\n\n        if (!implementation) {\n            throw new Error(`Unsupported algorithm: ${algorithmType}`);\n        }\n\n        return implementation;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoModule.html":{"url":"modules/CryptoModule.html","title":"module - CryptoModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    CryptoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_CryptoModule_exports\n\n\n\n\nCryptoService \n\nCryptoService \n\n\n\nEncryptionService \n\nEncryptionService \n\n\n\nCryptoModule\n\nCryptoModule\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/crypto.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            KeyController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { TenantEntity } from \"../auth/tenant/entitites/tenant.entity\";\nimport { CryptoService } from \"./crypto.service\";\nimport { EncryptionService } from \"./encryption/encryption.service\";\nimport { CertEntity } from \"./key/entities/cert.entity\";\nimport { KeyEntity } from \"./key/entities/keys.entity\";\nimport { KeyController } from \"./key/key.controller\";\n\n@Module({\n    imports: [TypeOrmModule.forFeature([CertEntity, KeyEntity, TenantEntity])],\n    controllers: [KeyController],\n    providers: [CryptoService, EncryptionService],\n    exports: [CryptoService, EncryptionService],\n})\nexport class CryptoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBKeyService.html":{"url":"classes/DBKeyService.html","title":"class - DBKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/adapters/db-key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The key service is responsible for managing the keys of the issuer.\n\n            \n\n            \n                Extends\n            \n            \n                            KeyService\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                crypto\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                getKid\n                            \n                            \n                                    Private\n                                    Async\n                                getPrivateKey\n                            \n                            \n                                    Private\n                                getPubFromPrivateKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                import\n                            \n                            \n                                init\n                            \n                            \n                                    Async\n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoImplementationService, certRepository: Repository, keyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/adapters/db-key.service.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        crypto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/adapters/db-key.service.ts:28\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:86\n\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair and wrtites the private key to the file system.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the generated key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string, type: CertificateType)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:136\n\n                        \n                    \n\n\n            \n                \n                        Gets one key id for the tenant.\nIf no key exists, it will throw an error.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                type\n                                            \n                                                            CertificateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    \"signing\"\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPrivateKey(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Get the keys from the file system or generate them if they do not exist\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getPubFromPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPubFromPrivateKey(privateKey: JWK_EC_Private)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Get the public key from the private key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKey\n                                            \n                                                        JWK_EC_Private\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         EC_Public\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:152\n\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        import\n                        \n                    \n                \n            \n            \n                \nimport(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:46\n\n                        \n                    \n\n\n            \n                \n                        Import a key into the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        init\n                        \n                    \n                \n            \n            \n                \ninit(tenant: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:77\n\n                        \n                    \n\n\n            \n                \n                        Initialize the key service for a specific tenant.\nThis will create the keys if they do not exist.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:109\n\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JWTHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:195\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:85\n\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { Signer } from \"@sd-jwt/types\";\nimport {\n    CryptoKey,\n    exportJWK,\n    exportSPKI,\n    importJWK,\n    JWK,\n    JWK_EC_Private,\n    JWTHeaderParameters,\n    JWTPayload,\n    SignJWT,\n} from \"jose\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { v4 } from \"uuid\";\nimport { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\nimport { CryptoImplementation } from \"../crypto-implementation/crypto-implementation\";\nimport { CryptoImplementationService } from \"../crypto-implementation/crypto-implementation.service\";\nimport { KeyImportDto } from \"../dto/key-import.dto\";\nimport { CertEntity, CertificateType } from \"../entities/cert.entity\";\nimport { KeyEntity } from \"../entities/keys.entity\";\nimport { KeyService } from \"../key.service\";\n\n/**\n * The key service is responsible for managing the keys of the issuer.\n */\nexport class DBKeyService extends KeyService {\n    private crypto: CryptoImplementation;\n\n    constructor(\n        configService: ConfigService,\n        private cryptoService: CryptoImplementationService,\n        certRepository: Repository,\n        private keyRepository: Repository,\n    ) {\n        super(configService, certRepository);\n        this.crypto = cryptoService.getCrypto();\n    }\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     * @returns\n     */\n    import(tenantId: string, body: KeyImportDto): Promise {\n        const privateKey = body.privateKey;\n        return this.keyRepository\n            .save({\n                id: privateKey.kid,\n                tenantId,\n                key: privateKey,\n            })\n            .then(() => privateKey.kid);\n    }\n\n    /**\n     * Get the public key from the private key.\n     * @param privateKey\n     * @returns\n     */\n    private getPubFromPrivateKey(privateKey: JWK_EC_Private): EC_Public {\n        const {\n            d: _d,\n            key_ops: _key_ops,\n            ext: _ext,\n            ...publicKey\n        } = privateKey;\n        return publicKey as EC_Public;\n    }\n\n    /**\n     * Initialize the key service for a specific tenant.\n     * This will create the keys if they do not exist.\n     * @param tenant\n     */\n    init(tenant: string): Promise {\n        return this.getKid(tenant).catch(async () => this.create(tenant));\n    }\n\n    /**\n     * Creates a new keypair and wrtites the private key to the file system.\n     * @param tenantId\n     * @returns key id of the generated key.\n     */\n    async create(tenantId: string): Promise {\n        const keys = await this.crypto.generateKeyPair();\n        const privateKey = keys.privateKey as JWK;\n        //add a random key id for reference\n        privateKey.kid = v4();\n        privateKey.alg = this.crypto.alg;\n\n        //remove exportable and key_ops from the private key\n        delete privateKey.ext;\n        delete privateKey.key_ops;\n\n        return this.keyRepository\n            .save({\n                id: privateKey.kid,\n                tenantId,\n                key: privateKey,\n            })\n            .then(() => privateKey.kid!);\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    async signer(tenantId: string, keyId?: string): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n        return this.crypto.getSigner(privateKey);\n    }\n\n    /**\n     * Get the keys from the file system or generate them if they do not exist\n     * @returns\n     */\n    private async getPrivateKey(tenantId: string, keyId?: string) {\n        keyId =\n            keyId ||\n            (await this.getKid(tenantId).catch(() => this.create(tenantId)));\n\n        return this.keyRepository\n            .findOneByOrFail({\n                id: keyId,\n                tenantId,\n            })\n            .then((key) => key.key);\n    }\n\n    /**\n     * Gets one key id for the tenant.\n     * If no key exists, it will throw an error.\n     * @returns\n     */\n    getKid(\n        tenantId: string,\n        type: CertificateType = \"signing\",\n    ): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                type,\n            })\n            .then((cert) => cert.id);\n    }\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    getPublicKey(type: \"jwk\", tenantId: string, keyId?: string): Promise;\n    getPublicKey(\n        type: \"pem\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    async getPublicKey(\n        type: \"pem\" | \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n\n        // Convert the private key to a public key\n        // First import the private key as a CryptoKey\n        const privateKeyInstance = await importJWK(\n            privateKey,\n            this.cryptoService.getAlg(),\n            { extractable: true },\n        );\n\n        // Export it as a JWK to get the public key components\n        const privateKeyJWK = (await exportJWK(\n            privateKeyInstance,\n        )) as JWK_EC_Private;\n\n        // Remove private key components to get only the public key\n\n        const publicKey = this.getPubFromPrivateKey(privateKeyJWK);\n\n        if (type === \"pem\") {\n            // Import the public key and export as PEM\n            const publicKeyInstance = await importJWK(\n                publicKey,\n                this.cryptoService.getAlg(),\n                { extractable: true },\n            );\n            return exportSPKI(publicKeyInstance as CryptoKey);\n        } else {\n            return publicKey;\n        }\n    }\n\n    async signJWT(\n        payload: JWTPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n        const privateKeyInstance = (await importJWK(privateKey)) as CryptoKey;\n        return new SignJWT(payload)\n            .setProtectedHeader(header)\n            .sign(privateKeyInstance);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DCQL.html":{"url":"classes/DCQL.html","title":"class - DCQL","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DCQL\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                credential_set\n                            \n                            \n                                    \n                                    \n                                    \n                                credentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        credential_set\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialSetQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:115\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\nexport class Claim {\n    @IsArray()\n    path: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => Claim)\n    claims?: Claim[];\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule, TypeOrmModuleOptions } from \"@nestjs/typeorm\";\nimport { join } from \"path\";\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (\n                configService: ConfigService,\n            ): TypeOrmModuleOptions => {\n                const dbType = configService.get(\n                    \"DB_TYPE\",\n                );\n\n                const commonOptions = {\n                    synchronize: true,\n                    autoLoadEntities: true,\n                };\n\n                if (dbType === \"postgres\") {\n                    return {\n                        type: \"postgres\",\n                        host: configService.getOrThrow(\"DB_HOST\"),\n                        port: configService.getOrThrow(\"DB_PORT\"),\n                        username:\n                            configService.getOrThrow(\"DB_USERNAME\"),\n                        password:\n                            configService.getOrThrow(\"DB_PASSWORD\"),\n                        database:\n                            configService.getOrThrow(\"DB_DATABASE\"),\n                        ...commonOptions,\n                    };\n                }\n\n                return {\n                    type: \"sqlite\",\n                    database: join(\n                        configService.getOrThrow(\"FOLDER\"),\n                        \"service.db\",\n                    ),\n                    ...commonOptions,\n                };\n            },\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Display.html":{"url":"classes/Display.html","title":"class - Display","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Display\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                background_color\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                background_image\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                locale\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                logo\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                text_color\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        background_color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        background_image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DisplayImage\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        locale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DisplayImage\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        text_color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToMany, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../../issuance/entities/issuance-config.entity\";\nimport {\n    AllowListPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    RootOfTrustPolicy,\n} from \"./policies.dto\";\n\nexport class DisplayImage {\n    @IsString()\n    uri: string;\n}\nexport class Display {\n    @IsString()\n    name: string;\n    @IsString()\n    description: string;\n    @IsString()\n    locale: string;\n    @IsString()\n    background_color?: string;\n    @IsString()\n    text_color?: string;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    background_image?: DisplayImage;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    logo?: DisplayImage;\n}\n\nexport class IssuerMetadataCredentialConfig {\n    @IsString()\n    format: string;\n    @ValidateNested()\n    @Type(() => Display)\n    display: Display[];\n    @IsOptional()\n    @IsString()\n    scope?: string;\n}\n\n@ApiExtraModels(\n    AttestationBasedPolicy,\n    NoneTrustPolicy,\n    AllowListPolicy,\n    RootOfTrustPolicy,\n)\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => IssuerMetadataCredentialConfig)\n    config!: IssuerMetadataCredentialConfig;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity, { onDelete: \"SET NULL\" })\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AttestationBasedPolicy) },\n            { $ref: getSchemaPath(NoneTrustPolicy) },\n            { $ref: getSchemaPath(AllowListPolicy) },\n            { $ref: getSchemaPath(RootOfTrustPolicy) },\n        ],\n    })\n    @Type(() => AttestationBasedPolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: \"none\", value: NoneTrustPolicy },\n                { name: \"allowList\", value: AllowListPolicy },\n                { name: \"rootOfTrust\", value: RootOfTrustPolicy },\n                {\n                    name: \"attestationBased\",\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuance) => issuance.credentialConfigs,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    issuanceConfigs!: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DisplayController.html":{"url":"controllers/DisplayController.html","title":"controller - DisplayController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  DisplayController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/display.controller.ts\n        \n            \n                Prefix\n            \n            \n                display\n            \n\n\n            \n                Description\n            \n            \n                Display Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDisplay\n                            \n                            \n                                    \n                                getDisplay\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDisplay\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDisplay(user: TokenPayload, displayData: DisplayCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/display/display.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Create a new display for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user token payload\n\n                                            \n                                        \n                                        \n                                                displayData\n                                            \n                                                            DisplayCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The display data to create\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created display information\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDisplay\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDisplay(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/display/display.controller.ts:26\n                        \n                    \n\n\n            \n                \n                        Get display information for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user token payload\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The display information\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post } from \"@nestjs/common\";\nimport { Role } from \"../../auth/roles/role.enum\";\nimport { Secured } from \"../../auth/secure.decorator\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { DisplayService } from \"./display.service\";\nimport { DisplayCreateDto } from \"./dto/display-create.dto\";\n\n/**\n * Display Controller\n */\n@Secured([Role.Issuances])\n@Controller(\"display\")\nexport class DisplayController {\n    /**\n     * Display Controller\n     * @param displayService\n     */\n    constructor(private readonly displayService: DisplayService) {}\n\n    /**\n     * Get display information for a user\n     * @param user The user token payload\n     * @returns The display information\n     */\n    @Get()\n    getDisplay(@Token() user: TokenPayload) {\n        return this.displayService.get(user.entity!.id);\n    }\n\n    /**\n     * Create a new display for a user\n     * @param user The user token payload\n     * @param displayData The display data to create\n     * @returns The created display information\n     */\n    @Post()\n    createDisplay(\n        @Token() user: TokenPayload,\n        @Body() displayData: DisplayCreateDto,\n    ) {\n        return this.displayService.create(user.entity!.id, displayData);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayCreateDto.html":{"url":"classes/DisplayCreateDto.html","title":"class - DisplayCreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayCreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/dto/display-create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(DisplayEntity, [\n    \"tenant\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { DisplayEntity } from \"../entities/display.entity\";\n\nexport class DisplayCreateDto extends OmitType(DisplayEntity, [\n    \"tenant\",\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DisplayEntity.html":{"url":"entities/DisplayEntity.html","title":"entity - DisplayEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  DisplayEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/entities/display.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:32\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DisplayInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)@Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:40\n                        \n                    \n\n            \n                \n                    The display information.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsString, ValidateNested } from \"class-validator\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\n\nclass DisplayLogo {\n    @IsString()\n    url: string;\n}\nexport class DisplayInfo {\n    @IsString()\n    name: string;\n    @IsString()\n    locale: string;\n\n    @ValidateNested()\n    @Type(() => DisplayLogo)\n    logo: DisplayLogo;\n}\n\n@Entity()\nexport class DisplayEntity {\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The display information.\n     */\n    @ValidateNested()\n    @Type(() => DisplayInfo)\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayImage.html":{"url":"classes/DisplayImage.html","title":"class - DisplayImage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayImage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToMany, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../../issuance/entities/issuance-config.entity\";\nimport {\n    AllowListPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    RootOfTrustPolicy,\n} from \"./policies.dto\";\n\nexport class DisplayImage {\n    @IsString()\n    uri: string;\n}\nexport class Display {\n    @IsString()\n    name: string;\n    @IsString()\n    description: string;\n    @IsString()\n    locale: string;\n    @IsString()\n    background_color?: string;\n    @IsString()\n    text_color?: string;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    background_image?: DisplayImage;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    logo?: DisplayImage;\n}\n\nexport class IssuerMetadataCredentialConfig {\n    @IsString()\n    format: string;\n    @ValidateNested()\n    @Type(() => Display)\n    display: Display[];\n    @IsOptional()\n    @IsString()\n    scope?: string;\n}\n\n@ApiExtraModels(\n    AttestationBasedPolicy,\n    NoneTrustPolicy,\n    AllowListPolicy,\n    RootOfTrustPolicy,\n)\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => IssuerMetadataCredentialConfig)\n    config!: IssuerMetadataCredentialConfig;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity, { onDelete: \"SET NULL\" })\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AttestationBasedPolicy) },\n            { $ref: getSchemaPath(NoneTrustPolicy) },\n            { $ref: getSchemaPath(AllowListPolicy) },\n            { $ref: getSchemaPath(RootOfTrustPolicy) },\n        ],\n    })\n    @Type(() => AttestationBasedPolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: \"none\", value: NoneTrustPolicy },\n                { name: \"allowList\", value: AllowListPolicy },\n                { name: \"rootOfTrust\", value: RootOfTrustPolicy },\n                {\n                    name: \"attestationBased\",\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuance) => issuance.credentialConfigs,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    issuanceConfigs!: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayInfo.html":{"url":"classes/DisplayInfo.html","title":"class - DisplayInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/entities/display.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                locale\n                            \n                            \n                                    \n                                    \n                                logo\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        locale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DisplayLogo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsString, ValidateNested } from \"class-validator\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\n\nclass DisplayLogo {\n    @IsString()\n    url: string;\n}\nexport class DisplayInfo {\n    @IsString()\n    name: string;\n    @IsString()\n    locale: string;\n\n    @ValidateNested()\n    @Type(() => DisplayLogo)\n    logo: DisplayLogo;\n}\n\n@Entity()\nexport class DisplayEntity {\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The display information.\n     */\n    @ValidateNested()\n    @Type(() => DisplayInfo)\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayLogo.html":{"url":"classes/DisplayLogo.html","title":"class - DisplayLogo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayLogo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/entities/display.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsString, ValidateNested } from \"class-validator\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\n\nclass DisplayLogo {\n    @IsString()\n    url: string;\n}\nexport class DisplayInfo {\n    @IsString()\n    name: string;\n    @IsString()\n    locale: string;\n\n    @ValidateNested()\n    @Type(() => DisplayLogo)\n    logo: DisplayLogo;\n}\n\n@Entity()\nexport class DisplayEntity {\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The display information.\n     */\n    @ValidateNested()\n    @Type(() => DisplayInfo)\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DisplayService.html":{"url":"injectables/DisplayService.html","title":"injectable - DisplayService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  DisplayService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/display.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Display Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                get\n                            \n                            \n                                    Async\n                                import\n                            \n                            \n                                onApplicationBootstrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(displayRepository: Repository, configService: ConfigService, logger: PinoLogger, filesService: FilesService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/display/display.service.ts:18\n                            \n                        \n\n                \n                    \n                            Display Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        displayRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(tenantId: string, displayData: DisplayCreateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/display/display.service.ts:139\n                        \n                    \n\n\n            \n                \n                        Create a new display for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant\n\n                                            \n                                        \n                                        \n                                                displayData\n                                            \n                                                            DisplayCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The display data to create\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created display information\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/display/display.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Get display information for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The display information for the tenant\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/display/display.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Import display information from the config folder\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/display/display.service.ts:34\n                        \n                    \n\n\n            \n                \n                        On application bootstrap, import display information\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { FilesService } from \"../../storage/files.service\";\nimport { DisplayCreateDto } from \"./dto/display-create.dto\";\nimport { DisplayEntity } from \"./entities/display.entity\";\n\n/**\n * Display Service\n */\n@Injectable()\nexport class DisplayService implements OnApplicationBootstrap {\n    /**\n     * Display Service\n     * @param displayRepository\n     */\n    constructor(\n        @InjectRepository(DisplayEntity)\n        private readonly displayRepository: Repository,\n        private readonly configService: ConfigService,\n        private logger: PinoLogger,\n        private filesService: FilesService,\n    ) {}\n\n    /**\n     * On application bootstrap, import display information\n     */\n    onApplicationBootstrap() {\n        this.import();\n    }\n\n    /**\n     * Import display information from the config folder\n     */\n    async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"issuance/display.json\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const file = readFileSync(path);\n                if (!file) {\n                    continue;\n                }\n                const payload = JSON.parse(file.toString());\n\n                // Validate the payload against DisplayCreateDto\n                const config = plainToClass(DisplayCreateDto, payload);\n                const validationErrors = await validate(config, {\n                    whitelist: true,\n                    forbidUnknownValues: false, // avoid false positives on plain objects\n                    forbidNonWhitelisted: false,\n                    stopAtFirstError: false,\n                });\n                if (validationErrors.length > 0) {\n                    this.logger.error(\n                        {\n                            event: \"Import\",\n                            errors: validationErrors,\n                        },\n                        `Invalid display configuration for ${tenant.name}, skipping import`,\n                    );\n                    continue;\n                }\n\n                //replace relative uris with public urls\n                config.value = await Promise.all(\n                    config.value.map(async (display) => {\n                        if (display.logo?.url) {\n                            const url =\n                                await this.filesService.replaceUriWithPublicUrl(\n                                    tenant.name,\n                                    display.logo.url.trim(),\n                                );\n                            if (!url) {\n                                this.logger.error(\n                                    {\n                                        event: \"Import\",\n                                    },\n                                    `Could not find logo ${display.logo.url} for ${tenant.name}, skipping import`,\n                                );\n                            } else {\n                                display.logo.url = url;\n                            }\n                        }\n                        return display;\n                    }),\n                );\n\n                //check if already exists\n                const exists = await this.displayRepository.findOneBy({\n                    tenantId: tenant.name,\n                });\n                if (exists && !force) continue;\n\n                await this.displayRepository.save({\n                    ...config,\n                    tenantId: tenant.name,\n                });\n\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `imported display info for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Get display information for a user\n     * @param tenantId The ID of the tenant\n     * @returns The display information for the tenant\n     */\n    get(tenantId: string): Promise {\n        return this.displayRepository.findOne({\n            where: { tenantId },\n        });\n    }\n\n    /**\n     * Create a new display for a user\n     * @param tenantId The ID of the tenant\n     * @param displayData The display data to create\n     * @returns The created display information\n     */\n    create(\n        tenantId: string,\n        displayData: DisplayCreateDto,\n    ): Promise {\n        const displayEntity = this.displayRepository.create({\n            ...displayData,\n            tenantId,\n        });\n        return this.displayRepository.save(displayEntity);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EC_Public.html":{"url":"classes/EC_Public.html","title":"class - EC_Public","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EC_Public\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\nThis class is used to define the structure of EC public keys in JWK format.\n\n            \n\n\n            \n                Implements\n            \n            \n                            JWK_EC_Public\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crv\n                            \n                            \n                                kty\n                            \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The algorithm intended for use with the key, such as 'ES256'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        kty\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The key type, which is always 'EC' for Elliptic Curve keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:19\n                        \n                    \n\n            \n                \n                    The x coordinate of the EC public key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    The y coordinate of the EC public key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from \"jose\";\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: \"EC\";\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmbeddedDisclosurePolicy.html":{"url":"classes/EmbeddedDisclosurePolicy.html","title":"class - EmbeddedDisclosurePolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmbeddedDisclosurePolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                policy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/encryption/encryption.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling encryption and decryption operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decryptJwe\n                            \n                            \n                                getEncryptionPublicKey\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(keyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/encryption/encryption.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for the EncryptionService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        keyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decryptJwe\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptJwe(response: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:54\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Encrypts a response using JWE (JSON Web Encryption).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe response to encrypt.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to encrypt the response.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The encrypted response as a JWE string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEncryptionPublicKey\n                        \n                    \n                \n            \n            \n                \ngetEncryptionPublicKey(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Retrieves the public encryption key for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the public key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The public encryption key as a JWK.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Deletes the encryption keys for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the keys.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Initializes the encryption keys for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to initialize the keys.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { exportJWK, generateKeyPair, importJWK, JWK, jwtDecrypt } from \"jose\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { v4 } from \"uuid\";\nimport { KeyEntity } from \"../key/entities/keys.entity\";\n\n/**\n * Service for handling encryption and decryption operations.\n */\n@Injectable()\nexport class EncryptionService {\n    /**\n     * Constructor for the EncryptionService.\n     * @param configService\n     */\n    constructor(\n        @InjectRepository(KeyEntity)\n        private keyRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the encryption keys for a given tenant.\n     * @param tenantId - The ID of the tenant for which to initialize the keys.\n     */\n    async onTenantInit(tenantId: string) {\n        const privateKey = await generateKeyPair(\"ECDH-ES\", {\n            crv: \"P-256\",\n            extractable: true,\n        }).then(async (secret) => exportJWK(secret.privateKey));\n\n        this.keyRepository.save({\n            id: v4(),\n            tenantId,\n            key: privateKey,\n            usage: \"encrypt\",\n        });\n    }\n\n    /**\n     * Deletes the encryption keys for a given tenant.\n     * @param tenantId - The ID of the tenant for which to delete the keys.\n     */\n    async onTenantDelete(tenantId: string) {\n        await this.keyRepository.delete({ tenantId });\n    }\n\n    /**\n     * Encrypts a response using JWE (JSON Web Encryption).\n     * @param response - The response to encrypt.\n     * @param tenantId - The ID of the tenant for which to encrypt the response.\n     * @returns The encrypted response as a JWE string.\n     */\n    async decryptJwe(response: string, tenantId: string): Promise {\n        const privateEncryptionKey = await this.keyRepository\n            .findOneByOrFail({\n                tenantId,\n                usage: \"encrypt\",\n            })\n            .then(\n                (keyEntity) =>\n                    importJWK(keyEntity.key, \"ECDH-ES\") as Promise,\n            );\n\n        const res = await jwtDecrypt(response, privateEncryptionKey);\n        return res.payload;\n    }\n\n    /**\n     * Retrieves the public encryption key for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve the public key.\n     * @returns The public encryption key as a JWK.\n     */\n    getEncryptionPublicKey(tenantId: string): Promise {\n        return this.keyRepository\n            .findOneByOrFail({\n                tenantId,\n                usage: \"encrypt\",\n            })\n            .then((entry) => {\n                delete entry.key.d;\n                return entry.key;\n            });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FileEntity.html":{"url":"entities/FileEntity.html","title":"entity - FileEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  FileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/entities/files.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                filename\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/entities/files.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/entities/files.entity.ts:10\n                        \n                    \n\n            \n                \n                    The ID of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/entities/files.entity.ts:25\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/entities/files.entity.ts:19\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryColumn } from \"typeorm\";\nimport { TenantEntity } from \"../../auth/tenant/entitites/tenant.entity\";\n\n@Entity()\nexport class FileEntity {\n    /**\n     * The ID of the object.\n     */\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    filename: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileStorage.html":{"url":"interfaces/FileStorage.html","title":"interface - FileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        exists\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        getSignedUrl\n                                    \n                                \n                                \n                                    \n                                        getStream\n                                    \n                                \n                                \n                                    \n                                        put\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        getSignedUrl\n                        \n                    \n                \n            \n            \n                \ngetSignedUrl(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Readable } from \"stream\";\n\nexport type PutOptions = {\n    contentType?: string;\n    metadata?: Record;\n    acl?: \"private\" | \"public\";\n    checksum?: string; // e.g., sha256 base64\n};\n\nexport type StoredObject = {\n    key: string; // canonical key (e.g. \"tenant/2025/08/14/uuid.ext\")\n    etag?: string;\n    size?: number;\n    url?: string; // public URL if ACL=public or a presigned URL\n    contentType?: string;\n    metadata?: Record;\n};\n\nexport interface FileStorage {\n    put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise;\n\n    getStream(\n        key: string,\n    ): Promise;\n\n    delete(key: string): Promise;\n\n    exists(key: string): Promise;\n\n    getSignedUrl?(key: string): Promise; // optional for local\n}\n\nexport const FILE_STORAGE = Symbol(\"FILE_STORAGE\");\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/dto/file-upload.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'binary'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/dto/file-upload.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class FileUploadDto {\n    @ApiProperty({ type: \"string\", format: \"binary\" })\n    file: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                    Async\n                                deleteByTenant\n                            \n                            \n                                getDownloadUrl\n                            \n                            \n                                getStream\n                            \n                            \n                                    Async\n                                import\n                            \n                            \n                                onApplicationBootstrap\n                            \n                            \n                                replaceUriWithPublicUrl\n                            \n                            \n                                    Async\n                                saveUserUpload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(storage: FileStorage, fileRepository: Repository, configService: ConfigService, logger: PinoLogger)\n                    \n                \n                        \n                            \n                                Defined in src/storage/files.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storage\n                                                  \n                                                        \n                                                                        FileStorage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fileRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:154\n                        \n                    \n\n\n            \n                \n                        Deletes a file from the storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The unique identifier of the file.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the file is deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteByTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteByTenant(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:169\n                        \n                    \n\n\n            \n                \n                        Deletes all files associated with a specific tenant\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant whose files should be deleted.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \ngetDownloadUrl(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:145\n                        \n                    \n\n\n            \n                \n                        Retrieves a readable stream of the file associated with the given key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The unique identifier of the file.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to a readable stream of the file.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Import images from the config folder\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:30\n                        \n                    \n\n\n            \n                \n                        On application bootstrap, import images from the config folder\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replaceUriWithPublicUrl\n                        \n                    \n                \n            \n            \n                \nreplaceUriWithPublicUrl(tenantId: string, fileName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Replaces a file name with the actual public URL if it is not already a URL\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveUserUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveUserUpload(tenantId: string, file: Express.Multer.File, isPublic)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:117\n                        \n                    \n\n\n            \n                \n                        Saves a user-uploaded file to the storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The ID of the tenant uploading the file.\n\n                                            \n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The file to upload.\n\n                                            \n                                        \n                                        \n                                                isPublic\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    Whether the file should be publicly accessible.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The metadata of the stored file.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, OnApplicationBootstrap } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { randomUUID } from \"crypto\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport {\n    FILE_STORAGE,\n    FileStorage,\n    StoredObject,\n} from \"../storage/storage.types\";\nimport { FileEntity } from \"./entities/files.entity\";\n\n@Injectable()\nexport class FilesService implements OnApplicationBootstrap {\n    constructor(\n        @Inject(FILE_STORAGE) private storage: FileStorage,\n        @InjectRepository(FileEntity)\n        private fileRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n    ) {}\n\n    /**\n     * On application bootstrap, import images from the config folder\n     * @returns\n     */\n    onApplicationBootstrap() {\n        return this.import();\n    }\n\n    /**\n     * Import images from the config folder\n     */\n    async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"images\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    //check if already exists\n                    const exists = await this.fileRepository.findOneBy({\n                        filename: file,\n                        tenantId: tenant.name,\n                    });\n                    if (exists && !force) {\n                        this.logger.info(\n                            {\n                                event: \"Import\",\n                            },\n                            `Image ${file} already exists for ${tenant.name}, skipping`,\n                        );\n                        continue;\n                    }\n\n                    const key = randomUUID();\n                    await this.storage.put(\n                        key,\n                        readFileSync(join(path, file)),\n                        {\n                            contentType: \"application/octet-stream\",\n                            acl: \"public\",\n                            metadata: { originalName: file },\n                        },\n                    );\n                    await this.fileRepository.save({\n                        id: key,\n                        filename: file,\n                        tenantId: tenant.name,\n                    });\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} images imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Replaces a file name with the actual public URL if it is not already a URL\n     * @param tenantId\n     * @param fileName\n     * @returns\n     */\n    replaceUriWithPublicUrl(tenantId: string, fileName: string) {\n        if (fileName.startsWith(\"http\")) return fileName;\n        return this.fileRepository\n            .findOneBy({ tenantId, filename: fileName })\n            .then((file) =>\n                file\n                    ? `${this.configService.get(\"PUBLIC_URL\")}/storage/${file.id}`\n                    : undefined,\n            );\n    }\n\n    /**\n     * Saves a user-uploaded file to the storage.\n     * @param tenantId The ID of the tenant uploading the file.\n     * @param file The file to upload.\n     * @param isPublic Whether the file should be publicly accessible.\n     * @returns The metadata of the stored file.\n     */\n    async saveUserUpload(\n        tenantId: string,\n        file: Express.Multer.File,\n        isPublic = false,\n    ): Promise {\n        const key = randomUUID();\n        const response = await this.storage.put(key, file.buffer, {\n            contentType: file.mimetype,\n            acl: isPublic ? \"public\" : \"private\",\n            metadata: { originalName: file.originalname },\n        });\n        await this.fileRepository.save({\n            id: key,\n            filename: file.originalname,\n            tenantId,\n        });\n        const url = await this.getDownloadUrl(response.key);\n        return {\n            key: response.key,\n            url,\n        };\n    }\n\n    /**\n     * Retrieves a readable stream of the file associated with the given key.\n     * @param key The unique identifier of the file.\n     * @returns A promise that resolves to a readable stream of the file.\n     */\n    getStream(key: string) {\n        return Promise.resolve(this.storage.getStream(key));\n    }\n\n    /**\n     * Deletes a file from the storage.\n     * @param key The unique identifier of the file.\n     * @returns A promise that resolves when the file is deleted.\n     */\n    delete(key: string) {\n        return Promise.resolve(this.storage.delete(key));\n    }\n\n    getDownloadUrl(key: string) {\n        if (this.storage.getSignedUrl) return this.storage.getSignedUrl(key);\n        return Promise.resolve(\n            `${this.configService.get(\"PUBLIC_URL\")}/storage/${key}`,\n        );\n    }\n\n    /**\n     * Deletes all files associated with a specific tenant\n     * @param tenantId The ID of the tenant whose files should be deleted.\n     */\n    async deleteByTenant(tenantId: string) {\n        const files = await this.fileRepository.find({ where: { tenantId } });\n        await Promise.all(files.map((file) => this.storage.delete(file.id)));\n        await this.fileRepository.delete({ tenantId });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GenerateTokenOptions.html":{"url":"interfaces/GenerateTokenOptions.html","title":"interface - GenerateTokenOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GenerateTokenOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            audience\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { jwtVerify, SignJWT } from \"jose\";\nimport { DEFAULT_JWT_SECRET } from \"./auth-validation.schema\";\nimport { InternalTokenPayload, TokenPayload } from \"./token.decorator\";\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {\n        if (\n            this.configService.get(\"JWT_SECRET\") === DEFAULT_JWT_SECRET\n        ) {\n            console.warn(\n                \"Using default JWT secret. This is not secure for production environments.\",\n            );\n        }\n    }\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: InternalTokenPayload,\n        options: GenerateTokenOptions,\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow(\"JWT_EXPIRES_IN\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: \"HS256\" })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token verification is handled by external OIDC provider.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: [\"HS256\"],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get(\"OIDC\") !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                HealthController is responsible for providing health check endpoints.\nIt uses the HealthCheckService to perform checks on the database connection.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Endpoint to check the health of the service.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n    HealthCheck,\n    HealthCheckService,\n    TypeOrmHealthIndicator,\n} from \"@nestjs/terminus\";\n\n/**\n * HealthController is responsible for providing health check endpoints.\n * It uses the HealthCheckService to perform checks on the database connection.\n */\n@Controller(\"health\")\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private db: TypeOrmHealthIndicator,\n    ) {}\n\n    /**\n     * Endpoint to check the health of the service.\n     * @returns\n     */\n    @Get()\n    @HealthCheck()\n    check() {\n        return this.health.check([() => this.db.pingCheck(\"database\")]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n    imports: [TerminusModule],\n    controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InternalClientsProvider.html":{"url":"injectables/InternalClientsProvider.html","title":"injectable - InternalClientsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  InternalClientsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client/adapters/internal-clients.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addClient\n                            \n                            \n                                getClient\n                            \n                            \n                                getClients\n                            \n                            \n                                getClientSecret\n                            \n                            \n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                removeClient\n                            \n                            \n                                updateClient\n                            \n                            \n                                validateClientCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, logger: PinoLogger, repo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/client/adapters/internal-clients.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    addClient(tenantId: string, dto: CreateClientDto, secret)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/internal-clients.service.ts:146\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateClientDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                secret\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    randomBytes(32).toString(\"hex\")\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient(tenantId: string, clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/internal-clients.service.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClients\n                        \n                    \n                \n            \n            \n                \ngetClients(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/internal-clients.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClientSecret\n                        \n                    \n                \n            \n            \n                \ngetClientSecret(sub: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/internal-clients.service.ts:140\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/internal-clients.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/internal-clients.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeClient(tenantId: string, clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/internal-clients.service.ts:179\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateClient\n                        \n                    \n                \n            \n            \n                \nupdateClient(tenantId: string, clientId: string, updateClientDto: UpdateClientDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/internal-clients.service.ts:168\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateClientDto\n                                            \n                                                            UpdateClientDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateClientCredentials\n                        \n                    \n                \n            \n            \n                \nvalidateClientCredentials(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/internal-clients.service.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { randomBytes } from \"crypto\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { Role } from \"../../roles/role.enum\";\nimport { ClientsProvider } from \"../client.provider\";\nimport { CreateClientDto } from \"../dto/create-client.dto\";\nimport { UpdateClientDto } from \"../dto/update-client.dto\";\nimport { ClientEntity } from \"../entities/client.entity\";\n\n@Injectable()\nexport class InternalClientsProvider\n    implements ClientsProvider, OnApplicationBootstrap\n{\n    constructor(\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        @InjectRepository(ClientEntity) private repo: Repository,\n    ) {}\n\n    async onApplicationBootstrap() {\n        //add the root user\n\n        const clientId = this.configService.getOrThrow(\"AUTH_CLIENT_ID\");\n        const clientSecret =\n            this.configService.getOrThrow(\"AUTH_CLIENT_SECRET\");\n        await this.getClient(\"root\", clientId).catch(() => {\n            return this.repo.save({\n                clientId,\n                secret: clientSecret,\n                description: \"Internal client\",\n                roles: [Role.Tenants],\n            });\n        });\n\n        return this.import();\n    }\n\n    async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"clients\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), \"utf8\"),\n                    );\n\n                    const clientExists = await this.getClient(\n                        tenant.name,\n                        `${tenant.name}-${payload.clientId}`,\n                    ).catch(() => false);\n                    if (clientExists && !force) {\n                        continue; // Skip if config already exists and force is not set\n                    } else if (clientExists && force) {\n                        //delete old element so removed elements are not present\n                        await this.repo.delete({\n                            clientId: payload.clientId,\n                            tenant: { id: tenant.name },\n                        });\n                    }\n\n                    // Validate the payload against ClientEntity\n                    const config = plainToClass(ClientEntity, payload);\n\n                    const validationErrors = await validate(config, {\n                        whitelist: true,\n                        forbidUnknownValues: false, // avoid false positives on plain objects\n                        forbidNonWhitelisted: false,\n                        stopAtFirstError: false,\n                    });\n\n                    if (validationErrors.length > 0) {\n                        this.logger.error(\n                            {\n                                event: \"ValidationError\",\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for client config ${file} in tenant ${tenant.name}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n                    await this.addClient(tenant.name, config, payload.secret);\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} client configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    getClients(tenantId: string) {\n        return this.repo\n            .find({ where: { tenant: { id: tenantId } } })\n            .then((list) =>\n                list.map((e) => ({\n                    clientId: e.clientId,\n                    description: e.description,\n                    tenantId,\n                    roles: e.roles,\n                })),\n            );\n    }\n\n    getClient(tenantId: string, clientId: string) {\n        return this.repo\n            .findOneByOrFail({ clientId, tenant: { id: tenantId } })\n            .then((e) => ({\n                clientId: e.clientId,\n                description: e.description,\n                tenantId,\n                roles: e.roles,\n            }));\n    }\n\n    getClientSecret(sub: string, id: string): Promise {\n        return this.repo\n            .findOneByOrFail({ clientId: id, tenant: { id: sub } })\n            .then((e) => e.secret!);\n    }\n\n    async addClient(\n        tenantId: string,\n        dto: CreateClientDto,\n        secret = randomBytes(32).toString(\"hex\"),\n    ) {\n        // we are adding the prefix because the clientId is not bound to tenant during login. This is relevant since not every tenant has it's own client database/iam system.\n        dto.clientId = `${tenantId}-${dto.clientId}`;\n\n        const entity = await this.repo.save({\n            ...dto,\n            secret,\n            tenant: { id: tenantId },\n        });\n        return {\n            clientId: entity.clientId,\n            description: entity.description,\n            tenantId,\n            roles: entity.roles,\n            clientSecret: secret,\n        };\n    }\n\n    updateClient(\n        tenantId: string,\n        clientId: string,\n        updateClientDto: UpdateClientDto,\n    ) {\n        return this.repo.update(\n            { clientId, tenant: { id: tenantId } },\n            updateClientDto,\n        );\n    }\n\n    async removeClient(tenantId: string, clientId: string) {\n        await this.repo.delete({ clientId, tenant: { id: tenantId } });\n    }\n\n    validateClientCredentials(clientId: string, clientSecret: string) {\n        return this.repo.findOne({ where: { clientId, secret: clientSecret } });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InternalTokenPayload.html":{"url":"interfaces/InternalTokenPayload.html","title":"interface - InternalTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InternalTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.decorator.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            TokenPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            tenant_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        tenant_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tenant_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tenant ID\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from \"@nestjs/common\";\nimport { Role } from \"./roles/role.enum\";\nimport { TenantEntity } from \"./tenant/entitites/tenant.entity\";\n\n/**\n * Token decorator\n */\nexport const Token = createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n);\n\n/**\n * Values of the user token\n */\nexport interface TokenPayload {\n    /**\n     * Tenant entity\n     */\n    entity?: TenantEntity;\n\n    /**\n     * Role for the user\n     */\n    roles: Role[];\n}\n\nexport interface InternalTokenPayload extends TokenPayload {\n    /**\n     * Tenant ID\n     */\n    tenant_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/IssuanceConfig.html":{"url":"entities/IssuanceConfig.html","title":"entity - IssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  IssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/entities/issuance-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage issuance configs\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                authenticationConfig\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                batchSize\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                credentialConfigs\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                dPopRequired\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        authenticationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationMethodNone | AuthenticationMethodAuth | AuthenticationMethodPresentation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@ValidateNested()@ApiProperty({oneOf: undefined})@Type(undefined, {discriminator: undefined, keepDiscriminatorProperty: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:114\n                        \n                    \n\n            \n                \n                    Authentication configuration for the issuance process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        batchSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Column('int', {default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:156\n                        \n                    \n\n            \n                \n                    Value to determine the amount of credentials that are issued in a batch.\nDefault is 1.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:138\n                        \n                    \n\n            \n                \n                    Webhook to receive claims for the issuance process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:123\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credentialConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfig[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, credential => credential.issuanceConfigs)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:80\n                        \n                    \n\n            \n                \n                    Links to all credential config bindings that are included in this issuance config.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:70\n                        \n                    \n\n            \n                \n                    Description of the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        dPopRequired\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@Column('boolean', {default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:164\n                        \n                    \n\n            \n                \n                    Indicates whether DPoP is required for the issuance process. Default value is true.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:49\n                        \n                    \n\n            \n                \n                    Unique identifier for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:147\n                        \n                    \n\n            \n                \n                    Webhook to send the result of the notification response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:62\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:56\n                        \n                    \n\n            \n                \n                    Tenant ID for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:129\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    JoinTable,\n    ManyToMany,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { CredentialConfig } from \"../../credentials/entities/credential.entity\";\nimport {\n    AuthenticationMethod,\n    AuthenticationMethodAuth,\n    AuthenticationMethodNone,\n    AuthenticationMethodPresentation,\n} from \"../dto/authentication-config.dto\";\n\n/**\n * Entity to manage issuance configs\n */\n@ApiExtraModels(\n    AuthenticationMethodNone,\n    AuthenticationMethodAuth,\n    AuthenticationMethodPresentation,\n)\n@Entity()\nexport class IssuanceConfig {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the issuance configuration.\n     */\n    @IsString()\n    @IsOptional()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    /**\n     * Links to all credential config bindings that are included in this issuance config.\n     */\n    @ManyToMany(\n        () => CredentialConfig,\n        (credential) => credential.issuanceConfigs,\n    )\n    @JoinTable()\n    credentialConfigs: CredentialConfig[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AuthenticationMethodNone) },\n            { $ref: getSchemaPath(AuthenticationMethodAuth) },\n            { $ref: getSchemaPath(AuthenticationMethodPresentation) },\n        ],\n    })\n    @Type(() => AuthenticationMethodNone, {\n        discriminator: {\n            property: \"method\",\n            subTypes: [\n                {\n                    name: AuthenticationMethod.NONE,\n                    value: AuthenticationMethodNone,\n                },\n                {\n                    name: AuthenticationMethod.AUTH,\n                    value: AuthenticationMethodAuth,\n                },\n                {\n                    name: AuthenticationMethod.PRESENTATION_DURING_ISSUANCE,\n                    value: AuthenticationMethodPresentation,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    authenticationConfig:\n        | AuthenticationMethodNone\n        | AuthenticationMethodAuth\n        | AuthenticationMethodPresentation;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Webhook to receive claims for the issuance process.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @Column(\"json\", { nullable: true })\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Webhook to send the result of the notification response\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @Column(\"json\", { nullable: true })\n    notifyWebhook?: WebhookConfig;\n\n    /**\n     * Value to determine the amount of credentials that are issued in a batch.\n     * Default is 1.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 1 })\n    batchSize?: number;\n\n    /**\n     * Indicates whether DPoP is required for the issuance process. Default value is true.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: true })\n    dPopRequired?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuanceController.html":{"url":"controllers/IssuanceController.html","title":"controller - IssuanceController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  IssuanceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.controller.ts\n        \n            \n                Prefix\n            \n            \n                issuer-management/issuance\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getIssuanceConfigurations\n                            \n                            \n                                    \n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:46\n                        \n                    \n\n\n            \n                \n                        Deletes an issuance configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getIssuanceConfigurations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfigurations(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:20\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(config: IssuanceDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Stores the issuance configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post } from \"@nestjs/common\";\nimport { ApiTags } from \"@nestjs/swagger\";\nimport { Role } from \"../../auth/roles/role.enum\";\nimport { Secured } from \"../../auth/secure.decorator\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { IssuanceDto } from \"./dto/issuance.dto\";\nimport { IssuanceService } from \"./issuance.service\";\n\n@ApiTags(\"Issuer management\")\n@Secured([Role.Issuances])\n@Controller(\"issuer-management/issuance\")\nexport class IssuanceController {\n    constructor(private readonly issuanceService: IssuanceService) {}\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getIssuanceConfigurations(@Token() user: TokenPayload) {\n        return this.issuanceService.getIssuanceConfiguration(user.entity!.id);\n    }\n\n    /**\n     * Stores the issuance configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeIssuanceConfiguration(\n        @Body() config: IssuanceDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.storeIssuanceConfiguration(\n            user.entity!.id,\n            config,\n        );\n    }\n\n    /**\n     * Deletes an issuance configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteIssuanceConfiguration(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.deleteIssuanceConfiguration(\n            user.entity!.id,\n            id,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IssuanceDto.html":{"url":"classes/IssuanceDto.html","title":"class - IssuanceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IssuanceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for mapping issuance configurations.\n\n            \n\n            \n                Extends\n            \n            \n                            OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"credentialConfigs\",\n] as const)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:30\n                        \n                    \n\n            \n                \n                    Ids of the credential configurations associated with this issuance configuration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\nimport { IssuanceConfig } from \"../entities/issuance-config.entity\";\n\n/**\n * DTO for mapping credential configurations in issuance.\n */\nexport class CredentialConfigMapping {\n    /**\n     * Unique identifier for the credential configuration.\n     */\n    @IsString()\n    id: string;\n}\n\n/**\n * DTO for mapping issuance configurations.\n */\nexport class IssuanceDto extends OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"credentialConfigs\",\n] as const) {\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    credentialConfigIds: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssuanceService.html":{"url":"injectables/IssuanceService.html","title":"injectable - IssuanceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  IssuanceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing issuance configurations.\nIt provides methods to get, store, and delete issuance configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    Public\n                                getIssuanceConfiguration\n                            \n                            \n                                getIssuanceConfigurationById\n                            \n                            \n                                    Private\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(issuanceConfigRepo: Repository, credentialsConfigService: CredentialConfigService, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/issuance/issuance.service.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor for IssuanceService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        issuanceConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsConfigService\n                                                  \n                                                        \n                                                                        CredentialConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \ndeleteIssuanceConfiguration(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:168\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getIssuanceConfigurationById\n                        \n                    \n                \n            \n            \n                \ngetIssuanceConfigurationById(issuanceConfigId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:181\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configuration by ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuanceConfigId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations and the credential configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(tenantId: string, value: IssuanceDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:197\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { CredentialConfigService } from \"../credentials/credential-config/credential-config.service\";\nimport { CredentialConfig } from \"../credentials/entities/credential.entity\";\nimport { IssuanceDto } from \"./dto/issuance.dto\";\nimport { IssuanceConfig } from \"./entities/issuance-config.entity\";\n\n/**\n * Service for managing issuance configurations.\n * It provides methods to get, store, and delete issuance configurations.\n */\n@Injectable()\nexport class IssuanceService implements OnApplicationBootstrap {\n    /**\n     * Constructor for IssuanceService.\n     * @param issuanceConfigRepo\n     * @param credentialsConfigService\n     */\n    constructor(\n        @InjectRepository(IssuanceConfig)\n        private issuanceConfigRepo: Repository,\n        private credentialsConfigService: CredentialConfigService,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Import issuance configurations and the credential configurations from the configured folder.\n     */\n    async onApplicationBootstrap() {\n        await this.cryptoService.import();\n        await this.credentialsConfigService.import();\n        await this.import();\n    }\n\n    /**\n     * Import issuance configurations from the configured folder.\n     */\n    private async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"issuance/issuance\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), \"utf8\"),\n                    );\n\n                    payload.id = file.replace(\".json\", \"\");\n                    const exists = await this.getIssuanceConfigurationById(\n                        payload.id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (exists && !force) {\n                        continue; // Skip if config already exists and force is not set.\n                    } else if (exists && force) {\n                        //delete old element so removed elements are not present\n                        await this.issuanceConfigRepo.delete({\n                            id: payload.id,\n                            tenantId: tenant.name,\n                        });\n                    }\n\n                    // Validate the payload against IssuanceDto\n                    const issuanceDto = plainToClass(IssuanceDto, payload);\n                    //TOODO: it does not validate the different config options\n                    const validationErrors = await validate(issuanceDto, {\n                        whitelist: true,\n                        forbidUnknownValues: false, // avoid false positives on plain objects\n                        forbidNonWhitelisted: false,\n                        stopAtFirstError: false,\n                    });\n\n                    if (validationErrors.length > 0) {\n                        const extractErrorMessages = (error: any): string[] => {\n                            const messages: string[] = [];\n\n                            // Add constraints from the current level\n                            if (error.constraints) {\n                                messages.push(\n                                    ...Object.values(\n                                        error.constraints as Record,\n                                    ),\n                                );\n                            }\n\n                            // Recursively add constraints from children\n                            if (error.children && error.children.length > 0) {\n                                for (const child of error.children) {\n                                    messages.push(\n                                        ...extractErrorMessages(child),\n                                    );\n                                }\n                            }\n\n                            return messages;\n                        };\n\n                        const errorMessages = validationErrors\n                            .map((error) => {\n                                const messages = extractErrorMessages(error);\n                                return messages.length > 0\n                                    ? `${error.property}: ${messages.join(\", \")}`\n                                    : error.property;\n                            })\n                            .join(\"; \");\n\n                        this.logger.error(\n                            {\n                                event: \"ValidationError\",\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for issuance config ${file} in tenant ${tenant.name}: ${errorMessages}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n                    await this.storeIssuanceConfiguration(\n                        tenant.name,\n                        issuanceDto,\n                    );\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} issuance configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    async onTenantDelete(tenantId: string) {\n        await this.issuanceConfigRepo.delete({ tenantId });\n    }\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @param tenantId\n     * @returns\n     */\n    public getIssuanceConfiguration(tenantId: string) {\n        return this.issuanceConfigRepo.find({\n            where: { tenantId },\n            relations: [\"credentialConfigs\"],\n        });\n    }\n\n    /**\n     * Returns the issuance configuration by ID for a given tenant.\n     * @param issuanceConfigId\n     * @param tenantId\n     * @returns\n     */\n    getIssuanceConfigurationById(\n        issuanceConfigId: string,\n        tenantId: string,\n    ): Promise {\n        return this.issuanceConfigRepo.findOneOrFail({\n            where: { id: issuanceConfigId, tenantId },\n            relations: [\"credentialConfigs\"],\n        });\n    }\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeIssuanceConfiguration(tenantId: string, value: IssuanceDto) {\n        const credentials: CredentialConfig[] = [];\n        //check if all credential configs exist\n        for (const credentialConfigId of value.credentialConfigIds) {\n            const credential = await this.credentialsConfigService.getById(\n                tenantId,\n                credentialConfigId,\n            );\n            credentials.push(credential);\n        }\n        const issuanceConfig = await this.issuanceConfigRepo.save({\n            ...value,\n            tenantId,\n            credentialConfigs: credentials,\n        });\n        return issuanceConfig;\n    }\n\n    /**\n     * Deletes a credential configuration.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    deleteIssuanceConfiguration(tenantId: string, id: string) {\n        return this.issuanceConfigRepo.delete({ tenantId, id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuerManagementController.html":{"url":"controllers/IssuerManagementController.html","title":"controller - IssuerManagementController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  IssuerManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuer-management/issuer-management.controller.ts\n        \n            \n                Prefix\n            \n            \n                issuer-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: OfferRequestDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@ApiBody({type: OfferRequestDto, examples: undefined})@Post('offer')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Create an offer for a credential.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            OfferRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Res } from \"@nestjs/common\";\nimport { ApiBody, ApiProduces, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Response } from \"express\";\nimport * as QRCode from \"qrcode\";\nimport { Role } from \"../../auth/roles/role.enum\";\nimport { Secured } from \"../../auth/secure.decorator\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { ResponseType } from \"../../verifier/oid4vp/dto/presentation-request.dto\";\nimport {\n    OfferRequestDto,\n    OfferResponse,\n} from \"../oid4vci/dto/offer-request.dto\";\n\n@ApiTags(\"Issuer management\")\n@Secured([Role.Issuances])\n@Controller(\"issuer-management\")\nexport class IssuerManagementController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Create an offer for a credential.\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: \"JSON response\",\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            \"application/json\": { schema: { type: \"object\" } },\n            \"image/png\": { schema: { type: \"string\", format: \"binary\" } },\n        },\n    })\n    @ApiProduces(\"application/json\", \"image/png\")\n    @ApiBody({\n        type: OfferRequestDto,\n        examples: {\n            qrcode: {\n                summary: \"QR-Code Example\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid\",\n                } as OfferRequestDto,\n            },\n            uri: {\n                summary: \"URI\",\n                value: {\n                    response_type: ResponseType.URI,\n                    issuanceId: \"pid\",\n                } as OfferRequestDto,\n            },\n            authfixed: {\n                summary: \"Auth flow with fixed session\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid\",\n                    session: \"fd3ebf28-8ad6-4909-8a7a-a739c2c412c0\",\n                } as OfferRequestDto,\n            },\n            override: {\n                summary: \"Override\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid-none\",\n                    claims: {\n                        pid: {\n                            given_name: \"Max\",\n                        },\n                    },\n                } as OfferRequestDto,\n            },\n        },\n    })\n    @Post(\"offer\")\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: OfferRequestDto,\n        @Token() user: TokenPayload,\n    ) {\n        // For now, we'll just pass the body to the service as before\n        // You can modify the service later to accept user information if needed\n        const values = await this.oid4vciService.createOffer(\n            body,\n            user,\n            user.entity!.id,\n        );\n\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader(\"Content-Type\", \"image/png\");\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IssuerMetadata.html":{"url":"interfaces/IssuerMetadata.html","title":"interface - IssuerMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IssuerMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/dto/issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the issuer metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            jwks\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The issuer identifier, typically a URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { JWK } from \"jose\";\n\n/**\n * Interface representing the issuer metadata.\n */\nexport interface IssuerMetadata {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    issuer: string;\n    /**\n     * The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n     */\n    jwks: {\n        /**\n         * List of keys in the JWKS.\n         */\n        keys: JWK[];\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IssuerMetadataCredentialConfig.html":{"url":"classes/IssuerMetadataCredentialConfig.html","title":"class - IssuerMetadataCredentialConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IssuerMetadataCredentialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                display\n                            \n                            \n                                    \n                                format\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Display[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToMany, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../../issuance/entities/issuance-config.entity\";\nimport {\n    AllowListPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    RootOfTrustPolicy,\n} from \"./policies.dto\";\n\nexport class DisplayImage {\n    @IsString()\n    uri: string;\n}\nexport class Display {\n    @IsString()\n    name: string;\n    @IsString()\n    description: string;\n    @IsString()\n    locale: string;\n    @IsString()\n    background_color?: string;\n    @IsString()\n    text_color?: string;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    background_image?: DisplayImage;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    logo?: DisplayImage;\n}\n\nexport class IssuerMetadataCredentialConfig {\n    @IsString()\n    format: string;\n    @ValidateNested()\n    @Type(() => Display)\n    display: Display[];\n    @IsOptional()\n    @IsString()\n    scope?: string;\n}\n\n@ApiExtraModels(\n    AttestationBasedPolicy,\n    NoneTrustPolicy,\n    AllowListPolicy,\n    RootOfTrustPolicy,\n)\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => IssuerMetadataCredentialConfig)\n    config!: IssuerMetadataCredentialConfig;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity, { onDelete: \"SET NULL\" })\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AttestationBasedPolicy) },\n            { $ref: getSchemaPath(NoneTrustPolicy) },\n            { $ref: getSchemaPath(AllowListPolicy) },\n            { $ref: getSchemaPath(RootOfTrustPolicy) },\n        ],\n    })\n    @Type(() => AttestationBasedPolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: \"none\", value: NoneTrustPolicy },\n                { name: \"allowList\", value: AllowListPolicy },\n                { name: \"rootOfTrust\", value: RootOfTrustPolicy },\n                {\n                    name: \"attestationBased\",\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuance) => issuance.credentialConfigs,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    issuanceConfigs!: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssuerModule.html":{"url":"modules/IssuerModule.html","title":"module - IssuerModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    IssuerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nCredentialConfigService \n\nCredentialConfigService \n\nCredentialConfigService  -->\n\nIssuerModule->CredentialConfigService \n\n\n\n\n\nIssuanceService \n\nIssuanceService \n\nIssuanceService  -->\n\nIssuerModule->IssuanceService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nDisplayService\n\nDisplayService\n\nIssuerModule -->\n\nDisplayService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/issuer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialConfigService\n                        \n                        \n                            CredentialsService\n                        \n                        \n                            DisplayService\n                        \n                        \n                            IssuanceService\n                        \n                        \n                            Oid4vciService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vciController\n                        \n                        \n                            AuthorizeController\n                        \n                        \n                            CredentialsController\n                        \n                        \n                            IssuerManagementController\n                        \n                        \n                            IssuanceController\n                        \n                        \n                            CredentialsMetadataController\n                        \n                        \n                            DisplayController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialConfigService\n                        \n                        \n                            IssuanceService\n                        \n                        \n                            Oid4vciService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { setGlobalConfig } from \"@openid4vc/openid4vci\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { WebhookService } from \"../utils/webhook/webhook.service\";\nimport { Oid4vpModule } from \"../verifier/oid4vp/oid4vp.module\";\nimport { AuthorizeController } from \"./authorize/authorize.controller\";\nimport { AuthorizeService } from \"./authorize/authorize.service\";\nimport { CredentialConfigService } from \"./credentials/credential-config/credential-config.service\";\nimport { CredentialsController } from \"./credentials/credentials.controller\";\nimport { CredentialsService } from \"./credentials/credentials.service\";\nimport { CredentialConfig } from \"./credentials/entities/credential.entity\";\nimport { CredentialsMetadataController } from \"./credentials-metadata/credentials-metadata.controller\";\nimport { DisplayController } from \"./display/display.controller\";\nimport { DisplayService } from \"./display/display.service\";\nimport { DisplayEntity } from \"./display/entities/display.entity\";\nimport { IssuanceConfig } from \"./issuance/entities/issuance-config.entity\";\nimport { IssuanceController } from \"./issuance/issuance.controller\";\nimport { IssuanceService } from \"./issuance/issuance.service\";\nimport { IssuerManagementController } from \"./issuer-management/issuer-management.controller\";\nimport { Oid4vciController } from \"./oid4vci/oid4vci.controller\";\nimport { Oid4vciService } from \"./oid4vci/oid4vci.service\";\nimport { StatusListModule } from \"./status-list/status-list.module\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        StatusListModule,\n        Oid4vpModule,\n        SessionModule,\n        HttpModule,\n        TypeOrmModule.forFeature([\n            IssuanceConfig,\n            CredentialConfig,\n            DisplayEntity,\n        ]),\n    ],\n    controllers: [\n        Oid4vciController,\n        AuthorizeController,\n        CredentialsController,\n        IssuerManagementController,\n        IssuanceController,\n        CredentialsMetadataController,\n        DisplayController,\n    ],\n    providers: [\n        AuthorizeService,\n        CredentialsService,\n        Oid4vciService,\n        IssuanceService,\n        CredentialConfigService,\n        WebhookService,\n        DisplayService,\n    ],\n    exports: [\n        AuthorizeService,\n        Oid4vciService,\n        IssuanceService,\n        CredentialConfigService,\n    ],\n})\nexport class IssuerModule {\n    constructor(configService: ConfigService) {\n        const unsecure = configService\n            .getOrThrow(\"PUBLIC_URL\")\n            .startsWith(\"http://\");\n        setGlobalConfig({ allowInsecureUrls: unsecure });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwksResponseDto.html":{"url":"classes/JwksResponseDto.html","title":"class - JwksResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwksResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    An array of EC public keys in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from \"jose\";\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: \"EC\";\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard(\"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { AuthGuard } from \"@nestjs/passport\";\nimport { IS_PUBLIC_KEY } from \"./public.decorator\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard(\"jwt\") {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            IS_PUBLIC_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) {\n            return true;\n        }\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtService.html":{"url":"injectables/JwtService.html","title":"injectable - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                isUsingExternalOIDC\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(payload: InternalTokenPayload, options: GenerateTokenOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Generate a JWT token for integrated OAuth2 server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            InternalTokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            GenerateTokenOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsingExternalOIDC\n                        \n                    \n                \n            \n            \n                \nisUsingExternalOIDC()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Check if the service is using external OIDC provider\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Verify a JWT token (for additional validation if needed)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { jwtVerify, SignJWT } from \"jose\";\nimport { DEFAULT_JWT_SECRET } from \"./auth-validation.schema\";\nimport { InternalTokenPayload, TokenPayload } from \"./token.decorator\";\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {\n        if (\n            this.configService.get(\"JWT_SECRET\") === DEFAULT_JWT_SECRET\n        ) {\n            console.warn(\n                \"Using default JWT secret. This is not secure for production environments.\",\n            );\n        }\n    }\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: InternalTokenPayload,\n        options: GenerateTokenOptions,\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow(\"JWT_EXPIRES_IN\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: \"HS256\" })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token verification is handled by external OIDC provider.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: [\"HS256\"],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get(\"OIDC\") !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, \"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Private\n                                    Static\n                                getExternalOIDCConfig\n                            \n                            \n                                    Private\n                                    Static\n                                getIntegratedOAuth2Config\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, tenantService: TenantService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantService\n                                                  \n                                                        \n                                                                        TenantService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: any, options?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getExternalOIDCConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExternalOIDCConfig(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { secretOrKeyProvider: any; jwtFromRequest: any; algorithms: {}; issuer: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getIntegratedOAuth2Config\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntegratedOAuth2Config(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: InternalTokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:83\n                        \n                    \n\n\n            \n                \n                        Validate the JWT payload. It will also check if the client is set up.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            InternalTokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The JWT payload\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The validated payload or an error\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { passportJwtSecret } from \"jwks-rsa\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { TenantService } from \"./tenant/tenant.service\";\nimport { InternalTokenPayload } from \"./token.decorator\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, \"jwt\") {\n    constructor(\n        private configService: ConfigService,\n        private tenantService: TenantService,\n    ) {\n        const useExternalOIDC = configService.get(\"OIDC\");\n\n        const config = useExternalOIDC\n            ? JwtStrategy.getExternalOIDCConfig(configService)\n            : JwtStrategy.getIntegratedOAuth2Config(configService);\n        super(config);\n    }\n\n    // Override authenticate to add debugging\n    authenticate(req: any, options?: any) {\n        return super.authenticate(req, {\n            ...options,\n            failWithError: true, // This will throw errors instead of just returning 401\n        });\n    }\n\n    private static getExternalOIDCConfig(configService: ConfigService) {\n        const keycloakIssuerUrl = configService.get(\"OIDC_INTERNAL_ISSUER_URL\");\n        const jwksUri = `${keycloakIssuerUrl}/protocol/openid-connect/certs`;\n\n        return {\n            secretOrKeyProvider: passportJwtSecret({\n                cache: true,\n                rateLimit: true,\n                jwksRequestsPerMinute: 5,\n                jwksUri: jwksUri,\n                handleSigningKeyError: (err, cb) => {\n                    console.error(\"❌ Keycloak JWKS error:\", err);\n                    if (err instanceof Error) {\n                        return cb(err);\n                    }\n                    return cb(\n                        new Error(\n                            \"Could not get the signing key from Keycloak\",\n                        ),\n                    );\n                },\n            }),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: [configService.get(\"OIDC_ALGORITHM\")],\n            issuer: keycloakIssuerUrl,\n        };\n    }\n\n    private static getIntegratedOAuth2Config(\n        configService: ConfigService,\n    ): any {\n        const config = {\n            secretOrKey: configService.get(\"JWT_SECRET\"),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: [\"HS256\"], // Using symmetric key for integrated OAuth2\n            ignoreExpiration: false, // Ensure tokens expire\n        };\n\n        // Add issuer validation only if JWT_ISSUER is configured\n        const issuer = configService.get(\"JWT_ISSUER\");\n        if (issuer) {\n            (config as any).issuer = issuer;\n        }\n\n        return config;\n    }\n\n    /**\n     * Validate the JWT payload. It will also check if the client is set up.\n     * @param payload The JWT payload\n     * @returns The validated payload or an error\n     */\n    async validate(payload: InternalTokenPayload): Promise {\n        const useExternalOIDC =\n            this.configService.get(\"OIDC\") !== undefined;\n        let sub = payload.tenant_id;\n        if (useExternalOIDC) {\n            const key = this.configService.getOrThrow(\"OIDC_SUB\");\n            sub = (payload as any)[key] as string;\n        }\n\n        const tenantEntity = await this.tenantService\n            .getTenant(sub)\n            .catch(() => null);\n\n        return {\n            entity: tenantEntity,\n            roles: payload.roles || (payload as any).realm_access?.roles || [],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Key.html":{"url":"classes/Key.html","title":"class - Key","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Key\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        JWK\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                alg\n                            \n                            \n                                    \n                                crv\n                            \n                            \n                                    \n                                d\n                            \n                            \n                                    \n                                kid\n                            \n                            \n                                    \n                                kty\n                            \n                            \n                                    \n                                x\n                            \n                            \n                                    \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        alg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        d\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['EC'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsEnum, IsOptional, IsString, ValidateNested } from \"class-validator\";\nimport { JWK } from \"jose\";\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum([\"EC\"])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @ValidateNested()\n    @Type(() => Key)\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n\n    /**\n     * Description of the key.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/KeyController.html":{"url":"controllers/KeyController.html","title":"controller - KeyController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  KeyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.controller.ts\n        \n            \n                Prefix\n            \n            \n                key\n            \n\n\n            \n                Description\n            \n            \n                KeyController is responsible for managing keys in the system.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addKey\n                            \n                            \n                                    \n                                deleteKey\n                            \n                            \n                                    \n                                getKeys\n                            \n                            \n                                    \n                                    Async\n                                updateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    addKey(token: TokenPayload, body: KeyImportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:48\n                        \n                    \n\n\n            \n                \n                        Add a new key to the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteKey(token: TokenPayload, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Delete a key from the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeys(token: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Get all keys for the tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateKey(token: TokenPayload, id: string, body: UpdateKeyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:63\n                        \n                    \n\n\n            \n                \n                        Updates an existing key in the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateKeyDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Inject,\n    Param,\n    Post,\n    Put,\n} from \"@nestjs/common\";\nimport { Role } from \"../../auth/roles/role.enum\";\nimport { Secured } from \"../../auth/secure.decorator\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { CryptoService } from \"../crypto.service\";\nimport { KeyImportDto } from \"./dto/key-import.dto\";\nimport { UpdateKeyDto } from \"./dto/key-update.dto\";\nimport { CertEntity } from \"./entities/cert.entity\";\nimport { KeyService } from \"./key.service\";\n\n/**\n * KeyController is responsible for managing keys in the system.\n */\n@Secured([Role.Issuances, Role.Presentations])\n@Controller(\"key\")\nexport class KeyController {\n    constructor(\n        @Inject(\"KeyService\") public readonly keyService: KeyService,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Get all keys for the tenant.\n     * @param token\n     * @returns\n     */\n    @Get()\n    getKeys(@Token() token: TokenPayload): Promise {\n        return this.cryptoService.getCerts(token.entity!.id);\n    }\n\n    /**\n     * Add a new key to the key service.\n     * @param token\n     * @param body\n     * @returns\n     */\n    @Post()\n    async addKey(\n        @Token() token: TokenPayload,\n        @Body() body: KeyImportDto,\n    ): Promise {\n        const id = await this.cryptoService.importKey(token.entity!, body);\n        return { id };\n    }\n\n    /**\n     * Updates an existing key in the key service.\n     * @param token\n     * @param id\n     * @param body\n     */\n    @Put(\":id\")\n    async updateKey(\n        @Token() token: TokenPayload,\n        @Param(\"id\") id: string,\n        @Body() body: UpdateKeyDto,\n    ): Promise {\n        await this.cryptoService.updateCert(token.entity!.id, id, body);\n    }\n\n    /**\n     * Delete a key from the key service.\n     * @param token\n     * @param id\n     */\n    @Delete(\":id\")\n    deleteKey(@Token() token: TokenPayload, @Param(\"id\") id: string) {\n        return this.cryptoService.deleteKey(token.entity!.id, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/KeyEntity.html":{"url":"entities/KeyEntity.html","title":"entity - KeyEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  KeyEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/keys.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                key\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                usage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:16\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JWK\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:34\n                        \n                    \n\n            \n                \n                    The key material.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:28\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:22\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        usage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KeyUsage\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'sign'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:40\n                        \n                    \n\n            \n                \n                    The usage type of the key.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { JWK } from \"jose\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\n\n/**\n * Key usage types.\n */\nexport type KeyUsage = \"sign\" | \"encrypt\";\n\n@Entity()\nexport class KeyEntity {\n    /**\n     * Unique identifier for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The key material.\n     */\n    @Column(\"json\")\n    key: JWK;\n\n    /**\n     * The usage type of the key.\n     */\n    @Column(\"varchar\", { default: \"sign\" })\n    usage: KeyUsage;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyImportDto.html":{"url":"classes/KeyImportDto.html","title":"class - KeyImportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyImportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for importing a key.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                crt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                privateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:38\n                        \n                    \n\n            \n                \n                    Optional certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:45\n                        \n                    \n\n            \n                \n                    Description of the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Key\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:31\n                        \n                    \n\n            \n                \n                    The private key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsEnum, IsOptional, IsString, ValidateNested } from \"class-validator\";\nimport { JWK } from \"jose\";\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum([\"EC\"])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @ValidateNested()\n    @Type(() => Key)\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n\n    /**\n     * Description of the key.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeyModule.html":{"url":"modules/KeyModule.html","title":"module - KeyModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    KeyModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/key.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.module.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { HttpModule, HttpService } from \"@nestjs/axios\";\nimport { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { getRepositoryToken, TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { DBKeyService } from \"./adapters/db-key.service\";\nimport { VaultKeyService } from \"./adapters/vault-key.service\";\nimport { CryptoImplementatationModule } from \"./crypto-implementation/crypto-implementation.module\";\nimport { CryptoImplementationService } from \"./crypto-implementation/crypto-implementation.service\";\nimport { CertEntity } from \"./entities/cert.entity\";\nimport { KeyEntity } from \"./entities/keys.entity\";\n\n@Global()\n@Module({})\nexport class KeyModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: KeyModule,\n            imports: [\n                HttpModule,\n                ConfigModule,\n                CryptoImplementatationModule,\n                TypeOrmModule.forFeature([CertEntity, KeyEntity]),\n            ],\n            providers: [\n                {\n                    provide: \"KeyService\",\n                    useFactory: (\n                        configService: ConfigService,\n                        httpService: HttpService,\n                        cryptoService: CryptoImplementationService,\n                        certRepository: Repository,\n                        keyRepository: Repository,\n                    ) => {\n                        const kmType = configService.get(\n                            \"KM_TYPE\",\n                        );\n                        if (kmType === \"vault\") {\n                            return new VaultKeyService(\n                                httpService,\n                                configService,\n                                cryptoService,\n                                certRepository,\n                            );\n                        }\n\n                        return new DBKeyService(\n                            configService,\n                            cryptoService,\n                            certRepository,\n                            keyRepository,\n                        );\n                    },\n                    inject: [\n                        ConfigService,\n                        HttpService,\n                        CryptoImplementationService,\n                        getRepositoryToken(CertEntity),\n                        getRepositoryToken(KeyEntity),\n                    ],\n                },\n            ],\n            exports: [\"KeyService\"],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyObj.html":{"url":"classes/KeyObj.html","title":"class - KeyObj","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyObj\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-object.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a key entity with its unique identifier, public key, and certificate.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crt\n                            \n                            \n                                id\n                            \n                            \n                                publicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:19\n                        \n                    \n\n            \n                \n                    Certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:11\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publicKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EC_Public\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:15\n                        \n                    \n\n            \n                \n                    Public key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\n\n/**\n * Represents a key entity with its unique identifier, public key, and certificate.\n */\n\nexport class KeyObj {\n    /**\n     * Unique identifier for the key.\n     */\n    id: string;\n    /**\n     * Public key in JWK format.\n     */\n    publicKey: EC_Public;\n    /**\n     * Certificate in PEM format.\n     */\n    crt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyResponseDto.html":{"url":"classes/KeyResponseDto.html","title":"class - KeyResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EC_Public[]\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\n\nexport class KeyResponseDto {\n    keys: EC_Public[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyService.html":{"url":"classes/KeyService.html","title":"class - KeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface for a key service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                create\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                            \n                                    Abstract\n                                getKid\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                import\n                            \n                            \n                                    Abstract\n                                init\n                            \n                            \n                                    Abstract\n                                signer\n                            \n                            \n                                    Abstract\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, certRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/key.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the generated key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKid(tenantId: string, type?: CertificateType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                            CertificateType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Import a key into the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Initialize the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the initialized key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Get the callback for the signer function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JoseHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JoseHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConflictException } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Signer } from \"@sd-jwt/types\";\nimport { JoseHeaderParameters, JWK, JWTPayload } from \"jose\";\nimport { Repository } from \"typeorm\";\nimport { KeyImportDto } from \"./dto/key-import.dto\";\nimport { CertEntity, CertificateType } from \"./entities/cert.entity\";\n\n/**\n * Generic interface for a key service\n */\nexport abstract class KeyService {\n    constructor(\n        protected configService: ConfigService,\n        protected certRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the key service\n     * @param tenantId\n     * @returns key id of the initialized key.\n     */\n    abstract init(tenantId): Promise;\n\n    /**\n     * Creates a new keypair\n     * @param tenantId\n     * @return key id of the generated key.\n     */\n    abstract create(tenantId): Promise;\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     */\n    abstract import(tenantId: string, body: KeyImportDto): Promise;\n\n    /**\n     * Get the callback for the signer function\n     * @param tenantId\n     */\n    abstract signer(tenantId: string, keyId?: string): Promise;\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    abstract getKid(tenantId: string, type?: CertificateType): Promise;\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    abstract getPublicKey(\n        type: \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: \"pem\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: \"pem\" | \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    //TODO: this can be handled via the signer callback\n    abstract signJWT(\n        payload: JWTPayload,\n        header: JoseHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    /**\n     * Get the certificate for the given key id.\n     * @param tenantId\n     * @param keyId\n     * @returns\n     */\n    protected getCertificate(tenantId: string, keyId: string): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                id: keyId,\n            })\n            .then(\n                (cert) => cert.crt,\n                () => {\n                    throw new ConflictException(\"Certificate not found\");\n                },\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KeycloakClientsProvider.html":{"url":"injectables/KeycloakClientsProvider.html","title":"injectable - KeycloakClientsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  KeycloakClientsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client/adapters/keycloak-clients.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kc\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addClient\n                            \n                            \n                                    Async\n                                getClient\n                            \n                            \n                                    Async\n                                getClients\n                            \n                            \n                                getClientSecret\n                            \n                            \n                                import\n                            \n                            \n                                    Private\n                                init\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                removeClient\n                            \n                            \n                                    Async\n                                updateClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cfg: ConfigService, clientRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/client/adapters/keycloak-clients.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cfg\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clientRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    addClient(tenantId: string, dto: CreateClientDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/keycloak-clients.service.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateClientDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClient(tenantId: string, clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/keycloak-clients.service.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClients(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/keycloak-clients.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClientSecret\n                        \n                    \n                \n            \n            \n                \ngetClientSecret(sub: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/keycloak-clients.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        import\n                        \n                    \n                \n            \n            \n                \nimport()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/keycloak-clients.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/keycloak-clients.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Checks if all the roles are available in the realm. If not they will be created.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/keycloak-clients.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeClient(tenantId: string, clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/keycloak-clients.service.ts:251\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateClient(tenantId: string, clientId: string, updateClientDto: UpdateClientDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/keycloak-clients.service.ts:186\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateClientDto\n                                            \n                                                            UpdateClientDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KeycloakAdminClient\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/client/adapters/keycloak-clients.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\nimport { Credentials } from \"@keycloak/keycloak-admin-client/lib/utils/auth\";\nimport { Injectable, OnModuleInit } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { decodeJwt } from \"jose\";\nimport { Repository } from \"typeorm\";\nimport { Role } from \"../../roles/role.enum\";\nimport { ClientsProvider } from \"../client.provider\";\nimport { CreateClientDto } from \"../dto/create-client.dto\";\nimport { UpdateClientDto } from \"../dto/update-client.dto\";\nimport { ClientEntity } from \"../entities/client.entity\";\n\n@Injectable()\nexport class KeycloakClientsProvider implements ClientsProvider, OnModuleInit {\n    private kc: KeycloakAdminClient;\n\n    constructor(\n        private cfg: ConfigService,\n        @InjectRepository(ClientEntity)\n        private clientRepo: Repository,\n    ) {}\n\n    async onModuleInit() {\n        const oidc = this.cfg.getOrThrow(\"OIDC\");\n        const [baseUrl, realmName] = oidc.split(\"/realms/\");\n        this.kc = new KeycloakAdminClient({ baseUrl, realmName });\n\n        const creds: Credentials = {\n            grantType: \"client_credentials\",\n            clientId: this.cfg.getOrThrow(\"OIDC_CLIENT_ID\"),\n            clientSecret: this.cfg.getOrThrow(\"OIDC_CLIENT_SECRET\"),\n        };\n\n        await this.kc.auth(creds);\n        const accessToken = await this.kc.getAccessToken();\n        const payload = decodeJwt(accessToken!);\n        const refreshMs =\n            Math.max(5, payload.exp! - Date.now() / 1000 - 10) * 1000;\n        // Refresh a bit before expiry\n        setInterval(async () => {\n            try {\n                await this.kc.auth(creds);\n            } catch (e) {\n                // log & keep trying on next tick.\n            }\n        }, refreshMs);\n        await this.init();\n    }\n\n    import(): Promise {\n        return Promise.resolve();\n    }\n\n    /**\n     * Checks if all the roles are available in the realm. If not they will be created.\n     */\n    private init() {\n        const existingRoles: Role[] = [\n            Role.Tenants,\n            Role.Tenants,\n            Role.IssuanceOffer,\n            Role.Issuances,\n            Role.PresentationOffer,\n            Role.Presentations,\n        ];\n        this.kc.roles\n            .find()\n            .then((roles) => {\n                // Check if all roles exist\n                const missingRoles = existingRoles.filter(\n                    (role) => !roles.find((r) => r.name === role),\n                );\n                if (missingRoles.length) {\n                    // Create missing roles\n                    return Promise.all(\n                        missingRoles.map((role) =>\n                            this.kc.roles.create({ name: role }),\n                        ),\n                    );\n                }\n            })\n            .catch((err) => {\n                console.error(\"Error initializing Keycloak roles:\", err);\n            });\n    }\n\n    async getClients(tenantId: string): Promise {\n        return this.clientRepo.find({\n            where: { tenant: { id: tenantId } },\n        });\n    }\n\n    async getClient(tenantId: string, clientId: string) {\n        return this.clientRepo.findOneByOrFail({\n            clientId,\n            tenant: { id: tenantId },\n        });\n    }\n\n    getClientSecret(sub: string, id: string): Promise {\n        return this.kc.clients\n            .find({ clientId: id })\n            .then((clients) => clients[0].secret!);\n    }\n\n    async addClient(tenantId: string, dto: CreateClientDto) {\n        dto.clientId = `${tenantId}-${dto.clientId}`; // namespaced\n        // 1) Create client\n        const created = await this.kc.clients.create({\n            clientId: dto.clientId,\n            description: dto.description,\n            serviceAccountsEnabled: true,\n            enabled: true,\n            publicClient: false,\n            directAccessGrantsEnabled: false,\n            standardFlowEnabled: false,\n            webOrigins: [\"*\"],\n            attributes: { tenant_id: tenantId }, // useful marker\n            protocolMappers: [\n                // hardcode tenant_id claim into tokens\n                {\n                    name: \"tenant_id\",\n                    protocol: \"openid-connect\",\n                    protocolMapper: \"oidc-hardcoded-claim-mapper\",\n                    config: {\n                        \"claim.value\": tenantId,\n                        \"claim.name\": \"tenant_id\",\n                        \"jsonType.label\": \"String\",\n                        \"id.token.claim\": \"true\",\n                        \"access.token.claim\": \"true\",\n                    },\n                },\n                // expose realm roles as \"roles\" claim\n                {\n                    name: \"realm-roles\",\n                    protocol: \"openid-connect\",\n                    protocolMapper: \"oidc-usermodel-realm-role-mapper\",\n                    config: {\n                        \"claim.name\": \"roles\",\n                        \"jsonType.label\": \"String\",\n                        multivalued: \"true\",\n                        \"access.token.claim\": \"true\",\n                    },\n                },\n            ],\n        });\n\n        const id = created.id!;\n\n        // 3) Generate secret once (show only on creation)\n        const secret = await this.kc.clients.generateNewClientSecret({ id });\n\n        // 4) Assign realm roles to the service account user\n        const svcUser = await this.kc.clients.getServiceAccountUser({ id });\n        const allRealmRoles = await this.kc.roles.find();\n        const toAssign = dto.roles\n            .map((r) => allRealmRoles.find((ar) => ar.name === r))\n            .filter(Boolean) as { id?: string; name?: string }[];\n\n        if (toAssign.length) {\n            await this.kc.users.addRealmRoleMappings({\n                id: svcUser.id!,\n                roles: toAssign.map((r) => ({ id: r.id!, name: r.name! })),\n            });\n        }\n\n        // 5) (Optional) Put a mirror row in your DB (no secret)\n        const entity = this.clientRepo.create({\n            clientId: dto.clientId,\n            description: dto.description,\n            roles: dto.roles,\n            tenant: { id: tenantId },\n        });\n        await this.clientRepo.save(entity);\n\n        return {\n            clientId: dto.clientId,\n            description: dto.description,\n            tenantId,\n            roles: dto.roles,\n            clientSecret: secret.value,\n        };\n    }\n\n    async updateClient(\n        tenantId: string,\n        clientId: string,\n        updateClientDto: UpdateClientDto,\n    ) {\n        const client = await this.getClient(tenantId, clientId);\n\n        // Get service account user\n        const kcClient = (await this.kc.clients.find({ clientId }))[0];\n        const svcUser = await this.kc.clients.getServiceAccountUser({\n            id: kcClient.id!,\n        });\n\n        // Get all realm roles\n        const allRealmRoles = await this.kc.roles.find();\n\n        // Roles to assign\n        const newRoles = updateClientDto.roles || [];\n        const toAssign = newRoles\n            .map((r) => allRealmRoles.find((ar) => ar.name === r))\n            .filter(Boolean) as { id?: string; name?: string }[];\n\n        // Get currently assigned roles\n        const currentRoles = await this.kc.users.listRealmRoleMappings({\n            id: svcUser.id!,\n        });\n\n        // Roles to remove\n        const toRemove = currentRoles\n            .filter((cr) => !newRoles.includes(cr.name as Role))\n            .map((r) => ({ id: r.id!, name: r.name! }));\n\n        // Remove roles no longer assigned\n        if (toRemove.length) {\n            await this.kc.users.delRealmRoleMappings({\n                id: svcUser.id!,\n                roles: toRemove,\n            });\n        }\n\n        // Add new roles\n        if (toAssign.length) {\n            await this.kc.users.addRealmRoleMappings({\n                id: svcUser.id!,\n                roles: toAssign.map((r) => ({ id: r.id!, name: r.name! })),\n            });\n        }\n\n        // Update client in Keycloak\n        await this.kc.clients.update(\n            { id: kcClient.id! },\n            {\n                description: updateClientDto.description ?? client.description,\n            },\n        );\n\n        // Optionally update your DB mirror\n        await this.clientRepo.update(\n            { clientId, tenant: { id: tenantId } },\n            { ...updateClientDto },\n        );\n\n        return this.getClient(tenantId, clientId);\n    }\n\n    async removeClient(tenantId: string, clientId: string) {\n        const kcClient = (await this.kc.clients.find({ clientId }))[0];\n        if (kcClient?.id) await this.kc.clients.del({ id: kcClient.id });\n        await this.clientRepo.delete({ clientId, tenant: { id: tenantId } });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalFileStorage.html":{"url":"classes/LocalFileStorage.html","title":"class - LocalFileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalFileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/adapters/local.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            FileStorage\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                exists\n                            \n                            \n                                getStream\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(baseDir: string)\n                    \n                \n                        \n                            \n                                Defined in src/storage/adapters/local.storage.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        baseDir\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    createReadStream,\n    createWriteStream,\n    existsSync,\n    mkdirSync,\n    rmSync,\n    statSync,\n} from \"fs\";\nimport { dirname, join } from \"path\";\nimport { Readable } from \"stream\";\nimport { FileStorage, PutOptions, StoredObject } from \"../storage.types\";\n\nexport class LocalFileStorage implements FileStorage {\n    constructor(private baseDir: string) {}\n\n    async put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise {\n        const fullPath = join(this.baseDir, key);\n        mkdirSync(dirname(fullPath), { recursive: true });\n\n        await new Promise((resolve, reject) => {\n            const write = createWriteStream(fullPath);\n            const src = body instanceof Readable ? body : Readable.from(body);\n            src.pipe(write)\n                .on(\"finish\", () => resolve())\n                .on(\"error\", reject);\n        });\n\n        const st = statSync(fullPath);\n\n        return { key, size: st.size, contentType: opts?.contentType };\n    }\n\n    getStream(key: string) {\n        const fullPath = join(this.baseDir, key);\n        return Promise.resolve({ stream: createReadStream(fullPath) });\n    }\n\n    delete(key: string) {\n        return Promise.resolve(rmSync(join(this.baseDir, key)));\n    }\n\n    exists(key: string) {\n        return Promise.resolve(existsSync(join(this.baseDir, key)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerConfigService.html":{"url":"injectables/LoggerConfigService.html","title":"injectable - LoggerConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing logger configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConfiguration\n                            \n                            \n                                getLogFilePath\n                            \n                            \n                                getLogFormat\n                            \n                            \n                                getLogLevel\n                            \n                            \n                                isDebugModeEnabled\n                            \n                            \n                                isFileLoggingEnabled\n                            \n                            \n                                isHttpLoggerEnabled\n                            \n                            \n                                isSessionLoggerEnabled\n                            \n                            \n                                    Private\n                                loadConfiguration\n                            \n                            \n                                    Private\n                                parseLogLevel\n                            \n                            \n                                reloadConfiguration\n                            \n                            \n                                shouldEnableAutoLogging\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/logger-config.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConfiguration\n                        \n                    \n                \n            \n            \n                \ngetConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         LoggerConfiguration\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogFilePath\n                        \n                    \n                \n            \n            \n                \ngetLogFilePath()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:100\n                        \n                    \n\n\n            \n                \n                        Get the configured file path for logging\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogFormat\n                        \n                    \n                \n            \n            \n                \ngetLogFormat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     \"json\" | \"pretty\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogLevel\n                        \n                    \n                \n            \n            \n                \ngetLogLevel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     LogLevel\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDebugModeEnabled\n                        \n                    \n                \n            \n            \n                \nisDebugModeEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFileLoggingEnabled\n                        \n                    \n                \n            \n            \n                \nisFileLoggingEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:93\n                        \n                    \n\n\n            \n                \n                        Check if logging to file is enabled\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHttpLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisHttpLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSessionLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisSessionLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseLogLevel\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLogLevel(level: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                level\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     LogLevel\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reloadConfiguration\n                        \n                    \n                \n            \n            \n                \nreloadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:107\n                        \n                    \n\n\n            \n                \n                        Hot reload configuration from environment\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shouldEnableAutoLogging\n                        \n                    \n                \n            \n            \n                \nshouldEnableAutoLogging()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:115\n                        \n                    \n\n\n            \n                \n                        Check if automatic HTTP request/response logging should be enabled\nThis is used by the LoggerModule configuration\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoggerConfiguration\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/logger-config.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LogLevel } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: \"json\" | \"pretty\";\n    logToFile: boolean;\n    logFilePath: string;\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get(\"LOG_LEVEL\", \"info\"),\n            ),\n            enableSessionLogger: this.configService.get(\n                \"LOG_ENABLE_SESSION_LOGGER\",\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                \"LOG_ENABLE_HTTP_LOGGER\",\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                \"LOG_DEBUG_MODE\",\n                false,\n            ),\n            logFormat: this.configService.get(\n                \"LOG_FORMAT\",\n                \"pretty\",\n            ),\n            logToFile: this.configService.get(\"LOG_TO_FILE\", false),\n            logFilePath: this.configService.get(\n                \"LOG_FILE_PATH\",\n                \"./logs/session.log\",\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: \"verbose\",\n            debug: \"debug\",\n            log: \"log\",\n            warn: \"warn\",\n            error: \"error\",\n            fatal: \"fatal\",\n        };\n        return levels[level.toLowerCase()] || \"log\";\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): \"json\" | \"pretty\" {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Check if logging to file is enabled\n     */\n    isFileLoggingEnabled(): boolean {\n        return this.config.logToFile;\n    }\n\n    /**\n     * Get the configured file path for logging\n     */\n    getLogFilePath(): string {\n        return this.config.logFilePath;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerConfiguration.html":{"url":"interfaces/LoggerConfiguration.html","title":"interface - LoggerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoggerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            enableDebugMode\n                                        \n                                \n                                \n                                        \n                                            enableHttpLogger\n                                        \n                                \n                                \n                                        \n                                            enableSessionLogger\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            logFilePath\n                                        \n                                \n                                \n                                        \n                                            logFormat\n                                        \n                                \n                                \n                                        \n                                            logToFile\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableDebugMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDebugMode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableHttpLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableHttpLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableSessionLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableSessionLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:     LogLevel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     LogLevel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logFilePath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logFilePath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logFormat:     \"json\" | \"pretty\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"json\" | \"pretty\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logToFile\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logToFile:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, LogLevel } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: \"json\" | \"pretty\";\n    logToFile: boolean;\n    logFilePath: string;\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get(\"LOG_LEVEL\", \"info\"),\n            ),\n            enableSessionLogger: this.configService.get(\n                \"LOG_ENABLE_SESSION_LOGGER\",\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                \"LOG_ENABLE_HTTP_LOGGER\",\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                \"LOG_DEBUG_MODE\",\n                false,\n            ),\n            logFormat: this.configService.get(\n                \"LOG_FORMAT\",\n                \"pretty\",\n            ),\n            logToFile: this.configService.get(\"LOG_TO_FILE\", false),\n            logFilePath: this.configService.get(\n                \"LOG_FILE_PATH\",\n                \"./logs/session.log\",\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: \"verbose\",\n            debug: \"debug\",\n            log: \"log\",\n            warn: \"warn\",\n            error: \"error\",\n            fatal: \"fatal\",\n        };\n        return levels[level.toLowerCase()] || \"log\";\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): \"json\" | \"pretty\" {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Check if logging to file is enabled\n     */\n    isFileLoggingEnabled(): boolean {\n        return this.config.logToFile;\n    }\n\n    /**\n     * Get the configured file path for logging\n     */\n    getLogFilePath(): string {\n        return this.config.logFilePath;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nSessionLoggerInterceptor \n\nSessionLoggerInterceptor \n\n\n\nSessionLoggerService \n\nSessionLoggerService \n\n\n\nLoggerModule\n\nLoggerModule\n\nSessionLoggerInterceptor  -->\n\nLoggerModule->SessionLoggerInterceptor \n\n\n\nSessionLoggerService  -->\n\nLoggerModule->SessionLoggerService \n\n\n\n\n\nLoggerConfigService\n\nLoggerConfigService\n\nLoggerModule -->\n\nLoggerConfigService->LoggerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nLoggerModule -->\n\nSessionLoggerInterceptor->LoggerModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nLoggerModule -->\n\nSessionLoggerService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/utils/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LoggerConfigService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { LoggerConfigService } from \"./logger-config.service\";\nimport { SessionLoggerInterceptor } from \"./session-logger.interceptor\";\nimport { SessionLoggerService } from \"./session-logger.service\";\n\n@Module({\n    providers: [\n        LoggerConfigService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n    ],\n    exports: [SessionLoggerService, SessionLoggerInterceptor],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetricModule.html":{"url":"modules/MetricModule.html","title":"module - MetricModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    MetricModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/metric/metric.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PrometheusModule } from \"@willsoto/nestjs-prometheus\";\n\n@Module({\n    imports: [\n        //TODO: add a guard to protect the metrics endpoint\n        PrometheusModule.register({\n            defaultMetrics: {\n                enabled: false,\n            },\n        }),\n    ],\n})\nexport class MetricModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoneTrustPolicy.html":{"url":"classes/NoneTrustPolicy.html","title":"class - NoneTrustPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoneTrustPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                none\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['none'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:54\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationRequestDto.html":{"url":"classes/NotificationRequestDto.html","title":"class - NotificationRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/notification-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                event\n                            \n                            \n                                    \n                                notification_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEvent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['credential_accepted', 'credential_revoked'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notification_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotificationEvent } from \"@openid4vc/openid4vci\";\nimport { IsEnum, IsString } from \"class-validator\";\n\nexport class NotificationRequestDto {\n    @IsString()\n    notification_id: string;\n\n    @IsEnum([\"credential_accepted\", \"credential_revoked\"])\n    event: NotificationEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Oauth2AuthorizationServerResponse.html":{"url":"classes/Oauth2AuthorizationServerResponse.html","title":"class - Oauth2AuthorizationServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Oauth2AuthorizationServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/oauth-authorization-server-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response from an OAuth2 authorization server.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_challenge_endpoint\n                            \n                            \n                                authorization_endpoint\n                            \n                            \n                                code_challenge_methods_supported\n                            \n                            \n                                dpop_signing_alg_values_supported\n                            \n                            \n                                issuer\n                            \n                            \n                                jwks_uri\n                            \n                            \n                                pushed_authorization_request_endpoint\n                            \n                            \n                                require_pushed_authorization_requests\n                            \n                            \n                                token_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_challenge_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:37\n                        \n                    \n\n            \n                \n                    The URL of the authorization challenge endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's authorization endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code_challenge_methods_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    List of supported algorithms to sign the challenge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dpop_signing_alg_values_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    List of supported algorithms for DPoP signing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwks_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:17\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushed_authorization_request_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The URL of the pushed authorization request endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require_pushed_authorization_requests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:29\n                        \n                    \n\n            \n                \n                    Indicates whether the server requires pushed authorization requests.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's token endpoint.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Oauth2AuthorizationServerResponse {\n    issuer: string;\n    /**\n     * The URL of the OAuth2 authorization server's token endpoint.\n     */\n    token_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's authorization endpoint.\n     */\n    authorization_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n     */\n    jwks_uri: string;\n    /**\n     * List of supported algorithms to sign the challenge\n     */\n    code_challenge_methods_supported: string[];\n    /**\n     * List of supported algorithms for DPoP signing.\n     */\n    dpop_signing_alg_values_supported: string[];\n    /**\n     * Indicates whether the server requires pushed authorization requests.\n     */\n    require_pushed_authorization_requests: boolean;\n    /**\n     * The URL of the pushed authorization request endpoint.\n     */\n    pushed_authorization_request_endpoint: string;\n    /**\n     * The URL of the authorization challenge endpoint.\n     */\n    authorization_challenge_endpoint: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferRequestDto.html":{"url":"classes/OfferRequestDto.html","title":"class - OfferRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationIds\n                            \n                            \n                                    \n                                issuanceId\n                            \n                            \n                                    \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                session\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record>\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'object', description: 'Override the default values for the credential claims.', properties: undefined, examples: undefined})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:58\n                        \n                    \n\n            \n                \n                    Override the default values for the credential claims.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:66\n                        \n                    \n\n            \n                \n                    Webhook configuration for claims\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:38\n                        \n                    \n\n            \n                \n                    Overrides the default values for the credential ids.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:31\n                        \n                    \n\n            \n                \n                    Issuance config id to reference the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({examples: undefined, description: 'The type of response expected for the offer request.'})@IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:73\n                        \n                    \n\n            \n                \n                    Pre defined session id\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUUID,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { ResponseType } from \"../../../verifier/oid4vp/dto/presentation-request.dto\";\n\nexport class OfferRequestDto {\n    @ApiProperty({\n        examples: [\n            {\n                value: \"qrcode\",\n            },\n        ],\n        description: \"The type of response expected for the offer request.\",\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Issuance config id to reference the issuance configuration.\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * Overrides the default values for the credential ids.\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    /**\n     * Override the default values for the credential claims.\n     */\n    @ApiProperty({\n        type: \"object\",\n        description: \"Override the default values for the credential claims.\",\n        properties: {},\n        examples: [\n            {\n                pid: {\n                    given_name: \"ERIKA\",\n                    family_name: \"MUSTERMANN\",\n                },\n            },\n        ],\n    })\n    @IsObject()\n    @IsOptional()\n    claims?: Record>;\n\n    /**\n     * Webhook configuration for claims\n     */\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @IsOptional()\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Pre defined session id\n     */\n    @IsUUID()\n    @IsOptional()\n    session?: string;\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferResponse.html":{"url":"classes/OfferResponse.html","title":"class - OfferResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                session\n                            \n                            \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:77\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUUID,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { ResponseType } from \"../../../verifier/oid4vp/dto/presentation-request.dto\";\n\nexport class OfferRequestDto {\n    @ApiProperty({\n        examples: [\n            {\n                value: \"qrcode\",\n            },\n        ],\n        description: \"The type of response expected for the offer request.\",\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Issuance config id to reference the issuance configuration.\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * Overrides the default values for the credential ids.\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    /**\n     * Override the default values for the credential claims.\n     */\n    @ApiProperty({\n        type: \"object\",\n        description: \"Override the default values for the credential claims.\",\n        properties: {},\n        examples: [\n            {\n                pid: {\n                    given_name: \"ERIKA\",\n                    family_name: \"MUSTERMANN\",\n                },\n            },\n        ],\n    })\n    @IsObject()\n    @IsOptional()\n    claims?: Record>;\n\n    /**\n     * Webhook configuration for claims\n     */\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @IsOptional()\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Pre defined session id\n     */\n    @IsUUID()\n    @IsOptional()\n    session?: string;\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vciController.html":{"url":"controllers/Oid4vciController.html","title":"controller - Oid4vciController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  Oid4vciController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.controller.ts\n        \n            \n                Prefix\n            \n            \n                :session/vci\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credential\n                            \n                            \n                                    \n                                    \n                                nonce\n                            \n                            \n                                    \n                                    \n                                notifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credential\n                        \n                    \n                \n            \n            \n                \n                        \n                    credential(req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('credential')@SessionLogger('session', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:29\n                        \n                    \n\n\n            \n                \n                        Endpoint to issue credentials\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        nonce\n                        \n                    \n                \n            \n            \n                \n                        \n                    nonce(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('nonce')@SessionLogger('nonce', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        notifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    notifications(body: NotificationRequestDto, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('notification')@SessionLogger('notification_id', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Notification endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, UseInterceptors } from \"@nestjs/common\";\nimport { ApiExcludeController, ApiParam } from \"@nestjs/swagger\";\nimport type { CredentialResponse } from \"@openid4vc/openid4vci\";\nimport type { Request } from \"express\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionLogger } from \"../../utils/logger//session-logger.decorator\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { NotificationRequestDto } from \"./dto/notification-request.dto\";\n\n/**\n * Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n */\n@ApiParam({ name: \"session\", required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@Controller(\":session/vci\")\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vciController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Endpoint to issue credentials\n     * @param req\n     * @returns\n     */\n    @Post(\"credential\")\n    @SessionLogger(\"session\", \"OID4VCI\")\n    credential(\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        return this.oid4vciService.getCredential(req, session);\n    }\n\n    /**\n     * Notification endpoint\n     * @param body\n     * @returns\n     */\n    @Post(\"notification\")\n    @SessionLogger(\"notification_id\", \"OID4VCI\")\n    notifications(\n        @Body() body: NotificationRequestDto,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vciService.handleNotification(req, body, session);\n    }\n\n    @Post(\"nonce\")\n    @SessionLogger(\"nonce\", \"OID4VCI\")\n    nonce(@SessionEntity() session: Session) {\n        return this.oid4vciService.nonceRequest(session);\n    }\n\n    //TODO: this endpoint may be relevant for the wallet attestation.\n    /* @Get('session')\n  session() {\n    console.log('Session requested');\n    //TODO store session and created at\n    const session = randomUUID();\n    return {\n      session_id: session,\n    };\n  } */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vpController.html":{"url":"controllers/Oid4vpController.html","title":"controller - Oid4vpController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  Oid4vpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.controller.ts\n        \n            \n                Prefix\n            \n            \n                :session/oid4vp\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getPostRequestWithSession\n                            \n                            \n                                    \n                                    \n                                getRequestWithSession\n                            \n                            \n                                    \n                                    \n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getPostRequestWithSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostRequestWithSession(session: Session, req: Request, body: AuthorizationResponse)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('request')@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:56\n                        \n                    \n\n\n            \n                \n                        Returns the authorization request for a given requestId and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getRequestWithSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRequestWithSession(session: Session, req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('request')@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:40\n                        \n                    \n\n\n            \n                \n                        Returns the authorization request for a given requestId and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:72\n                        \n                    \n\n\n            \n                \n                        Endpoint to receive the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Post,\n    Req,\n    UseInterceptors,\n} from \"@nestjs/common\";\nimport { ApiExcludeController, ApiParam } from \"@nestjs/swagger\";\nimport { Request } from \"express\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionLogger } from \"../../utils/logger/session-logger.decorator\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { AuthorizationResponse } from \"./dto/authorization-response.dto\";\nimport { Oid4vpService } from \"./oid4vp.service\";\n\n/**\n * Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n */\n@Controller(\":session/oid4vp\")\n@UseInterceptors(SessionLoggerInterceptor)\n@ApiParam({ name: \"session\", required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\nexport class Oid4vpController {\n    /**\n     * Constructor for the Oid4vpController.\n     * @param oid4vpService - Instance of Oid4vpService for handling OID4VP operations.\n     */\n    constructor(private readonly oid4vpService: Oid4vpService) {}\n\n    /**\n     * Returns the authorization request for a given requestId and session.\n     * @param session\n     * @param req\n     * @returns\n     */\n    @Get(\"request\")\n    @SessionLogger(\"session\", \"OID4VP\")\n    getRequestWithSession(\n        @SessionEntity() session: Session,\n        @Req() req: Request,\n    ) {\n        const origin = req.get(\"origin\") as string;\n        return this.oid4vpService.createAuthorizationRequest(session, origin);\n    }\n\n    /**\n     * Returns the authorization request for a given requestId and session.\n     * @param session\n     * @param req\n     * @returns\n     */\n    @Post(\"request\")\n    @SessionLogger(\"session\", \"OID4VP\")\n    getPostRequestWithSession(\n        @SessionEntity() session: Session,\n        @Req() req: Request,\n        @Body() body: AuthorizationResponse,\n    ) {\n        const origin = req.get(\"origin\") as string;\n        return this.oid4vpService.createAuthorizationRequest(session, origin);\n    }\n\n    /**\n     * Endpoint to receive the response from the wallet.\n     * @param body\n     * @returns\n     */\n    @Post()\n    @SessionLogger(\"session\", \"OID4VP\")\n    getResponse(\n        @Body() body: AuthorizationResponse,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vpService.getResponse(body, session);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/Oid4vpModule.html":{"url":"modules/Oid4vpModule.html","title":"module - Oid4vpModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    Oid4vpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Oid4vpService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Oid4vpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { forwardRef, Module } from \"@nestjs/common\";\nimport { CryptoModule } from \"../../crypto/crypto.module\";\nimport { RegistrarModule } from \"../../registrar/registrar.module\";\nimport { SessionModule } from \"../../session/session.module\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { WebhookService } from \"../../utils/webhook/webhook.service\";\nimport { PresentationsModule } from \"../presentations/presentations.module\";\nimport { Oid4vpController } from \"./oid4vp.controller\";\nimport { Oid4vpService } from \"./oid4vp.service\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        forwardRef(() => RegistrarModule),\n        forwardRef(() => PresentationsModule),\n        SessionModule,\n        HttpModule,\n    ],\n    controllers: [Oid4vpController],\n    providers: [Oid4vpService, SessionLoggerInterceptor, WebhookService],\n    exports: [Oid4vpService],\n})\nexport class Oid4vpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vpService.html":{"url":"injectables/Oid4vpService.html","title":"injectable - Oid4vpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuthorizationRequest\n                            \n                            \n                                    Async\n                                createRequest\n                            \n                            \n                                    Async\n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, encryptionService: EncryptionService, configService: ConfigService, registrarService: RegistrarService, presentationsService: PresentationsService, sessionService: SessionService, sessionLogger: SessionLoggerService, webhookService: WebhookService, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/oid4vp/oid4vp.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webhookService\n                                                  \n                                                        \n                                                                        WebhookService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAuthorizationRequest(session: Session, origin: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Creates an authorization request for the OID4VP flow.\nThis method generates a JWT that includes the necessary parameters for the authorization request.\nIt initializes the session logging context and logs the start of the flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                origin\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRequest(requestId: string, values: PresentationRequestOptions, tenantId: string, useDcApi: boolean, origin: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:217\n                        \n                    \n\n\n            \n                \n                        Creates a request for the OID4VP flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            PresentationRequestOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                useDcApi\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                origin\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:297\n                        \n                    \n\n\n            \n                \n                        Processes the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { BadRequestException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { v4 } from \"uuid\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { EncryptionService } from \"../../crypto/encryption/encryption.service\";\nimport { CryptoImplementationService } from \"../../crypto/key/crypto-implementation/crypto-implementation.service\";\nimport { OfferResponse } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport { RegistrarService } from \"../../registrar/registrar.service\";\nimport { Session, SessionStatus } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../../utils/logger/session-logger.service\";\nimport { SessionLogContext } from \"../../utils/logger/session-logger-context\";\nimport { WebhookService } from \"../../utils/webhook/webhook.service\";\nimport { AuthResponse } from \"../presentations/dto/auth-response.dto\";\nimport { PresentationsService } from \"../presentations/presentations.service\";\nimport { AuthorizationResponse } from \"./dto/authorization-response.dto\";\nimport { PresentationRequestOptions } from \"./dto/presentation-request-options.dto\";\n\n@Injectable()\nexport class Oid4vpService {\n    constructor(\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private configService: ConfigService,\n        private registrarService: RegistrarService,\n        private presentationsService: PresentationsService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n        private webhookService: WebhookService,\n        private cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Creates an authorization request for the OID4VP flow.\n     * This method generates a JWT that includes the necessary parameters for the authorization request.\n     * It initializes the session logging context and logs the start of the flow.\n     * @param session\n     * @param origin\n     * @returns\n     */\n    async createAuthorizationRequest(\n        session: Session,\n        origin: string,\n    ): Promise {\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId: session.tenantId,\n            flowType: \"OID4VP\",\n            stage: \"authorization_request\",\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            requestId: session.requestId,\n            action: \"create_authorization_request\",\n        });\n\n        try {\n            const host = this.configService.getOrThrow(\"PUBLIC_URL\");\n            const tenantHost = `${host}/${session.tenantId}`;\n\n            const presentationConfig =\n                await this.presentationsService.getPresentationConfig(\n                    session.requestId!,\n                    session.tenantId,\n                );\n            let regCert: string | undefined = undefined;\n\n            const dcql_query = JSON.parse(\n                JSON.stringify(presentationConfig.dcql_query).replace(\n                    //g,\n                    tenantHost,\n                ),\n            );\n\n            if (this.registrarService.isEnabled()) {\n                const registrationCert = JSON.parse(\n                    JSON.stringify(presentationConfig.registrationCert).replace(\n                        //g,\n                        tenantHost,\n                    ),\n                );\n                regCert =\n                    await this.registrarService.addRegistrationCertificate(\n                        registrationCert,\n                        dcql_query,\n                        session.requestId!,\n                        session.tenantId,\n                    );\n            }\n            const nonce = randomUUID();\n            await this.sessionService.add(session.id, {\n                vp_nonce: nonce,\n            });\n\n            this.sessionLogger.logAuthorizationRequest(logContext, {\n                requestId: session.requestId,\n                nonce,\n                regCert,\n                dcqlQueryCount: Array.isArray(dcql_query)\n                    ? dcql_query.length\n                    : 1,\n            });\n\n            const hostname = new URL(\n                this.configService.getOrThrow(\"PUBLIC_URL\"),\n            ).hostname;\n\n            const lifeTime = 60 * 60;\n\n            const request = {\n                payload: {\n                    response_type: \"vp_token\",\n                    client_id: \"x509_san_dns:\" + hostname,\n                    response_uri: !session.useDcApi\n                        ? `${host}/${session.id}/oid4vp`\n                        : undefined,\n                    response_mode: !session.useDcApi\n                        ? \"direct_post.jwt\"\n                        : \"dc_api.jwt\",\n                    nonce,\n                    expected_origins: session.useDcApi ? [origin] : undefined,\n                    dcql_query,\n                    client_metadata: {\n                        jwks: {\n                            keys: [\n                                await this.encryptionService.getEncryptionPublicKey(\n                                    session.tenantId,\n                                ),\n                            ],\n                        },\n                        vp_formats: {\n                            //MDOC not supported yet\n                            /* mso_mdoc: {\n                                alg: [\"ES256\", \"Ed25519\"],\n                            }, */\n                            \"dc+sd-jwt\": {\n                                \"kb-jwt_alg_values\":\n                                    this.cryptoImplementationService.getSupportedAlgorithms(),\n                                \"sd-jwt_alg_values\":\n                                    this.cryptoImplementationService.getSupportedAlgorithms(),\n                            },\n                        },\n                        authorization_encrypted_response_alg: \"ECDH-ES\",\n                        authorization_encrypted_response_enc: \"A128GCM\",\n                        client_name: session.tenant.name,\n                        response_types_supported: [\"vp_token\"],\n                    },\n                    state: !session.useDcApi ? session.id : undefined,\n                    //TODO: check if this value is correct accroding to https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-aud-of-a-request-object\n                    aud: \"https://self-issued.me/v2\",\n                    exp: Math.floor(Date.now() / 1000) + lifeTime,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    verifier_attestations: regCert\n                        ? [\n                              {\n                                  format: \"jwt\",\n                                  data: regCert,\n                              },\n                          ]\n                        : undefined,\n                },\n                header: {\n                    typ: \"oauth-authz-req+jwt\",\n                },\n            };\n\n            const accessCert = await this.cryptoService.getCertChain(\n                \"access\",\n                session.tenantId,\n            );\n\n            const header = {\n                ...request.header,\n                alg: \"ES256\",\n                x5c: accessCert,\n            };\n\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"access\",\n            );\n            const signedJwt = await this.cryptoService.signJwt(\n                header,\n                request.payload,\n                session.tenantId,\n                keyId,\n            );\n\n            this.sessionLogger.logSession(\n                logContext,\n                \"Authorization request created successfully\",\n                {\n                    signedJwtLength: signedJwt.length,\n                    certificateChainLength: accessCert?.length || 0,\n                },\n            );\n\n            return signedJwt;\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                requestId: session.requestId,\n                action: \"create_authorization_request\",\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Creates a request for the OID4VP flow.\n     * @param requestId\n     * @param values\n     * @param tenantId\n     * @returns\n     */\n    async createRequest(\n        requestId: string,\n        values: PresentationRequestOptions,\n        tenantId: string,\n        useDcApi: boolean,\n        origin: string,\n    ): Promise {\n        const presentationConfig =\n            await this.presentationsService.getPresentationConfig(\n                requestId,\n                tenantId,\n            );\n        const fresh = values.session === undefined;\n        values.session = values.session || v4();\n\n        const hostname = new URL(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n        ).hostname;\n\n        const request_uri_method: \"get\" | \"post\" = \"get\";\n\n        const params = {\n            client_id: `x509_san_dns:${hostname}`,\n            request_uri: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${values.session}/oid4vp/request`,\n            request_uri_method,\n        };\n        const queryString = Object.entries(params)\n            .map(\n                ([key, value]) =>\n                    `${encodeURIComponent(key)}=${encodeURIComponent(value)}`,\n            )\n            .join(\"&\");\n\n        const expiresAt = new Date(\n            Date.now() + (presentationConfig.lifeTime ?? 300) * 1000,\n        );\n\n        if (fresh) {\n            const session = await this.sessionService.create({\n                id: values.session,\n                claimsWebhook: values.webhook ?? presentationConfig.webhook,\n                tenantId,\n                requestId,\n                requestUrl: `openid4vp://?${queryString}`,\n                expiresAt,\n                useDcApi,\n            });\n\n            if (request_uri_method === \"get\") {\n                // load the session to get nested object like tenant\n                const loadedSession = await this.sessionService.get(session.id);\n\n                const signedJwt = await this.createAuthorizationRequest(\n                    loadedSession,\n                    origin,\n                );\n                this.sessionService.add(values.session, {\n                    requestObject: signedJwt,\n                });\n            }\n        } else {\n            await this.sessionService.add(values.session, {\n                claimsWebhook: values.webhook ?? presentationConfig.webhook,\n                requestUrl: `openid4vp://?${queryString}`,\n                expiresAt,\n                useDcApi,\n            });\n        }\n\n        return {\n            uri: queryString,\n            session: values.session,\n        };\n    }\n\n    /**\n     * Processes the response from the wallet.\n     * @param body\n     * @param tenantId\n     */\n    async getResponse(body: AuthorizationResponse, session: Session) {\n        const res = await this.encryptionService.decryptJwe(\n            body.response,\n            session.tenantId,\n        );\n\n        //for dc api the state is no longer included in the res, see: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-request\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId: session.tenantId,\n            flowType: \"OID4VP\",\n            stage: \"response_processing\",\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            action: \"process_presentation_response\",\n            hasWebhook: !!session.claimsWebhook,\n        });\n\n        try {\n            //TODO: load required fields from the config\n            const credentials = await this.presentationsService.parseResponse(\n                res,\n                [],\n                session.vp_nonce as string,\n            );\n\n            this.sessionLogger.logCredentialVerification(\n                logContext,\n                !!credentials && credentials.length > 0,\n                {\n                    credentialCount: credentials?.length || 0,\n                    nonce: session.vp_nonce,\n                },\n            );\n\n            //tell the auth server the result of the session.\n            await this.sessionService.add(res.state, {\n                //TODO: not clear why it has to be any\n                credentials: credentials as any,\n                status: SessionStatus.Completed,\n            });\n            // if there a a webook URL, send the response there\n            //TODO: move to dedicated service to reuse it also in the oid4vci flow.\n            if (session.claimsWebhook) {\n                await this.webhookService.sendWebhook(\n                    session,\n                    logContext,\n                    credentials,\n                    //when issuance id is defined, we expect a claim response that needs to be saved\n                    !!session.issuanceId,\n                );\n            }\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialCount: credentials?.length || 0,\n                webhookSent: !!session.claimsWebhook,\n            });\n\n            if (body.sendResponse) {\n                return credentials;\n            }\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                action: \"process_presentation_response\",\n            });\n            throw new BadRequestException(error.message);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParResponseDto.html":{"url":"classes/ParResponseDto.html","title":"class - ParResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/par-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expires_in\n                            \n                            \n                                request_uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The expiration time for the request URI in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:5\n                        \n                    \n\n            \n                \n                    The request URI for the Pushed Authorization Request.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParResponseDto {\n    /**\n     * The request URI for the Pushed Authorization Request.\n     */\n    request_uri: string;\n    /**\n     * The expiration time for the request URI in seconds.\n     */\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html","title":"interface - ParsedAccessTokenAuthorizationCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenAuthorizationCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            grantType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     AuthorizationCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AuthorizationCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { AuthenticationMethodPresentation } from \"../issuance/dto/authentication-config.dto\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    async authzMetadata(\n        session: Session,\n    ): Promise {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: issuanceConfig.dPopRequired\n                ? [\"ES256\"]\n                : undefined,\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n\n        const authorizationServerMetadata = await this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: req.body.client_id,\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        session: Session,\n        origin: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        //use the issuanceId to get the presentationId.\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n        const presentationConfig = (\n            issuanceConfig.authenticationConfig as AuthenticationMethodPresentation\n        ).config.type;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(presentationConfig, { session: auth_session, webhook }, session.tenantId, session.useDcApi, origin)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n        origin: string,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session,\n                    origin,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html","title":"interface - ParsedAccessTokenPreAuthorizedCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenPreAuthorizedCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            grantType\n                                        \n                                \n                                \n                                        \n                                            preAuthorizedCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            txCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     PreAuthorizedCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PreAuthorizedCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        preAuthorizedCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        preAuthorizedCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        txCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        txCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { AuthenticationMethodPresentation } from \"../issuance/dto/authentication-config.dto\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    async authzMetadata(\n        session: Session,\n    ): Promise {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: issuanceConfig.dPopRequired\n                ? [\"ES256\"]\n                : undefined,\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n\n        const authorizationServerMetadata = await this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: req.body.client_id,\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        session: Session,\n        origin: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        //use the issuanceId to get the presentationId.\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n        const presentationConfig = (\n            issuanceConfig.authenticationConfig as AuthenticationMethodPresentation\n        ).config.type;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(presentationConfig, { session: auth_session, webhook }, session.tenantId, session.useDcApi, origin)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n        origin: string,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session,\n                    origin,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PolicyCredential.html":{"url":"classes/PolicyCredential.html","title":"class - PolicyCredential","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PolicyCredential\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                attestationBased\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                credential_sets\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                credentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ClaimsQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        credential_sets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialSetQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:68\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationAttachment.html":{"url":"classes/PresentationAttachment.html","title":"class - PresentationAttachment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationAttachment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Attached attestations\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credential_ids\n                            \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credential_ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\nexport class Claim {\n    @IsArray()\n    path: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => Claim)\n    claims?: Claim[];\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PresentationConfig.html":{"url":"entities/PresentationConfig.html","title":"entity - PresentationConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  PresentationConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a configuration for a Verifiable Presentation (VP) request.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                attached\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                    \n                                dcql_query\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lifeTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                registrationCert\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        attached\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationAttachment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:209\n                        \n                    \n\n            \n                \n                    Attestation that should be attached\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:193\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        dcql_query\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DCQL\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:171\n                        \n                    \n\n            \n                \n                    The DCQL query to be used for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:155\n                        \n                    \n\n            \n                \n                    Description of the presentation configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:134\n                        \n                    \n\n            \n                \n                    Unique identifier for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lifeTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Column('int', {default: 300})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:163\n                        \n                    \n\n            \n                \n                    Lifetime how long the presentation request is valid after creation, in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        registrationCert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:179\n                        \n                    \n\n            \n                \n                    The registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:147\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:141\n                        \n                    \n\n            \n                \n                    The tenant ID for which the VP request is made.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:199\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@Validate(WebhookConfig)@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:187\n                        \n                    \n\n            \n                \n                    Optional webhook URL to receive the response.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\nexport class Claim {\n    @IsArray()\n    path: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => Claim)\n    claims?: Claim[];\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationConfigCreateDto.html":{"url":"classes/PresentationConfigCreateDto.html","title":"class - PresentationConfigCreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationConfigCreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/presentation-config-create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(PresentationConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"createdAt\",\n    \"updatedAt\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { PresentationConfig } from \"../entities/presentation-config.entity\";\n\nexport class PresentationConfigCreateDto extends OmitType(PresentationConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"createdAt\",\n    \"updatedAt\",\n] as const) {\n    // Define the properties for the presentation config create DTO\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuanceConfig.html":{"url":"classes/PresentationDuringIssuanceConfig.html","title":"class - PresentationDuringIssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'presentationDuringIssuance'\nUsed for OID4VP flow where a credential presentation request is sent\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:41\n                        \n                    \n\n            \n                \n                    Link to the presentation configuration that is relevant for the issuance process\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PresentationManagementController.html":{"url":"controllers/PresentationManagementController.html","title":"controller - PresentationManagementController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  PresentationManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.controller.ts\n        \n            \n                Prefix\n            \n            \n                presentation-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storePresentationConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:113\n                        \n                    \n\n\n            \n                \n                        Returns the presentation request configurations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:141\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation request configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(req: Request, res: Response, body: PresentationRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@ApiBody({type: PresentationRequest, examples: undefined})@Post('request')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:78\n                        \n                    \n\n\n            \n                \n                        Create an presentation request that can be sent to the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PresentationRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storePresentationConfig(config: PresentationConfigCreateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:125\n                        \n                    \n\n\n            \n                \n                        Store a presentation request configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            PresentationConfigCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Req,\n    Res,\n} from \"@nestjs/common\";\nimport { ApiBody, ApiProduces, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Request, Response } from \"express\";\nimport * as QRCode from \"qrcode\";\nimport { Role } from \"../../auth/roles/role.enum\";\nimport { Secured } from \"../../auth/secure.decorator\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { OfferResponse } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport {\n    PresentationRequest,\n    ResponseType,\n} from \"../oid4vp/dto/presentation-request.dto\";\nimport { Oid4vpService } from \"../oid4vp/oid4vp.service\";\nimport { PresentationConfigCreateDto } from \"./dto/presentation-config-create.dto\";\nimport { PresentationsService } from \"./presentations.service\";\n\n@ApiTags(\"Presentation management\")\n@Secured([Role.Presentations])\n@Controller(\"presentation-management\")\nexport class PresentationManagementController {\n    constructor(\n        private readonly presentationsService: PresentationsService,\n        private readonly oid4vpService: Oid4vpService,\n    ) {}\n\n    /**\n     * Create an presentation request that can be sent to the user\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: \"JSON response\",\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            \"application/json\": { schema: { type: \"object\" } },\n            \"image/png\": { schema: { type: \"string\", format: \"binary\" } },\n        },\n    })\n    @ApiProduces(\"application/json\", \"image/png\")\n    @ApiBody({\n        type: PresentationRequest,\n        examples: {\n            qrcode: {\n                summary: \"QR-Code Example\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    requestId: \"pid\",\n                },\n            },\n            uri: {\n                summary: \"URI\",\n                value: {\n                    response_type: ResponseType.URI,\n                    requestId: \"pid\",\n                },\n            },\n            \"dc-api\": {\n                summary: \"DC API\",\n                value: {\n                    response_type: ResponseType.DC_API,\n                    requestId: \"pid\",\n                },\n            },\n        },\n    })\n    @Post(\"request\")\n    async getOffer(\n        @Req() req: Request,\n        @Res() res: Response,\n        @Body() body: PresentationRequest,\n        @Token() user: TokenPayload,\n    ) {\n        const values = await this.oid4vpService.createRequest(\n            body.requestId,\n            {\n                webhook: body.webhook,\n            },\n            user.entity!.id,\n            body.response_type === ResponseType.DC_API,\n            req.get(\"origin\") || req.get(\"host\") || \"\",\n        );\n        values.uri = `openid4vp://?${values.uri}`;\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer.\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader(\"Content-Type\", \"image/png\");\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the presentation request configurations.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.presentationsService.getPresentationConfigs(\n            user.entity!.id,\n        );\n    }\n\n    /**\n     * Store a presentation request configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storePresentationConfig(\n        @Body() config: PresentationConfigCreateDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.presentationsService.storePresentationConfig(\n            user.entity!.id,\n            config,\n        );\n    }\n\n    /**\n     * Deletes a presentation request configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteConfiguration(@Param(\"id\") id: string, @Token() user: TokenPayload) {\n        return this.presentationsService.deletePresentationConfig(\n            id,\n            user.entity!.id,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationRequest.html":{"url":"classes/PresentationRequest.html","title":"class - PresentationRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the presentation request containing the response type and request ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                requestId\n                            \n                            \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:36\n                        \n                    \n\n            \n                \n                    Identifier of the presentation configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:30\n                        \n                    \n\n            \n                \n                    The type of response expected from the presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:44\n                        \n                    \n\n            \n                \n                    Webhook configuration to receive the response.\nIf not provided, the configured webhook from the configuration will be used.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsObject, IsOptional, IsString } from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Enum for the type of response expected from the presentation request.\n */\nexport enum ResponseType {\n    /**\n     * Response type indicating a QR code will be returned.\n     */\n    QRCode = \"qrcode\",\n    /**\n     * Response type indicating a URI will be returned.\n     */\n    URI = \"uri\",\n    /**\n     * Response type indicating a DC API response will be used.\n     */\n    DC_API = \"dc-api\",\n}\n\n/**\n * DTO for the presentation request containing the response type and request ID.\n */\nexport class PresentationRequest {\n    /**\n     * The type of response expected from the presentation request.\n     */\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Identifier of the presentation configuration\n     */\n    @IsString()\n    requestId: string;\n\n    /**\n     * Webhook configuration to receive the response.\n     * If not provided, the configured webhook from the configuration will be used.\n     */\n    @IsObject()\n    @IsOptional()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentationRequestOptions.html":{"url":"interfaces/PresentationRequestOptions.html","title":"interface - PresentationRequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentationRequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PresentationRequestOptions DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            session\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webhook\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional session identifier for tracking the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webhook\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webhook:         WebhookConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WebhookConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional webhook configuration to receive the response.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * PresentationRequestOptions DTO\n */\nexport interface PresentationRequestOptions {\n    /**\n     * Optional session identifier for tracking the request.\n     */\n    session?: string;\n    /**\n     * Optional webhook configuration to receive the response.\n     */\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PresentationsModule.html":{"url":"modules/PresentationsModule.html","title":"module - PresentationsModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    PresentationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/presentations/presentations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PresentationManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ResolverModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { forwardRef, Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Oid4vpModule } from \"../oid4vp/oid4vp.module\";\nimport { ResolverModule } from \"../resolver/resolver.module\";\nimport { PresentationConfig } from \"./entities/presentation-config.entity\";\nimport { PresentationManagementController } from \"./presentations.controller\";\nimport { PresentationsService } from \"./presentations.service\";\n\n@Module({\n    imports: [\n        ResolverModule,\n        HttpModule,\n        forwardRef(() => Oid4vpModule),\n        TypeOrmModule.forFeature([PresentationConfig]),\n    ],\n    controllers: [PresentationManagementController],\n    providers: [PresentationsService],\n    exports: [PresentationsService],\n})\nexport class PresentationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PresentationsService.html":{"url":"injectables/PresentationsService.html","title":"injectable - PresentationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  PresentationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kbVerifier\n                            \n                            \n                                sdjwtInstance\n                            \n                            \n                                    Private\n                                statusListFetcher\n                            \n                            \n                                verifier\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deletePresentationConfig\n                            \n                            \n                                getPresentationConfig\n                            \n                            \n                                getPresentationConfigs\n                            \n                            \n                                    Private\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                parseResponse\n                            \n                            \n                                storePresentationConfig\n                            \n                            \n                                    Public\n                                    Async\n                                storeRCID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, resolverService: ResolverService, vpRequestRepository: Repository, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/presentations/presentations.service.ts:34\n                            \n                        \n\n                \n                    \n                            Constructor for the PresentationsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of HttpService for making HTTP requests.\n\n\n                                                        \n                                                \n                                                \n                                                        resolverService\n                                                  \n                                                        \n                                                                        ResolverService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ResolverService for resolving DID documents.\n\n\n                                                        \n                                                \n                                                \n                                                        vpRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for managing VP request configurations.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deletePresentationConfig\n                        \n                    \n                \n            \n            \n                \ndeletePresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:178\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to delete.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the deletion is complete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:188\n                        \n                    \n\n\n            \n                \n                        Retrieves a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the requested PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfigs\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfigs(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:149\n                        \n                    \n\n\n            \n                \n                        Retrieves all presentation configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve configurations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of PresentationConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Imports presentation configurations from a predefined directory structure.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Imports presentation configurations from a predefined directory structure.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseResponse\n                        \n                    \n                \n            \n            \n                \nparseResponse(res: AuthResponse, requiredFields: string[], keyBindingNonce: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:283\n                        \n                    \n\n\n            \n                \n                        Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            AuthResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requiredFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyBindingNonce\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \nstorePresentationConfig(tenantId: string, vprequest: PresentationConfigCreateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:162\n                        \n                    \n\n\n            \n                \n                        Stores a new presentation configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the configuration.\n\n\n                                            \n                                        \n                                        \n                                                vprequest\n                                            \n                                                            PresentationConfigCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe PresentationConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        storeRCID\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRCID(registrationCertId: string, id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:209\n                        \n                    \n\n\n            \n                \n                        Stores the new registration certificate.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registrationCertId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the registration certificate to store.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to update.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the registration certificate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kbVerifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KbVerifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:267\n                        \n                    \n\n            \n                \n                    Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                            \n                                            \n                                                    signature\n                                            \n                                            \n                                                    payload\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sdjwtInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SDJwtVcInstance\n\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:34\n                        \n                    \n\n            \n                \n                    Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statusListFetcher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:252\n                        \n                    \n\n            \n                \n                    Fetch the status list from the uri.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    uri\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Verifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:228\n                        \n                    \n\n            \n                \n                    Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                                    \n                                                            \nThe data part of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                            \n                                                    signature\n                                                    \n                                                            \nThe signature of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport {\n    ConflictException,\n    Injectable,\n    OnApplicationBootstrap,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { digest } from \"@sd-jwt/crypto-nodejs\";\nimport { SDJwtVcInstance } from \"@sd-jwt/sd-jwt-vc\";\nimport { KbVerifier, Verifier } from \"@sd-jwt/types\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { JWK, JWTPayload } from \"jose\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { CryptoImplementationService } from \"../../crypto/key/crypto-implementation/crypto-implementation.service\";\nimport { ResolverService } from \"../resolver/resolver.service\";\nimport { AuthResponse } from \"./dto/auth-response.dto\";\nimport { PresentationConfigCreateDto } from \"./dto/presentation-config-create.dto\";\nimport { PresentationConfig } from \"./entities/presentation-config.entity\";\n\n/**\n * Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n */\n@Injectable()\nexport class PresentationsService implements OnApplicationBootstrap {\n    /**\n     * Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n     */\n    sdjwtInstance: SDJwtVcInstance;\n\n    /**\n     * Constructor for the PresentationsService.\n     * @param httpService - Instance of HttpService for making HTTP requests.\n     * @param resolverService - Instance of ResolverService for resolving DID documents.\n     * @param vpRequestRepository - Repository for managing VP request configurations.\n     */\n    constructor(\n        private httpService: HttpService,\n        private resolverService: ResolverService,\n        @InjectRepository(PresentationConfig)\n        private vpRequestRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Imports presentation configurations from a predefined directory structure.\n     */\n    async onApplicationBootstrap() {\n        this.sdjwtInstance = new SDJwtVcInstance({\n            hasher: digest,\n            verifier: this.verifier.bind(this),\n            kbVerifier: this.kbVerifier.bind(this),\n            statusListFetcher: this.statusListFetcher.bind(this),\n        });\n        await this.import();\n    }\n\n    /**\n     * Imports presentation configurations from a predefined directory structure.\n     */\n    private async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"presentation\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), \"utf8\"),\n                    );\n\n                    const id = file.replace(\".json\", \"\");\n                    payload.id = id;\n                    const presentationExists = await this.getPresentationConfig(\n                        id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (presentationExists && !force) {\n                        continue; // Skip if config already exists and force is not set\n                    } else if (presentationExists && force) {\n                        //delete old element so removed elements are not present\n                        await this.vpRequestRepository.delete({\n                            id,\n                            tenantId: tenant.name,\n                        });\n                    }\n\n                    // Validate the payload against PresentationConfig\n                    const config = plainToClass(\n                        PresentationConfigCreateDto,\n                        payload,\n                    );\n                    const validationErrors = await validate(config, {\n                        whitelist: true,\n                        forbidUnknownValues: false, // avoid false positives on plain objects\n                        forbidNonWhitelisted: false,\n                        stopAtFirstError: false,\n                    });\n\n                    if (validationErrors.length > 0) {\n                        this.logger.error(\n                            {\n                                event: \"ValidationError\",\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for presentation config ${file} in tenant ${tenant.name}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n\n                    await this.storePresentationConfig(tenant.name, config);\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} presentation configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Retrieves all presentation configurations for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve configurations.\n     * @returns A promise that resolves to an array of PresentationConfig entities.\n     */\n    getPresentationConfigs(tenantId: string): Promise {\n        return this.vpRequestRepository.find({\n            where: { tenantId },\n            order: { createdAt: \"DESC\" },\n        });\n    }\n\n    /**\n     * Stores a new presentation configuration.\n     * @param tenantId - The ID of the tenant for which to store the configuration.\n     * @param vprequest - The PresentationConfig entity to store.\n     * @returns A promise that resolves to the stored PresentationConfig entity.\n     */\n    storePresentationConfig(\n        tenantId: string,\n        vprequest: PresentationConfigCreateDto,\n    ) {\n        return this.vpRequestRepository.save({\n            ...vprequest,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to delete.\n     * @param tenantId - The ID of the tenant for which to delete the configuration.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    deletePresentationConfig(id: string, tenantId: string) {\n        return this.vpRequestRepository.delete({ id, tenantId });\n    }\n\n    /**\n     * Retrieves a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to retrieve.\n     * @param tenantId - The ID of the tenant for which to retrieve the configuration.\n     * @returns A promise that resolves to the requested PresentationConfig entity.\n     */\n    getPresentationConfig(\n        id: string,\n        tenantId: string,\n    ): Promise {\n        return this.vpRequestRepository\n            .findOneByOrFail({\n                id,\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(`Request ID ${id} not found`);\n            });\n    }\n\n    /**\n     * Stores the new registration certificate.\n     * @param registrationCertId - The ID of the registration certificate to store.\n     * @param id - The ID of the presentation configuration to update.\n     * @param tenantId - The ID of the tenant for which to store the registration certificate.\n     * @returns\n     */\n    public async storeRCID(\n        registrationCertId: string,\n        id: string,\n        tenantId: string,\n    ) {\n        const element = await this.vpRequestRepository.findOneByOrFail({\n            id,\n            tenantId,\n        });\n        element.registrationCert!.id = registrationCertId;\n        await this.vpRequestRepository.save(element);\n    }\n\n    /**\n     * Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n     * @param data - The data part of the SD-JWT-VC.\n     * @param signature - The signature of the SD-JWT-VC.\n     * @returns\n     */\n    verifier: Verifier = async (data, signature) => {\n        const instance = new SDJwtVcInstance({\n            hasher: digest,\n        });\n        const decodedVC = await instance.decode(`${data}.${signature}`);\n        const payload = decodedVC.jwt?.payload as JWTPayload;\n        const header = decodedVC.jwt?.header as JWK;\n        const publicKey = await this.resolverService.resolvePublicKey(\n            payload,\n            header,\n        );\n        const crypto = this.cryptoService.getCryptoFromJwk(publicKey); // just to check if we support the key\n        const verify = await crypto.getVerifier(publicKey);\n        return verify(data, signature).catch((err) => {\n            console.log(err);\n            return false;\n        });\n    };\n\n    /**\n     * Fetch the status list from the uri.\n     * @param uri\n     * @returns\n     */\n    private statusListFetcher: (uri: string) => Promise = (\n        uri: string,\n    ) => {\n        return firstValueFrom(this.httpService.get(uri)).then(\n            (res) => res.data,\n        );\n    };\n\n    /**\n     * Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n     * @param data\n     * @param signature\n     * @param payload\n     * @returns\n     */\n    private kbVerifier: KbVerifier = async (data, signature, payload) => {\n        if (!payload.cnf) {\n            throw new Error(\"No cnf found in the payload\");\n        }\n        const jwk: JWK = (payload.cnf as any).jwk;\n        const crypto = this.cryptoService.getCryptoFromJwk(jwk);\n        const verifier = await crypto.getVerifier(jwk);\n        return verifier(data, signature);\n    };\n\n    /**\n     * Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n     * @param res\n     * @param requiredFields\n     * @returns\n     */\n    parseResponse(\n        res: AuthResponse,\n        requiredFields: string[],\n        keyBindingNonce: string,\n    ) {\n        const attestations = Object.keys(res.vp_token);\n        const att = attestations.map((att) =>\n            this.sdjwtInstance\n                .verify(res.vp_token[att], {\n                    requiredClaimKeys: requiredFields,\n                    keyBindingNonce,\n                })\n                .then(\n                    (result) => {\n                        return {\n                            id: att,\n                            values: {\n                                ...result.payload,\n                                cnf: undefined, // remove cnf for simplicity\n                                status: undefined, // remove status for simplicity\n                            },\n                        };\n                    },\n                    /* (err) => {\n                        throw new Error\n                        //(console.log(err);\n                        return {\n                            id: att,\n                            error: err.message,\n                        };\n                    }, */\n                ),\n        );\n        return Promise.all(att);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RegistrarEntity.html":{"url":"entities/RegistrarEntity.html","title":"entity - RegistrarEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  RegistrarEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/entities/registrar.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessCertificateId\n                            \n                            \n                                    \n                                relyingPartyId\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessCertificateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        relyingPartyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:13\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../auth/tenant/entitites/tenant.entity\";\n\n@Entity()\nexport class RegistrarEntity {\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"varchar\")\n    relyingPartyId: string;\n\n    @Column(\"varchar\")\n    accessCertificateId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RegistrarModule.html":{"url":"modules/RegistrarModule.html","title":"module - RegistrarModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    RegistrarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_RegistrarModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/registrar/registrar.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            RegistrarModule is responsible for managing the registrar service.\nIt provides the RegistrarService and imports necessary modules.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { PresentationsModule } from \"../verifier/presentations/presentations.module\";\nimport { RegistrarEntity } from \"./entities/registrar.entity\";\nimport { RegistrarService } from \"./registrar.service\";\n\n/**\n * RegistrarModule is responsible for managing the registrar service.\n * It provides the RegistrarService and imports necessary modules.\n */\n@Module({\n    imports: [\n        CryptoModule,\n        PresentationsModule,\n        TypeOrmModule.forFeature([RegistrarEntity]),\n    ],\n    providers: [RegistrarService],\n    exports: [RegistrarService],\n})\nexport class RegistrarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegistrarService.html":{"url":"injectables/RegistrarService.html","title":"injectable - RegistrarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  RegistrarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarService is responsible for managing the interaction with the registrar,\nincluding adding relying parties, access certificates, and registration certificates.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessToken\n                            \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                oauth2Client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addAccessCertificate\n                            \n                            \n                                    Async\n                                addRegistrationCertificate\n                            \n                            \n                                addRp\n                            \n                            \n                                    Private\n                                getExistingRp\n                            \n                            \n                                isEnabled\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, presentationsService: PresentationsService, registrarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/registrar/registrar.service.ts:37\n                            \n                        \n\n                \n                    \n                            Constructor for the RegistrarService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ConfigService for accessing configuration values.\n\n\n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of CryptoService for cryptographic operations.\n\n\n                                                        \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of PresentationsService for handling presentations.\n\n\n                                                        \n                                                \n                                                \n                                                        registrarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        addAccessCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addAccessCertificate(tenantId: string, relyingPartyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:190\n                        \n                    \n\n\n            \n                \n                        Add a new access certificate to the registrar.\nThis is only needed once, when the access certificate is created.\nIf the access certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                relyingPartyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addRegistrationCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRegistrationCertificate(req: RegistrationCertificateRequest, dcql_query: any, requestId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:232\n                        \n                    \n\n\n            \n                \n                        Add a new registration certificate to the registrar.\nThis is only needed once, when the registration certificate is created.\nIf the registration certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RegistrationCertificateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dcql_query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addRp\n                        \n                    \n                \n            \n            \n                \naddRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:150\n                        \n                    \n\n\n            \n                \n                        Adds a new relying party to the registrar.\nThis is only needed once, when the relying party is created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getExistingRp\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExistingRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:173\n                        \n                    \n\n\n            \n                \n                        Stores the existing relying party ID based on the name.\nThis is used when the relying party already exists in the registrar.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the relying party.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The ID of the existing relying party.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnabled\n                        \n                    \n                \n            \n            \n                \nisEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:96\n                        \n                    \n\n\n            \n                \n                        Checks if the registrar service is enabled based on the configuration.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the registrar service is enabled, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Initializes the OAuth2 client and registrar client with the necessary configurations.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:125\n                        \n                    \n\n\n            \n                \n                        Deletes all registrar entries for a specific tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenant: TenantEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:104\n                        \n                    \n\n\n            \n                \n                        This function is called when a tenant is initialized.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            TenantEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshAccessToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:133\n                        \n                    \n\n\n            \n                \n                        Refreshes the access token for the registrar using client credentials.\nThis method is called periodically to ensure the access token is valid.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:37\n                        \n                    \n\n            \n                \n                    Access token for authenticating requests to the registrar.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:33\n                        \n                    \n\n            \n                \n                    Client for interacting with the registrar API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauth2Client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:29\n                        \n                    \n\n            \n                \n                    OAuth2 client for interacting with the OIDC provider.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { OAuth2Client } from \"@badgateway/oauth2-client\";\nimport { Injectable, OnModuleInit } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { TenantEntity } from \"../auth/tenant/entitites/tenant.entity\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { RegistrationCertificateRequest } from \"../verifier/presentations/dto/vp-request.dto\";\nimport { PresentationsService } from \"../verifier/presentations/presentations.service\";\nimport { RegistrarEntity } from \"./entities/registrar.entity\";\nimport {\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from \"./generated\";\nimport { client } from \"./generated/client.gen\";\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n        @InjectRepository(RegistrarEntity)\n        private registrarRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    async onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow(\"REGISTRAR_OIDC_URL\");\n        const clientId = this.configService.getOrThrow(\n            \"REGISTRAR_OIDC_CLIENT_ID\",\n        );\n        const clientSecret = this.configService.getOrThrow(\n            \"REGISTRAR_OIDC_CLIENT_SECRET\",\n        );\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow(\"REGISTRAR_URL\"),\n            auth: () => this.accessToken,\n        });\n\n        if (!this.configService.get(\"REGISTRAR_URL\")) {\n            return;\n        }\n        await this.refreshAccessToken();\n\n        //TODO: there may be the case that the registrar is activated after the tenant was created. For this action, the registrar would need to include the tenantservice, causing a circular dependency.\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get(\"REGISTRAR_URL\");\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenant\n     */\n    async onTenantInit(tenant: TenantEntity) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        const name = tenant.name;\n        const relyingPartyId = await this.addRp(name);\n        const accessCertificateId = await this.addAccessCertificate(\n            tenant.id,\n            relyingPartyId,\n        );\n        await this.registrarRepository.save({\n            tenantId: tenant.id,\n            relyingPartyId,\n            accessCertificateId,\n        });\n    }\n\n    /**\n     * Deletes all registrar entries for a specific tenant.\n     * @param tenantId\n     */\n    async onTenantDelete(tenantId: string) {\n        await this.registrarRepository.delete({ tenantId });\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(name: string): Promise {\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            let rpId: string;\n            if (response.error) {\n                rpId = await this.getExistingRp(name);\n            } else {\n                rpId = response.data![\"id\"];\n            }\n            return rpId;\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private getExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id!;\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        tenantId: string,\n        relyingPartyId: string,\n    ): Promise {\n        const keyId = await this.cryptoService.keyService.getKid(tenantId);\n        const host = this.configService\n            .getOrThrow(\"PUBLIC_URL\")\n            .replace(\"https://\", \"\");\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    \"pem\",\n                    tenantId,\n                    keyId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: relyingPartyId,\n            },\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\"Error adding access certificate:\", res.error);\n                throw new Error(\"Error adding access certificate\");\n            }\n            //store the cert\n            await this.cryptoService.storeAccessCertificate(\n                res.data![\"crt\"],\n                tenantId,\n                keyId,\n            );\n            return res.data![\"id\"];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const entry = await this.registrarRepository.findOneByOrFail({\n            tenantId,\n        });\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp: entry.relyingPartyId,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp: entry.relyingPartyId,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    \"Error adding registration certificate:\",\n                    res.error,\n                );\n                throw new Error(\"Error adding registration certificate\");\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data![\"id\"],\n                requestId,\n                tenantId,\n            );\n            return res.data![\"jwt\"];\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrationCertificateRequest.html":{"url":"classes/RegistrationCertificateRequest.html","title":"class - RegistrationCertificateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrationCertificateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/vp-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrationCertificateRequest DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RegistrationCertificateCreation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:18\n                        \n                    \n\n            \n                \n                    The body of the registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:13\n                        \n                    \n\n            \n                \n                    Identifier of the registration certificate that got issued.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsOptional, IsString } from \"class-validator\";\nimport { RegistrationCertificateCreation } from \"../../../registrar/generated\";\n\n/**\n * RegistrationCertificateRequest DTO\n */\nexport class RegistrationCertificateRequest {\n    /**\n     * Identifier of the registration certificate that got issued.\n     */\n    @IsOptional()\n    @IsString()\n    id?: string;\n    /**\n     * The body of the registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    body: RegistrationCertificateCreation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResolverModule.html":{"url":"modules/ResolverModule.html","title":"module - ResolverModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    ResolverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\n\nResolverService \n\nResolverService \n\n\n\nResolverModule\n\nResolverModule\n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/resolver/resolver.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { ResolverService } from \"./resolver.service\";\n\n@Module({\n    imports: [HttpModule],\n    providers: [ResolverService],\n    exports: [ResolverService],\n})\nexport class ResolverModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolverService.html":{"url":"injectables/ResolverService.html","title":"injectable - ResolverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/resolver.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for resolving public keys from JWT payloads and headers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resolvePublicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/resolver/resolver.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resolvePublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolvePublicKey(payload: JWTPayload, header: JWK)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/resolver/resolver.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWK\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { X509Certificate } from \"node:crypto\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { JWK, JWTPayload } from \"jose\";\nimport { firstValueFrom } from \"rxjs\";\nimport { IssuerMetadata } from \"./dto/issuer-metadata.dto\";\n\n/**\n * Service for resolving public keys from JWT payloads and headers.\n */\n@Injectable()\nexport class ResolverService {\n    constructor(private httpService: HttpService) {}\n\n    /**\n     * Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n     * @param payload\n     * @param header\n     * @returns\n     */\n    async resolvePublicKey(payload: JWTPayload, header: JWK): Promise {\n        if (!payload.iss) {\n            throw new Error(\"Issuer not found\");\n        }\n\n        if (header.x5c) {\n            //TODO: validate the certificate and the chain of trust!\n            const certs = header.x5c.map(\n                (cert) => new X509Certificate(Buffer.from(cert, \"base64\")),\n            );\n            const cert = certs[0];\n            if (!cert.subjectAltName?.includes(new URL(payload.iss).hostname)) {\n                throw new Error(\"Subject and issuer do not match\");\n            }\n            return cert.publicKey.export({ format: \"jwk\" }) as JWK;\n        }\n        //checl if the key is in the header as jwk\n        if (header[\"jwk\"]) {\n            return header[\"jwk\"] as JWK;\n        }\n\n        const response = await firstValueFrom(\n            this.httpService.get(\n                `${payload.iss}/.well-known/jwt-vc-issuer`,\n            ),\n        ).then(\n            (r) => r.data,\n            () => {\n                throw new ConflictException(\"Issuer not reachable\");\n            },\n        );\n        const key = response.jwks.keys.find((key) => key.kid === header.kid);\n        if (!key) {\n            throw new Error(\"Key not found\");\n        }\n        return key;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoleDto.html":{"url":"classes/RoleDto.html","title":"class - RoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'OAuth2 roles', enum: Role, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/role.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Role } from \"../roles/role.enum\";\n\nexport class RoleDto {\n    @ApiProperty({\n        description: \"OAuth2 roles\",\n        enum: Role,\n        example: Role.Issuances,\n    })\n    role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n                File\n            \n            \n                src/auth/roles/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/roles/roles.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/roles/roles.guard.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { Role } from \"./role.enum\";\nimport { ROLES_KEY } from \"./roles.decorator\";\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    constructor(private reflector: Reflector) {}\n\n    canActivate(context: ExecutionContext): boolean {\n        const requiredRoles = this.reflector.getAllAndOverride(\n            ROLES_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (!requiredRoles) {\n            return true;\n        }\n        const { user } = context.switchToHttp().getRequest();\n        return requiredRoles.some((role) => user.roles?.includes(role));\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RootOfTrustPolicy.html":{"url":"classes/RootOfTrustPolicy.html","title":"class - RootOfTrustPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RootOfTrustPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                rootOfTrust\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['rootOfTrust'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/S3FileStorage.html":{"url":"classes/S3FileStorage.html","title":"class - S3FileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  S3FileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/adapters/s3.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            FileStorage\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                getSignedUrl\n                            \n                            \n                                    Async\n                                getStream\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(s3: S3Client, bucket: string, publicBaseUrl?: string)\n                    \n                \n                        \n                            \n                                Defined in src/storage/adapters/s3.storage.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        s3\n                                                  \n                                                        \n                                                                    S3Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bucket\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publicBaseUrl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSignedUrl\n                        \n                    \n                \n            \n            \n                \ngetSignedUrl(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStream\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    DeleteObjectCommand,\n    GetObjectCommand,\n    HeadObjectCommand,\n    PutObjectCommand,\n    S3Client,\n} from \"@aws-sdk/client-s3\";\nimport { getSignedUrl as sign } from \"@aws-sdk/s3-request-presigner\";\nimport { Readable } from \"stream\";\nimport { FileStorage, PutOptions, StoredObject } from \"../storage.types\";\n\nexport class S3FileStorage implements FileStorage {\n    constructor(\n        private s3: S3Client,\n        private bucket: string,\n        private publicBaseUrl?: string, // e.g. CloudFront URL (optional)\n    ) {}\n\n    async put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise {\n        await this.s3.send(\n            new PutObjectCommand({\n                Bucket: this.bucket,\n                Key: key,\n                Body: body,\n                ContentType: opts?.contentType,\n                Metadata: opts?.metadata,\n                ACL: opts?.acl === \"public\" ? \"public-read\" : undefined,\n                ChecksumSHA256: opts?.checksum, // optional if you computed it\n            }),\n        );\n\n        const head = await this.s3.send(\n            new HeadObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n        const url =\n            opts?.acl === \"public\"\n                ? this.publicBaseUrl\n                    ? `${this.publicBaseUrl.replace(/\\/+$/, \"\")}/${encodeURI(key)}`\n                    : `https://${this.bucket}.s3.amazonaws.com/${encodeURI(key)}`\n                : undefined;\n\n        return {\n            key,\n            etag: head.ETag,\n            size: head.ContentLength,\n            url,\n            contentType: head.ContentType || opts?.contentType,\n        };\n    }\n\n    async getStream(key: string) {\n        const obj = await this.s3.send(\n            new GetObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n        const stream = obj.Body as Readable;\n        return {\n            stream,\n            contentType: obj.ContentType,\n            size: obj.ContentLength,\n        };\n    }\n\n    async delete(key: string) {\n        await this.s3.send(\n            new DeleteObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n    }\n\n    async exists(key: string) {\n        try {\n            await this.s3.send(\n                new HeadObjectCommand({ Bucket: this.bucket, Key: key }),\n            );\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    getSignedUrl(key: string) {\n        return Promise.resolve(\n            sign(\n                this.s3,\n                new GetObjectCommand({ Bucket: this.bucket, Key: key }),\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SchemaResponse.html":{"url":"classes/SchemaResponse.html","title":"class - SchemaResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/schema-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Schema to validate other json objects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                $schema\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                properties\n                            \n                            \n                                    \n                                    Optional\n                                required\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                title\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        $schema\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Equals('https://json-schema.org/draft/2020-12/schema')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Equals('object')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Equals,\n    IsArray,\n    IsObject,\n    IsOptional,\n    IsString,\n} from \"class-validator\";\n\n/**\n * Schema to validate other json objects.\n */\nexport class SchemaResponse {\n    @Equals(\"https://json-schema.org/draft/2020-12/schema\")\n    $schema: \"https://json-schema.org/draft/2020-12/schema\";\n    @Equals(\"object\")\n    type: \"object\";\n    @IsObject()\n    properties: Record;\n    @IsArray()\n    required?: string[];\n    @IsOptional()\n    @IsString()\n    title?: string;\n    @IsOptional()\n    @IsString()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user session in the application.\nIt includes various properties such as credentials, authorization code,\nrequest URI, authorization queries, and more.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                auth_queries\n                            \n                            \n                                    \n                                    Optional\n                                authorization_code\n                            \n                            \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                credentialPayload\n                            \n                            \n                                    \n                                    Optional\n                                credentials\n                            \n                            \n                                    \n                                    Optional\n                                expiresAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                issuanceId\n                            \n                            \n                                    \n                                    Optional\n                                nonce\n                            \n                            \n                                    \n                                notifications\n                            \n                            \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                    Optional\n                                offer\n                            \n                            \n                                    \n                                    Optional\n                                offerUrl\n                            \n                            \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    Optional\n                                requestId\n                            \n                            \n                                    \n                                    Optional\n                                requestObject\n                            \n                            \n                                    \n                                    Optional\n                                requestUrl\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                useDcApi\n                            \n                            \n                                    \n                                    Optional\n                                vp_nonce\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        auth_queries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthorizeQueries\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:126\n                        \n                    \n\n            \n                \n                    Authorization queries associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        authorization_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:116\n                        \n                    \n\n            \n                \n                    Authorization code for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:155\n                        \n                    \n\n            \n                \n                    Webhook configuration to send result and may receive further information.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:64\n                        \n                    \n\n            \n                \n                    The timestamp when the request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentialPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OfferRequestDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:150\n                        \n                    \n\n            \n                \n                    Credential payload containing the offer request details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VerificationResult[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:191\n                        \n                    \n\n            \n                \n                    Verified credentials from the presentation process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('date', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:76\n                        \n                    \n\n            \n                \n                    The timestamp when the request is set to expire.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:58\n                        \n                    \n\n            \n                \n                    Unique identifier for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:132\n                        \n                    \n\n            \n                \n                    Nonce used for the OID4VCI flow.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:165\n                        \n                    \n\n            \n                \n                    Notifications associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:160\n                        \n                    \n\n            \n                \n                    Webhook configuration to send the result of the notification response.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CredentialOfferObject\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:138\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offerUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:144\n                        \n                    \n\n            \n                \n                    Offer URL for the credential offer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:121\n                        \n                    \n\n            \n                \n                    Request URI from the authorization request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:173\n                        \n                    \n\n            \n                \n                    The ID of the presentation configuration associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestObject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:185\n                        \n                    \n\n            \n                \n                    Signed presentation auth request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:179\n                        \n                    \n\n            \n                \n                    The URL of the presentation auth request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SessionStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SessionStatus})@Column('varchar', {nullable: true, default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:105\n                        \n                    \n\n            \n                \n                    Status of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE', eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:98\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:88\n                        \n                    \n\n            \n                \n                    Tenant ID for multi-tenancy support.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:70\n                        \n                    \n\n            \n                \n                    The timestamp when the request was last updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        useDcApi\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('boolean', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:82\n                        \n                    \n\n            \n                \n                    Flag indicating whether to use the DC API for the presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        vp_nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:197\n                        \n                    \n\n            \n                \n                    Noncce from the Verifiable Presentation request.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n    CredentialOfferObject,\n    NotificationEvent,\n} from \"@openid4vc/openid4vci\";\nimport { VerificationResult } from \"@sd-jwt/sd-jwt-vc\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    PrimaryColumn,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../auth/tenant/entitites/tenant.entity\";\nimport { AuthorizeQueries } from \"../../issuer/authorize/dto/authorize-request.dto\";\nimport { OfferRequestDto } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\n\nexport enum SessionStatus {\n    Active = \"active\",\n    Fetched = \"fetched\",\n    Completed = \"completed\",\n    Expired = \"expired\",\n    Failed = \"failed\",\n}\n\n/**\n * Represents a session entity for managing user sessions in the application.\n */\nexport type Notification = {\n    /**\n     * Unique identifier for the notification.\n     */\n    id: string;\n    /**\n     * The type of notification.\n     */\n    event?: NotificationEvent;\n\n    /**\n     * The credential ID associated with the notification.\n     */\n    credentialConfigurationId: string;\n};\n\n/**\n * Entity representing a user session in the application.\n * It includes various properties such as credentials, authorization code,\n * request URI, authorization queries, and more.\n */\n@Entity()\nexport class Session {\n    /**\n     * Unique identifier for the session.\n     */\n    @PrimaryColumn(\"uuid\")\n    id: string;\n\n    /**\n     * The timestamp when the request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * The timestamp when the request is set to expire.\n     */\n    @Column(\"date\", { nullable: true })\n    expiresAt?: Date;\n\n    /**\n     * Flag indicating whether to use the DC API for the presentation request.\n     */\n    @Column(\"boolean\", { nullable: true })\n    useDcApi: boolean;\n\n    /**\n     * Tenant ID for multi-tenancy support.\n     */\n    @Column(\"varchar\")\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, {\n        cascade: true,\n        onDelete: \"CASCADE\",\n        eager: true,\n    })\n    tenant: TenantEntity;\n\n    /**\n     * Status of the session.\n     */\n    @ApiProperty({ enum: SessionStatus })\n    @Column(\"varchar\", { nullable: true, default: \"active\" })\n    status: SessionStatus;\n\n    // issuance specific fields\n\n    @Column(\"varchar\", { nullable: true })\n    issuanceId?: string;\n\n    /**\n     * Authorization code for the session.\n     */\n    @Column(\"varchar\", { nullable: true })\n    authorization_code?: string;\n    /**\n     * Request URI from the authorization request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    request_uri?: string;\n    /**\n     * Authorization queries associated with the session.\n     */\n    @Column(\"json\", { nullable: true })\n    auth_queries?: AuthorizeQueries;\n\n    /**\n     * Nonce used for the OID4VCI flow.\n     */\n    @Column(\"varchar\", { nullable: true })\n    nonce?: string;\n\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column(\"json\", { nullable: true })\n    offer?: CredentialOfferObject;\n\n    /**\n     * Offer URL for the credential offer.\n     */\n    @Column(\"varchar\", { nullable: true })\n    offerUrl?: string;\n\n    /**\n     * Credential payload containing the offer request details.\n     */\n    @Column(\"json\", { nullable: true })\n    credentialPayload?: OfferRequestDto;\n    /**\n     * Webhook configuration to send result and may receive further information.\n     */\n    @Column(\"json\", { nullable: true })\n    claimsWebhook?: WebhookConfig;\n    /**\n     * Webhook configuration to send the result of the notification response.\n     */\n    @Column(\"json\", { nullable: true })\n    notifyWebhook?: WebhookConfig;\n    /**\n     * Notifications associated with the session.\n     */\n    @Column(\"json\", { default: JSON.stringify([]) })\n    notifications: Notification[];\n\n    // presentation specific fields\n\n    /**\n     * The ID of the presentation configuration associated with the session.\n     */\n    @Column(\"varchar\", { nullable: true })\n    requestId?: string;\n\n    /**\n     * The URL of the presentation auth request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    requestUrl?: string;\n\n    /**\n     * Signed presentation auth request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    requestObject?: string;\n\n    /**\n     * Verified credentials from the presentation process.\n     */\n    @Column(\"json\", { nullable: true })\n    credentials?: VerificationResult[];\n\n    /**\n     * Noncce from the Verifiable Presentation request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    vp_nonce?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.controller.ts\n        \n            \n                Prefix\n            \n            \n                session\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteSession\n                            \n                            \n                                    \n                                getAllSessions\n                            \n                            \n                                    \n                                    \n                                getSession\n                            \n                            \n                                    \n                                revokeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSession(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:46\n                        \n                    \n\n\n            \n                \n                        Deletes a session by its ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllSessions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'id', description: 'The session ID', type: String})@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Retrieves the session information for a given session ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Session\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revokeAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeAll(value: StatusUpdateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('revoke')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:59\n                        \n                    \n\n\n            \n                \n                        Update the status of the credentials of a specific session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post } from \"@nestjs/common\";\nimport { ApiParam, ApiTags } from \"@nestjs/swagger\";\nimport { Role } from \"../auth/roles/role.enum\";\nimport { Secured } from \"../auth/secure.decorator\";\nimport { Token, TokenPayload } from \"../auth/token.decorator\";\nimport { StatusUpdateDto } from \"../issuer/status-list/dto/status-update.dto\";\nimport { StatusListService } from \"../issuer/status-list/status-list.service\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionPipe } from \"./session.pipe\";\nimport { SessionService } from \"./session.service\";\n\n@ApiTags(\"Session management\")\n@Secured([Role.IssuanceOffer, Role.PresentationOffer])\n@Controller(\"session\")\nexport class SessionController {\n    constructor(\n        private readonly sessionService: SessionService,\n        private readonly statusListService: StatusListService,\n    ) {}\n\n    /**\n     * Retrieves all sessions.\n     */\n    @Get()\n    getAllSessions(): Promise {\n        return this.sessionService.getAll();\n    }\n\n    /**\n     * Retrieves the session information for a given session ID.\n     * @param id - The identifier of the session.\n     */\n    @ApiParam({ name: \"id\", description: \"The session ID\", type: String })\n    @Get(\":id\")\n    getSession(@Param(\"id\", SessionPipe) session: Session): Session {\n        return session;\n    }\n\n    /**\n     * Deletes a session by its ID\n     * @param id\n     * @param user\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteSession(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ): Promise {\n        return this.sessionService.delete(id, user.entity!.id);\n    }\n\n    /**\n     * Update the status of the credentials of a specific session.\n     * @param value\n     * @returns\n     */\n    @Post(\"revoke\")\n    revokeAll(@Body() value: StatusUpdateDto, @Token() user: TokenPayload) {\n        return this.statusListService.updateStatus(value, user.entity!.id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionLogContext.html":{"url":"interfaces/SessionLogContext.html","title":"interface - SessionLogContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionLogContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Context for session logging, including session ID, tenant ID, flow type, and optional stage.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flowType\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stage\n                                        \n                                \n                                \n                                        \n                                            tenantId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger-context.ts:21\n                            \n                        \n                \n                    \n                        Additional context information for the session.\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flowType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flowType:     \"OID4VCI\" | \"OID4VP\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"OID4VCI\" | \"OID4VP\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of flow being logged (e.g., OID4VCI, OID4VP).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for the session.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional stage of the flow, useful for tracking progress.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenantId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tenantId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier for the tenant associated with the session.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SessionLogContext {\n    /**\n     * Unique identifier for the session.\n     */\n    sessionId: string;\n    /**\n     * Identifier for the tenant associated with the session.\n     */\n    tenantId: string;\n    /**\n     * Type of flow being logged (e.g., OID4VCI, OID4VP).\n     */\n    flowType: \"OID4VCI\" | \"OID4VP\";\n    /**\n     * Optional stage of the flow, useful for tracking progress.\n     */\n    stage?: string;\n    /**\n     * Additional context information for the session.\n     */\n    [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerInterceptor.html":{"url":"injectables/SessionLoggerInterceptor.html","title":"injectable - SessionLoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for logging session-related requests and responses.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, sessionLoggerService: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.interceptor.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerInterceptor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReflector instance for accessing metadata.\n\n\n                                                        \n                                                \n                                                \n                                                        sessionLoggerService\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nSession Logger service for consistent logging behavior.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:35\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and logs session-related information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCall handler to proceed with the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits the response data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:122\n                        \n                    \n\n\n            \n                \n                        Sanitizes the request body to remove sensitive information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request body to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Sanitized body.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { Observable } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { SESSION_LOGGER_KEY } from \"./session-logger.decorator\";\nimport { SessionLoggerService } from \"./session-logger.service\";\nimport { SessionLogContext } from \"./session-logger-context\";\n\n/**\n * Interceptor for logging session-related requests and responses.\n */\n@Injectable()\nexport class SessionLoggerInterceptor implements NestInterceptor {\n    /**\n     * Constructor for SessionLoggerInterceptor.\n     * @param reflector - Reflector instance for accessing metadata.\n     * @param sessionLoggerService - Session Logger service for consistent logging behavior.\n     */\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly sessionLoggerService: SessionLoggerService,\n    ) {}\n\n    /**\n     * Intercepts the request and logs session-related information.\n     * @param context - Execution context of the request.\n     * @param next - Call handler to proceed with the request.\n     * @returns An observable that emits the response data.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const metadata = this.reflector.get(\n            SESSION_LOGGER_KEY,\n            context.getHandler(),\n        );\n\n        // Skip if no metadata or logger is disabled (the service will check enablement)\n        if (!metadata) {\n            return next.handle();\n        }\n\n        const { sessionIdParam, flowType } = metadata;\n        const request = context.switchToHttp().getRequest();\n        const response = context.switchToHttp().getResponse();\n\n        const sessionId = request.params[sessionIdParam];\n        const tenantId = request.params?.tenantId;\n        const method = request.method;\n        const url = request.url;\n\n        // Create log context for consistent logging\n        const logContext: SessionLogContext = {\n            sessionId,\n            tenantId,\n            flowType,\n            endpoint: `${method} ${url}`,\n        };\n\n        // Log the start of the request using SessionLoggerService\n        this.sessionLoggerService.logSession(\n            logContext,\n            `Starting ${method} ${url}`,\n            {\n                event: \"request_start\",\n                method,\n                url,\n                headers: {\n                    \"user-agent\": request.headers[\"user-agent\"],\n                    \"content-type\": request.headers[\"content-type\"],\n                },\n                body: this.sanitizeBody(request.body),\n            },\n        );\n\n        const startTime = Date.now();\n\n        return next.handle().pipe(\n            tap((data) => {\n                const duration = Date.now() - startTime;\n                // Log successful request completion\n                this.sessionLoggerService.logSession(\n                    logContext,\n                    `Completed ${method} ${url} in ${duration}ms`,\n                    {\n                        event: \"request_success\",\n                        method,\n                        url,\n                        statusCode: response.statusCode,\n                        duration,\n                        responseSize: JSON.stringify(data || {}).length,\n                    },\n                );\n            }),\n            catchError((error) => {\n                const duration = Date.now() - startTime;\n                // Log request error\n                this.sessionLoggerService.logSessionError(\n                    logContext,\n                    error,\n                    `Error in ${method} ${url}`,\n                    {\n                        event: \"request_error\",\n                        method,\n                        url,\n                        duration,\n                    },\n                );\n                throw error;\n            }),\n        );\n    }\n\n    /**\n     * Sanitizes the request body to remove sensitive information.\n     * @param body - The request body to sanitize.\n     * @returns Sanitized body.\n     */\n    private sanitizeBody(body: any): any {\n        if (!body) return body;\n\n        // Create a copy to avoid modifying the original\n        const sanitized = { ...body };\n\n        // Remove sensitive fields\n        const sensitiveFields = [\n            \"password\",\n            \"token\",\n            \"secret\",\n            \"key\",\n            \"private_key\",\n            \"access_token\",\n            \"refresh_token\",\n        ];\n\n        sensitiveFields.forEach((field) => {\n            if (sanitized[field]) {\n                sanitized[field] = \"[REDACTED]\";\n            }\n        });\n\n        return sanitized;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerService.html":{"url":"injectables/SessionLoggerService.html","title":"injectable - SessionLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for logging session-related events and errors.\nUses PinoLogger for structured logging.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logAuthorizationRequest\n                            \n                            \n                                logCredentialIssuance\n                            \n                            \n                                logCredentialVerification\n                            \n                            \n                                logFlowComplete\n                            \n                            \n                                logFlowError\n                            \n                            \n                                logFlowStart\n                            \n                            \n                                logNotification\n                            \n                            \n                                logSession\n                            \n                            \n                                logSessionError\n                            \n                            \n                                logTokenExchange\n                            \n                            \n                                    Private\n                                shouldLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, loggerConfigService: LoggerConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        loggerConfigService\n                                                  \n                                                        \n                                                                        LoggerConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \nlogAuthorizationRequest(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:143\n                        \n                    \n\n\n            \n                \n                        Log authorization request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialIssuance\n                        \n                    \n                \n            \n            \n                \nlogCredentialIssuance(context: SessionLogContext, credentialType: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Log credential issuance step\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialVerification\n                        \n                    \n                \n            \n            \n                \nlogCredentialVerification(context: SessionLogContext, verificationResult: boolean, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:121\n                        \n                    \n\n\n            \n                \n                        Log credential presentation verification\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                verificationResult\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowComplete\n                        \n                    \n                \n            \n            \n                \nlogFlowComplete(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Log session flow completion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowError\n                        \n                    \n                \n            \n            \n                \nlogFlowError(context: SessionLogContext, error: Error, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Log session flow error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowStart\n                        \n                    \n                \n            \n            \n                \nlogFlowStart(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Log session flow start\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logNotification\n                        \n                    \n                \n            \n            \n                \nlogNotification(context: SessionLogContext, notificationEvent: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Log notification events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notificationEvent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSession\n                        \n                    \n                \n            \n            \n                \nlogSession(context: SessionLogContext, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:199\n                        \n                    \n\n\n            \n                \n                        Generic session log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSessionError\n                        \n                    \n                \n            \n            \n                \nlogSessionError(context: SessionLogContext, error: Error, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:218\n                        \n                    \n\n\n            \n                \n                        Generic session error log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logTokenExchange\n                        \n                    \n                \n            \n            \n                \nlogTokenExchange(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:160\n                        \n                    \n\n\n            \n                \n                        Log token exchange\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    shouldLog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { LoggerConfigService } from \"./logger-config.service\";\nimport { SessionLogContext } from \"./session-logger-context\";\n\n/**\n * Service for logging session-related events and errors.\n * Uses PinoLogger for structured logging.\n */\n@Injectable()\nexport class SessionLoggerService {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerService.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing environment configuration.\n     */\n    constructor(\n        private readonly logger: PinoLogger,\n        private readonly loggerConfigService: LoggerConfigService,\n    ) {\n        this.logger.setContext(\"SessionLoggerService\");\n        this.isEnabled = this.loggerConfigService.isSessionLoggerEnabled();\n    }\n\n    private shouldLog(): boolean {\n        return this.isEnabled;\n    }\n\n    /**\n     * Log session flow start\n     */\n    logFlowStart(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow started for session ${context.sessionId} in tenant ${context.tenantId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"flow_start\",\n                stage: \"initialization\",\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow completion\n     */\n    logFlowComplete(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow completed for session ${context.sessionId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"flow_complete\",\n                stage: \"completion\",\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow error\n     */\n    logFlowError(\n        context: SessionLogContext,\n        error: Error,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow error for session ${context.sessionId}: ${error.message}`;\n\n        this.logger.error(\n            {\n                ...context,\n                event: \"flow_error\",\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log credential issuance step\n     */\n    logCredentialIssuance(\n        context: SessionLogContext,\n        credentialType: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"credential_issuance\",\n                stage: \"credential_creation\",\n                credentialType,\n                ...additionalData,\n            },\n            `[${context.flowType}] Issuing credential of type ${credentialType} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log credential presentation verification\n     */\n    logCredentialVerification(\n        context: SessionLogContext,\n        verificationResult: boolean,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"credential_verification\",\n                stage: \"verification\",\n                verificationResult,\n                ...additionalData,\n            },\n            `[${context.flowType}] Credential verification ${verificationResult ? \"succeeded\" : \"failed\"} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log authorization request\n     */\n    logAuthorizationRequest(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"authorization_request\",\n                stage: \"authorization\",\n                ...additionalData,\n            },\n            `[${context.flowType}] Authorization request created for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log token exchange\n     */\n    logTokenExchange(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"token_exchange\",\n                stage: \"token_exchange\",\n                ...additionalData,\n            },\n            `[${context.flowType}] Token exchange for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log notification events\n     */\n    logNotification(\n        context: SessionLogContext,\n        notificationEvent: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"notification\",\n                stage: \"notification\",\n                notificationEvent,\n                ...additionalData,\n            },\n            `[${context.flowType}] Notification ${notificationEvent} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Generic session log method\n     */\n    logSession(\n        context: SessionLogContext,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}`,\n        );\n    }\n\n    /**\n     * Generic session error log method\n     */\n    logSessionError(\n        context: SessionLogContext,\n        error: Error,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.error(\n            {\n                ...context,\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}: ${error.message}`,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_imports\n\n\n\n\nLoggerModule\n\nLoggerModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nLoggerModule->SessionModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nLoggerModule \n\nLoggerModule \n\nLoggerModule  -->\n\nSessionModule->LoggerModule \n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            SessionModule is responsible for managing user sessions.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            LoggerModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LoggerModule\n                        \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { makeGaugeProvider } from \"@willsoto/nestjs-prometheus\";\nimport { StatusListModule } from \"../issuer/status-list/status-list.module\";\nimport { LoggerModule } from \"../utils/logger/logger.module\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionController } from \"./session.controller\";\nimport { SessionService } from \"./session.service\";\n\n/**\n * SessionModule is responsible for managing user sessions.\n */\n@Module({\n    imports: [\n        TypeOrmModule.forFeature([Session]),\n        StatusListModule,\n        LoggerModule,\n    ],\n    providers: [\n        SessionService,\n        makeGaugeProvider({\n            name: \"sessions\",\n            help: \"Total number of sessions by status\",\n            labelNames: [\"tenant_id\", \"session_type\", \"status\"],\n        }),\n    ],\n    exports: [SessionService, LoggerModule],\n    controllers: [SessionController],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionPipe.html":{"url":"injectables/SessionPipe.html","title":"injectable - SessionPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.pipe.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(sessionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.pipe.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, PipeTransform } from \"@nestjs/common\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionService } from \"./session.service\";\n\n@Injectable()\nexport class SessionPipe implements PipeTransform> {\n    constructor(private readonly sessionService: SessionService) {}\n\n    transform(sessionId: string): Promise {\n        if (!sessionId) {\n            throw new NotFoundException(\n                \"Session ID not found in request parameters\",\n            );\n        }\n\n        return this.sessionService.get(sessionId).catch(() => {\n            throw new NotFoundException(\n                `Session with ID ${sessionId} not found`,\n            );\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getAll\n                            \n                            \n                                getBy\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                setState\n                            \n                            \n                                tidyUpSessions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionRepository: Repository, configService: ConfigService, schedulerRegistry: SchedulerRegistry, sessionsCounter: Gauge)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionsCounter\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(issuer_state: string, values: QueryDeepPartialEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:144\n                        \n                    \n\n\n            \n                \n                        Update an existing session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            QueryDeepPartialEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(session: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Create a new session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, sub: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:192\n                        \n                    \n\n\n            \n                \n                        Deletes a session by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Get a session by its state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:152\n                        \n                    \n\n\n            \n                \n                        Get all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBy\n                        \n                    \n                \n            \n            \n                \ngetBy(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:172\n                        \n                    \n\n\n            \n                \n                        Get a session by a specific condition.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Register the tidy up cron job on application bootstrap.\nThis will run every hour by default, but can be configured via the SESSION_TIDY_UP_INTERVAL config variable.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Deletes all sessions for a specific tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setState\n                        \n                    \n                \n            \n            \n                \n                        \n                    setState(session: Session, status: SessionStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Marks the session as successful or failed.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            SessionStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tidyUpSessions\n                        \n                    \n                \n            \n            \n                \ntidyUpSessions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:179\n                        \n                    \n\n\n            \n                \n                        Tidy up sessions that are older than 1 day.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { SchedulerRegistry } from \"@nestjs/schedule\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus/dist/injector\";\nimport { Gauge } from \"prom-client\";\nimport {\n    DeepPartial,\n    FindOptionsWhere,\n    IsNull,\n    LessThan,\n    Not,\n    Repository,\n} from \"typeorm\";\nimport { QueryDeepPartialEntity } from \"typeorm/query-builder/QueryPartialEntity\";\nimport { Session, SessionStatus } from \"./entities/session.entity\";\n\n@Injectable()\nexport class SessionService implements OnApplicationBootstrap {\n    constructor(\n        @InjectRepository(Session)\n        private sessionRepository: Repository,\n        private readonly configService: ConfigService,\n        private readonly schedulerRegistry: SchedulerRegistry,\n        @InjectMetric(\"sessions\")\n        private sessionsCounter: Gauge,\n    ) {}\n\n    /**\n     * Register the tidy up cron job on application bootstrap.\n     * This will run every hour by default, but can be configured via the `SESSION_TIDY_UP_INTERVAL` config variable.\n     * @returns\n     */\n    async onApplicationBootstrap() {\n        const callback = () => {\n            void this.tidyUpSessions();\n        };\n        const intervalTime =\n            this.configService.getOrThrow(\"SESSION_TIDY_UP_INTERVAL\") *\n            1000;\n        const interval = setInterval(callback, intervalTime);\n        this.schedulerRegistry.addInterval(\"tidyUpSessions\", interval);\n\n        //set default values for session metrics\n        const tenantId = \"root\";\n        const states: SessionStatus[] = [\n            SessionStatus.Active,\n            SessionStatus.Fetched,\n            SessionStatus.Completed,\n            SessionStatus.Expired,\n            SessionStatus.Failed,\n        ];\n        for (const state of states) {\n            const issuanceCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: Not(IsNull()),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: \"issuance\",\n                    status: state,\n                },\n                issuanceCounter,\n            );\n            const verificationCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: IsNull(),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: \"verification\",\n                    status: state,\n                },\n                verificationCounter,\n            );\n        }\n\n        return this.tidyUpSessions();\n    }\n\n    /**\n     * Deletes all sessions for a specific tenant.\n     * @param tenantId\n     */\n    async onTenantDelete(tenantId: string) {\n        await this.sessionRepository.delete({ tenantId });\n    }\n\n    /**\n     * Create a new session.\n     * @param session\n     * @returns\n     */\n    async create(session: DeepPartial) {\n        const createdSession = await this.sessionRepository.save(session);\n\n        // Count total sessions created\n        this.sessionsCounter.inc({\n            tenant_id: createdSession.tenantId,\n            session_type: createdSession.issuanceId\n                ? \"issuance\"\n                : \"verification\",\n            status: \"active\",\n        });\n\n        return createdSession;\n    }\n\n    /**\n     * Marks the session as successful or failed.\n     * @param session\n     * @param status\n     */\n    async setState(session: Session, status: SessionStatus) {\n        const sessionType = session.issuanceId ? \"issuance\" : \"verification\";\n\n        await this.sessionRepository.update({ id: session.id }, { status });\n\n        // Count completed sessions (success or failure)\n        this.sessionsCounter.inc({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status,\n        });\n\n        // Decrease active sessions count\n        this.sessionsCounter.dec({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status: \"active\",\n        });\n    }\n\n    /**\n     * Update an existing session.\n     * @param issuer_state\n     * @param values\n     * @returns\n     */\n    add(issuer_state: string, values: QueryDeepPartialEntity) {\n        return this.sessionRepository.update({ id: issuer_state }, values);\n    }\n\n    /**\n     * Get all sessions.\n     * @returns\n     */\n    getAll(): Promise {\n        return this.sessionRepository.find({\n            order: { updatedAt: \"DESC\" },\n        });\n    }\n\n    /**\n     * Get a session by its state.\n     * @param state\n     * @returns\n     */\n    get(state: string) {\n        return this.sessionRepository.findOneByOrFail({ id: state });\n    }\n\n    /**\n     * Get a session by a specific condition.\n     * @param where\n     * @returns\n     */\n    getBy(where: FindOptionsWhere) {\n        return this.sessionRepository.findOneByOrFail(where);\n    }\n\n    /**\n     * Tidy up sessions that are older than 1 day.\n     */\n    tidyUpSessions() {\n        const ttl = this.configService.getOrThrow(\"SESSION_TTL\") * 1000;\n        return this.sessionRepository.delete({\n            createdAt: LessThan(new Date(Date.now() - ttl)),\n        });\n    }\n\n    /**\n     * Deletes a session by its ID and tenant ID.\n     * @param id\n     * @param sub\n     * @returns\n     */\n    delete(id: string, sub: string): Promise {\n        return this.sessionRepository.delete({ id, tenantId: sub });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatusListController.html":{"url":"controllers/StatusListController.html","title":"controller - StatusListController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  StatusListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.controller.ts\n        \n            \n                Prefix\n            \n            \n                :tenantId/status-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status-list')@Header('Content-Type', 'application/statuslist+jwt')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.controller.ts:17\n                        \n                    \n\n\n            \n                \n                        Get the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from \"@nestjs/common\";\nimport { ApiExcludeController, ApiTags } from \"@nestjs/swagger\";\nimport { StatusListService } from \"./status-list.service\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiTags(\"Status management\")\n@Controller(\":tenantId/status-management\")\nexport class StatusListController {\n    constructor(private statusListService: StatusListService) {}\n\n    /**\n     * Get the status list\n     * @returns\n     */\n    @Get(\"status-list\")\n    @Header(\"Content-Type\", \"application/statuslist+jwt\")\n    getList(@Param(\"tenantId\") tenantId: string) {\n        return this.statusListService.getList(tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusListEntity.html":{"url":"entities/StatusListEntity.html","title":"entity - StatusListEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  StatusListEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-list.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing the status list for a tenant.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                bits\n                            \n                            \n                                    \n                                elements\n                            \n                            \n                                    \n                                    Optional\n                                jwt\n                            \n                            \n                                    \n                                stack\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bits\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BitsPerStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:38\n                        \n                    \n\n            \n                \n                    The number of bits used for each status in the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        elements\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:26\n                        \n                    \n\n            \n                \n                    The elements of the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        jwt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:44\n                        \n                    \n\n            \n                \n                    The JSON Web Token (JWT) for the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        stack\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:32\n                        \n                    \n\n            \n                \n                    The stack of available indexes for the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:20\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:14\n                        \n                    \n\n            \n                \n                    The ID of the tenant to which the status list belongs.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { BitsPerStatus } from \"@sd-jwt/jwt-status-list\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\n\n/**\n * Entity representing the status list for a tenant.\n */\n@Entity()\nexport class StatusListEntity {\n    /**\n     * The ID of the tenant to which the status list belongs.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The elements of the status list.\n     */\n    @Column(\"json\")\n    elements: number[];\n\n    /**\n     * The stack of available indexes for the status list.\n     */\n    @Column(\"json\")\n    stack: number[];\n\n    /**\n     * The number of bits used for each status in the status list.\n     */\n    @Column(\"int\")\n    bits: BitsPerStatus;\n\n    /**\n     * The JSON Web Token (JWT) for the status list.\n     */\n    @Column(\"varchar\", { nullable: true })\n    jwt?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatusListModule.html":{"url":"modules/StatusListModule.html","title":"module - StatusListModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    StatusListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_imports\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/status-list/status-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatusListController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { CryptoModule } from \"../../crypto/crypto.module\";\nimport { StatusListEntity } from \"./entities/status-list.entity\";\nimport { StatusMapping } from \"./entities/status-mapping.entity\";\nimport { StatusListController } from \"./status-list.controller\";\nimport { StatusListService } from \"./status-list.service\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        TypeOrmModule.forFeature([StatusMapping, StatusListEntity]),\n    ],\n    controllers: [StatusListController],\n    providers: [StatusListService],\n    exports: [StatusListService],\n})\nexport class StatusListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatusListService.html":{"url":"injectables/StatusListService.html","title":"injectable - StatusListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  StatusListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntry\n                            \n                            \n                                    Async\n                                createList\n                            \n                            \n                                getList\n                            \n                            \n                                onTenantDelete\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Private\n                                    Async\n                                setEntry\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, statusMappingRepository: Repository, statusListRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/status-list/status-list.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusMappingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEntry(session: Session, credentialConfigurationId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Get the next free entry in the status list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                        \n                    createList(entry: StatusListEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Create a new status list and stored it in the file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            StatusListEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getList\n                        \n                    \n                \n            \n            \n                \ngetList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:114\n                        \n                    \n\n\n            \n                \n                        Get the JWT for the status list of a tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The JWT for the status list.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \nonTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Delete the status list for a specific tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Initialize the status list service by checking if the status list file exists.\nIf it does not exist, create a new status list with 10,000 entries and a stack\nof 10,000 indexes. The stack is shuffled to ensure randomness in the order of\nentries. The status list is stored in the file system as a JSON file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        setEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    setEntry(id: number, value: number, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Update the value of an entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(value: StatusUpdateDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:192\n                        \n                    \n\n\n            \n                \n                        Update the status of a session and its credential configuration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport {\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from \"@sd-jwt/jwt-status-list\";\nimport { JwtPayload } from \"@sd-jwt/types\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { StatusUpdateDto } from \"./dto/status-update.dto\";\nimport { StatusListEntity } from \"./entities/status-list.entity\";\nimport { StatusMapping } from \"./entities/status-mapping.entity\";\n\n@Injectable()\nexport class StatusListService {\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n        @InjectRepository(StatusListEntity)\n        private statusListRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    async onTenantInit(tenantId: string) {\n        const size = 10000;\n        // create an empty array with the size of 1000\n        const elements = new Array(size).fill(0).map(() => 0);\n        // create a list of 1000 indexes and shuffel them\n        const stack = new Array(size)\n            .fill(0)\n            .map((_, i) => i)\n            .sort(() => 0.5 - Math.random());\n\n        const entry = await this.statusListRepository.save({\n            tenantId,\n            elements,\n            stack,\n            bits: 1,\n        });\n\n        await this.createList(entry);\n    }\n\n    /**\n     * Delete the status list for a specific tenant.\n     * @param tenantId The ID of the tenant.\n     */\n    onTenantDelete(tenantId: string) {\n        this.statusListRepository.delete({ tenantId });\n        this.statusMappingRepository.delete({ tenantId });\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(entry: StatusListEntity) {\n        const list = new StatusList(entry.elements, entry.bits);\n        const iss = `${this.configService.getOrThrow(\"PUBLIC_URL\")}`;\n\n        const sub = join(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n            entry.tenantId,\n            \"status-management\",\n            \"status-list\",\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: \"ES256\",\n            typ: \"statuslist+jwt\",\n            x5c: await this.cryptoService.getCertChain(\n                \"signing\",\n                entry.tenantId,\n            ),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(\n            header,\n            payload,\n            entry.tenantId,\n        );\n        await this.statusListRepository.update(\n            { tenantId: entry.tenantId },\n            { jwt },\n        );\n    }\n\n    /**\n     * Get the JWT for the status list of a tenant.\n     * @param tenantId The ID of the tenant.\n     * @returns The JWT for the status list.\n     */\n    getList(tenantId: string) {\n        return this.statusListRepository\n            .findOneByOrFail({ tenantId })\n            .then((file) => file.jwt);\n    }\n\n    /**\n     * Get the next free entry in the status list.\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = await this.statusListRepository\n            .findOneByOrFail({\n                tenantId: session.tenantId,\n            })\n            //if none if found, create one\n            .then(() =>\n                this.onTenantInit(session.tenantId).then(() =>\n                    this.statusListRepository.findOneByOrFail({\n                        tenantId: session.tenantId,\n                    }),\n                ),\n            );\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error(\"Stack for status list is empty!!!\");\n        }\n        const sub = join(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n            session.tenantId,\n            \"status-management\",\n            \"status-list\",\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            tenantId: session.tenantId,\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private async setEntry(id: number, value: number, tenantId: string) {\n        const entry = await this.statusListRepository.findOneByOrFail({\n            tenantId,\n        });\n        entry.elements[id] = value;\n        await this.statusListRepository.update(\n            { tenantId },\n            { elements: entry.elements },\n        );\n        return this.createList(entry);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusMapping.html":{"url":"entities/StatusMapping.html","title":"entity - StatusMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  StatusMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-mapping.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigurationId\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                list\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:13\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\n\n@Entity()\nexport class StatusMapping {\n    @Column({ type: \"varchar\", primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column({ type: \"varchar\", primary: true })\n    sessionId: string;\n\n    @Column({ type: \"varchar\", primary: true })\n    list: string;\n\n    @Column({ type: \"int\", primary: true })\n    index: number;\n\n    @Column({ type: \"varchar\", primary: true })\n    credentialConfigurationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusUpdateDto.html":{"url":"classes/StatusUpdateDto.html","title":"class - StatusUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/dto/status-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationId\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:16\n                        \n                    \n\n            \n                \n                    The ID of the credential configuration\nThis is optional, if not provided, all credentials will be revoked of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:8\n                        \n                    \n\n            \n                \n                    The session ID of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsIn(['0', '1'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:24\n                        \n                    \n\n            \n                \n                    The status of the credential\n0 = valid, 1 = revoked\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNumber, IsOptional, IsString } from \"class-validator\";\n\nexport class StatusUpdateDto {\n    /**\n     * The session ID of the user\n     */\n    @IsString()\n    sessionId: string;\n\n    /**\n     * The ID of the credential configuration\n     * This is optional, if not provided, all credentials will be revoked of the session.\n     */\n    @IsString()\n    @IsOptional()\n    credentialConfigurationId?: string;\n\n    /**\n     * The status of the credential\n     * 0 = valid, 1 = revoked\n     */\n    @IsNumber()\n    @IsIn([0, 1])\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StorageController.html":{"url":"controllers/StorageController.html","title":"controller - StorageController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  StorageController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/storage.controller.ts\n        \n            \n                Prefix\n            \n            \n                storage\n            \n\n\n            \n                Description\n            \n            \n                Storage Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                download\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        download\n                        \n                    \n                \n            \n            \n                \n                        \n                    download(key: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':key')\n                \n            \n\n                    \n                        \n                            Defined in src/storage/storage.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(user: TokenPayload, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@Secured(['undefined'])@ApiConsumes('multipart/form-data')@ApiBody({description: 'List of cats', type: FileUploadDto})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/storage/storage.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Upload files that belong to a tenant like images\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Param,\n    Post,\n    StreamableFile,\n    UploadedFile,\n    UseInterceptors,\n} from \"@nestjs/common\";\nimport { FileInterceptor } from \"@nestjs/platform-express\";\nimport { ApiBody, ApiConsumes } from \"@nestjs/swagger\";\nimport { Role } from \"../auth/roles/role.enum\";\nimport { Secured } from \"../auth/secure.decorator\";\nimport { Token, TokenPayload } from \"../auth/token.decorator\";\nimport { FileUploadDto } from \"./dto/file-upload.dto\";\nimport { FilesService } from \"./files.service\";\n\n/**\n * Storage Controller\n */\n@Controller(\"storage\")\nexport class StorageController {\n    /**\n     * Constructor\n     * @param filesService The files service\n     */\n    constructor(private filesService: FilesService) {}\n\n    /**\n     * Upload files that belong to a tenant like images\n     * @param user\n     * @param file\n     * @returns\n     */\n    @UseInterceptors(FileInterceptor(\"file\"))\n    @Secured([Role.Issuances])\n    @ApiConsumes(\"multipart/form-data\")\n    @ApiBody({\n        description: \"List of cats\",\n        type: FileUploadDto,\n    })\n    @Post()\n    upload(\n        @Token() user: TokenPayload,\n        @UploadedFile() file: Express.Multer.File,\n    ) {\n        return this.filesService.saveUserUpload(user.entity!.id, file, true);\n    }\n\n    @Get(\":key\")\n    download(@Param(\"key\") key: string) {\n        return this.filesService.getStream(key).then(\n            (stream) =>\n                new StreamableFile(stream.stream, {\n                    disposition: \"attachment\",\n                    type: stream.contentType,\n                    length: stream.size,\n                }),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StorageModule.html":{"url":"modules/StorageModule.html","title":"module - StorageModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    StorageModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/storage/storage.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.module.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { S3Client } from \"@aws-sdk/client-s3\";\nimport { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { LocalFileStorage } from \"./adapters/local.storage\";\nimport { S3FileStorage } from \"./adapters/s3.storage\";\nimport { FileEntity } from \"./entities/files.entity\";\nimport { FilesService } from \"./files.service\";\nimport { StorageController } from \"./storage.controller\";\nimport { FILE_STORAGE, FileStorage } from \"./storage.types\";\n\ntype Driver = \"local\" | \"s3\";\n\n@Global()\n@Module({})\nexport class StorageModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: StorageModule,\n            imports: [TypeOrmModule.forFeature([FileEntity])],\n            controllers: [StorageController],\n            providers: [\n                FilesService,\n                {\n                    provide: FILE_STORAGE,\n                    inject: [ConfigService],\n                    useFactory: (cfg: ConfigService): FileStorage => {\n                        const driver = cfg.get(\"STORAGE_DRIVER\");\n                        if (driver === \"s3\") {\n                            return new S3FileStorage(\n                                new S3Client({\n                                    region: cfg.get(\"S3_REGION\"),\n                                    endpoint: cfg.get(\"S3_ENDPOINT\"),\n                                    forcePathStyle: cfg.get(\n                                        \"S3_FORCE_PATH_STYLE\",\n                                    ),\n                                    credentials: {\n                                        accessKeyId:\n                                            cfg.get(\n                                                \"S3_ACCESS_KEY_ID\",\n                                            )!,\n                                        secretAccessKey: cfg.get(\n                                            \"S3_SECRET_ACCESS_KEY\",\n                                        )!,\n                                    },\n                                }),\n                                cfg.get(\"S3_BUCKET\")!,\n                                cfg.get(\"S3_PUBLIC_BASE_URL\"),\n                            );\n                        }\n                        // local\n                        return new LocalFileStorage(\n                            cfg.getOrThrow(\"LOCAL_STORAGE_DIR\"),\n                        );\n                    },\n                },\n            ],\n            exports: [FilesService],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TenantController.html":{"url":"controllers/TenantController.html","title":"controller - TenantController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  TenantController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant/tenant.controller.ts\n        \n            \n                Prefix\n            \n            \n                tenant\n            \n\n\n            \n                Description\n            \n            \n                Tenant management controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteTenant\n                            \n                            \n                                    \n                                getTenant\n                            \n                            \n                                    \n                                getTenants\n                            \n                            \n                                    \n                                initTenant\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTenant(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Deletes a tenant by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTenant(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.controller.ts:40\n                        \n                    \n\n\n            \n                \n                        Get a tenant by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The tenant\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getTenants\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTenants()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.controller.ts:20\n                        \n                    \n\n\n            \n                \n                        Get all tenants\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        initTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    initTenant(data: CreateTenantDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Initialize a tenant\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateTenantDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post } from \"@nestjs/common\";\nimport { Role } from \"../roles/role.enum\";\nimport { Secured } from \"../secure.decorator\";\nimport { CreateTenantDto } from \"./dto/create-tenant.dto\";\nimport { TenantService } from \"./tenant.service\";\n\n/**\n * Tenant management controller\n */\n@Secured([Role.Tenants])\n@Controller(\"tenant\")\nexport class TenantController {\n    constructor(private readonly tenantService: TenantService) {}\n\n    /**\n     * Get all tenants\n     * @returns\n     */\n    @Get()\n    getTenants() {\n        return this.tenantService.getAll();\n    }\n\n    /**\n     * Initialize a tenant\n     * @param data\n     * @returns\n     */\n    @Post()\n    initTenant(@Body() data: CreateTenantDto) {\n        return this.tenantService.createTenant(data);\n    }\n\n    /**\n     * Get a tenant by ID\n     * @param id The ID of the tenant\n     * @returns The tenant\n     */\n    @Get(\":id\")\n    getTenant(@Param(\"id\") id: string) {\n        return this.tenantService.getTenant(id);\n    }\n\n    /**\n     * Deletes a tenant by ID\n     * @param id The ID of the tenant to delete\n     */\n    @Delete(\":id\")\n    deleteTenant(@Param(\"id\") id: string) {\n        return this.tenantService.deleteTenant(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TenantEntity.html":{"url":"entities/TenantEntity.html","title":"entity - TenantEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  TenantEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant/entitites/tenant.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a tenant in the system.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                clients\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClientEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, client => client.tenant)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/tenant/entitites/tenant.entity.ts:47\n                        \n                    \n\n            \n                \n                    The clients associated with the tenant.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/tenant/entitites/tenant.entity.ts:32\n                        \n                    \n\n            \n                \n                    The description of the tenant.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/tenant/entitites/tenant.entity.ts:17\n                        \n                    \n\n            \n                \n                    The unique identifier for the tenant.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column({default: 'EUDIPLO'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/tenant/entitites/tenant.entity.ts:24\n                        \n                    \n\n            \n                \n                    The name of the tenant.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/tenant/entitites/tenant.entity.ts:38\n                        \n                    \n\n            \n                \n                    The current status of the tenant.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\nimport { Column, Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { ClientEntity } from \"../../client/entities/client.entity\";\n\nexport type TenantStatus = \"active\";\n\n/**\n * Represents a tenant in the system.\n */\n@Entity()\nexport class TenantEntity {\n    /**\n     * The unique identifier for the tenant.\n     */\n    @IsString()\n    @PrimaryColumn()\n    id: string;\n\n    /**\n     * The name of the tenant.\n     */\n    @IsString()\n    @Column({ default: \"EUDIPLO\" })\n    name: string;\n\n    /**\n     * The description of the tenant.\n     */\n    @IsString()\n    @IsOptional()\n    @Column({ nullable: true })\n    description?: string;\n\n    /**\n     * The current status of the tenant.\n     */\n    @Column(\"varchar\", { nullable: true })\n    status: TenantStatus;\n\n    /**\n     * The clients associated with the tenant.\n     */\n    @OneToMany(\n        () => ClientEntity,\n        (client) => client.tenant,\n    )\n    clients: ClientEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TenantModule.html":{"url":"modules/TenantModule.html","title":"module - TenantModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    TenantModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TenantModule\n\n\n\ncluster_TenantModule_imports\n\n\n\ncluster_TenantModule_providers\n\n\n\ncluster_TenantModule_exports\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nTenantModule\n\nTenantModule\n\nTenantModule -->\n\nClientModule->TenantModule\n\n\n\nTenantModule -->\n\nClientModule->TenantModule\n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nTenantModule -->\n\nCryptoModule->TenantModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nTenantModule -->\n\nIssuerModule->TenantModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nTenantModule -->\n\nRegistrarModule->TenantModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nTenantModule -->\n\nSessionModule->TenantModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nTenantModule -->\n\nStatusListModule->TenantModule\n\n\n\nTenantModule -->\n\nTenantModule->TenantModule\n\n\n\n\n\nTenantService \n\nTenantService \n\nTenantService  -->\n\nTenantModule->TenantService \n\n\n\n\n\nTenantService\n\nTenantService\n\nTenantModule -->\n\nTenantService->TenantModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/tenant/tenant.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TenantService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TenantController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            ClientModule\n                        \n                        \n                            CryptoModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                        \n                            TenantModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TenantService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { makeGaugeProvider } from \"@willsoto/nestjs-prometheus\";\nimport { CryptoModule } from \"../../crypto/crypto.module\";\nimport { IssuerModule } from \"../../issuer/issuer.module\";\nimport { StatusListModule } from \"../../issuer/status-list/status-list.module\";\nimport { RegistrarModule } from \"../../registrar/registrar.module\";\nimport { SessionModule } from \"../../session/session.module\";\nimport { ClientModule } from \"../client/client.module\";\nimport { TenantEntity } from \"./entitites/tenant.entity\";\nimport { TenantController } from \"./tenant.controller\";\nimport { TenantService } from \"./tenant.service\";\n\n@Module({\n    imports: [\n        TypeOrmModule.forFeature([TenantEntity]),\n        ClientModule,\n        CryptoModule,\n        StatusListModule,\n        RegistrarModule,\n        SessionModule,\n        ClientModule,\n        TenantModule,\n        IssuerModule,\n    ],\n    providers: [\n        TenantService,\n        makeGaugeProvider({\n            name: \"tenant_total\",\n            help: \"Total number of tenants\",\n        }),\n    ],\n    controllers: [TenantController],\n    exports: [TenantService],\n})\nexport class TenantModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TenantService.html":{"url":"injectables/TenantService.html","title":"injectable - TenantService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  TenantService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant/tenant.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTenant\n                            \n                            \n                                    Async\n                                deleteTenant\n                            \n                            \n                                getAll\n                            \n                            \n                                getTenant\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                setUpTenant\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clients: ClientsProvider, configService: ConfigService, cryptoService: CryptoService, encryptionService: EncryptionService, statusListService: StatusListService, registrarService: RegistrarService, oid4vciService: Oid4vciService, tenantRepository: Repository, tenantTotal: Gauge, filesService: FilesService, logger: PinoLogger)\n                    \n                \n                        \n                            \n                                Defined in src/auth/tenant/tenant.service.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clients\n                                                  \n                                                        \n                                                                        ClientsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vciService\n                                                  \n                                                        \n                                                                        Oid4vciService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantTotal\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTenant(data: CreateTenantDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:123\n                        \n                    \n\n\n            \n                \n                        Create a new tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateTenantDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTenant(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:169\n                        \n                    \n\n\n            \n                \n                        Deletes a tenant by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:114\n                        \n                    \n\n\n            \n                \n                        Get all tenants\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                A list of all tenants\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTenant\n                        \n                    \n                \n            \n            \n                \ngetTenant(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:142\n                        \n                    \n\n\n            \n                \n                        Get a tenant by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant to retrieve\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The tenant entity\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setUpTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUpTenant(tenant: TenantEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:153\n                        \n                    \n\n\n            \n                \n                        Sends an event to set up a tenant, allowing all other services to listen and react accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            TenantEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Inject,\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { Gauge } from \"prom-client\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { EncryptionService } from \"../../crypto/encryption/encryption.service\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { StatusListService } from \"../../issuer/status-list/status-list.service\";\nimport { RegistrarService } from \"../../registrar/registrar.service\";\nimport { FilesService } from \"../../storage/files.service\";\nimport { CLIENTS_PROVIDER, ClientsProvider } from \"../client/client.provider\";\nimport { Role } from \"../roles/role.enum\";\nimport { CreateTenantDto } from \"./dto/create-tenant.dto\";\nimport { TenantEntity } from \"./entitites/tenant.entity\";\n\n// Tenant interface for service integration\nexport interface Tenants {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class TenantService implements OnApplicationBootstrap, OnModuleInit {\n    constructor(\n        @Inject(CLIENTS_PROVIDER) private clients: ClientsProvider,\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statusListService: StatusListService,\n        private registrarService: RegistrarService,\n        private oid4vciService: Oid4vciService,\n        @InjectRepository(TenantEntity)\n        private tenantRepository: Repository,\n        @InjectMetric(\"tenant_total\")\n        private tenantTotal: Gauge,\n        private filesService: FilesService,\n        private logger: PinoLogger,\n    ) {}\n\n    async onModuleInit() {\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n            if (this.configService.get(\"CONFIG_IMPORT\")) {\n                const tenantFolders = readdirSync(configPath, {\n                    withFileTypes: true,\n                }).filter((tenant) => tenant.isDirectory());\n                for (const tenant of tenantFolders) {\n                    const setUp = await this.tenantRepository.findOneBy({\n                        id: tenant.name,\n                        status: \"active\",\n                    });\n                    if (!setUp) {\n                        const file = `${configPath}/${tenant.name}/info.json`;\n                        //TODO: validate file\n                        const configFile = readFileSync(file, \"utf-8\");\n                        const payload = JSON.parse(configFile);\n                        payload.id = tenant.name;\n\n                        // Validate the payload against CreateTenantDto\n                        const tenantDto = plainToClass(\n                            CreateTenantDto,\n                            payload,\n                        );\n                        const validationErrors = await validate(tenantDto, {\n                            whitelist: true,\n                            forbidUnknownValues: false, // avoid false positives on plain objects\n                            forbidNonWhitelisted: false,\n                            stopAtFirstError: false,\n                        });\n                        if (validationErrors.length > 0) {\n                            this.logger.error(\n                                {\n                                    event: \"ValidationError\",\n                                    file,\n                                    tenant: tenant.name,\n                                    errors: validationErrors.map((error) => ({\n                                        property: error.property,\n                                        constraints: error.constraints,\n                                        value: error.value,\n                                    })),\n                                },\n                                `Validation failed for tenant config ${file} in tenant ${tenant.name}: ${JSON.stringify(validationErrors, null, 2)}`,\n                            );\n                        } else {\n                            await this.createTenant(tenantDto);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    async onApplicationBootstrap() {\n        // Initialize the tenant metrics\n        const count = await this.tenantRepository.count();\n        this.tenantTotal.set({}, count);\n    }\n\n    /**\n     * Get all tenants\n     * @returns A list of all tenants\n     */\n    getAll() {\n        return this.tenantRepository.find();\n    }\n\n    /**\n     * Create a new tenant.\n     * @param data\n     * @returns\n     */\n    async createTenant(data: CreateTenantDto) {\n        const tenant = await this.tenantRepository.save(data);\n        await this.setUpTenant(tenant);\n        // only add the tenant when the auth user is not assigned to this tenant.\n        const authTenant = this.configService.get(\"AUTH_CLIENT_TENANT\");\n        if (authTenant !== tenant.id) {\n            await this.clients.addClient(tenant.id, {\n                clientId: \"admin\",\n                description: \"auto generated admin client\",\n                roles: [Role.Clients, ...(data.roles || [])],\n            });\n        }\n    }\n\n    /**\n     * Get a tenant by ID\n     * @param id The ID of the tenant to retrieve\n     * @returns The tenant entity\n     */\n    getTenant(id: string): Promise {\n        return this.tenantRepository.findOneOrFail({\n            where: { id },\n            relations: [\"clients\"],\n        });\n    }\n\n    /**\n     * Sends an event to set up a tenant, allowing all other services to listen and react accordingly.\n     * @param tenant\n     */\n    async setUpTenant(tenant: TenantEntity) {\n        await this.cryptoService.onTenantInit(tenant);\n        await this.encryptionService.onTenantInit(tenant.id);\n        await this.statusListService.onTenantInit(tenant.id);\n        await this.registrarService.onTenantInit(tenant);\n        await this.oid4vciService.onTenantInit(tenant.id);\n        await this.tenantRepository.update(\n            { id: tenant.id },\n            { status: \"active\" },\n        );\n    }\n\n    /**\n     * Deletes a tenant by ID\n     * @param tenantId The ID of the tenant to delete\n     */\n    async deleteTenant(tenantId: string) {\n        //delete all files associated with the tenant\n        await this.filesService.deleteByTenant(tenantId);\n        //because of cascading, all related entities will be deleted.\n        await this.tenantRepository.delete({ id: tenantId });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tenants.html":{"url":"interfaces/Tenants.html","title":"interface - Tenants","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Tenants\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant/tenant.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    Inject,\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { Gauge } from \"prom-client\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { EncryptionService } from \"../../crypto/encryption/encryption.service\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { StatusListService } from \"../../issuer/status-list/status-list.service\";\nimport { RegistrarService } from \"../../registrar/registrar.service\";\nimport { FilesService } from \"../../storage/files.service\";\nimport { CLIENTS_PROVIDER, ClientsProvider } from \"../client/client.provider\";\nimport { Role } from \"../roles/role.enum\";\nimport { CreateTenantDto } from \"./dto/create-tenant.dto\";\nimport { TenantEntity } from \"./entitites/tenant.entity\";\n\n// Tenant interface for service integration\nexport interface Tenants {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class TenantService implements OnApplicationBootstrap, OnModuleInit {\n    constructor(\n        @Inject(CLIENTS_PROVIDER) private clients: ClientsProvider,\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statusListService: StatusListService,\n        private registrarService: RegistrarService,\n        private oid4vciService: Oid4vciService,\n        @InjectRepository(TenantEntity)\n        private tenantRepository: Repository,\n        @InjectMetric(\"tenant_total\")\n        private tenantTotal: Gauge,\n        private filesService: FilesService,\n        private logger: PinoLogger,\n    ) {}\n\n    async onModuleInit() {\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n            if (this.configService.get(\"CONFIG_IMPORT\")) {\n                const tenantFolders = readdirSync(configPath, {\n                    withFileTypes: true,\n                }).filter((tenant) => tenant.isDirectory());\n                for (const tenant of tenantFolders) {\n                    const setUp = await this.tenantRepository.findOneBy({\n                        id: tenant.name,\n                        status: \"active\",\n                    });\n                    if (!setUp) {\n                        const file = `${configPath}/${tenant.name}/info.json`;\n                        //TODO: validate file\n                        const configFile = readFileSync(file, \"utf-8\");\n                        const payload = JSON.parse(configFile);\n                        payload.id = tenant.name;\n\n                        // Validate the payload against CreateTenantDto\n                        const tenantDto = plainToClass(\n                            CreateTenantDto,\n                            payload,\n                        );\n                        const validationErrors = await validate(tenantDto, {\n                            whitelist: true,\n                            forbidUnknownValues: false, // avoid false positives on plain objects\n                            forbidNonWhitelisted: false,\n                            stopAtFirstError: false,\n                        });\n                        if (validationErrors.length > 0) {\n                            this.logger.error(\n                                {\n                                    event: \"ValidationError\",\n                                    file,\n                                    tenant: tenant.name,\n                                    errors: validationErrors.map((error) => ({\n                                        property: error.property,\n                                        constraints: error.constraints,\n                                        value: error.value,\n                                    })),\n                                },\n                                `Validation failed for tenant config ${file} in tenant ${tenant.name}: ${JSON.stringify(validationErrors, null, 2)}`,\n                            );\n                        } else {\n                            await this.createTenant(tenantDto);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    async onApplicationBootstrap() {\n        // Initialize the tenant metrics\n        const count = await this.tenantRepository.count();\n        this.tenantTotal.set({}, count);\n    }\n\n    /**\n     * Get all tenants\n     * @returns A list of all tenants\n     */\n    getAll() {\n        return this.tenantRepository.find();\n    }\n\n    /**\n     * Create a new tenant.\n     * @param data\n     * @returns\n     */\n    async createTenant(data: CreateTenantDto) {\n        const tenant = await this.tenantRepository.save(data);\n        await this.setUpTenant(tenant);\n        // only add the tenant when the auth user is not assigned to this tenant.\n        const authTenant = this.configService.get(\"AUTH_CLIENT_TENANT\");\n        if (authTenant !== tenant.id) {\n            await this.clients.addClient(tenant.id, {\n                clientId: \"admin\",\n                description: \"auto generated admin client\",\n                roles: [Role.Clients, ...(data.roles || [])],\n            });\n        }\n    }\n\n    /**\n     * Get a tenant by ID\n     * @param id The ID of the tenant to retrieve\n     * @returns The tenant entity\n     */\n    getTenant(id: string): Promise {\n        return this.tenantRepository.findOneOrFail({\n            where: { id },\n            relations: [\"clients\"],\n        });\n    }\n\n    /**\n     * Sends an event to set up a tenant, allowing all other services to listen and react accordingly.\n     * @param tenant\n     */\n    async setUpTenant(tenant: TenantEntity) {\n        await this.cryptoService.onTenantInit(tenant);\n        await this.encryptionService.onTenantInit(tenant.id);\n        await this.statusListService.onTenantInit(tenant.id);\n        await this.registrarService.onTenantInit(tenant);\n        await this.oid4vciService.onTenantInit(tenant.id);\n        await this.tenantRepository.update(\n            { id: tenant.id },\n            { status: \"active\" },\n        );\n    }\n\n    /**\n     * Deletes a tenant by ID\n     * @param tenantId The ID of the tenant to delete\n     */\n    async deleteTenant(tenantId: string) {\n        //delete all files associated with the tenant\n        await this.filesService.deleteByTenant(tenantId);\n        //because of cascading, all related entities will be deleted.\n        await this.tenantRepository.delete({ id: tenantId });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Values of the user token\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            entity\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entity:         TenantEntity\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TenantEntity\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Tenant entity\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:         Role[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Role[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Role for the user\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from \"@nestjs/common\";\nimport { Role } from \"./roles/role.enum\";\nimport { TenantEntity } from \"./tenant/entitites/tenant.entity\";\n\n/**\n * Token decorator\n */\nexport const Token = createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n);\n\n/**\n * Values of the user token\n */\nexport interface TokenPayload {\n    /**\n     * Tenant entity\n     */\n    entity?: TenantEntity;\n\n    /**\n     * Role for the user\n     */\n    roles: Role[];\n}\n\nexport interface InternalTokenPayload extends TokenPayload {\n    /**\n     * Tenant ID\n     */\n    tenant_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponse.html":{"url":"classes/TokenResponse.html","title":"class - TokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                expires_in\n                            \n                            \n                                    Optional\n                                refresh_token\n                            \n                            \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenResponse {\n    access_token: string;\n    refresh_token?: string;\n    token_type: \"Bearer\";\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrustedAuthorityQuery.html":{"url":"classes/TrustedAuthorityQuery.html","title":"class - TrustedAuthorityQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrustedAuthorityQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                type\n                            \n                            \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['aki', 'etsi_tl', 'openid_federation'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\nexport class Claim {\n    @IsArray()\n    path: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => Claim)\n    claims?: Claim[];\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateClientDto.html":{"url":"classes/UpdateClientDto.html","title":"class - UpdateClientDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateClientDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client/dto/update-client.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(ClientEntity, [\n    \"clientId\",\n    \"tenant\",\n    \"tenantId\",\n    \"secret\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { ClientEntity } from \"../entities/client.entity\";\n\nexport class UpdateClientDto extends OmitType(ClientEntity, [\n    \"clientId\",\n    \"tenant\",\n    \"tenantId\",\n    \"secret\",\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateKeyDto.html":{"url":"classes/UpdateKeyDto.html","title":"class - UpdateKeyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateKeyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-update.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        OmitType(KeyImportDto, [\n    \"privateKey\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { KeyImportDto } from \"./key-import.dto\";\n\nexport class UpdateKeyDto extends OmitType(KeyImportDto, [\n    \"privateKey\",\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VCT.html":{"url":"classes/VCT.html","title":"class - VCT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VCT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/vct.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                extends\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                extends#integrity\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                schema_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                schema_uri#integrity\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        extends\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        extends#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        schema_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        schema_uri#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmpty, IsOptional, IsString } from \"class-validator\";\n\nexport class VCT {\n    @ApiProperty({\n        required: false,\n    })\n    @IsEmpty()\n    vct?: string;\n    @IsOptional()\n    @IsString()\n    name?: string;\n    @IsOptional()\n    @IsString()\n    description?: string;\n    @IsOptional()\n    @IsString()\n    extends?: string;\n    @IsOptional()\n    @IsString()\n    \"extends#integrity\"?: string;\n    @IsOptional()\n    @IsString()\n    schema_uri?: string;\n    @IsOptional()\n    @IsString()\n    \"schema_uri#integrity\"?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VaultKeyService.html":{"url":"classes/VaultKeyService.html","title":"class - VaultKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VaultKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/adapters/vault-key.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            KeyService\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                headers\n                            \n                            \n                                    Private\n                                vaultUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Private\n                                getJWK\n                            \n                            \n                                getKeys\n                            \n                            \n                                getKid\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                import\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                    Async\n                                sign\n                            \n                            \n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService, cryptoService: CryptoImplementationService, certRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/adapters/vault-key.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/adapters/vault-key.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        vaultUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/adapters/vault-key.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:106\n\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair in the vault\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getJWK\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJWK(key: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/vault-key.service.ts:191\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKeys\n                        \n                    \n                \n            \n            \n                \ngetKeys(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/vault-key.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:128\n\n                        \n                    \n\n\n            \n                \n                        Get all keys and take the first one.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:157\n\n                        \n                    \n\n\n            \n                \n                        Gets the public key and converts it to a KeyLike object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/vault-key.service.ts:162\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"jwk\" | \"pem\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/vault-key.service.ts:167\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"jwk\" | \"pem\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        import\n                        \n                    \n                \n            \n            \n                \nimport(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:62\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:45\n\n                        \n                    \n\n\n            \n                \n                        Create a new transit for the tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sign\n                        \n                    \n                \n            \n            \n                \n                        \n                    sign(value: string, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/vault-key.service.ts:207\n                        \n                    \n\n\n            \n                \n                        Signs a value with a key in the vault.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signer\n                        \n                    \n                \n            \n            \n                \nsigner(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:95\n\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JwtPayload, header: JWTHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:232\n\n                        \n                    \n\n\n            \n                \n                        Creates a proof of possession jwt.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:85\n\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { JwtPayload, Signer } from \"@sd-jwt/types\";\nimport { exportJWK, importSPKI, JWK, JWTHeaderParameters } from \"jose\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { v4 } from \"uuid\";\nimport {\n    CryptoImplementationService,\n    CryptoType,\n} from \"../crypto-implementation/crypto-implementation.service\";\nimport { KeyImportDto } from \"../dto/key-import.dto\";\nimport { KeyObj } from \"../dto/key-object.dto\";\nimport { CertEntity } from \"../entities/cert.entity\";\nimport { KeyService } from \"../key.service\";\n\nexport class VaultKeyService extends KeyService {\n    // url to the vault instance\n    private vaultUrl: string;\n    // headers for the vault api\n    private headers: { headers: { \"X-Vault-Token\": string } };\n\n    constructor(\n        private httpService: HttpService,\n        configService: ConfigService,\n        private cryptoService: CryptoImplementationService,\n        certRepository: Repository,\n    ) {\n        super(configService, certRepository);\n\n        this.vaultUrl = this.configService.get(\"VAULT_URL\") as string;\n        this.headers = {\n            headers: {\n                \"X-Vault-Token\": this.configService.get(\n                    \"VAULT_TOKEN\",\n                ) as string,\n            },\n        };\n    }\n\n    /**\n     * Create a new transit for the tenant.\n     * @param tenantId\n     */\n    async init(tenantId: string) {\n        //TODO: what to do when it throws an error e.g. when the transit already exists\n        await firstValueFrom(\n            this.httpService.post(\n                `${this.vaultUrl}/v1/sys/mounts/${tenantId}`,\n                {\n                    type: \"transit\",\n                },\n                this.headers,\n            ),\n        ).catch((err) => {\n            console.error(JSON.stringify(err.response.data, null, 2));\n        });\n        return this.create(tenantId);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    import(tenantId: string, body: KeyImportDto): Promise {\n        throw new Error(\"Importing not supported by VaultKeyService\");\n    }\n\n    getKeys(tenantId: string): Promise {\n        return firstValueFrom(\n            this.httpService.get(\n                `${this.vaultUrl}/v1/${tenantId}/keys?list=true`,\n                this.headers,\n            ),\n        ).then((res) => {\n            //TODO: get all the public keys from the vault\n            return Promise.all(\n                res.data.data.keys.map(async (id: string) => {\n                    const publicKey = await this.getPublicKey(\n                        \"jwk\",\n                        tenantId,\n                        id,\n                    );\n                    const crt = await this.getCertificate(tenantId, id);\n                    return {\n                        id,\n                        publicKey,\n                        crt,\n                    } as KeyObj;\n                }),\n            );\n        });\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    signer(tenantId: string): Promise {\n        //TODO: validate if this is correct.\n        return Promise.resolve((input: string) => this.sign(input, tenantId));\n    }\n\n    /**\n     * Creates a new keypair in the vault\n     * @param createKeyDto\n     * @param user\n     * @returns\n     */\n    async create(tenantId: string) {\n        const types: Map = new Map();\n        types.set(\"ES256\", \"ecdsa-p256\");\n        const id = v4();\n        await firstValueFrom(\n            this.httpService.post(\n                `${this.vaultUrl}/v1/${tenantId}/keys/${id}`,\n                {\n                    exportable: false,\n                    type: types.get(this.cryptoService.getAlg()),\n                },\n                this.headers,\n            ),\n        );\n        return id;\n    }\n\n    /**\n     * Get all keys and take the first one.\n     * @param tenantId\n     * @returns\n     */\n    getKid(tenantId: string): Promise {\n        return firstValueFrom(\n            this.httpService.get(\n                `${this.vaultUrl}/v1/${tenantId}/keys?list=true`,\n                this.headers,\n            ),\n        ).then(\n            (res) => {\n                if (\n                    !res.data.data.keys ||\n                    (res.data.data.keys as string[]).length === 0\n                ) {\n                    throw new Error(\"No keys found\");\n                }\n                return (res.data.data.keys as string[])[0];\n            },\n            (err) => {\n                throw new Error(\n                    `Error getting keys for tenant ${tenantId}: ${err.message}`,\n                );\n            },\n        );\n    }\n\n    /**\n     * Gets the public key and converts it to a KeyLike object.\n     * @param id\n     * @returns\n     */\n    async getPublicKey(\n        type: \"pem\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    async getPublicKey(\n        type: \"jwk\",\n        tenantId: string,\n        keyId: string,\n    ): Promise;\n    async getPublicKey(\n        type: \"jwk\" | \"pem\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        if (!keyId) {\n            keyId = await this.getKid(tenantId);\n        }\n\n        return firstValueFrom(\n            this.httpService.get(\n                `${this.vaultUrl}/v1/${tenantId}/keys/${keyId}`,\n                this.headers,\n            ),\n        ).then(async (res) => {\n            return type === \"pem\"\n                ? (res.data.data.keys[\"1\"].public_key as string)\n                : await this.getJWK(\n                      res.data.data.keys[\"1\"].public_key,\n                      tenantId,\n                  );\n        });\n    }\n\n    private getJWK(key: string, tenantId: string): Promise {\n        return importSPKI(key, this.cryptoService.getAlg())\n            .then((cryptoKey) => exportJWK(cryptoKey))\n            .then(async (jwk) => {\n                jwk.kid = await this.getKid(tenantId);\n                return jwk;\n            });\n    }\n\n    /**\n     * Signs a value with a key in the vault.\n     * @param id\n     * @param user\n     * @param value\n     * @returns\n     */\n    async sign(\n        value: string,\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        if (!keyId) {\n            keyId = await this.getKid(tenantId);\n        }\n        return firstValueFrom(\n            this.httpService.post(\n                `${this.vaultUrl}/v1/${tenantId}/sign/${keyId}`,\n                {\n                    input: Buffer.from(value).toString(\"base64\"),\n                    marshaling_algorithm: \"jws\",\n                },\n                this.headers,\n            ),\n        ).then((res) => res.data.data.signature.split(\":\")[2]);\n    }\n\n    /**\n     * Creates a proof of possession jwt.\n     * @param user\n     * @param value\n     */\n    async signJWT(\n        payload: JwtPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        // Convert header and payload to Base64 to prepare for Vault\n        const encodedHeader = Buffer.from(JSON.stringify(header)).toString(\n            \"base64url\",\n        );\n        const encodedPayload = Buffer.from(JSON.stringify(payload)).toString(\n            \"base64url\",\n        );\n        const signingInput = `${encodedHeader}.${encodedPayload}`;\n\n        // Request to Vault for signing\n        try {\n            const signature = await this.sign(signingInput, tenantId, keyId);\n            return `${encodedHeader}.${encodedPayload}.${signature}`;\n        } catch (error) {\n            console.error(\"Error signing JWT with Vault:\", error);\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VerifierModule.html":{"url":"modules/VerifierModule.html","title":"module - VerifierModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    VerifierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VerifierModule\n\n\n\ncluster_VerifierModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/verifier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { RegistrarModule } from \"../registrar/registrar.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { Oid4vpModule } from \"./oid4vp/oid4vp.module\";\nimport { PresentationsModule } from \"./presentations/presentations.module\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        SessionModule,\n        HttpModule,\n        PresentationsModule,\n        Oid4vpModule,\n    ],\n})\nexport class VerifierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfig.html":{"url":"classes/WebHookAuthConfig.html","title":"class - WebHookAuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(AuthConfig)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:65\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    @IsObject()\n    auth: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfigHeader.html":{"url":"classes/WebHookAuthConfigHeader.html","title":"class - WebHookAuthConfigHeader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfigHeader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhook authentication.\n\n            \n\n\n            \n                Implements\n            \n            \n                            WebHookAuthConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApiKeyConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:51\n                        \n                    \n\n            \n                \n                    Configuration for API key authentication.\nThis is required if the type is 'apiKey'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig.API_KEY\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['undefined'])@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:44\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    @IsObject()\n    auth: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfigNone.html":{"url":"classes/WebHookAuthConfigNone.html","title":"class - WebHookAuthConfigNone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfigNone\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            WebHookAuthConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig.NONE\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['undefined'])@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:60\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    @IsObject()\n    auth: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookConfig.html":{"url":"classes/WebhookConfig.html","title":"class - WebhookConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhooks used in various services.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                auth\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebHookAuthConfigNone | WebHookAuthConfigHeader\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@ApiProperty({oneOf: undefined})@Type(undefined, {discriminator: undefined, keepDiscriminatorProperty: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:106\n                        \n                    \n\n            \n                \n                    Optional authentication configuration for the webhook.\nIf not provided, no authentication will be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:77\n                        \n                    \n\n            \n                \n                    The URL to which the webhook will send notifications.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    @IsObject()\n    auth: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookResponse.html":{"url":"classes/WebhookResponse.html","title":"class - WebhookResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Response from a webhook to receive credentials.\n\n            \n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    Record\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:12\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { Injectable } from \"@nestjs/common\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Notification, Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../logger/session-logger.service\";\nimport { SessionLogContext } from \"../logger/session-logger-context\";\n\n/**\n * Response from a webhook to receive credentials.\n */\nexport class WebhookResponse {\n    [key: string]: Record;\n}\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the optional provided credentials, return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     * @param expectResponse Whether to expect a response from the webhook\n     */\n    sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials?: any[],\n        expectResponse = true,\n    ) {\n        const headers: Record = {};\n        if (\n            session.claimsWebhook!.auth &&\n            session.claimsWebhook!.auth.type === \"apiKey\"\n        ) {\n            headers[session.claimsWebhook!.auth.config.headerName] =\n                session.claimsWebhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, \"Sending webhook\", {\n            webhookUrl: session.claimsWebhook!.url,\n            authType: session.claimsWebhook!.auth?.type || \"none\",\n        });\n\n        return firstValueFrom(\n            this.httpService.post(\n                session.claimsWebhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data && expectResponse) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n                return webhookResponse.data;\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === \"apiKey\") {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            \"Sending webhook notification\",\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || \"none\",\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook notification sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebhookService.html":{"url":"injectables/WebhookService.html","title":"injectable - WebhookService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  WebhookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling webhooks in the application.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendWebhook\n                            \n                            \n                                    Async\n                                sendWebhookNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, sessionService: SessionService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:20\n                            \n                        \n\n                \n                    \n                            Constructor for WebhookService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendWebhook\n                        \n                    \n                \n            \n            \n                \nsendWebhook(session: Session, logContext: SessionLogContext, credentials?: any[], expectResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Sends a webhook with the optional provided credentials, return the response data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                credentials\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                expectResponse\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    Whether to expect a response from the webhook\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendWebhookNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWebhookNotification(session: Session, logContext: SessionLogContext, notification: Notification)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:111\n                        \n                    \n\n\n            \n                \n                        Sends a webhook notification for a session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notification\n                                            \n                                                            Notification\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { Injectable } from \"@nestjs/common\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Notification, Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../logger/session-logger.service\";\nimport { SessionLogContext } from \"../logger/session-logger-context\";\n\n/**\n * Response from a webhook to receive credentials.\n */\nexport class WebhookResponse {\n    [key: string]: Record;\n}\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the optional provided credentials, return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     * @param expectResponse Whether to expect a response from the webhook\n     */\n    sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials?: any[],\n        expectResponse = true,\n    ) {\n        const headers: Record = {};\n        if (\n            session.claimsWebhook!.auth &&\n            session.claimsWebhook!.auth.type === \"apiKey\"\n        ) {\n            headers[session.claimsWebhook!.auth.config.headerName] =\n                session.claimsWebhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, \"Sending webhook\", {\n            webhookUrl: session.claimsWebhook!.url,\n            authType: session.claimsWebhook!.auth?.type || \"none\",\n        });\n\n        return firstValueFrom(\n            this.httpService.post(\n                session.claimsWebhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data && expectResponse) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n                return webhookResponse.data;\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === \"apiKey\") {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            \"Sending webhook notification\",\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || \"none\",\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook notification sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WellKnownController.html":{"url":"controllers/WellKnownController.html","title":"controller - WellKnownController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  WellKnownController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.controller.ts\n        \n            \n                Prefix\n            \n            \n                :session/.well-known\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI well-known endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authzMetadata\n                            \n                            \n                                    \n                                    \n                                getJwks\n                            \n                            \n                                    \n                                    \n                                    \n                                issuerMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    authzMetadata(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('oauth-authorization-server')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:57\n                        \n                    \n\n\n            \n                \n                        Authorization Server Metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJwks(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Header('Content-Type', 'application/jwk-set+json')@Get('jwks.json')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:69\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for the authorization server.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get OpenID4VCI issuer metadata', description: 'Returns the OpenID4VCI issuer metadata.'})@ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)@Get('openid-credential-issuer')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Retrieves the OpenID4VCI issuer metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header } from \"@nestjs/common\";\nimport {\n    ApiExcludeController,\n    ApiOperation,\n    ApiParam,\n    ApiProduces,\n} from \"@nestjs/swagger\";\nimport { Session } from \"../session/entities/session.entity\";\nimport { SessionEntity } from \"../session/session.decorator\";\nimport { ContentType } from \"../utils/mediaType/media-type.decorator\";\nimport { MediaType } from \"../utils/mediaType/media-type.enum\";\nimport { JwksResponseDto } from \"./dto/jwks-response.dto\";\nimport { Oauth2AuthorizationServerResponse } from \"./dto/oauth-authorization-server-response.dto\";\nimport { WellKnownService } from \"./well-known.service\";\n\n/**\n * Controller for the OpenID4VCI well-known endpoints.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiParam({\n    name: \"session\",\n    required: true,\n})\n@Controller(\":session/.well-known\")\nexport class WellKnownController {\n    /**\n     * Constructor for WellKnownController.\n     * @param wellKnownService\n     */\n    constructor(private readonly wellKnownService: WellKnownService) {}\n\n    /**\n     * Retrieves the OpenID4VCI issuer metadata for a given tenant.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    @ApiOperation({\n        summary: \"Get OpenID4VCI issuer metadata\",\n        description: \"Returns the OpenID4VCI issuer metadata.\",\n    })\n    //we can not set the accept in the apiheader via swagger.\n    @ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)\n    @Get(\"openid-credential-issuer\")\n    issuerMetadata(\n        @SessionEntity() session: Session,\n        @ContentType() contentType: MediaType,\n    ) {\n        return this.wellKnownService.getIssuerMetadata(session, contentType);\n    }\n\n    /**\n     * Authorization Server Metadata\n     * @returns\n     */\n    @Get(\"oauth-authorization-server\")\n    authzMetadata(\n        @SessionEntity() session: Session,\n    ): Promise {\n        return this.wellKnownService.getAuthzMetadata(session);\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for the authorization server.\n     * @returns\n     */\n    @Header(\"Content-Type\", \"application/jwk-set+json\")\n    @Get(\"jwks.json\")\n    getJwks(@SessionEntity() session: Session): Promise {\n        return this.wellKnownService.getJwks(session.tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WellKnownService.html":{"url":"injectables/WellKnownService.html","title":"injectable - WellKnownService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  WellKnownService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle well-known endpoints and metadata retrieval.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAuthzMetadata\n                            \n                            \n                                    Async\n                                getIssuerMetadata\n                            \n                            \n                                getJwks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(oid4vciService: Oid4vciService, cryptoService: CryptoService, authorizeService: AuthorizeService, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/well-known/well-known.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor for WellKnownService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        oid4vciService\n                                                  \n                                                        \n                                                                        Oid4vciService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authorizeService\n                                                  \n                                                        \n                                                                        AuthorizeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthzMetadata\n                        \n                    \n                \n            \n            \n                \ngetAuthzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIssuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Retrieves the issuer metadata for a given tenant for the specified content type.\nThe metadata can be returned in two formats:\n\nan unsigned JSON document using the media type application/json, or\na signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwks\n                        \n                    \n                \n            \n            \n                \ngetJwks(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { CryptoImplementationService } from \"../crypto/key/crypto-implementation/crypto-implementation.service\";\nimport { AuthorizeService } from \"../issuer/authorize/authorize.service\";\nimport { Oid4vciService } from \"../issuer/oid4vci/oid4vci.service\";\nimport { Session } from \"../session/entities/session.entity\";\nimport { MediaType } from \"../utils/mediaType/media-type.enum\";\nimport { CredentialIssuerMetadataDto } from \"./dto/credential-issuer-metadata.dto\";\nimport { JwksResponseDto } from \"./dto/jwks-response.dto\";\nimport { Oauth2AuthorizationServerResponse } from \"./dto/oauth-authorization-server-response.dto\";\n\n/**\n * Service to handle well-known endpoints and metadata retrieval.\n */\n@Injectable()\nexport class WellKnownService {\n    /**\n     * Constructor for WellKnownService.\n     * @param oid4vciService\n     * @param cryptoService\n     * @param authorizeService\n     */\n    constructor(\n        private readonly oid4vciService: Oid4vciService,\n        private readonly cryptoService: CryptoService,\n        private readonly authorizeService: AuthorizeService,\n        private readonly cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Retrieves the issuer metadata for a given tenant for the specified content type.\n     * The metadata can be returned in two formats:\n     * - an unsigned JSON document using the media type application/json, or\n     * - a signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    async getIssuerMetadata(session: Session, contentType: MediaType) {\n        const metadata = (await this.oid4vciService.issuerMetadata(session))\n            .credentialIssuer as unknown as CredentialIssuerMetadataDto;\n\n        if (contentType === MediaType.APPLICATION_JWT) {\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"access\",\n            );\n            return this.cryptoService.signJwt(\n                {\n                    typ: \"openidvci-issuer-metadata+jwt\",\n                    alg: this.cryptoImplementationService.getAlg(),\n                    x5c: await this.cryptoService.getCertChain(\n                        \"access\",\n                        session.tenantId,\n                    ),\n                },\n                {\n                    ...metadata,\n                    iss: metadata.credential_issuer,\n                    sub: metadata.credential_issuer,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    // [Review]: should we add `exp` value here?\n                    //MM: the value makes sense when we cache the issuer metadata so it must not be signed on every request. Like when it is issued every hour, its lifetime is 1 hour and the jwt is in the cache.\n                },\n                session.tenantId,\n                keyId,\n            );\n        }\n\n        return metadata;\n    }\n\n    /**\n     * Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n     * @returns\n     */\n    getAuthzMetadata(\n        session: Session,\n    ): Promise {\n        return this.authorizeService.authzMetadata(\n            session,\n        ) as Promise;\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for a given tenant.\n     * @returns\n     */\n    getJwks(tenantId: string): Promise {\n        return this.cryptoService.getJwks(tenantId).then((key) => ({\n            keys: [key],\n        }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app/dto/oidc-discovery.dto.ts\n            \n            interface\n            OidcDiscoveryDto\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                        src/auth/auth-validation.schema.ts\n            \n            variable\n            AUTH_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth-validation.schema.ts\n            \n            variable\n            DEFAULT_AUTH_CLIENT_ID\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth-validation.schema.ts\n            \n            variable\n            DEFAULT_AUTH_CLIENT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth-validation.schema.ts\n            \n            variable\n            DEFAULT_JWT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/auth/auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/auth/client/adapters/internal-clients.service.ts\n            \n            injectable\n            InternalClientsProvider\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                        src/auth/client/adapters/keycloak-clients.service.ts\n            \n            injectable\n            KeycloakClientsProvider\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                        src/auth/client/client.controller.ts\n            \n            controller\n            ClientController\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                        src/auth/client/client.provider.ts\n            \n            interface\n            ClientsProvider\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/auth/client/client.provider.ts\n            \n            variable\n            CLIENTS_PROVIDER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/client/dto/client-secret-response.dto.ts\n            \n            class\n            ClientSecretResponseDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/client/dto/create-client.dto.ts\n            \n            class\n            CreateClientDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/client/dto/update-client.dto.ts\n            \n            class\n            UpdateClientDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/client/entities/client.entity.ts\n            \n            entity\n            ClientEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/dto/client-credentials.dto.ts\n            \n            class\n            ClientCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/dto/oidc-discovery.dto.ts\n            \n            interface\n            OidcDiscoveryDto\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                        src/auth/dto/role.dto.ts\n            \n            class\n            RoleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/dto/token-response.dto.ts\n            \n            class\n            TokenResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/auth/jwt.service.ts\n            \n            injectable\n            JwtService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                        src/auth/jwt.service.ts\n            \n            interface\n            GenerateTokenOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/roles/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/roles/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/secure.decorator.ts\n            \n            function\n            Secured\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/tenant/dto/create-tenant.dto.ts\n            \n            class\n            CreateTenantDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/tenant/entitites/tenant.entity.ts\n            \n            entity\n            TenantEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/tenant/entitites/tenant.entity.ts\n            \n            type alias\n            TenantStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/tenant/tenant.controller.ts\n            \n            controller\n            TenantController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/auth/tenant/tenant.service.ts\n            \n            injectable\n            TenantService\n            \n                55 %\n                (5/9)\n            \n        \n        \n            \n                \n                        src/auth/tenant/tenant.service.ts\n            \n            interface\n            Tenants\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/token.decorator.ts\n            \n            interface\n            InternalTokenPayload\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/auth/token.decorator.ts\n            \n            interface\n            TokenPayload\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/auth/token.decorator.ts\n            \n            variable\n            Token\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/crypto/crypto.service.ts\n            \n            injectable\n            CryptoService\n            \n                91 %\n                (21/23)\n            \n        \n        \n            \n                \n                        src/crypto/crypto.service.ts\n            \n            variable\n            ECDSA_P256\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/encryption/encryption.service.ts\n            \n            injectable\n            EncryptionService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                        src/crypto/key/adapters/db-key.service.ts\n            \n            class\n            DBKeyService\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                        src/crypto/key/adapters/vault-key.service.ts\n            \n            class\n            VaultKeyService\n            \n                47 %\n                (8/17)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n            \n            injectable\n            CryptoImplementationService\n            \n                44 %\n                (4/9)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n            \n            type alias\n            CryptoType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            interface\n            CryptoImplementation\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            KeyPair\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            Signer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            Verifier\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-validation.schema.ts\n            \n            variable\n            CRYPTO_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/ed25519.ts\n            \n            variable\n            ED25519\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            Key\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            KeyImportDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/crypto/key/dto/key-object.dto.ts\n            \n            class\n            KeyObj\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/crypto/key/dto/key-response.dto.ts\n            \n            class\n            KeyResponseDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/crypto/key/dto/key-update.dto.ts\n            \n            class\n            UpdateKeyDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/cert.entity.ts\n            \n            entity\n            CertEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/cert.entity.ts\n            \n            type alias\n            CertificateType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/keys.entity.ts\n            \n            entity\n            KeyEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/keys.entity.ts\n            \n            type alias\n            KeyUsage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/key-validation.schema.ts\n            \n            variable\n            KEY_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/key.controller.ts\n            \n            controller\n            KeyController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/crypto/key/key.service.ts\n            \n            class\n            KeyService\n            \n                66 %\n                (8/12)\n            \n        \n        \n            \n                \n                        src/database/database-validation.schema.ts\n            \n            variable\n            DB_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/issuer/authorize/authorize.controller.ts\n            \n            controller\n            AuthorizeController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/issuer/authorize/authorize.service.ts\n            \n            injectable\n            AuthorizeService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                        src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenAuthorizationCodeRequestGrant\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenPreAuthorizedCodeRequestGrant\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/issuer/authorize/dto/authorize-request.dto.ts\n            \n            class\n            AuthorizeQueries\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                        src/issuer/authorize/dto/par-response.dto.ts\n            \n            class\n            ParResponseDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                        src/issuer/credentials-metadata/credentials-metadata.controller.ts\n            \n            controller\n            CredentialsMetadataController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                        src/issuer/credentials-metadata/dto/schema-response.dto.ts\n            \n            class\n            SchemaResponse\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                        src/issuer/credentials-metadata/dto/vct.dto.ts\n            \n            class\n            VCT\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/credential-config/credential-config.service.ts\n            \n            injectable\n            CredentialConfigService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/credentials.controller.ts\n            \n            controller\n            CredentialsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/credentials.service.ts\n            \n            injectable\n            CredentialsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/dto/credential-config-create.dto.ts\n            \n            class\n            CredentialConfigCreate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/entities/credential.entity.ts\n            \n            entity\n            CredentialConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            CredentialConfig\n            \n                11 %\n                (2/17)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            Display\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            DisplayImage\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            IssuerMetadataCredentialConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            AllowListPolicy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            AttestationBasedPolicy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            EmbeddedDisclosurePolicy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            NoneTrustPolicy\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            PolicyCredential\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            RootOfTrustPolicy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/entities/policies.dto.ts\n            \n            type alias\n            PolicyType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/issuer/display/display.controller.ts\n            \n            controller\n            DisplayController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/issuer/display/display.service.ts\n            \n            injectable\n            DisplayService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                        src/issuer/display/dto/display-create.dto.ts\n            \n            class\n            DisplayCreateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/issuer/display/entities/display.entity.ts\n            \n            entity\n            DisplayEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/issuer/display/entities/display.entity.ts\n            \n            class\n            DisplayInfo\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/issuer/display/entities/display.entity.ts\n            \n            class\n            DisplayLogo\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationMethodAuth\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationMethodNone\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationMethodPresentation\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationUrlConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            PresentationDuringIssuanceConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            interface\n            AuthenticationMethodInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            CredentialConfigMapping\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            IssuanceDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuance/entities/issuance-config.entity.ts\n            \n            entity\n            IssuanceConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/issuer/issuance/entities/issuance-config.entity.ts\n            \n            class\n            IssuanceConfig\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                        src/issuer/issuance/issuance.controller.ts\n            \n            controller\n            IssuanceController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                        src/issuer/issuance/issuance.service.ts\n            \n            injectable\n            IssuanceService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                        src/issuer/issuer-management/issuer-management.controller.ts\n            \n            controller\n            IssuerManagementController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuer-validation.schema.ts\n            \n            variable\n            ISSUER_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/dto/notification-request.dto.ts\n            \n            class\n            NotificationRequestDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferRequestDto\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/oid4vci.controller.ts\n            \n            controller\n            Oid4vciController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/oid4vci.service.ts\n            \n            injectable\n            Oid4vciService\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/util.ts\n            \n            function\n            getHeadersFromRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/issuer/status-list/dto/status-update.dto.ts\n            \n            class\n            StatusUpdateDto\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                        src/issuer/status-list/entities/status-list.entity.ts\n            \n            entity\n            StatusListEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/issuer/status-list/entities/status-mapping.entity.ts\n            \n            entity\n            StatusMapping\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/issuer/status-list/status-list.controller.ts\n            \n            controller\n            StatusListController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/issuer/status-list/status-list.service.ts\n            \n            injectable\n            StatusListService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/registrar/dto/access-certificate-response.ts\n            \n            interface\n            AccessCertificateResponse\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/registrar/entities/registrar.entity.ts\n            \n            entity\n            RegistrarEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/registrar/registrar-validation.schema.ts\n            \n            variable\n            REGISTRAR_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/registrar/registrar.service.ts\n            \n            injectable\n            RegistrarService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                        src/session/entities/session.entity.ts\n            \n            entity\n            Session\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/session/entities/session.entity.ts\n            \n            type alias\n            Notification\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/session/session-validation.schema.ts\n            \n            variable\n            SESSION_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/session/session.controller.ts\n            \n            controller\n            SessionController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/session/session.decorator.ts\n            \n            function\n            SessionEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/session/session.pipe.ts\n            \n            injectable\n            SessionPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/session/session.service.ts\n            \n            injectable\n            SessionService\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                        src/storage/adapters/local.storage.ts\n            \n            class\n            LocalFileStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/storage/adapters/s3.storage.ts\n            \n            class\n            S3FileStorage\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/storage/dto/file-upload.dto.ts\n            \n            class\n            FileUploadDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/storage/entities/files.entity.ts\n            \n            entity\n            FileEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/files.service.ts\n            \n            injectable\n            FilesService\n            \n                70 %\n                (7/10)\n            \n        \n        \n            \n                \n                        src/storage/storage-validation.schema.ts\n            \n            variable\n            STORAGE_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.controller.ts\n            \n            controller\n            StorageController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                        src/storage/storage.module.ts\n            \n            type alias\n            Driver\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            interface\n            FileStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            variable\n            FILE_STORAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            type alias\n            PutOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            type alias\n            StoredObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/combined.schema.ts\n            \n            variable\n            VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/config-validation.schema.ts\n            \n            variable\n            CONFIG_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            extractConditionsFromKeyDesc\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            flattenMetas\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            isEffectivelyRequired\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            summarizeFlags\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            summarizeSchemaShape\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            summarizeWhenEntry\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/validation.schema.ts\n            \n            variable\n            BASE_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/logger/log-validation.schema.ts\n            \n            variable\n            LOG_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/logger/logger-config.service.ts\n            \n            injectable\n            LoggerConfigService\n            \n                33 %\n                (5/15)\n            \n        \n        \n            \n                \n                        src/utils/logger/logger-config.service.ts\n            \n            interface\n            LoggerConfiguration\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/utils/logger/logger.factory.ts\n            \n            variable\n            createLoggerOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger-context.ts\n            \n            interface\n            SessionLogContext\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SESSION_LOGGER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SessionLogger\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.interceptor.ts\n            \n            injectable\n            SessionLoggerInterceptor\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.service.ts\n            \n            injectable\n            SessionLoggerService\n            \n                85 %\n                (12/14)\n            \n        \n        \n            \n                \n                        src/utils/mediaType/media-type.decorator.ts\n            \n            variable\n            ContentType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/webhook/webhook.dto.ts\n            \n            class\n            ApiKeyConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfigHeader\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfigNone\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebhookConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/utils/webhook/webhook.service.ts\n            \n            class\n            WebhookResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/webhook/webhook.service.ts\n            \n            injectable\n            WebhookService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/verifier/oid4vp/dto/authorization-request.dto.ts\n            \n            class\n            AuthorizationResponse\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                        src/verifier/oid4vp/dto/authorization-response.dto.ts\n            \n            class\n            AuthorizationResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n            \n            interface\n            PresentationRequestOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/verifier/oid4vp/dto/presentation-request.dto.ts\n            \n            class\n            PresentationRequest\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/verifier/oid4vp/oid4vp.controller.ts\n            \n            controller\n            Oid4vpController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/verifier/oid4vp/oid4vp.service.ts\n            \n            injectable\n            Oid4vpService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                        src/verifier/presentations/dto/auth-response.dto.ts\n            \n            interface\n            AuthResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/verifier/presentations/dto/presentation-config-create.dto.ts\n            \n            class\n            PresentationConfigCreateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/verifier/presentations/dto/vp-request.dto.ts\n            \n            class\n            RegistrationCertificateRequest\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            entity\n            PresentationConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            Claim\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            ClaimsQuery\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            CredentialQuery\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            CredentialSetQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            DCQL\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            PresentationAttachment\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            TrustedAuthorityQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/verifier/presentations/presentations.controller.ts\n            \n            controller\n            PresentationManagementController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/verifier/presentations/presentations.service.ts\n            \n            injectable\n            PresentationsService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                        src/verifier/resolver/dto/issuer-metadata.dto.ts\n            \n            interface\n            IssuerMetadata\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/verifier/resolver/resolver.service.ts\n            \n            injectable\n            ResolverService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                        src/well-known/dto/credential-issuer-metadata.dto.ts\n            \n            class\n            CredentialIssuerMetadataDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                        src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            EC_Public\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            JwksResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/well-known/dto/oauth-authorization-server-response.dto.ts\n            \n            class\n            Oauth2AuthorizationServerResponse\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                        src/well-known/well-known.controller.ts\n            \n            controller\n            WellKnownController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/well-known/well-known.service.ts\n            \n            injectable\n            WellKnownService\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-s3 : ^3.894.0\n        \n            @aws-sdk/s3-request-presigner : ^3.894.0\n        \n            @badgateway/oauth2-client : ^3.3.1\n        \n            @keycloak/keycloak-admin-client : ^26.3.4\n        \n            @nestjs/axios : ^4.0.1\n        \n            @nestjs/common : ^11.1.6\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.6\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.6\n        \n            @nestjs/schedule : ^6.0.1\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @openid4vc/oauth2 : 0.3.0-alpha-20250825150235\n        \n            @openid4vc/openid4vci : 0.3.0-alpha-20250825150235\n        \n            @openid4vc/openid4vp : 0.3.0-alpha-20250825150235\n        \n            @openid4vc/utils : 0.3.0-alpha-20250825150235\n        \n            @peculiar/x509 : ^1.14.0\n        \n            @sd-jwt/crypto-nodejs : ^0.15.0\n        \n            @sd-jwt/jwt-status-list : ^0.15.0\n        \n            @sd-jwt/sd-jwt-vc : ^0.15.1\n        \n            @sd-jwt/types : ^0.15.0\n        \n            @willsoto/nestjs-prometheus : ^6.0.2\n        \n            axios : ^1.12.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            joi : ^18.0.1\n        \n            jose : ^6.1.0\n        \n            jwks-rsa : ^3.2.0\n        \n            multer : ^2.0.2\n        \n            mysql2 : ^3.15.0\n        \n            nestjs-pino : ^4.4.1\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.16.3\n        \n            pino-http : ^10.5.0\n        \n            pino-pretty : ^13.1.1\n        \n            prom-client : ^15.1.3\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            sqlite3 : ^5.1.7\n        \n            typeorm : ^0.3.27\n        \n            uuid : ^13.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthConfig   (src/.../webhook.dto.ts)\n                        \n                        \n                            AuthenticationMethod   (src/.../authentication-config.dto.ts)\n                        \n                        \n                            MediaType   (src/.../media-type.enum.ts)\n                        \n                        \n                            ResponseType   (src/.../presentation-request.dto.ts)\n                        \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                        \n                            SessionStatus   (src/.../session.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/webhook/webhook.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthConfig\n                    \n                \n                    \n                        \n                            Enum for the type of authentication used in webhooks.\n\n                        \n                    \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : apiKey\n                            \n                        \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n            \n        \n\n    src/issuer/issuance/dto/authentication-config.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthenticationMethod\n                    \n                \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n                        \n                            \n                                 AUTH\n                            \n                        \n                        \n                            \n                                Value : auth\n                            \n                        \n                        \n                            \n                                 PRESENTATION_DURING_ISSUANCE\n                            \n                        \n                        \n                            \n                                Value : presentationDuringIssuance\n                            \n                        \n            \n        \n\n    src/utils/mediaType/media-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        MediaType\n                    \n                \n                    \n                        \n                            Represents the media types used in the application.\n\n                        \n                    \n                        \n                            \n                                 APPLICATION_JSON\n                            \n                        \n                        \n                            \n                                Value : application/json\n                            \n                        \n                        \n                            \n                                 APPLICATION_JWT\n                            \n                        \n                        \n                            \n                                Value : application/jwt\n                            \n                        \n            \n        \n\n    src/verifier/oid4vp/dto/presentation-request.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ResponseType\n                    \n                \n                    \n                        \n                            Enum for the type of response expected from the presentation request.\n\n                        \n                    \n                        \n                            \n                                 QRCode\n                            \n                        \n                        \n                            \n                                Value : qrcode\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n                        \n                            \n                                Value : uri\n                            \n                        \n                        \n                            \n                                 DC_API\n                            \n                        \n                        \n                            \n                                Value : dc-api\n                            \n                        \n            \n        \n\n    src/auth/roles/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Presentations\n                            \n                        \n                        \n                            \n                                Value : presentation:manage\n                            \n                        \n                        \n                            \n                                 PresentationOffer\n                            \n                        \n                        \n                            \n                                Value : presentation:offer\n                            \n                        \n                        \n                            \n                                 Issuances\n                            \n                        \n                        \n                            \n                                Value : issuance:manage\n                            \n                        \n                        \n                            \n                                 IssuanceOffer\n                            \n                        \n                        \n                            \n                                Value : issuance:offer\n                            \n                        \n                        \n                            \n                                 Clients\n                            \n                        \n                        \n                            \n                                Value : clients:manage\n                            \n                        \n                        \n                            \n                                 Tenants\n                            \n                        \n                        \n                            \n                                Value : tenants:manage\n                            \n                        \n            \n        \n\n    src/session/entities/session.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        SessionStatus\n                    \n                \n                        \n                            \n                                 Active\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 Fetched\n                            \n                        \n                        \n                            \n                                Value : fetched\n                            \n                        \n                        \n                            \n                                 Completed\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 Expired\n                            \n                        \n                        \n                            \n                                Value : expired\n                            \n                        \n                        \n                            \n                                 Failed\n                            \n                        \n                        \n                            \n                                Value : failed\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            extractConditionsFromKeyDesc   (src/.../helpers.ts)\n                        \n                        \n                            flattenMetas   (src/.../helpers.ts)\n                        \n                        \n                            getHeadersFromRequest   (src/.../util.ts)\n                        \n                        \n                            isEffectivelyRequired   (src/.../helpers.ts)\n                        \n                        \n                            Secured   (src/.../secure.decorator.ts)\n                        \n                        \n                            SessionEntity   (src/.../session.decorator.ts)\n                        \n                        \n                            summarizeFlags   (src/.../helpers.ts)\n                        \n                        \n                            summarizeSchemaShape   (src/.../helpers.ts)\n                        \n                        \n                            summarizeWhenEntry   (src/.../helpers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function to initialize the NestJS application.\n\n\n                \n            \n        \n    \n    src/utils/config-printer/helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        extractConditionsFromKeyDesc\n                        \n                    \n                \n            \n            \n                \nextractConditionsFromKeyDesc(keyDesc: any)\n                \n            \n\n\n\n\n            \n                \n                        Extracts the conditions from a given key description.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                keyDesc\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The key description object to extract conditions from.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                An array of strings representing the extracted conditions.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flattenMetas\n                        \n                    \n                \n            \n            \n                \nflattenMetas(desc: any)\n                \n            \n\n\n\n\n            \n                \n                        Flattens the meta information from a given description object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                desc\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The description object to extract meta information from.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record\n\n                        \n                            \n                                A record containing the flattened meta information.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEffectivelyRequired\n                        \n                    \n                \n            \n            \n                \nisEffectivelyRequired(key: string, rawEnv: Record)\n                \n            \n\n\n\n\n            \n                \n                        Tests if a config key is effectively required in the current environment.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The config key to test.\n\n                                            \n                                        \n                                        \n                                                rawEnv\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The raw environment variables.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the key is effectively required, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summarizeFlags\n                        \n                    \n                \n            \n            \n                \nsummarizeFlags(flags?: any)\n                \n            \n\n\n\n\n            \n                \n                        Summarizes the flags for a given configuration key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                flags\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The flags object to summarize.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the flags.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summarizeSchemaShape\n                        \n                    \n                \n            \n            \n                \nsummarizeSchemaShape(s?: any)\n                \n            \n\n\n\n\n            \n                \n                        Summarizes the shape of a given schema.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                s\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The schema object to summarize.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the schema shape.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summarizeWhenEntry\n                        \n                    \n                \n            \n            \n                \nsummarizeWhenEntry(w: any)\n                \n            \n\n\n\n\n            \n                \n                        Summarizes the conditions for a given \"when\" entry.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                w\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The \"when\" entry object to summarize.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the \"when\" entry.\n\n                            \n                \n            \n        \n    \n    src/issuer/oid4vci/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to extract headers from an Express request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/auth/secure.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Secured\n                        \n                    \n                \n            \n            \n                \nSecured(roles)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roles\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/session/session.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SessionEntity\n                        \n                    \n                \n            \n            \n                \nSessionEntity()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     ParameterDecorator\n\n                        \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n\n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CryptoImplementatationModule\n\n\n\ncluster_CryptoImplementatationModule_exports\n\n\n\ncluster_CryptoImplementatationModule_providers\n\n\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\ncluster_TenantModule\n\n\n\ncluster_TenantModule_exports\n\n\n\ncluster_TenantModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nTenantModule\n\nTenantModule\n\nTenantModule -->\n\nCryptoModule->TenantModule\n\n\n\n\n\nCryptoService \n\nCryptoService \n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\nTenantModule -->\n\nIssuerModule->TenantModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nCredentialConfigService \n\nCredentialConfigService \n\nCredentialConfigService  -->\n\nIssuerModule->CredentialConfigService \n\n\n\n\n\nIssuanceService \n\nIssuanceService \n\nIssuanceService  -->\n\nIssuerModule->IssuanceService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nLoggerModule->SessionModule\n\n\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nSessionLoggerInterceptor \n\nSessionLoggerInterceptor \n\nSessionLoggerInterceptor  -->\n\nLoggerModule->SessionLoggerInterceptor \n\n\n\n\n\nSessionLoggerService \n\nSessionLoggerService \n\nSessionLoggerService  -->\n\nLoggerModule->SessionLoggerService \n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\nTenantModule -->\n\nRegistrarModule->TenantModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\nTenantModule -->\n\nSessionModule->TenantModule\n\n\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nLoggerModule \n\nLoggerModule \n\nLoggerModule  -->\n\nSessionModule->LoggerModule \n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nStorageModule\n\nStorageModule\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\n\n\nClientModule\n\nClientModule\n\nAuthModule -->\n\nClientModule->AuthModule\n\n\n\nTenantModule -->\n\nClientModule->TenantModule\n\n\n\nTenantModule -->\n\nClientModule->TenantModule\n\n\n\nAuthModule -->\n\nTenantModule->AuthModule\n\n\n\nTenantModule -->\n\nTenantModule->TenantModule\n\n\n\n\n\nTenantService \n\nTenantService \n\nTenantService  -->\n\nTenantModule->TenantService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCryptoImplementationService \n\nCryptoImplementationService \n\n\n\nCryptoImplementatationModule\n\nCryptoImplementatationModule\n\nCryptoImplementationService  -->\n\nCryptoImplementatationModule->CryptoImplementationService \n\n\n\n\n\nCryptoImplementationService\n\nCryptoImplementationService\n\nCryptoImplementatationModule -->\n\nCryptoImplementationService->CryptoImplementatationModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\nTenantModule -->\n\nStatusListModule->TenantModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nDisplayService\n\nDisplayService\n\nIssuerModule -->\n\nDisplayService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\nLoggerConfigService\n\nLoggerConfigService\n\nLoggerModule -->\n\nLoggerConfigService->LoggerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nLoggerModule -->\n\nSessionLoggerInterceptor->LoggerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nLoggerModule -->\n\nSessionLoggerService->LoggerModule\n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nResolverService \n\nResolverService \n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\nTenantService\n\nTenantService\n\nTenantModule -->\n\nTenantService->TenantModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        20 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    19 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    13 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    29 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    70 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    18 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClientModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoImplementatationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssuerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeyModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetricModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        Oid4vpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PresentationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegistrarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResolverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatusListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StorageModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TenantModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VerifierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : a middleware to interact with the EUDI Wallet\n        \n            Bugs : https://github.com/openwallet-foundation-labs/eudiplo/issues\n        \n            License : Apache-2.0\n        \n            Repository : https://github.com/openwallet-foundation-labs/eudiplo.git\n        \n            Author : Mirko Mollik \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CertificateType   (src/.../cert.entity.ts)\n                        \n                        \n                            CryptoType   (src/.../crypto-implementation.service.ts)\n                        \n                        \n                            Driver   (src/.../storage.module.ts)\n                        \n                        \n                            KeyPair   (src/.../crypto-implementation.ts)\n                        \n                        \n                            KeyUsage   (src/.../keys.entity.ts)\n                        \n                        \n                            Notification   (src/.../session.entity.ts)\n                        \n                        \n                            PolicyType   (src/.../policies.dto.ts)\n                        \n                        \n                            PutOptions   (src/.../storage.types.ts)\n                        \n                        \n                            Signer   (src/.../crypto-implementation.ts)\n                        \n                        \n                            StoredObject   (src/.../storage.types.ts)\n                        \n                        \n                            TenantStatus   (src/.../tenant.entity.ts)\n                        \n                        \n                            Verifier   (src/.../crypto-implementation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/crypto/key/entities/cert.entity.ts\n    \n    \n        \n            \n                \n                    \n                    CertificateType\n                \n            \n            \n                \n                        \"access\" | \"signing\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n    \n    \n        \n            \n                \n                    \n                    CryptoType\n                \n            \n            \n                \n                        \"ES256\" | \"Ed25519\"\n\n                \n            \n        \n    \n    src/storage/storage.module.ts\n    \n    \n        \n            \n                \n                    \n                    Driver\n                \n            \n            \n                \n                        \"local\" | \"s3\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto-implementation/crypto-implementation.ts\n    \n    \n        \n            \n                \n                    \n                    KeyPair\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Signer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Verifier\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/crypto/key/entities/keys.entity.ts\n    \n    \n        \n            \n                \n                    \n                    KeyUsage\n                \n            \n            \n                \n                    Key usage types.\n\n                \n            \n            \n                \n                        \"sign\" | \"encrypt\"\n\n                \n            \n        \n    \n    src/session/entities/session.entity.ts\n    \n    \n        \n            \n                \n                    \n                    Notification\n                \n            \n            \n                \n                    Represents a session entity for managing user sessions in the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/issuer/credentials/entities/policies.dto.ts\n    \n    \n        \n            \n                \n                    \n                    PolicyType\n                \n            \n            \n                \n                        \"none\" | \"allowList\" | \"rootOfTrust\" | \"attestationBased\"\n\n                \n            \n        \n    \n    src/storage/storage.types.ts\n    \n    \n        \n            \n                \n                    \n                    PutOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoredObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/auth/tenant/entitites/tenant.entity.ts\n    \n    \n        \n            \n                \n                    \n                    TenantStatus\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_VALIDATION_SCHEMA   (src/.../auth-validation.schema.ts)\n                        \n                        \n                            BASE_VALIDATION_SCHEMA   (src/.../validation.schema.ts)\n                        \n                        \n                            CLIENTS_PROVIDER   (src/.../client.provider.ts)\n                        \n                        \n                            CONFIG_VALIDATION_SCHEMA   (src/.../config-validation.schema.ts)\n                        \n                        \n                            ContentType   (src/.../media-type.decorator.ts)\n                        \n                        \n                            createLoggerOptions   (src/.../logger.factory.ts)\n                        \n                        \n                            CRYPTO_VALIDATION_SCHEMA   (src/.../crypto-validation.schema.ts)\n                        \n                        \n                            DB_VALIDATION_SCHEMA   (src/.../database-validation.schema.ts)\n                        \n                        \n                            DEFAULT_AUTH_CLIENT_ID   (src/.../auth-validation.schema.ts)\n                        \n                        \n                            DEFAULT_AUTH_CLIENT_SECRET   (src/.../auth-validation.schema.ts)\n                        \n                        \n                            DEFAULT_JWT_SECRET   (src/.../auth-validation.schema.ts)\n                        \n                        \n                            ECDSA_P256   (src/.../crypto.service.ts)\n                        \n                        \n                            ED25519   (src/.../ed25519.ts)\n                        \n                        \n                            FILE_STORAGE   (src/.../storage.types.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            ISSUER_VALIDATION_SCHEMA   (src/.../issuer-validation.schema.ts)\n                        \n                        \n                            KEY_VALIDATION_SCHEMA   (src/.../key-validation.schema.ts)\n                        \n                        \n                            LOG_VALIDATION_SCHEMA   (src/.../log-validation.schema.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            REGISTRAR_VALIDATION_SCHEMA   (src/.../registrar-validation.schema.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            SESSION_LOGGER_KEY   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            SESSION_VALIDATION_SCHEMA   (src/.../session-validation.schema.ts)\n                        \n                        \n                            SessionLogger   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            STORAGE_VALIDATION_SCHEMA   (src/.../storage-validation.schema.ts)\n                        \n                        \n                            Token   (src/.../token.decorator.ts)\n                        \n                        \n                            VALIDATION_SCHEMA   (src/.../combined.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Joi.ObjectSchema\n\n                    \n                \n                \n                    \n                        Default value : Joi.object({\n    OIDC: Joi.string()\n        .description(\"Enable OIDC mode\")\n        .meta({ group: \"auth\", order: 10 }),\n\n    OIDC_INTERNAL_ISSUER_URL: Joi.string()\n        .uri()\n        .when(\"OIDC\", {\n            is: Joi.exist(),\n            then: Joi.string().default((config) => config.OIDC),\n            otherwise: Joi.optional(),\n        })\n        .description(\"Internal issuer URL in OIDC mode\")\n        .meta({ group: \"auth\", order: 20 }),\n\n    OIDC_CLIENT_ID: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().required(),\n        otherwise: Joi.optional(),\n    })\n        .description(\"Client ID for OIDC\")\n        .meta({ group: \"auth\", order: 25 }),\n\n    OIDC_CLIENT_SECRET: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().required(),\n        otherwise: Joi.optional(),\n    })\n        .description(\"Client secret for OIDC\")\n        .meta({ group: \"auth\", order: 26 }),\n\n    OIDC_SUB: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().default(\"tenant_id\"),\n        otherwise: Joi.optional(),\n    })\n        .description(\"Claim to use as subject\")\n        .meta({ group: \"auth\", order: 30 }),\n\n    OIDC_ALGORITHM: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().valid(\"RS256\", \"PS256\", \"ES256\").default(\"RS256\"),\n        otherwise: Joi.optional(),\n    })\n        .description(\"Expected JWT alg\")\n        .meta({ group: \"auth\", order: 40 }),\n\n    JWT_SECRET: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().optional(),\n        otherwise: Joi.string().min(32).default(DEFAULT_JWT_SECRET),\n    })\n        .description(\"Local JWT secret (when OIDC is off)\")\n        .meta({ group: \"auth\", order: 50 }),\n\n    JWT_ISSUER: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(\"eudiplo-service\"),\n    })\n        .description(\"Local JWT issuer\")\n        .meta({ group: \"auth\", order: 60 }),\n\n    JWT_EXPIRES_IN: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(\"24h\"),\n    })\n        .description(\"Local JWT expiration\")\n        .meta({ group: \"auth\", order: 70 }),\n\n    AUTH_CLIENT_SECRET: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_SECRET),\n    })\n        .description(\"Client secret (local auth)\")\n        .meta({ group: \"auth\", order: 80 }),\n\n    AUTH_CLIENT_ID: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_ID),\n    })\n        .description(\"Client ID (local auth)\")\n        .meta({ group: \"auth\", order: 90 }),\n}).unknown(true)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_AUTH_CLIENT_ID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"root\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_AUTH_CLIENT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"root\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"supersecret\"\n                    \n                \n\n\n        \n    \n\n    src/utils/config-printer/validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BASE_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    FOLDER: Joi.string()\n        .default(\"../../tmp\")\n        .description(\"Root working folder for temp files\")\n        .meta({ group: \"general\", order: 10 }),\n}).unknown(true)\n                    \n                \n\n            \n                \n                    Validation schema for base configuration\n\n                \n            \n\n        \n    \n\n    src/auth/client/client.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CLIENTS_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"CLIENTS_PROVIDER\"\n                    \n                \n\n\n        \n    \n\n    src/utils/config-printer/config-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CONFIG_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    CONFIG_IMPORT: Joi.boolean()\n        .default(false)\n        .description(\"Run one-off config import on startup\")\n        .meta({ group: \"config\", order: 10 }),\n\n    CONFIG_IMPORT_FORCE: Joi.boolean()\n        .default(false)\n        .description(\"Force overwrite on config import\")\n        .meta({ group: \"config\", order: 20 }),\n\n    CONFIG_FOLDER: Joi.string()\n        .default(\"../../assets/config\")\n        .description(\"Path to config import folder\")\n        .meta({ group: \"config\", order: 30 }),\n})\n                    \n                \n\n            \n                \n                    Validation schema for configuration\n\n                \n            \n\n        \n    \n\n    src/utils/mediaType/media-type.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ContentType\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.headers[\"accept\"] as string | undefined;\n    },\n)\n                    \n                \n\n            \n                \n                    Decorator to extract the content type from the request headers.\nThis decorator can be used to determine the media type of the request.\n\n                \n            \n\n        \n    \n\n    src/utils/logger/logger.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createLoggerOptions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (configService: ConfigService) => {\n    const enableHttpLogger = configService.get(\n        \"LOG_ENABLE_HTTP_LOGGER\",\n        false,\n    );\n\n    // Check if file logging is enabled\n    const logToFile = configService.get(\"LOG_TO_FILE\");\n    const logFilePath = configService.get(\"LOG_FILE_PATH\");\n\n    let transportConfig;\n\n    if (logToFile) {\n        // Configure both console and file logging\n        transportConfig = {\n            targets: [\n                // Console pretty logging\n                {\n                    target: \"pino-pretty\",\n                    level: configService.get(\"LOG_LEVEL\", \"info\"),\n                    options: {\n                        colorize: true,\n                        singleLine: false,\n                        translateTime: \"yyyy-mm-dd HH:MM:ss\",\n                        ignore: \"pid,hostname\",\n                    },\n                },\n                // File logging - ensure order is maintained with sync: true\n                {\n                    target: \"pino/file\",\n                    level: configService.get(\"LOG_LEVEL\", \"info\"),\n                    options: {\n                        destination: logFilePath,\n                        mkdir: true,\n                        sync: true, // Use synchronous writes to ensure message order\n                    },\n                },\n            ],\n        };\n    } else {\n        // Console logging only\n        transportConfig = {\n            target: \"pino-pretty\",\n            options: {\n                colorize: true,\n                singleLine: false,\n                translateTime: \"yyyy-mm-dd HH:MM:ss\",\n                ignore: \"pid,hostname\",\n            },\n        };\n    }\n\n    return {\n        pinoHttp: {\n            level: configService.get(\"LOG_LEVEL\", \"info\"),\n            autoLogging: enableHttpLogger,\n            transport: transportConfig,\n            formatters: {\n                log: (object) => {\n                    object.hostname = undefined;\n                    return object;\n                },\n            },\n            customProps: (req: any) => ({\n                sessionId: req.params?.session,\n            }),\n            serializers: {\n                req: (req: any) => ({\n                    method: req.method,\n                    url: req.url,\n                    headers: {\n                        \"user-agent\": req.headers[\"user-agent\"],\n                        \"content-type\": req.headers[\"content-type\"],\n                    },\n                    sessionId: req.params?.session,\n                    tenantId: req.params?.tenantId,\n                }),\n                res: (res: any) => ({\n                    statusCode: res.statusCode,\n                }),\n            },\n        },\n        exclude: [{ path: \"/session/:sessionId\", method: RequestMethod.ALL }],\n    };\n}\n                    \n                \n\n            \n                \n                    Factory function for configuring the logger module\n\n                \n            \n\n        \n    \n\n    src/crypto/key/crypto-implementation/crypto-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CRYPTO_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    CRYPTO_ALG: Joi.string()\n        .valid(\"ES256\")\n        .default(\"ES256\")\n        .description(\"The signing algorithm to use\")\n        .meta({ group: \"crypto\", order: 10 }),\n})\n                    \n                \n\n\n        \n    \n\n    src/database/database-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DB_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    DB_TYPE: Joi.string()\n        .valid(\"sqlite\", \"postgres\")\n        .default(\"sqlite\")\n        .description(\"Database type\")\n        .meta({ group: \"database\", order: 10 }),\n    DB_HOST: Joi.string()\n        .when(\"DB_TYPE\", {\n            is: \"sqlite\",\n            then: Joi.optional(),\n            otherwise: Joi.required(),\n        })\n        .description(\"Database host\")\n        .meta({ group: \"database\", order: 15 }),\n    DB_PORT: Joi.number()\n        .when(\"DB_TYPE\", {\n            is: \"sqlite\",\n            then: Joi.optional(),\n            otherwise: Joi.required(),\n        })\n        .description(\"Database port\")\n        .meta({ group: \"database\", order: 20 }),\n    DB_USERNAME: Joi.string()\n        .when(\"DB_TYPE\", {\n            is: \"sqlite\",\n            then: Joi.optional(),\n            otherwise: Joi.required(),\n        })\n        .description(\"Database username\")\n        .meta({ group: \"database\", order: 30 }),\n    DB_PASSWORD: Joi.string()\n        .when(\"DB_TYPE\", {\n            is: \"sqlite\",\n            then: Joi.optional(),\n            otherwise: Joi.required(),\n        })\n        .description(\"Database password\")\n        .meta({ group: \"database\", order: 40 }),\n    DB_DATABASE: Joi.string()\n        .when(\"DB_TYPE\", {\n            is: \"sqlite\",\n            then: Joi.optional(),\n            otherwise: Joi.required(),\n        })\n        .description(\"Database name\")\n        .meta({ group: \"database\", order: 50 }),\n})\n                    \n                \n\n\n        \n    \n\n    src/crypto/crypto.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ECDSA_P256\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    name: \"ECDSA\",\n    namedCurve: \"P-256\",\n    hash: \"SHA-256\" as const,\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/crypto-implementation/ed25519.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ED25519\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                \n                    \n                        Default value : {\n    alg: \"EdDSA\",\n    async generateKeyPair() {\n        const keyPair = await crypto.webcrypto.subtle.generateKey(\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            true,\n            [\"sign\", \"verify\"],\n        );\n\n        const publicKey = await crypto.webcrypto.subtle.exportKey(\n            \"jwk\",\n            keyPair.publicKey,\n        );\n        const privateKey = await crypto.webcrypto.subtle.exportKey(\n            \"jwk\",\n            keyPair.privateKey,\n        );\n\n        return { publicKey, privateKey };\n    },\n    async getSigner(privateKeyJWK: object) {\n        const privateKey = await crypto.webcrypto.subtle.importKey(\n            \"jwk\",\n            privateKeyJWK,\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            false,\n            [\"sign\"],\n        );\n\n        return async (data: string) => {\n            const signature = await crypto.webcrypto.subtle.sign(\n                \"EdDSA\",\n                privateKey,\n                new TextEncoder().encode(data),\n            );\n\n            return Buffer.from(signature).toString(\"base64url\");\n        };\n    },\n    async getVerifier(publicKeyJWK: object) {\n        const publicKey = await crypto.webcrypto.subtle.importKey(\n            \"jwk\",\n            publicKeyJWK,\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            false,\n            [\"verify\"],\n        );\n\n        return async (data: string, signatureBase64url: string) => {\n            const signature = Buffer.from(signatureBase64url, \"base64url\");\n            const isVerified = await crypto.webcrypto.subtle.verify(\n                \"EdDSA\",\n                publicKey,\n                signature,\n                new TextEncoder().encode(data),\n            );\n\n            return isVerified;\n        };\n    },\n}\n                    \n                \n\n\n        \n    \n\n    src/storage/storage.types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FILE_STORAGE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol(\"FILE_STORAGE\")\n                    \n                \n\n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"isPublic\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/issuer/issuer-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ISSUER_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    PUBLIC_URL: Joi.string()\n        .default(\"http://localhost:3000\")\n        .description(\"The public URL of the issuer\")\n        .meta({ group: \"general\", order: 10 }),\n})\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/key-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        KEY_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    KM_TYPE: Joi.string()\n        .valid(\"db\", \"vault\")\n        .default(\"db\")\n        .description(\"The key management type\")\n        .meta({ group: \"key\", order: 10 }),\n\n    // Vault-related config\n    VAULT_URL: Joi.string()\n        .uri()\n        .when(\"KM_TYPE\", {\n            is: \"vault\",\n            then: Joi.required(),\n            otherwise: Joi.optional(),\n        })\n        .description(\"The URL of the Vault server\")\n        .meta({ group: \"key\", order: 20 }),\n    VAULT_TOKEN: Joi.string()\n        .when(\"KM_TYPE\", {\n            is: \"vault\",\n            then: Joi.required(),\n            otherwise: Joi.optional(),\n        })\n        .description(\"The token for accessing the Vault\")\n        .meta({ group: \"key\", order: 30 }),\n})\n                    \n                \n\n\n        \n    \n\n    src/utils/logger/log-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOG_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    LOG_LEVEL: Joi.string()\n        .valid(\"trace\", \"debug\", \"info\", \"warn\", \"error\", \"fatal\")\n        .default(process.env.NODE_ENV === \"production\" ? \"warn\" : \"debug\")\n        .description(\"Application log level\")\n        .meta({ group: \"log\", order: 10 }),\n    LOG_ENABLE_HTTP_LOGGER: Joi.boolean()\n        .default(false)\n        .description(\"Enable HTTP request logging\")\n        .meta({ group: \"log\", order: 20 }),\n    LOG_ENABLE_SESSION_LOGGER: Joi.boolean()\n        .default(false)\n        .description(\"Enable session flow logging\")\n        .meta({ group: \"log\", order: 30 }),\n    LOG_DEBUG_MODE: Joi.boolean()\n        .default(false)\n        .description(\"Enable verbose debug logs\")\n        .meta({ group: \"log\", order: 40 }),\n    LOG_FORMAT: Joi.string()\n        .valid(\"json\", \"pretty\")\n        .default(process.env.NODE_ENV === \"production\" ? \"json\" : \"pretty\")\n        .description(\"Log output format\")\n        .meta({ group: \"log\", order: 50 }),\n    LOG_TO_FILE: Joi.boolean()\n        .default(false)\n        .description(\"Enable logging to file in addition to console\")\n        .meta({ group: \"log\", order: 60 }),\n    LOG_FILE_PATH: Joi.string()\n        .default(\"./logs/session.log\")\n        .description(\"File path for log output when LOG_TO_FILE is enabled\")\n        .meta({ group: \"log\", order: 70 }),\n})\n                    \n                \n\n            \n                \n                    Validation schema for logging configuration\n\n                \n            \n\n        \n    \n\n    src/registrar/registrar-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REGISTRAR_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    REGISTRAR_URL: Joi.string()\n        .description(\"The URL of the registrar\")\n        .meta({ group: \"registrar\", order: 10 }),\n    REGISTRAR_OIDC_URL: Joi.string()\n        .when(\"REGISTRAR_URL\", {\n            is: Joi.exist(),\n            then: Joi.required(),\n        })\n        .description(\"The OIDC URL of the registrar\")\n        .meta({ group: \"registrar\", order: 20 }),\n    REGISTRAR_OIDC_CLIENT_ID: Joi.string()\n        .when(\"REGISTRAR_URL\", {\n            is: Joi.exist(),\n            then: Joi.required(),\n        })\n        .description(\"The OIDC client ID of the registrar\")\n        .meta({ group: \"registrar\", order: 30 }),\n    REGISTRAR_OIDC_CLIENT_SECRET: Joi.string()\n        .when(\"REGISTRAR_URL\", {\n            is: Joi.exist(),\n            then: Joi.required(),\n        })\n        .description(\"The OIDC client secret of the registrar\")\n        .meta({ group: \"registrar\", order: 40 }),\n})\n                    \n                \n\n            \n                \n                    Validation schema for the registrar module.\nDefines the required environment variables and their types.\n\n                \n            \n\n        \n    \n\n    src/auth/roles/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"roles\"\n                    \n                \n\n\n        \n    \n\n    src/utils/logger/session-logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_LOGGER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"session-logger\"\n                    \n                \n\n            \n                \n                    Key for session logger metadata.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SessionLogger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n    sessionIdParam: string,\n    flowType: \"OID4VCI\" | \"OID4VP\",\n) => SetMetadata(SESSION_LOGGER_KEY, { sessionIdParam, flowType })\n                    \n                \n\n            \n                \n                    Decorator to mark methods that should have session-based logging\n\n                \n            \n\n        \n    \n\n    src/session/session-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    SESSION_TIDY_UP_INTERVAL: Joi.number()\n        .default(60 * 60)\n        .description(\"Interval in seconds to run session tidy up\")\n        .meta({ group: \"session\", order: 10 }),\n    SESSION_TTL: Joi.number()\n        .default(24 * 60 * 60)\n        .description(\"Time to live for sessions in seconds\")\n        .meta({ group: \"session\", order: 20 }),\n})\n                    \n                \n\n            \n                \n                    Module for managing user sessions.\n\n                \n            \n\n        \n    \n\n    src/storage/storage-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        STORAGE_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    STORAGE_DRIVER: Joi.string()\n        .valid(\"local\", \"s3\")\n        .default(\"local\")\n        .description(\"The storage driver to use\")\n        .meta({ group: \"storage\", order: 10 }),\n    LOCAL_STORAGE_DIR: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"local\",\n            then: Joi.string().default((parent) =>\n                join(parent.FOLDER, \"uploads\"),\n            ),\n        })\n        .description(\"The directory to store files in when using local storage\")\n        .meta({ group: \"storage\", order: 20 }),\n    S3_REGION: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.required(),\n        })\n        .description(\"The AWS region for the S3 bucket\")\n        .meta({ group: \"storage\", order: 30 }),\n    S3_BUCKET: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.required(),\n        })\n        .description(\"The name of the S3 bucket\")\n        .meta({ group: \"storage\", order: 40 }),\n    S3_ACCESS_KEY_ID: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.required(),\n        })\n        .description(\"The access key ID for the S3 bucket\")\n        .meta({ group: \"storage\", order: 50 }),\n    S3_SECRET_ACCESS_KEY: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.required(),\n        })\n        .description(\"The secret access key for the S3 bucket\")\n        .meta({ group: \"storage\", order: 60 }),\n    S3_ENDPOINT: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.optional(),\n        })\n        .description(\n            \"The endpoint URL for the S3 service (for S3-compatible services)\",\n        )\n        .meta({ group: \"storage\", order: 70 }),\n    S3_FORCE_PATH_STYLE: Joi.boolean()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.boolean().default(false),\n        })\n        .description(\"Whether to force path-style URLs for S3\")\n        .meta({ group: \"storage\", order: 80 }),\n    S3_PUBLIC_BASE_URL: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.required(),\n        })\n        .description(\"The public base URL for the S3 bucket\")\n        .meta({ group: \"storage\", order: 90 }),\n})\n                    \n                \n\n\n        \n    \n\n    src/auth/token.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Token\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n)\n                    \n                \n\n            \n                \n                    Token decorator\n\n                \n            \n\n        \n    \n\n    src/utils/config-printer/combined.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : BASE_VALIDATION_SCHEMA.concat(\n    AUTH_VALIDATION_SCHEMA,\n)\n    .concat(DB_VALIDATION_SCHEMA)\n    .concat(CONFIG_VALIDATION_SCHEMA)\n    .concat(LOG_VALIDATION_SCHEMA)\n    .concat(REGISTRAR_VALIDATION_SCHEMA)\n    .concat(KEY_VALIDATION_SCHEMA)\n    .concat(CRYPTO_VALIDATION_SCHEMA)\n    .concat(ISSUER_VALIDATION_SCHEMA)\n    .concat(SESSION_VALIDATION_SCHEMA)\n    .concat(STORAGE_VALIDATION_SCHEMA)\n                    \n                \n\n            \n                \n                    Combined validation schema for the application configuration\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
