var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccessCertificateResponse.html",[0,1.253,1,3.349]],["body/interfaces/AccessCertificateResponse.html",[0,0.65,1,3.526,2,1.087,3,0.057,4,0.047,5,0.099,6,1.871,7,0.32,8,3.305,9,4.715,10,4.588,11,1.003,12,0.107,13,0.542,14,3.42,15,1.8,16,0.466,17,5.592,18,0.725,19,0.207,20,0.009,21,1.476,22,1.003,23,3.133,24,1.811,25,1.811,26,1.437,27,2.728,28,3.019,29,0.314,30,0.701,31,3.133,32,2.981,33,0.336,34,1.822,35,0.681,36,4.767,37,1.871,38,3.787,39,2.048,40,3.305,41,3.305,42,3.305,43,3.305,44,3.305,45,3.305,46,1.633,47,2.467,48,1.087,49,2.493,50,2.048,51,1.087,52,3.434,53,2.048,54,1.469,55,1.345,56,1.469,57,1.871,58,4.69,59,5.745,60,2.293,61,2.205,62,1.871,63,2.728,64,1.469,65,1.122,66,2.048,67,1.738,68,5.593,69,5.374,70,2.048,71,3.305,72,4.69,73,0.057,74,0.068,75,1.054,76,2.17,77,3.305,78,1.345,79,1.545,80,2.209,81,1.545,82,2.048,83,2.02,84,2.048,85,1.403,86,2.048,87,0.98,88,1.826,89,3.133,90,1.738,91,1.327,92,1.122,93,1.871,94,1.633,95,1.403,96,1.738,97,1.545,98,1.469,99,1.054,100,0.891,101,1.807,102,2.805,103,1.528,104,1.869,105,2.048,106,2.048,107,2.265,108,2.635,109,1.738,110,2.635,111,1.738,112,2.048,113,2.248,114,1.122,115,2.048,116,2.048,117,2.048,118,2.048,119,2.048,120,5.883,121,2.048,122,2.048,123,2.048,124,1.023,125,3.305,126,1.871,127,1.099,128,2.635,129,2.371,130,1.269,131,0.65,132,1.16,133,1.469,134,1.738,135,3.305,136,2.17,137,4.155,138,1.403,139,2.048,140,2.048,141,1.948,142,2.412,143,3.305,144,0.94,145,1.738,146,2.545,147,1.633,148,3.305,149,5.883,150,2.048,151,2.048,152,2.048,153,1.122,154,0.785,155,0.94,156,2.048,157,1.633,158,2.981,159,2.048,160,2.048,161,2.048,162,2.085,163,2.048,164,2.048,165,1.244,166,2.048,167,2.048,168,2.048,169,1.633,170,2.048,171,2.048,172,2.048,173,2.048,174,2.048,175,2.048,176,2.048,177,1.403,178,2.048,179,4.747,180,2.728,181,4.155,182,2.435,183,2.048,184,1.178,185,1.186,186,1.871,187,1.855,188,3.795,189,0.665,190,2.048,191,2.048,192,4.155,193,3.305,194,1.545,195,2.371,196,0.804,197,2.981,198,2.847,199,2.048,200,1.738,201,2.048,202,2.048,203,2.048,204,2.048,205,3.434,206,4.747,207,2.313,208,3.019,209,2.048,210,3.133,211,4.155,212,3.305,213,2.794,214,5.23,215,3.305,216,5.593,217,3.305,218,2.048,219,1.292,220,1.871,221,2.048,222,2.048,223,2.805,224,2.048,225,2.276,226,2.048,227,2.635,228,2.048,229,1.871,230,2.048,231,1.469,232,1.633,233,2.048,234,1.811,235,1.716,236,3.305,237,1.244,238,2.635,239,2.048,240,2.048,241,4.155,242,2.048,243,1.292,244,1.807,245,2.805,246,2.048,247,1.437,248,2.048,249,1.871,250,2.371,251,2.048,252,2.048,253,1.345,254,1.633,255,1.633,256,0.004,257,1.871,258,2.048,259,2.048,260,2.847,261,2.048,262,2.048,263,2.048,264,1.244,265,2.048,266,1.871,267,2.048,268,2.048,269,3.019,270,1.871,271,2.048,272,1.403,273,1.871,274,2.048,275,1.738,276,2.048,277,2.048,278,1.633,279,2.048,280,3.305,281,2.265,282,3.305,283,2.048,284,1.545,285,1.16,286,1.738,287,3.305,288,3.305,289,2.048,290,2.493,291,1.469,292,2.048,293,1.545,294,1.469,295,1.871,296,2.048,297,2.048,298,0.003]],["title/classes/ApiKeyConfig.html",[74,0.131,299,3.145]],["body/classes/ApiKeyConfig.html",[3,0.125,4,0.104,5,0.094,7,0.702,12,0.236,13,0.967,16,0.635,18,0.729,19,0.391,20,0.009,22,2.299,29,0.279,60,1.462,73,0.194,74,0.241,81,5.716,91,1.887,124,2.248,185,1.25,196,2.742,256,0.006,298,0.006,299,5.565,300,1.397,301,3.587,302,3.626,303,5.565,304,6.009,305,2.777,306,1.463,307,3.234,308,0.539,309,5.091,310,3.825,311,4.404,312,3.705,313,5.091,314,2.637,315,3.228,316,3.103,317,3.035,318,1.567,319,2.122,320,3.587,321,4.111,322,3.394,323,4.041,324,5.584,325,2.958,326,5.244,327,4.111,328,3.228,329,4.111,330,1.957,331,3.82,332,3.587,333,2.065,334,2.706,335,2.465,336,3.394,337,2.734]],["title/controllers/AppController.html",[338,1.374,339,3.349]],["body/controllers/AppController.html",[3,0.163,4,0.136,5,0.122,12,0.307,18,0.7,20,0.009,29,0.329,33,0.961,73,0.163,74,0.195,103,1.243,130,1.423,256,0.007,298,0.007,306,1.455,308,0.536,338,2.423,339,5.905,340,2.361,341,5.863,342,1.845,343,8.681,344,6.633,345,4.991,346,2.549,347,5.356,348,4.206,349,6.633,350,4.977,351,4.017,352,5.863,353,4.977,354,5.863]],["title/modules/AppModule.html",[355,1.342,356,3.349]],["body/modules/AppModule.html",[3,0.155,4,0.076,5,0.099,19,0.236,20,0.009,21,2.115,29,0.376,33,0.537,34,2.422,35,1.089,61,1.738,73,0.091,74,0.109,103,1.004,104,1.444,131,1.767,132,2.682,146,1.168,155,1.503,180,2.151,207,1.589,213,1.92,234,2.595,243,3.511,244,1.424,247,1.424,256,0.005,298,0.005,334,1.503,339,4.723,340,1.907,355,1.893,356,6.865,357,1.589,358,1.795,359,1.92,360,1.92,361,1.738,362,3.151,363,1.855,364,3.276,365,3.276,366,3.276,367,5.375,368,3.951,369,5.783,370,5.375,371,5.375,372,5.157,373,5.375,374,4.62,375,4.62,376,5.375,377,5.085,378,2.776,379,1.92,380,1.855,381,3.706,382,4.723,383,3.045,384,4.723,385,3.246,386,2.245,387,4.327,388,4.021,389,3.706,390,4.021,391,3.706,392,3.706,393,4.021,394,2.78,395,3.706,396,3.276,397,2.471,398,3.706,399,4.021,400,3.706,401,4.327,402,3.706,403,4.021,404,2.78,405,3.706,406,2.992,407,3.706,408,3.706,409,4.021,410,3.706,411,2.992,412,2.151,413,3.246,414,3.276,415,3.706,416,3.706,417,3.706,418,3.706,419,3.706,420,3.813,421,3.706,422,3.706,423,3.706,424,3.706,425,4.021,426,3.706,427,4.327,428,4.327,429,2.992,430,2.298,431,5.36,432,4.737,433,3.706,434,7.319,435,3.706,436,3.706,437,3.706,438,4.327,439,2.611,440,2.992,441,2.992,442,3.706,443,4.723,444,1.686,445,3.706,446,3.706,447,3.706,448,4.021,449,4.327,450,4.327,451,2.992,452,2.989,453,3.706,454,3.706,455,3.706,456,3.706,457,3.706,458,2.992,459,3.706,460,3.706,461,3.706,462,3.706,463,2.78,464,3.706,465,3.706,466,3.706,467,3.706,468,3.276,469,3.706,470,3.706,471,3.706,472,3.706,473,3.706,474,2.989,475,5.36,476,3.706,477,2.611,478,3.706,479,1.99,480,1.503,481,4.737,482,3.706,483,2.151,484,3.706,485,3.706,486,3.276,487,3.706,488,3.706,489,3.706,490,3.706,491,3.276,492,5.36,493,3.706,494,2.78,495,3.706]],["title/controllers/AuthController.html",[338,1.374,496,3.349]],["body/controllers/AuthController.html",[3,0.097,4,0.081,5,0.073,7,0.979,11,1.903,12,0.183,15,1.343,16,0.491,18,0.498,19,0.33,20,0.009,21,2.211,24,1.909,29,0.342,33,0.571,38,4.048,73,0.097,74,0.116,76,4.35,78,3.251,79,3.734,80,1.685,83,3,87,1.034,88,1.537,101,1.515,103,0.739,104,1.837,107,4.54,110,5.281,113,2.202,124,3.309,127,1.158,130,1.201,141,2.006,142,1.242,153,1.909,154,2.923,184,1.765,185,0.739,187,3.288,189,1.608,235,2.736,256,0.005,298,0.005,302,1.643,305,1.335,306,0.864,308,0.319,310,3.629,312,2.627,319,3.125,320,3.947,328,2.499,337,2.116,338,1.213,340,1.403,342,1.313,346,1.515,347,3.182,479,4.182,496,4.202,497,3.484,498,1.909,499,6.516,500,3.942,501,3.942,502,4.889,503,4.522,504,5.602,505,5.602,506,4.889,507,5.602,508,4.591,509,3.942,510,3.155,511,4.951,512,3.328,513,5.602,514,7.096,515,0.945,516,2.116,517,7.496,518,2.499,519,5.261,520,4.202,521,4.132,522,3.484,523,3.947,524,3.182,525,3.484,526,3.942,527,3.942,528,2.627,529,2.957,530,3.942,531,2.288,532,3.942,533,3.942,534,3.942,535,7.096,536,2.957,537,3.942,538,2.628,539,4.202,540,3.182,541,2.271,542,4.522,543,3.942,544,4.951,545,4.202,546,5.602,547,3.942,548,2.628,549,3.947,550,2.499,551,3.942,552,2.777,553,3.947,554,2.957,555,5.602,556,3.942,557,3.942,558,5.602,559,3.942,560,3.942,561,3.182,562,3.942,563,3.393,564,3.942,565,2.042,566,3.942,567,3.942,568,3.942,569,3.942,570,3.942,571,3.942,572,1.74,573,2.777,574,3.942,575,3.942,576,3.182,577,3.942,578,2.499,579,2.957,580,3.182,581,3.484]],["title/modules/AuthModule.html",[355,1.342,367,3.145]],["body/modules/AuthModule.html",[3,0.113,4,0.094,5,0.085,20,0.009,29,0.377,33,0.668,35,1.354,73,0.153,74,0.135,78,2.674,104,1.057,127,1.354,133,5.303,144,1.869,165,2.474,185,0.864,256,0.006,298,0.006,340,2.222,355,2.129,357,1.976,358,2.231,359,2.387,360,2.387,361,2.162,362,3.544,363,3.544,367,6.479,368,4.236,374,4.953,378,3.234,379,2.387,380,2.306,383,2.756,384,4.684,385,3.781,386,2.791,394,3.457,409,3.457,496,5.312,521,5.621,522,4.073,523,4.953,524,3.721,582,4.073,583,4.073,584,4.073,585,4.073,586,5.185,587,4.759,588,6.246,589,3.721,590,7.081,591,3.457,592,4.608,593,4.608,594,4.608,595,3.247,596,2.387,597,3.721,598,2.791,599,1.976,600,3.072,601,3.721,602,5.518,603,2.922,604,3.072,605,7.519,606,4.073,607,7.392,608,7.011,609,4.073,610,4.073,611,3.721,612,4.073,613,4.073,614,4.073,615,3.457,616,4.073,617,4.608,618,4.608,619,3.721,620,3.721,621,3.721]],["title/interfaces/AuthResponse.html",[0,1.253,622,3.145]],["body/interfaces/AuthResponse.html",[0,1.748,2,2.921,3,0.153,4,0.127,5,0.115,7,0.859,11,2.032,12,0.289,13,1.098,18,0.775,19,0.375,20,0.009,22,2.032,73,0.153,83,3.059,219,4.555,256,0.007,298,0.007,305,2.109,622,5.755,623,5.503,624,3.614,625,3.225,626,5.481,627,6.862,628,7.577,629,7.577,630,6.118,631,5.685,632,5.051,633,5.755,634,4.225,635,3.249,636,6.227,637,4.671]],["title/classes/AuthenticationConfigDto.html",[74,0.131,638,2.704]],["body/classes/AuthenticationConfigDto.html",[3,0.1,4,0.084,5,0.075,7,0.564,11,1.096,12,0.189,13,0.833,16,0.829,18,0.363,19,0.357,20,0.009,29,0.302,60,2.324,73,0.177,74,0.238,91,1.767,99,3.023,101,2.771,124,3.758,154,1.946,155,3.55,180,3.334,196,2.307,210,2.724,256,0.005,298,0.005,300,1.121,302,3.716,306,1.26,308,0.464,311,2.278,314,2.116,315,2.591,316,2.77,317,3.28,318,1.258,325,2.151,330,2.208,333,2.695,334,2.33,480,3.081,512,4.261,635,3.258,638,3.48,639,4.43,640,2.591,641,4.639,642,4.311,643,4.43,644,1.946,645,3.643,646,5.253,647,5.253,648,4.086,649,3.568,650,4.639,651,4.346,652,2.875,653,3.83,654,4.409,655,5.041,656,4.074,657,3.682,658,4.882,659,4.051,660,4.639,661,4.086,662,4.639,663,2.046,664,4.639,665,4.682,666,1.916,667,2.474,668,2.278,669,4.311,670,3.299,671,3.299,672,2.591,673,3.299,674,3.299,675,2.371,676,2.724,677,2.474,678,3.065,679,2.278]],["title/classes/AuthenticationConfigHelper.html",[74,0.131,680,2.976]],["body/classes/AuthenticationConfigHelper.html",[3,0.115,4,0.096,5,0.086,7,0.646,12,0.217,16,0.953,19,0.394,20,0.009,29,0.196,60,2.631,73,0.115,74,0.138,91,1.416,99,2.872,103,1.495,124,2.787,130,1.639,155,3.235,185,1.432,207,3.524,256,0.006,260,4.325,298,0.006,300,1.285,302,2.977,308,0.618,342,1.48,397,5.925,512,3.855,515,1.832,632,4.761,635,2.708,639,5.318,643,4.209,646,4.209,647,5.094,651,3.39,653,5.478,654,3.664,655,4.435,656,3.584,657,2.872,658,4.261,659,3.16,668,2.613,679,4.987,680,4.209,681,4.141,682,5.581,683,5.098,684,6.314,685,6.312,686,7.141,687,7.141,688,7.141,689,4.686,690,4.686,691,4.686,692,4.686,693,5.79,694,4.686,695,4.686,696,4.686,697,4.686,698,7.141,699,4.686,700,4.686]],["title/classes/AuthenticationUrlConfig.html",[74,0.131,646,2.976]],["body/classes/AuthenticationUrlConfig.html",[3,0.105,4,0.088,5,0.079,7,0.592,11,1.15,12,0.199,13,0.861,16,0.918,18,0.529,19,0.362,20,0.009,29,0.308,60,2.115,73,0.181,74,0.235,91,1.84,99,2.704,101,2.285,124,3.622,154,2.013,155,3.486,180,2.49,196,2.685,210,2.86,256,0.006,298,0.006,300,1.177,302,3.722,306,1.304,308,0.48,311,2.392,314,2.222,315,2.72,316,2.844,317,3.103,318,1.321,325,2.896,330,1.649,333,2.986,334,2.986,480,2.986,512,4.209,635,3.158,638,2.598,639,4.547,640,2.72,641,3.463,642,3.218,643,3.963,644,1.453,645,2.72,646,5.156,647,4.91,649,3.192,650,3.463,651,3.954,652,2.147,653,2.86,654,3.959,655,4.989,656,4.033,657,3.732,658,4.735,659,3.871,660,3.463,662,3.463,663,1.83,664,5.507,665,4.806,666,2.012,667,2.598,668,2.392,669,5.525,670,4.799,671,5.507,672,3.769,673,3.463,674,3.463,675,2.49,676,2.86,677,2.598,678,3.218,679,2.392,701,4.29,702,3.792,703,4.29]],["title/classes/AuthorizationResponse.html",[74,0.131,704,3.145]],["body/classes/AuthorizationResponse.html",[3,0.158,4,0.132,5,0.119,7,0.889,12,0.299,13,1.121,18,0.765,19,0.284,20,0.009,29,0.269,73,0.158,74,0.227,83,2.896,189,2.593,256,0.007,298,0.007,300,1.767,306,1.413,307,3.186,308,0.521,318,1.983,319,3.584,624,3.739,625,4.006,633,5.45,634,4.794,704,5.45,705,6.837,706,5.694,707,5.156]],["title/controllers/AuthorizeController.html",[338,1.374,708,3.349]],["body/controllers/AuthorizeController.html",[3,0.095,4,0.079,5,0.071,7,0.762,9,3.08,11,2.306,12,0.179,16,0.877,19,0.351,20,0.009,29,0.356,33,0.56,51,1.813,73,0.095,74,0.113,80,1.661,83,3.105,85,4.259,87,1.013,88,2.185,103,1.318,104,0.886,130,1.708,131,1.085,141,2.552,142,1.218,184,2.216,185,1.318,187,3.491,189,2.287,196,1.917,200,2.899,234,4.164,243,4.441,244,1.485,256,0.005,295,3.12,298,0.005,306,1.542,308,0.568,319,3.643,338,2.29,340,1.375,342,1.295,345,2.45,346,1.485,498,1.871,510,4.073,515,1.686,516,2.075,520,4.144,531,2.243,545,2.899,656,2.591,675,2.243,708,4.144,709,3.416,710,3.864,711,4.882,712,4.144,713,5.523,714,4.835,715,6.445,716,7.032,717,3.416,718,5.156,719,2.788,720,3.864,721,3.864,722,3.892,723,3.864,724,3.864,725,4.688,726,4.541,727,2.155,728,3.864,729,3.864,730,5.678,731,3.864,732,3.864,733,3.864,734,3.864,735,3.864,736,3.345,737,4.882,738,2.576,739,2.576,740,2.155,741,2.075,742,3.594,743,3.864,744,2.899,745,3.121,746,2.45,747,2.899,748,3.864,749,4.297,750,2.899,751,1.871,752,2.45,753,2.899,754,2.576,755,4.835,756,3.864,757,1.567,758,3.864,759,3.864,760,3.864,761,3.864,762,4.259,763,3.864,764,3.12,765,3.12,766,3.416,767,3.864,768,3.416,769,3.864,770,3.864,771,2.899,772,3.864,773,3.864,774,3.864]],["title/classes/AuthorizeQueries.html",[74,0.131,718,2.704]],["body/classes/AuthorizeQueries.html",[3,0.124,4,0.103,5,0.093,12,0.233,13,0.96,16,1.158,18,0.826,19,0.394,20,0.009,29,0.211,73,0.124,74,0.194,256,0.006,298,0.006,300,1.382,306,1.958,307,3.454,308,0.722,317,4.088,318,1.551,538,4.936,718,4.013,762,4.484,775,7.943,776,3.051,777,5.217,778,7.404,779,7.404,780,7.404,781,4.936,782,7.404,783,7.404,784,4.695,785,7.404,786,8.929,787,5.038,788,4.453,789,5.038,790,5.038,791,5.038,792,4.453,793,5.038,794,4.067,795,5.038,796,4.453,797,5.038]],["title/injectables/AuthorizeService.html",[30,0.837,742,2.489]],["body/injectables/AuthorizeService.html",[0,1.078,3,0.059,4,0.049,5,0.044,11,1.991,12,0.111,16,0.902,18,0.723,19,0.346,20,0.009,21,0.946,29,0.333,30,0.72,33,0.347,34,1.978,35,0.704,38,1.124,47,2.813,48,1.124,51,1.124,60,1.103,73,0.094,74,0.07,80,2.109,87,1.007,91,0.861,92,1.86,101,0.921,103,1.204,104,1.97,107,1.452,113,2.181,114,1.161,124,2.123,130,1.504,131,1.349,141,2.549,142,2.536,146,2.339,153,1.161,154,0.812,155,2.605,158,2.436,184,1.211,185,1.356,187,2.855,189,2.252,207,1.028,232,1.689,234,3.396,235,2.56,243,2.681,244,1.848,247,1.848,253,1.391,256,0.004,298,0.004,302,2.004,305,0.812,308,0.585,319,1.602,323,3.331,325,2.406,330,2.114,333,2.23,334,2.23,335,1.161,337,2.582,342,0.901,477,3.388,479,2.582,510,1.161,512,2.255,515,1.735,552,2.707,565,1.241,578,1.52,626,2.327,635,2.581,644,1.629,651,1.287,654,1.391,655,2.23,656,3.481,657,1.09,659,1.199,663,1.183,666,1.124,672,2.436,680,1.598,714,3.607,717,2.118,718,4.495,719,2.769,722,1.689,725,2.561,726,3.388,727,2.142,738,3.205,739,1.598,741,1.287,742,2.142,744,1.798,745,3.268,746,1.52,751,1.161,762,2.912,777,3.875,781,3.667,798,0.897,799,1.798,800,3.396,801,3.842,802,3.882,803,3.842,804,3.882,805,3.842,806,3.882,807,1.336,808,3.763,809,3.623,810,2.397,811,2.397,812,2.882,813,2.397,814,4.82,815,3.102,816,2.397,817,4.86,818,2.397,819,2.397,820,1.935,821,3.102,822,2.397,823,2.397,824,2.397,825,3.102,826,2.397,827,2.397,828,2.397,829,3.118,830,4.126,831,4.126,832,2.58,833,1.935,834,4.126,835,1.598,836,1.598,837,1.935,838,1.935,839,1.598,840,1.935,841,1.935,842,2.707,843,3.102,844,2.707,845,1.935,846,1.935,847,3.102,848,1.935,849,3.102,850,1.452,851,2.23,852,4.441,853,3.067,854,1.935,855,1.898,856,1.798,857,1.935,858,1.798,859,1.935,860,1.798,861,1.935,862,1.935,863,1.798,864,1.99,865,1.52,866,1.798,867,1.798,868,1.935,869,1.798,870,1.935,871,1.798,872,1.935,873,1.935,874,1.935,875,3.102,876,1.935,877,1.798,878,1.935,879,1.935,880,3.268,881,1.935,882,1.935,883,1.935,884,1.935,885,1.935,886,3.882,887,3.388,888,1.935,889,3.875,890,1.935,891,1.935,892,1.798,893,1.935,894,1.935,895,4.441,896,3.102,897,5.063,898,1.935,899,3.102,900,3.102,901,3.102,902,3.102,903,1.648,904,3.102,905,1.935,906,1.935,907,1.935,908,1.935,909,1.935,910,1.935,911,1.935,912,2.882,913,1.935,914,1.935,915,1.391,916,1.124,917,1.935,918,1.935,919,1.935,920,1.798,921,1.935,922,1.798,923,1.287,924,2.882,925,1.798,926,1.935,927,3.882,928,1.935,929,1.935,930,1.935,931,1.935,932,1.935,933,1.798,934,3.102,935,1.935,936,2.882,937,1.798,938,1.935,939,3.882,940,1.935,941,1.935,942,1.689,943,1.935,944,1.935,945,1.336,946,2.23,947,1.689,948,1.935,949,1.52,950,1.935,951,1.935,952,1.336,953,1.935,954,1.935,955,1.935,956,1.935,957,1.935,958,1.935,959,1.798,960,1.689,961,1.798,962,1.798,963,1.935,964,1.935,965,1.935,966,1.798,967,1.935,968,1.935,969,1.798]],["title/entities/CertEntity.html",[970,1.672,971,2.831]],["body/entities/CertEntity.html",[3,0.148,4,0.123,5,0.111,9,3.348,12,0.278,13,1.074,14,5.097,18,0.781,19,0.396,20,0.009,29,0.251,73,0.182,74,0.176,131,2.465,146,2.533,225,3.892,256,0.007,298,0.007,306,1.841,308,0.678,430,3.178,970,2.775,971,4.699,972,3.11,973,4.847,974,5.7,975,6.003,976,5.854,977,6.003,978,6.003,979,5.663,980,4.482,981,6.003,982,3.636,983,2.65]],["title/interfaces/Client.html",[0,1.253,38,2.094]],["body/interfaces/Client.html",[0,1.466,2,1.677,3,0.088,4,0.073,5,0.066,12,0.166,13,0.757,15,2.083,18,0.745,19,0.23,20,0.009,29,0.358,30,0.979,31,4.112,33,0.518,34,1.899,35,1.051,38,4.226,47,2.571,48,1.677,54,2.267,56,3.311,61,2.449,63,3.58,73,0.128,74,0.105,75,1.626,76,2.075,80,2.486,87,0.938,88,1.433,91,1.171,100,3.126,103,1.458,104,1.555,107,3.163,108,2.519,110,3.679,113,1.534,127,1.534,130,1.12,131,1.466,141,2.088,142,2.564,154,1.769,155,1.45,185,0.67,207,1.533,213,1.852,234,1.731,235,1.906,247,2.607,256,0.005,260,4.712,278,2.519,281,2.166,285,1.79,290,2.384,298,0.005,302,1.491,332,2.519,334,1.45,348,5.242,420,2.166,430,1.533,494,2.683,512,1.677,523,2.166,541,3.055,563,4.37,595,2.519,596,1.852,599,1.533,600,2.384,601,2.887,603,2.267,604,2.384,615,2.683,621,5.477,736,2.166,923,1.92,976,2.384,984,2.887,985,4.98,986,3.16,987,2.166,988,3.736,989,2.887,990,2.804,991,2.384,992,2.887,993,2.075,994,2.613,995,2.683,996,2.887,997,4.216,998,2.683,999,4.216,1000,3.16,1001,3.16,1002,3.16,1003,3.16,1004,3.16,1005,2.166,1006,2.683,1007,4.98,1008,3.16,1009,4.615,1010,3.16,1011,5.452,1012,3.16,1013,3.16,1014,3.16,1015,3.16,1016,3.16,1017,4.615,1018,4.615,1019,3.16,1020,3.16,1021,3.16,1022,3.16,1023,1.994,1024,3.16,1025,3.16,1026,3.16,1027,3.16,1028,3.16,1029,4.615,1030,4.615,1031,4.216,1032,3.16,1033,2.384,1034,3.16,1035,3.16,1036,2.519,1037,3.16,1038,3.163,1039,4.615,1040,2.683,1041,3.16,1042,3.16,1043,3.16,1044,2.887,1045,1.994,1046,3.16,1047,3.16,1048,3.16,1049,3.16,1050,3.16,1051,3.16,1052,3.16,1053,3.16,1054,3.16,1055,2.683,1056,3.16,1057,3.16,1058,4.615,1059,3.16,1060,1.677,1061,4.615,1062,2.887,1063,3.16,1064,3.16,1065,3.16,1066,3.16,1067,3.16]],["title/classes/ClientCredentialsDto.html",[74,0.131,502,3.349]],["body/classes/ClientCredentialsDto.html",[3,0.163,4,0.136,5,0.122,12,0.307,13,1.141,18,0.772,19,0.347,20,0.009,29,0.277,73,0.163,74,0.231,256,0.007,298,0.007,300,1.82,306,1.726,307,3.407,308,0.636,318,2.042,502,5.905,538,5.595,540,6.776,1068,7.418,1069,5.863,1070,6.633,1071,6.633]],["title/entities/ClientEntry.html",[600,2.976,970,1.672]],["body/entities/ClientEntry.html",[3,0.152,4,0.127,5,0.114,12,0.287,13,1.094,15,1.953,16,0.942,18,0.755,19,0.374,20,0.009,29,0.259,73,0.186,74,0.182,100,2.38,131,2.119,247,3.26,256,0.007,298,0.007,306,1.787,308,0.659,348,3.926,430,3.238,541,3.304,600,5.034,970,2.828,972,3.207,974,5.379,982,3.75,983,2.734,1072,4.999,1073,5.034,1074,6.192,1075,6.579,1076,6.192,1077,6.579,1078,6.113,1079,6.192]],["title/injectables/ClientService.html",[30,0.837,523,2.704]],["body/injectables/ClientService.html",[0,1.287,3,0.074,4,0.061,5,0.055,12,0.139,13,0.664,15,2.021,16,0.835,18,0.761,19,0.311,20,0.009,29,0.346,30,0.859,31,4.708,33,0.435,34,2.174,35,0.883,38,4.244,47,3.063,48,1.409,54,1.905,56,2.908,61,2.151,63,4.264,73,0.113,74,0.088,75,1.367,76,2.661,80,2.555,87,1.202,88,1.258,91,1.395,100,3.138,103,1.377,104,1.427,107,3.769,108,2.117,110,4.385,113,1.348,127,1.634,130,1.665,131,1.287,141,2.438,142,2.446,154,2.108,155,1.86,185,1.324,207,1.967,213,1.556,234,1.455,235,1.674,247,2.392,256,0.004,260,4.876,278,3.231,281,1.82,285,1.504,290,2.003,298,0.004,302,1.912,305,1.018,308,0.627,332,3.231,334,1.218,342,1.075,348,5.241,420,1.82,430,1.967,494,2.254,512,2.151,515,1.607,523,2.777,541,2.864,563,2.777,595,2.117,596,1.556,599,1.289,600,2.003,601,2.426,603,1.905,604,2.003,615,2.254,621,6.115,736,2.777,798,1.125,807,1.676,923,1.613,976,3.057,984,2.426,985,4.49,986,2.656,987,1.82,988,4.449,989,2.426,990,3.341,991,2.003,992,2.426,993,1.744,994,3.114,995,2.254,996,2.426,997,5.024,998,2.254,999,4.49,1000,4.915,1001,2.656,1002,4.915,1003,2.656,1004,4.915,1005,1.82,1006,2.254,1007,4.49,1008,2.656,1009,4.053,1010,5.5,1011,4.915,1012,2.656,1013,5.5,1014,2.656,1015,2.656,1016,4.053,1017,4.053,1018,4.053,1019,2.656,1020,4.053,1021,4.053,1022,4.053,1023,1.676,1024,2.656,1025,2.656,1026,2.656,1027,2.656,1028,2.656,1029,4.053,1030,4.053,1031,3.702,1032,2.656,1033,2.003,1034,2.656,1035,2.656,1036,2.117,1037,2.656,1038,2.777,1039,4.053,1040,2.254,1041,2.656,1042,2.656,1043,2.656,1044,3.702,1045,2.557,1046,4.053,1047,4.053,1048,4.053,1049,4.053,1050,4.053,1051,2.656,1052,2.656,1053,2.656,1054,2.656,1055,2.254,1056,2.656,1057,2.656,1058,4.053,1059,2.656,1060,1.409,1061,4.053,1062,2.426,1063,2.656,1064,2.656,1065,2.656,1066,2.656,1067,2.656,1080,4.586,1081,4.586,1082,4.586,1083,4.586,1084,4.586,1085,3.005,1086,3.005,1087,3.005,1088,3.005,1089,3.005,1090,3.005,1091,3.005]],["title/classes/CreateCredentialIssuanceBindingDto.html",[74,0.131,1092,3.145]],["body/classes/CreateCredentialIssuanceBindingDto.html",[3,0.115,4,0.095,5,0.086,7,1.206,12,0.216,13,0.912,15,2.129,18,0.784,19,0.314,20,0.009,22,2.319,25,2.259,26,1.793,29,0.263,60,1.808,73,0.175,74,0.224,91,1.84,101,2.739,113,2.094,162,2.602,182,2.417,189,1.34,195,2.959,196,1.62,225,3.857,256,0.006,298,0.006,300,1.28,306,1.563,307,2.932,308,0.576,312,4.166,318,1.436,346,1.793,625,3.951,644,3.008,663,2.69,980,4.757,1092,4.436,1093,5.723,1094,3.501,1095,5.083,1096,4.971,1097,5.375,1098,5.375,1099,5.753,1100,5.753,1101,4.666,1102,4.666,1103,6.159,1104,6.159,1105,6.159,1106,6.159,1107,4.666,1108,4.666,1109,6.431,1110,4.666,1111,4.666,1112,5.083,1113,6.157,1114,5.083,1115,5.753,1116,5.083,1117,3.767,1118,3.288,1119,3.767,1120,3.288,1121,3.111,1122,3.501,1123,3.767,1124,2.708]],["title/entities/CredentialConfig.html",[970,1.672,1125,2.591]],["body/entities/CredentialConfig.html",[3,0.104,4,0.086,5,0.078,7,0.583,11,1.577,12,0.196,13,0.852,15,1.844,16,0.912,18,0.651,19,0.367,20,0.009,25,2.848,26,2.261,29,0.333,60,2.209,73,0.104,74,0.173,91,1.868,92,2.046,100,2.261,127,1.241,131,2.339,144,2.385,146,2.133,153,2.848,154,1.992,196,1.467,256,0.005,298,0.005,306,1.827,308,0.673,316,3.32,317,3.078,318,1.301,430,2.522,444,1.922,531,2.452,644,2.697,657,2.675,663,2.565,667,2.559,668,2.356,855,2.321,903,2.522,945,3.28,970,2.74,972,2.188,974,4.639,976,4.877,982,2.559,983,1.865,1073,5.555,1096,3.562,1125,3.413,1126,3.734,1127,5.199,1128,6.43,1129,5.463,1130,5.98,1131,4.246,1132,5.181,1133,4.246,1134,6.349,1135,5.199,1136,4.225,1137,5.199,1138,4.413,1139,5.199,1140,4.749,1141,5.463,1142,5.98,1143,3.734,1144,4.225,1145,3.047,1146,5.882,1147,4.749,1148,4.639,1149,3.734,1150,5.882,1151,4.225,1152,5.199,1153,5.199,1154,4.225,1155,5.882,1156,5.882,1157,3.047,1158,3.73,1159,4.225,1160,4.749,1161,4.768,1162,5.882,1163,4.225,1164,4.225,1165,4.225,1166,2.559,1167,5.199,1168,3.17,1169,3.734,1170,3.17,1171,4.225,1172,2.452]],["title/classes/CredentialConfigMapping.html",[74,0.131,1173,3.349]],["body/classes/CredentialConfigMapping.html",[3,0.136,4,0.113,5,0.102,12,0.257,13,1.021,15,1.955,16,0.966,18,0.749,19,0.379,20,0.009,25,2.681,26,2.128,29,0.341,73,0.173,74,0.239,91,1.888,99,2.519,131,1.554,155,2.245,189,1.59,225,3.751,256,0.007,298,0.007,300,1.519,302,3.229,306,1.545,307,3.235,308,0.569,314,2.868,316,3.229,317,3.523,318,1.705,325,2.073,330,2.128,333,3.141,335,2.681,515,1.328,625,2.868,638,4.692,644,2.762,645,3.511,663,1.705,665,5.745,666,2.597,668,3.088,677,3.354,679,3.088,707,3.691,1173,6.117,1174,4.471,1175,5.537,1176,4.471,1177,5.537,1178,5.285,1179,3.691,1180,4.894,1181,3.902,1182,4.894,1183,3.902,1184,2.973,1185,4.154]],["title/injectables/CredentialConfigService.html",[30,0.837,1186,2.831]],["body/injectables/CredentialConfigService.html",[3,0.079,4,0.066,5,0.127,7,0.951,12,0.149,15,2.108,16,0.86,18,0.774,19,0.304,20,0.009,21,2.284,29,0.359,30,0.903,33,0.465,34,2.313,35,0.943,55,1.863,60,2.313,61,1.505,65,2.334,73,0.079,74,0.17,80,1.741,87,1.687,88,2.121,91,1.733,99,2.927,100,1.233,103,1.206,104,1.9,127,1.416,130,1.696,131,0.901,132,1.606,141,1.782,142,1.824,144,3.508,146,2.611,154,1.087,184,2.283,185,1.293,194,3.213,197,3.67,198,4.177,213,2.497,237,3.455,256,0.005,264,2.588,291,2.035,298,0.005,305,1.087,308,0.585,314,1.662,318,0.988,342,1.13,383,2.128,412,1.863,413,1.944,420,1.944,508,2.261,515,1.653,565,1.662,572,2.555,599,1.376,644,1.087,663,2.479,736,2.919,757,1.301,798,1.202,970,2.894,972,2.497,983,1.417,987,1.944,993,1.863,994,3.625,1045,2.688,1125,4.951,1139,4.26,1172,1.863,1186,4.08,1187,6.641,1188,5.294,1189,2.408,1190,4.593,1191,4.82,1192,3.209,1193,2.715,1194,4.29,1195,3.209,1196,5.788,1197,4.82,1198,3.209,1199,3.213,1200,4.31,1201,6.403,1202,3.213,1203,4.82,1204,4.82,1205,3.209,1206,3.897,1207,3.056,1208,4.82,1209,3.209,1210,3.209,1211,4.079,1212,4.82,1213,3.209,1214,3.396,1215,2.591,1216,2.591,1217,2.591,1218,2.837,1219,2.591,1220,2.591,1221,3.892,1222,3.209,1223,4.673,1224,2.591,1225,2.591,1226,3.892,1227,2.591,1228,2.591,1229,2.591,1230,2.591,1231,4.673,1232,2.591,1233,2.408,1234,2.139,1235,2.591,1236,5.568,1237,3.616,1238,2.591,1239,2.591,1240,2.591,1241,3.892,1242,2.591,1243,3.209,1244,3.892,1245,3.892,1246,2.408,1247,3.209,1248,2.591,1249,2.837,1250,2.591,1251,2.261,1252,2.591,1253,2.408,1254,2.591,1255,2.591,1256,2.591,1257,2.591,1258,2.591,1259,2.591,1260,1.944,1261,3.209,1262,2.261,1263,2.591,1264,3.209,1265,3.209,1266,3.209,1267,3.209]],["title/entities/CredentialIssuanceBinding.html",[970,1.672,1148,2.831]],["body/entities/CredentialIssuanceBinding.html",[3,0.117,4,0.098,5,0.088,7,0.657,12,0.221,13,0.925,15,1.531,16,0.796,18,0.735,19,0.372,20,0.009,22,2.064,29,0.301,60,1.834,73,0.117,74,0.14,91,1.725,131,1.792,162,4.29,182,3.308,196,2.671,225,3.885,256,0.006,298,0.006,306,1.811,308,0.667,430,2.739,630,5.156,644,3.018,649,3.429,663,2.369,970,2.881,972,2.468,974,4.049,980,4.29,982,3.868,983,2.104,1073,4.257,1075,6.478,1096,3.868,1097,5.075,1098,5.075,1121,4.257,1124,4.18,1125,5.135,1148,4.049,1160,6.212,1268,7.455,1269,4.212,1270,6.386,1271,7.694,1272,6.386,1273,5.359,1274,4.5,1275,5.644,1276,6.386,1277,3.358,1278,4.791,1279,4.766,1280,6.386,1281,6.386,1282,4.766,1283,4.766,1284,6.386,1285,4.766,1286,4.766,1287,4.766,1288,7.203,1289,3.848,1290,3.177]],["title/classes/CredentialIssuanceBindingResponseDto.html",[74,0.131,1120,3.145]],["body/classes/CredentialIssuanceBindingResponseDto.html",[3,0.109,4,0.091,5,0.082,7,1.194,12,0.206,13,0.882,15,2.139,18,0.784,19,0.345,20,0.009,22,2.294,25,2.946,26,2.339,29,0.254,60,1.274,73,0.171,74,0.219,91,1.813,101,2.339,113,1.788,162,3.393,182,3.152,189,1.747,195,2.814,196,2.112,225,3.791,256,0.006,298,0.006,300,1.217,306,1.717,307,2.871,308,0.633,312,4.186,318,1.366,346,1.705,625,3.87,644,3.005,663,2.664,980,4.702,1092,3.127,1093,6.066,1094,3.329,1095,3.583,1096,5.107,1097,5.264,1098,5.264,1099,6.32,1100,5.606,1103,6.32,1104,6.32,1105,6.32,1106,6.32,1109,6.528,1112,4.913,1113,6.098,1114,5.606,1115,6.32,1116,5.606,1117,3.583,1118,3.127,1119,3.583,1120,4.287,1121,4.056,1122,4.565,1123,4.913,1124,4.03,1291,4.437,1292,4.437,1293,4.437,1294,4.437,1295,4.437]],["title/classes/CredentialIssuerMetadataDto.html",[74,0.131,1296,3.349]],["body/classes/CredentialIssuerMetadataDto.html",[3,0.121,4,0.101,5,0.091,7,0.68,12,0.228,13,0.946,18,0.785,19,0.385,20,0.009,26,2.509,73,0.121,74,0.145,99,2.97,114,3.162,154,2.641,165,2.645,256,0.006,298,0.006,300,1.352,308,0.698,319,3.25,328,4.14,334,3.502,351,4.722,510,3.776,550,4.14,632,3.284,644,2.824,663,2.691,855,3.602,960,4.601,1033,4.353,1138,4.898,1145,2.552,1184,3.506,1207,4.14,1234,3.284,1296,4.898,1297,5.542,1298,7.725,1299,3.978,1300,2.747,1301,6.473,1302,6.473,1303,6.473,1304,5.913,1305,6.473,1306,6.473,1307,6.55,1308,6.473,1309,4.927,1310,5.771,1311,4.927,1312,3.506,1313,6.529,1314,4.927,1315,7.323,1316,4.927,1317,3.954,1318,4.927,1319,4.927,1320,4.927,1321,4.927,1322,4.927,1323,4.355]],["title/controllers/CredentialsController.html",[338,1.374,1324,3.349]],["body/controllers/CredentialsController.html",[3,0.121,4,0.1,5,0.09,7,0.677,12,0.227,15,1.866,16,0.911,18,0.65,19,0.322,20,0.009,29,0.348,33,0.711,60,2.235,65,3.152,73,0.121,74,0.144,83,2.736,88,2.135,91,1.745,97,3.27,99,3.54,103,1.369,130,1.85,144,3.156,185,1.369,187,2.569,194,4.34,256,0.006,298,0.006,306,1.602,308,0.591,338,2.249,340,1.746,342,1.526,346,1.885,480,3.498,498,2.375,515,1.752,516,3.923,518,3.11,528,4.137,587,2.634,663,2.688,740,2.735,757,1.989,855,1.936,1125,4.517,1186,4.634,1188,3.456,1190,3.11,1199,4.34,1215,3.96,1324,5.482,1325,4.335,1326,6.51,1327,5.9,1328,6.51,1329,7.307,1330,4.335,1331,4.884,1332,4.905,1333,4.905,1334,4.905,1335,4.905,1336,4.905,1337,3.27,1338,3.11,1339,3.96,1340,3.27,1341,3.96,1342,2.735,1343,3.27,1344,3.27,1345,3.96,1346,3.943,1347,2.165,1348,4.905,1349,4.905,1350,4.905,1351,3.96,1352,4.905]],["title/controllers/CredentialsMetadataController.html",[338,1.374,1353,3.349]],["body/controllers/CredentialsMetadataController.html",[3,0.134,4,0.111,5,0.1,7,0.75,12,0.252,15,2.053,16,0.868,18,0.808,19,0.357,20,0.009,26,2.676,29,0.321,33,0.788,73,0.134,74,0.16,88,2.107,91,1.561,103,1.305,127,2.046,130,1.647,131,1.526,146,2.779,154,2.359,185,1.305,256,0.007,298,0.007,306,1.527,308,0.563,338,1.674,340,1.935,342,1.633,345,3.448,346,2.09,498,2.633,515,1.669,649,3.739,663,2.636,754,3.625,757,2.205,1131,4.7,1132,5.135,1145,3.607,1206,4.905,1346,4.652,1347,2.401,1353,5.224,1354,5.412,1355,6.202,1356,4.807,1357,5.438,1358,5.438,1359,6.963,1360,5.438,1361,5.438,1362,6.963,1363,5.438,1364,4.415,1365,4.391,1366,5.438,1367,5.438,1368,6.963,1369,5.438,1370,5.438,1371,5.438]],["title/injectables/CredentialsService.html",[30,0.837,1346,2.704]],["body/injectables/CredentialsService.html",[3,0.081,4,0.068,5,0.061,12,0.153,15,1.82,16,0.871,18,0.778,19,0.344,20,0.009,29,0.359,30,0.925,33,0.48,34,2.337,35,0.973,47,3.055,48,1.553,73,0.081,74,0.097,80,2.102,87,1.294,88,1.917,91,1.847,103,1.225,104,1.912,113,2.153,130,1.71,131,0.929,141,2.567,142,2.459,146,2.703,154,1.671,177,2.005,184,2.31,185,1.31,227,2.333,235,2.551,256,0.005,298,0.005,305,1.121,308,0.565,310,1.603,330,1.896,342,1.157,515,1.676,531,1.921,541,1.342,565,2.555,596,1.715,599,1.42,649,3.509,657,2.244,663,2.595,667,2.005,668,1.846,719,2.459,727,1.846,751,1.603,798,1.24,809,3.509,829,3.796,832,3.278,835,2.207,839,2.207,850,2.988,853,3.644,864,2.555,880,3.384,903,1.42,915,1.921,916,1.553,947,2.333,980,1.846,983,1.462,990,4.076,991,2.207,993,1.921,994,3.271,1096,2.988,1125,3.793,1128,3.983,1130,4.361,1131,3.422,1132,4.432,1133,1.921,1142,2.926,1157,2.555,1158,2.099,1161,2.333,1166,2.005,1168,2.484,1206,3.958,1211,3.476,1215,2.673,1218,2.926,1273,2.005,1304,3.983,1346,2.988,1364,3.128,1372,2.926,1373,5.212,1374,5.897,1375,5.897,1376,4.934,1377,2.926,1378,5.897,1379,5.897,1380,3.311,1381,3.311,1382,5.643,1383,3.311,1384,5.146,1385,3.311,1386,3.311,1387,3.311,1388,3.311,1389,4.934,1390,3.311,1391,6.535,1392,4.361,1393,4.934,1394,2.484,1395,2.484,1396,4.361,1397,2.484,1398,3.311,1399,3.311,1400,3.311,1401,3.311,1402,4.934,1403,3.701,1404,3.311,1405,3.311,1406,3.311,1407,3.311,1408,3.311,1409,3.311,1410,3.311,1411,3.311,1412,3.311,1413,3.311,1414,2.926,1415,3.311,1416,3.311,1417,2.926,1418,3.311,1419,3.311,1420,3.311,1421,2.484,1422,2.333,1423,3.311,1424,2.673,1425,3.311,1426,3.311,1427,2.207,1428,2.673,1429,4.934,1430,3.311,1431,3.311,1432,3.311,1433,3.311,1434,4.934]],["title/interfaces/CryptoImplementation.html",[0,1.253,1435,3.145]],["body/interfaces/CryptoImplementation.html",[0,2.157,2,2.555,3,0.134,4,0.111,5,0.1,7,0.751,12,0.252,13,1.01,16,0.869,18,0.762,19,0.378,20,0.009,22,2.173,73,0.134,88,1.912,113,2.048,129,5.139,130,1.649,184,2.78,185,1.441,219,3.887,231,3.454,256,0.007,272,3.299,275,5.23,298,0.007,308,0.621,342,1.634,515,1.671,915,4.461,916,3.801,1140,6.543,1435,4.912,1436,6.543,1437,4.398,1438,5.23,1439,6.971,1440,4.912,1441,6.543,1442,6.971,1443,6.971,1444,5.447,1445,6.161,1446,5.125,1447,6.161,1448,8.821,1449,5.447,1450,6.08,1451,6.161,1452,6.161,1453,5.447,1454,5.767,1455,6.161,1456,4.087,1457,4.398]],["title/injectables/CryptoImplementationService.html",[30,0.837,1458,2.976]],["body/injectables/CryptoImplementationService.html",[3,0.138,4,0.115,5,0.104,12,0.261,16,0.887,19,0.313,20,0.009,29,0.354,30,1.333,33,0.814,34,2.524,35,1.652,73,0.175,74,0.165,87,1.474,94,5.011,103,1.585,113,1.652,130,1.673,185,1.333,196,2.468,235,2.051,256,0.007,272,4.724,298,0.007,305,1.904,308,0.63,342,1.667,430,3.049,515,1.705,798,2.105,864,4.246,916,3.845,980,3.965,1157,2.911,1347,2.481,1394,4.217,1395,4.217,1435,5.496,1458,4.741,1459,4.538,1460,8.198,1461,7.801,1462,5.621,1463,5.621,1464,7.111,1465,5.621,1466,7.801,1467,6.619,1468,5.621,1469,5.621,1470,7.801,1471,6.344,1472,5.621,1473,5.621,1474,6.285,1475,5.621]],["title/modules/CryptoModule.html",[355,1.342,368,2.312]],["body/modules/CryptoModule.html",[3,0.148,4,0.123,5,0.111,20,0.009,29,0.368,33,0.873,47,3.84,73,0.148,74,0.177,256,0.007,298,0.007,340,2.643,355,2.421,357,2.584,358,2.917,359,3.121,360,3.121,361,2.826,362,4.029,363,4.029,368,4.726,378,3.847,379,3.121,380,3.015,383,2.66,598,3.649,599,2.584,971,3.82,988,5.579,1476,5.325,1477,5.325,1478,5.325,1479,6.025,1480,6.04,1481,5.325,1482,6.025,1483,6.025,1484,6.025,1485,5.325]],["title/modules/DatabaseModule.html",[355,1.342,369,3.145]],["body/modules/DatabaseModule.html",[3,0.135,4,0.113,5,0.102,19,0.309,20,0.009,29,0.352,33,0.798,34,2.505,35,1.619,61,3.294,73,0.173,74,0.162,103,1.316,104,1.772,131,1.971,133,5.33,213,2.854,227,3.882,256,0.007,298,0.007,355,2.112,357,2.363,369,4.948,383,3.1,384,5.268,385,4.253,448,4.134,449,4.449,451,4.449,491,4.87,598,3.337,599,2.363,1486,4.449,1487,7.022,1488,4.449,1489,6.206,1490,4.87,1491,4.87,1492,4.87,1493,7.193,1494,7.596,1495,6.786,1496,6.306,1497,4.87,1498,4.87,1499,4.87,1500,4.87,1501,4.87,1502,5.51,1503,7.022,1504,7.729,1505,5.51,1506,5.51,1507,7.022,1508,5.51,1509,5.51,1510,5.51,1511,5.51,1512,5.51,1513,4.87,1514,5.51,1515,5.669,1516,5.51,1517,5.51]],["title/classes/EC_Public.html",[74,0.131,1518,3.349]],["body/classes/EC_Public.html",[3,0.126,4,0.105,5,0.094,7,0.707,12,0.237,13,0.971,18,0.75,19,0.362,20,0.009,21,3.507,22,2.429,24,3.615,29,0.214,73,0.165,74,0.232,75,3.047,100,1.969,101,2.575,189,1.471,196,2.325,256,0.006,272,4.057,298,0.006,300,1.405,308,0.64,444,3.395,624,2.973,634,2.856,706,4.528,771,5.026,832,3.854,864,3.47,949,4.248,1207,4.733,1297,5.21,1300,4.162,1518,5.026,1519,6.633,1520,4.733,1521,6.998,1522,5.94,1523,6.795,1524,4.788,1525,6.598,1526,5.26,1527,5.6,1528,5.789,1529,6.164,1530,5.122,1531,5.921,1532,5.026,1533,5.921,1534,5.122,1535,5.94,1536,5.122,1537,2.564,1538,2.973,1539,3.415]],["title/injectables/EncryptionService.html",[30,0.837,988,2.704]],["body/injectables/EncryptionService.html",[3,0.099,4,0.082,5,0.074,7,0.988,12,0.187,15,1.88,16,0.893,18,0.782,19,0.333,20,0.009,21,3.249,22,2.103,29,0.316,30,1.066,33,0.583,34,2.481,35,1.183,54,2.553,55,2.337,56,4.181,61,3.36,73,0.099,74,0.118,80,1.71,87,1.729,88,2.073,94,4.007,95,3.444,97,3.791,103,1.066,104,1.92,127,1.671,130,1.62,131,1.13,141,2.414,142,2.078,144,3.441,146,2.705,147,4.007,153,2.754,184,1.792,185,1.343,188,3.251,189,2.437,213,2.086,234,1.95,256,0.005,260,3.444,281,3.993,290,3.791,293,3.791,294,3.606,298,0.005,308,0.579,342,1.333,420,3.993,444,2.587,494,5.375,515,1.812,563,2.439,765,4.592,798,1.508,807,2.245,832,3.679,987,2.439,988,4.339,1005,3.444,1200,3.995,1206,3.444,1347,1.778,1417,3.559,1441,3.251,1520,3.606,1524,4.495,1526,2.837,1537,2.015,1540,3.559,1541,8.486,1542,5.687,1543,5.687,1544,5.687,1545,4.592,1546,4.027,1547,5.687,1548,4.027,1549,4.027,1550,5.687,1551,7.164,1552,7.164,1553,5.687,1554,5.687,1555,4.027,1556,4.027,1557,5.027,1558,4.027,1559,4.027,1560,6.593,1561,7.164,1562,6.593,1563,4.027,1564,4.027,1565,5.027,1566,3.559,1567,4.027,1568,5.687,1569,4.027,1570,4.027,1571,5.687,1572,4.027,1573,3.559,1574,4.027,1575,4.027,1576,4.027]],["title/interfaces/GenerateTokenOptions.html",[0,1.253,1577,3.349]],["body/interfaces/GenerateTokenOptions.html",[0,1.281,2,2.141,3,0.112,4,0.093,5,0.084,12,0.212,13,0.899,16,1.017,18,0.781,19,0.311,20,0.009,27,2.649,29,0.316,30,1.162,33,0.661,34,2.169,35,1.341,73,0.152,74,0.134,76,2.649,78,4.387,79,5.04,83,3.124,101,1.754,103,1.482,104,1.973,113,2.396,114,2.21,127,1.341,141,1.909,142,1.955,153,3.004,180,2.649,184,1.955,207,1.957,235,2.572,247,2.708,253,4.387,256,0.006,260,3.757,298,0.006,463,3.424,521,2.894,528,3.708,529,3.424,548,3.043,549,5.327,553,4.371,563,3.757,565,3.213,572,3.49,576,6.383,578,4.794,652,2.284,855,2.781,865,2.894,903,3.022,916,2.141,1172,2.649,1274,3.216,1347,2.015,1440,3.216,1537,2.284,1577,5.286,1578,3.685,1579,4.654,1580,3.685,1581,4.034,1582,3.424,1583,3.685,1584,4.034,1585,5.483,1586,5.008,1587,5.483,1588,5.483,1589,4.034,1590,4.034,1591,6.228,1592,5.483,1593,4.034,1594,5.008,1595,4.034,1596,4.034,1597,4.034,1598,4.034,1599,4.034,1600,4.034,1601,4.034,1602,4.034,1603,4.034,1604,4.371,1605,3.424,1606,4.034,1607,4.034,1608,3.424,1609,4.034,1610,3.685,1611,4.034,1612,4.034,1613,4.034,1614,4.034,1615,3.685]],["title/controllers/HealthController.html",[338,1.374,1616,3.349]],["body/controllers/HealthController.html",[3,0.149,4,0.124,5,0.111,7,0.834,12,0.28,20,0.009,29,0.311,33,0.876,64,4.719,73,0.149,74,0.177,80,2.238,87,1.586,103,1.133,126,6.009,127,2.187,130,1.596,207,3.86,256,0.007,298,0.007,306,1.326,308,0.489,338,1.861,340,2.152,342,1.745,498,2.928,510,3.604,653,4.962,712,5.584,1515,6.009,1616,6.312,1617,5.345,1618,8.797,1619,6.578,1620,8.414,1621,6.578,1622,7.443,1623,6.047,1624,6.047,1625,7.443,1626,7.443,1627,4.882,1628,6.047,1629,5.345,1630,6.047,1631,6.047]],["title/modules/HealthModule.html",[355,1.342,370,3.145]],["body/modules/HealthModule.html",[3,0.168,4,0.14,5,0.126,20,0.009,29,0.356,33,0.993,73,0.168,74,0.201,256,0.007,298,0.007,340,2.855,355,2.412,357,2.938,370,5.652,383,3.024,1616,6.382,1627,5.531,1632,6.85,1633,6.85,1634,8.022]],["title/entities/IssuanceConfig.html",[970,1.672,1273,2.704]],["body/entities/IssuanceConfig.html",[3,0.107,4,0.089,5,0.08,7,0.6,11,1.61,12,0.202,13,0.87,15,1.864,16,0.748,18,0.659,19,0.37,20,0.009,25,2.907,26,2.307,29,0.336,60,2.128,73,0.107,74,0.176,91,1.882,101,2.307,124,2.65,131,1.685,144,2.434,146,2.166,162,4.132,182,3.109,189,1.724,256,0.006,298,0.006,302,3.35,306,1.762,308,0.65,311,3.347,316,2.502,318,1.339,325,2.248,330,2.848,333,2.787,335,2.907,346,1.672,430,2.574,480,3.004,512,3.77,635,2.574,642,4.504,643,4.002,644,2.996,645,3.806,651,3.223,654,3.484,655,4.3,656,3.475,657,2.73,658,3.347,659,3.004,663,2.393,666,2.041,668,2.426,669,4.504,679,4.482,970,2.774,972,2.254,974,2.759,982,3.636,983,1.921,1073,4.002,1096,3.636,1121,4.002,1124,3.989,1127,5.306,1129,5.549,1134,5.156,1148,4.698,1149,3.846,1153,5.306,1167,5.306,1170,3.264,1184,3.223,1185,5.156,1202,4.002,1211,4.23,1273,3.636,1277,3.066,1278,4.504,1635,7.28,1636,3.513,1637,3.846,1638,3.846,1639,3.846,1640,6.003,1641,4.351,1642,6.003,1643,4.847,1644,6.003,1645,3.846,1646,4.351,1647,3.846,1648,3.846,1649,4.351,1650,5.306,1651,3.846]],["title/controllers/IssuanceController.html",[338,1.374,1652,3.349]],["body/controllers/IssuanceController.html",[3,0.124,4,0.104,5,0.093,12,0.235,15,1.889,16,0.925,18,0.66,19,0.327,20,0.009,29,0.351,33,0.733,60,2.263,73,0.124,74,0.149,83,2.779,88,2.036,91,1.767,99,3.023,103,1.391,130,1.863,144,3.195,185,1.391,187,2.623,194,4.43,256,0.006,298,0.006,306,1.627,308,0.6,338,1.558,340,1.801,342,1.558,346,1.945,480,3.522,498,2.45,515,1.779,516,3.984,518,3.209,528,4.16,587,2.717,644,2.845,740,2.822,757,2.052,809,3.984,855,1.997,1179,5.253,1190,3.209,1199,4.43,1327,5.991,1330,4.473,1331,4.986,1337,3.374,1338,3.209,1340,3.374,1341,4.086,1342,2.822,1343,3.374,1344,3.374,1345,4.086,1347,2.234,1351,4.086,1652,4.986,1653,4.473,1654,6.646,1655,6.646,1656,6.559,1657,5.061,1658,5.061,1659,5.061,1660,5.061,1661,5.061,1662,5.061,1663,4.473,1664,5.061,1665,5.061,1666,5.061,1667,3.566,1668,5.061]],["title/classes/IssuanceDto.html",[74,0.131,1179,2.976]],["body/classes/IssuanceDto.html",[3,0.125,4,0.104,5,0.094,7,0.703,12,0.236,13,0.968,15,1.895,16,0.985,18,0.703,19,0.383,20,0.009,25,3.234,26,2.567,29,0.331,73,0.164,74,0.232,91,1.991,99,3.038,131,1.431,155,2.708,189,1.918,225,2.469,256,0.006,298,0.007,300,1.399,302,3.42,306,1.733,307,3.153,308,0.639,314,2.641,316,3.105,317,3.388,318,1.57,325,2.501,330,2.567,333,3.205,335,3.234,515,1.601,625,3.459,638,4.786,644,2.947,645,4.235,663,2.056,665,5.569,666,2.392,668,2.843,677,3.088,679,4.153,702,4.507,707,4.452,1173,5.929,1174,4.117,1178,5.011,1179,4.452,1180,5.903,1181,4.706,1182,6.583,1183,4.706,1184,3.586,1185,5.588,1669,4.507,1670,5.099,1671,5.099,1672,5.099,1673,5.099,1674,5.099,1675,5.099]],["title/injectables/IssuanceService.html",[30,0.837,809,2.397]],["body/injectables/IssuanceService.html",[3,0.064,4,0.054,5,0.129,7,0.362,12,0.122,15,1.786,16,0.784,18,0.754,19,0.294,20,0.009,21,2.013,22,1.368,29,0.367,30,0.773,32,4.236,33,0.38,34,2.152,35,0.77,47,2.914,48,1.23,55,1.522,60,2.233,61,1.23,65,1.998,73,0.064,74,0.15,75,1.192,80,2.24,87,1.517,88,2.044,91,1.297,99,3.595,100,1.008,103,1.084,104,1.944,113,1.499,124,2.252,127,1.212,130,1.741,131,0.736,132,1.312,141,2.526,142,2.348,144,3.021,146,2.586,154,1.397,155,2.709,184,1.3,185,1.179,197,3.235,198,3.504,207,1.769,213,2.137,225,2.801,235,1.862,237,3.378,247,1.961,256,0.004,264,2.215,284,3.401,291,1.662,298,0.004,302,1.093,305,2.263,308,0.565,314,1.358,318,0.807,330,1.586,342,1.356,412,1.522,413,1.588,420,3.81,508,2.907,515,1.508,565,1.358,572,2.252,599,1.124,630,2.117,638,1.588,644,2.806,651,2.215,658,2.844,663,2.229,668,1.462,676,1.748,679,4.252,727,2.301,736,2.499,798,0.982,809,3.106,880,1.998,966,1.967,983,1.157,987,1.588,993,1.522,994,3.498,1045,2.844,1096,1.588,1097,2.907,1098,4.076,1125,3.357,1129,2.117,1148,1.662,1170,1.967,1172,1.522,1179,4.66,1186,3.668,1188,1.847,1190,2.616,1193,2.393,1194,3.856,1199,2.75,1200,2.301,1211,2.907,1216,2.117,1217,2.117,1219,2.117,1220,2.117,1221,3.331,1223,4.118,1224,2.117,1225,2.117,1226,3.331,1227,2.117,1228,2.117,1229,2.117,1230,2.117,1231,4.118,1232,2.117,1233,1.967,1234,1.748,1235,2.117,1236,6.014,1237,3.095,1238,2.117,1239,2.117,1240,2.117,1241,3.331,1242,2.117,1244,4.118,1245,4.118,1246,1.967,1248,2.117,1250,2.117,1251,2.907,1252,2.117,1253,1.967,1254,2.117,1255,2.117,1256,2.117,1257,2.117,1258,2.117,1259,2.117,1260,1.588,1262,1.847,1263,2.117,1273,3.504,1289,2.117,1290,1.748,1327,3.331,1339,2.117,1651,2.317,1656,3.647,1663,2.317,1676,2.317,1677,3.331,1678,4.126,1679,5.101,1680,2.622,1681,5.101,1682,5.785,1683,2.622,1684,5.101,1685,4.126,1686,2.622,1687,4.126,1688,2.622,1689,2.622,1690,2.622,1691,2.622,1692,4.34,1693,2.622,1694,4.126,1695,2.622,1696,4.126,1697,2.622,1698,2.317,1699,2.622,1700,2.622,1701,2.622,1702,2.622,1703,2.622,1704,2.622,1705,2.622,1706,2.622,1707,2.622,1708,2.622,1709,6.291,1710,4.126,1711,2.622,1712,2.622,1713,2.622,1714,2.622,1715,2.622,1716,2.622,1717,2.622,1718,2.622,1719,2.622,1720,2.622,1721,2.622,1722,5.101,1723,5.785,1724,2.622,1725,2.622,1726,2.622,1727,2.622,1728,2.622,1729,2.622,1730,2.622]],["title/controllers/IssuerManagementController.html",[338,1.374,1731,3.349]],["body/controllers/IssuerManagementController.html",[3,0.109,4,0.091,5,0.082,7,0.614,12,0.206,16,0.555,18,0.396,19,0.377,20,0.009,24,2.154,29,0.358,33,0.645,51,2.859,73,0.109,74,0.131,83,2.283,88,1.672,92,2.154,100,1.71,101,1.71,104,1.398,127,1.791,130,0.954,141,2.141,142,1.921,180,2.582,185,0.834,187,3.33,189,2.458,234,3.794,244,1.71,256,0.006,285,3.051,298,0.006,305,2.065,306,0.976,308,0.36,312,2.087,335,2.154,338,1.37,340,1.583,342,1.429,346,1.71,351,2.695,444,3.163,480,3.177,483,4.035,498,2.154,503,4.921,510,2.952,515,1.067,516,2.389,518,2.821,519,4.921,520,4.573,528,3.508,536,4.573,541,2.472,587,2.389,656,3.262,663,1.876,740,2.481,741,2.389,757,1.804,764,3.592,784,3.865,855,1.756,933,3.338,937,3.338,945,3.399,946,3.538,961,3.338,1031,3.592,1060,2.859,1131,3.538,1317,2.695,1337,2.966,1338,2.821,1340,2.966,1341,3.592,1342,3.877,1343,2.966,1344,2.966,1345,3.592,1347,1.964,1582,3.338,1667,3.135,1731,4.573,1732,5.388,1733,4.921,1734,3.932,1735,6.146,1736,3.932,1737,5.35,1738,3.932,1739,5.388,1740,4.211,1741,3.932,1742,4.449,1743,4.449,1744,4.449,1745,4.921,1746,3.592,1747,4.211,1748,3.592,1749,4.449,1750,2.966,1751,3.592,1752,4.409,1753,3.932,1754,3.932,1755,5.388,1756,3.135,1757,6.611,1758,3.932,1759,3.932,1760,5.614,1761,5.388,1762,4.295,1763,3.932,1764,4.449,1765,4.449,1766,3.932,1767,3.932,1768,4.449,1769,3.932,1770,3.932,1771,3.932,1772,3.932,1773,3.932,1774,3.932,1775,3.932,1776,3.932]],["title/interfaces/IssuerMetadata.html",[0,1.253,1777,2.976]],["body/interfaces/IssuerMetadata.html",[0,2.272,2,2.862,3,0.15,4,0.125,5,0.112,7,0.842,12,0.283,13,1.084,18,0.72,19,0.372,20,0.009,21,2.954,22,2.007,26,2.876,29,0.255,73,0.15,100,2.876,256,0.007,298,0.007,334,3.035,444,3.404,632,4.989,634,4.173,637,5.615,832,3.511,855,3.608,960,5.274,1145,3.877,1299,4.926,1312,3.276,1520,4.746,1524,4.706,1537,3.054,1538,5.182,1777,4.989,1778,5.393]],["title/modules/IssuerModule.html",[355,1.342,371,3.145]],["body/modules/IssuerModule.html",[3,0.103,4,0.086,5,0.077,20,0.009,29,0.386,33,0.608,34,2.075,35,1.232,73,0.144,74,0.123,104,1.342,154,1.42,229,3.385,256,0.005,298,0.005,340,2.082,355,2.027,357,1.798,358,2.03,359,2.172,360,2.172,361,1.967,362,3.373,363,3.373,368,4.115,371,6.534,375,4.812,378,3.031,379,2.172,380,2.099,383,2.583,385,3.544,386,2.54,390,3.146,404,3.146,425,3.146,541,1.7,586,5.038,596,2.172,597,3.385,598,2.54,599,1.798,644,1.42,708,5.056,742,4.866,807,2.338,809,4.266,839,2.795,855,1.655,1125,3.396,1148,3.71,1166,2.54,1169,3.706,1170,3.146,1186,5.038,1188,2.955,1273,3.544,1289,3.385,1290,2.795,1324,5.056,1339,3.385,1346,4.812,1353,5.056,1355,3.385,1365,3.385,1652,5.056,1698,3.706,1731,5.056,1733,3.385,1747,5.285,1779,3.706,1780,3.706,1781,3.706,1782,3.706,1783,5.038,1784,4.812,1785,4.611,1786,4.812,1787,3.385,1788,5.056,1789,3.706,1790,4.193,1791,4.193,1792,4.193,1793,4.193,1794,4.193,1795,4.193,1796,4.193,1797,3.9,1798,2.955,1799,3.146,1800,4.193,1801,4.193,1802,5.851,1803,3.146,1804,3.9,1805,2.338,1806,3.385,1807,4.193,1808,5.851,1809,4.193,1810,4.193]],["title/classes/JwksResponseDto.html",[74,0.131,1539,2.976]],["body/classes/JwksResponseDto.html",[3,0.136,4,0.113,5,0.102,7,0.765,12,0.257,13,1.022,18,0.69,19,0.311,20,0.009,21,3.494,22,2.374,24,3.754,29,0.232,73,0.173,74,0.228,75,2.523,100,2.71,101,2.132,189,2.025,196,1.925,256,0.007,272,3.359,298,0.007,300,1.522,308,0.448,444,3.526,624,3.219,634,3.932,771,4.161,832,3.827,864,2.873,949,3.517,1207,5.459,1297,4.471,1300,4.323,1518,4.161,1519,5.693,1520,4.916,1521,6.232,1522,5.29,1523,6.757,1524,4.983,1525,6.232,1526,3.908,1527,4.161,1528,4.968,1529,5.29,1531,4.902,1532,4.161,1533,4.902,1535,5.29,1537,2.776,1538,4.092,1539,4.701,1811,4.902]],["title/injectables/JwtAuthGuard.html",[30,0.837,587,2.397]],["body/injectables/JwtAuthGuard.html",[3,0.15,4,0.125,5,0.113,12,0.283,16,0.934,19,0.33,20,0.009,29,0.353,30,1.404,33,0.886,73,0.15,74,0.179,87,1.603,103,1.404,104,1.402,130,1.311,131,1.716,185,1.404,256,0.007,298,0.007,308,0.606,342,1.757,515,1.796,525,5.403,587,4.023,591,4.586,798,2.289,1347,2.699,1812,5.403,1813,5.621,1814,7.493,1815,6.623,1816,5.403,1817,7.796,1818,6.113,1819,6.623,1820,5.951,1821,6.113,1822,3.702,1823,4.935,1824,6.113,1825,6.049,1826,5.403,1827,6.623,1828,6.113,1829,5.403,1830,6.113,1831,6.113]],["title/injectables/JwtService.html",[30,0.837,521,2.831]],["body/injectables/JwtService.html",[0,1.159,3,0.102,4,0.085,5,0.076,12,0.191,16,0.903,18,0.749,19,0.319,20,0.009,27,3.36,29,0.303,30,1.085,33,0.599,34,2.434,35,1.214,73,0.142,74,0.121,76,3.36,78,4.427,79,5.085,83,3.259,87,1.083,101,1.588,103,1.43,104,1.931,113,2.324,114,2.804,127,1.701,130,1.554,141,2.434,142,1.825,153,3.237,180,3.36,184,2.283,185,1.358,207,2.483,235,2.44,247,2.569,253,2.397,256,0.005,260,4.049,298,0.005,305,1.399,308,0.617,342,1.358,430,1.772,463,5.016,515,1.737,521,3.672,528,3.887,529,3.099,548,2.754,549,5.375,553,4.08,563,3.507,565,2.999,572,3.491,576,4.675,578,2.62,652,2.067,798,1.547,807,2.303,855,2.638,865,3.672,903,3.271,916,1.938,1172,3.36,1274,4.08,1347,1.824,1440,2.911,1537,2.067,1577,5.436,1578,3.335,1579,4.344,1580,3.335,1581,3.651,1582,4.344,1583,4.675,1584,5.909,1585,5.118,1586,4.675,1587,5.118,1588,5.118,1589,3.651,1590,3.651,1591,5.909,1592,5.118,1593,3.651,1594,4.675,1595,3.651,1596,3.651,1597,3.651,1598,3.651,1599,3.651,1600,3.651,1601,3.651,1602,3.651,1603,5.118,1604,4.711,1605,3.099,1606,3.651,1607,3.651,1608,3.099,1609,5.118,1610,4.675,1611,5.118,1612,5.118,1613,3.651,1614,6.404,1615,3.335,1832,5.79,1833,5.79,1834,4.131,1835,4.131,1836,4.131,1837,4.131,1838,4.131,1839,4.131]],["title/injectables/JwtStrategy.html",[30,0.837,588,3.145]],["body/injectables/JwtStrategy.html",[3,0.144,4,0.086,5,0.077,7,0.577,12,0.194,16,0.908,19,0.321,20,0.009,22,1.566,29,0.341,30,1.095,33,0.606,34,2.739,35,1.229,38,2.74,60,1.933,73,0.103,74,0.123,76,3.39,78,2.427,79,2.788,80,2.5,83,2.187,87,1.532,88,1.147,100,2.245,101,1.608,103,1.488,104,1.67,113,1.229,114,2.025,130,1.562,131,1.639,132,2.093,141,2.072,142,1.318,153,2.025,157,2.947,184,1.841,185,1.365,205,3.39,207,2.505,244,1.608,247,2.945,256,0.005,298,0.005,308,0.589,342,1.369,348,3.704,397,5.292,480,1.696,515,1.746,523,4.935,524,3.377,528,3.417,529,3.138,549,4.115,554,3.138,572,3.776,578,3.704,588,4.115,591,3.138,611,3.377,652,2.093,736,4.412,798,1.566,807,2.332,855,3.133,903,3.494,980,2.332,1036,4.742,1131,2.427,1172,3.906,1440,4.742,1538,3.39,1583,5.434,1594,3.377,1615,3.377,1692,3.138,1813,4.382,1826,3.697,1840,3.697,1841,5.841,1842,5.841,1843,6.73,1844,4.183,1845,5.841,1846,4.183,1847,5.841,1848,6.73,1849,4.183,1850,4.183,1851,5.841,1852,4.183,1853,5.162,1854,4.183,1855,4.183,1856,4.183,1857,3.697,1858,5.841,1859,3.697,1860,7.285,1861,4.183,1862,4.183,1863,4.183,1864,3.697,1865,3.697,1866,4.183,1867,4.183,1868,3.697,1869,4.183,1870,4.183,1871,4.183,1872,4.183,1873,5.841,1874,4.183,1875,4.183,1876,4.183,1877,3.697,1878,5.841,1879,4.183,1880,4.183,1881,4.183,1882,4.183,1883,4.183,1884,4.183,1885,4.183,1886,4.183,1887,4.183,1888,4.183,1889,4.183,1890,4.183,1891,4.183]],["title/classes/Key.html",[22,1.197,74,0.131]],["body/classes/Key.html",[3,0.127,4,0.106,5,0.095,10,2.772,12,0.239,13,0.976,14,3.273,15,1.238,16,0.644,18,0.813,19,0.384,20,0.009,22,2.365,23,3.441,24,3.26,29,0.282,73,0.127,74,0.22,75,3.062,80,2.025,185,0.967,196,1.792,256,0.006,272,3.126,298,0.006,300,1.416,305,1.748,306,1.886,307,3.5,308,0.695,316,2.807,317,3.062,318,1.589,625,2.674,832,3.725,916,3.514,1456,3.873,1522,3.873,1523,5.957,1524,4.428,1526,5.279,1527,5.621,1528,5.595,1529,5.957,1535,5.051,1537,2.583,1892,7.043,1893,4.168,1894,5.621,1895,6.622,1896,5.162,1897,5.162,1898,5.162,1899,5.162,1900,5.951,1901,5.162,1902,5.162,1903,5.162,1904,3.441,1905,4.562,1906,3.273]],["title/controllers/KeyController.html",[338,1.374,1480,3.349]],["body/controllers/KeyController.html",[3,0.116,4,0.097,5,0.087,7,0.651,12,0.219,15,2.017,16,0.894,18,0.637,19,0.316,20,0.009,21,1.862,22,2.324,29,0.352,33,0.684,47,2.988,64,4.023,65,3.072,73,0.116,74,0.138,80,1.419,83,3.307,87,1.237,88,2.259,103,1.343,104,1.643,113,1.864,127,2.252,130,1.715,141,2.206,142,1.487,144,2.572,146,1.999,184,2.415,185,1.343,187,3.321,205,3.682,256,0.006,298,0.006,306,1.572,308,0.579,338,1.453,340,1.679,342,1.487,346,1.813,448,3.54,498,2.285,515,1.718,516,3.848,528,4.107,587,2.533,740,2.631,757,1.913,1190,4.544,1331,4.759,1337,3.146,1338,2.992,1340,3.146,1343,3.146,1344,3.146,1351,3.81,1480,5.749,1481,4.171,1524,4.273,1906,4.859,1907,4.171,1908,5.122,1909,7.167,1910,6.344,1911,5.607,1912,4.719,1913,4.719,1914,4.719,1915,4.719,1916,4.719,1917,4.719,1918,3.325,1919,4.777,1920,4.171,1921,3.81,1922,3.81,1923,4.719,1924,4.719,1925,4.719,1926,6.344,1927,4.719,1928,4.719,1929,4.719,1930,4.719]],["title/classes/KeyImportDto.html",[74,0.131,1906,2.831]],["body/classes/KeyImportDto.html",[3,0.136,4,0.113,5,0.102,7,0.763,10,3.778,12,0.256,13,1.02,14,4.908,15,1.325,16,1.016,18,0.794,19,0.341,20,0.009,22,2.43,23,4.691,24,3.945,29,0.294,73,0.136,74,0.227,75,2.514,80,2.328,185,1.036,196,1.919,256,0.007,272,3.348,298,0.007,300,1.517,305,1.872,306,1.543,307,3.4,308,0.569,316,3.227,317,3.201,318,1.702,625,3.645,832,3.822,916,2.593,1176,4.463,1456,5.807,1522,4.147,1523,6.113,1524,4.543,1526,3.895,1527,4.147,1528,4.958,1529,5.279,1535,5.279,1537,2.767,1892,6.249,1893,4.463,1894,4.147,1895,4.886,1900,4.886,1904,3.685,1905,6.219,1906,4.462,1931,5.528,1932,5.528]],["title/modules/KeyModule.html",[355,1.342,372,3.145]],["body/modules/KeyModule.html",[3,0.126,4,0.105,5,0.094,20,0.009,29,0.379,33,0.741,34,2.593,35,1.503,47,3.109,48,2.399,60,1.469,73,0.164,74,0.15,103,1.398,104,1.534,113,1.966,130,1.097,133,4.244,256,0.006,298,0.006,308,0.413,342,1.199,355,2.243,357,2.193,362,2.56,363,2.56,368,3.466,372,5.256,383,2.258,384,5.021,385,4.053,386,3.098,397,4.461,399,3.837,412,2.968,413,3.098,448,3.837,449,4.129,451,4.129,598,3.098,599,2.87,971,3.243,994,3.349,995,3.837,1193,3.139,1194,4.972,1458,4.972,1485,4.521,1495,5.403,1496,5.021,1804,4.461,1805,2.852,1919,4.461,1920,5.915,1933,4.129,1934,7.459,1935,5.115,1936,7.459,1937,6.692,1938,5.915,1939,5.115,1940,5.915,1941,7.258,1942,6.161,1943,4.129,1944,5.115,1945,5.915,1946,4.521,1947,4.521,1948,3.837,1949,4.521,1950,4.521,1951,4.521,1952,4.521,1953,4.521,1954,6.022,1955,6.692,1956,5.115]],["title/classes/KeyObj.html",[74,0.131,1918,3.145]],["body/classes/KeyObj.html",[0,1.187,3,0.104,4,0.087,5,0.078,7,0.584,10,4.132,12,0.196,13,0.853,14,4.293,15,1.96,18,0.806,19,0.36,20,0.009,21,3.037,22,2.431,23,4.88,24,3.545,25,3.545,26,2.813,29,0.349,33,0.613,34,2.084,35,1.243,46,2.981,73,0.145,74,0.173,87,1.109,88,2.242,103,1.103,113,1.73,127,1.99,130,1.57,136,2.455,145,3.174,146,2.702,184,2.73,187,2.323,225,4.036,231,4.293,235,1.544,238,2.981,244,1.626,256,0.005,298,0.005,300,1.161,308,0.547,310,2.048,572,1.867,631,4.417,675,2.455,829,2.191,832,3.834,880,2.048,915,3.929,970,2.204,971,2.682,979,4.148,983,1.867,994,2.946,1005,2.562,1157,2.191,1200,2.359,1300,3.283,1403,3.174,1438,3.174,1446,2.82,1450,3.174,1537,2.117,1579,3.174,1605,3.174,1745,5.467,1906,3.733,1918,4.148,1919,2.82,1921,3.415,1922,3.415,1943,3.415,1954,3.415,1957,3.415,1958,4.23,1959,4.23,1960,4.23,1961,2.82,1962,3.924,1963,5.203,1964,7.657,1965,3.174,1966,3.739,1967,3.739,1968,3.739,1969,3.739,1970,3.739,1971,5.984,1972,3.739,1973,3.739,1974,3.739,1975,3.739]],["title/classes/KeyService.html",[74,0.131,1919,2.976]],["body/classes/KeyService.html",[0,1.345,3,0.078,4,0.065,5,0.059,7,0.439,10,3.442,12,0.148,14,2.02,15,1.892,16,1.031,18,0.825,19,0.385,20,0.009,21,2.53,22,2.407,23,4.583,24,2.321,25,2.321,26,1.842,29,0.341,33,0.461,34,2.223,35,0.936,46,3.377,73,0.118,74,0.141,87,1.257,88,2.056,103,0.898,113,1.693,127,2.122,130,1.827,136,2.781,145,3.595,146,2.82,184,2.791,185,1.55,187,2.53,225,4.252,231,2.02,235,1.162,238,2.244,244,1.224,256,0.004,285,2.398,298,0.004,300,0.874,308,0.669,310,2.79,342,1.124,515,1.983,572,2.116,631,4.323,675,1.848,807,1.776,820,5.832,829,1.65,832,3.515,880,1.542,915,4.192,970,1.193,971,2.02,979,4.517,983,1.406,994,3.208,1005,2.903,1078,3.595,1157,1.65,1200,2.672,1300,1.776,1403,2.389,1438,3.595,1446,3.195,1450,3.595,1537,1.594,1579,4.323,1605,2.389,1745,5.55,1906,4.065,1911,4.236,1918,2.244,1919,3.195,1921,2.571,1922,2.571,1943,2.571,1954,4.652,1957,2.571,1961,2.123,1962,4.273,1963,5.666,1964,8.025,1965,3.595,1966,4.236,1967,4.236,1968,4.236,1969,4.236,1970,4.236,1971,6.974,1972,4.236,1973,2.815,1974,2.815,1975,2.815,1976,4.792,1977,4.792,1978,3.185,1979,3.185,1980,3.185,1981,3.185,1982,3.185,1983,5.762,1984,3.185,1985,3.185,1986,3.185,1987,3.185,1988,3.185,1989,3.185,1990,3.185,1991,3.185]],["title/injectables/LoggerConfigService.html",[30,0.837,1992,3.349]],["body/injectables/LoggerConfigService.html",[0,1.18,3,0.144,4,0.086,5,0.077,7,0.58,12,0.195,13,0.849,16,0.731,18,0.6,19,0.297,20,0.009,27,5.022,29,0.245,30,1.098,33,0.609,34,2.448,35,1.235,60,1.938,65,2.838,73,0.144,74,0.123,80,2.542,87,1.102,91,1.783,103,1.56,104,0.964,127,1.722,128,4.13,130,1.836,132,3.377,185,1.098,196,2.035,207,2.513,247,2.253,256,0.005,298,0.005,308,0.706,342,1.374,411,4.732,427,4.732,428,4.732,429,4.732,438,3.394,439,2.962,440,3.394,441,3.394,443,5.477,444,3.069,450,4.732,452,3.268,458,5.448,515,1.405,757,1.705,798,1.574,807,2.344,1023,4.071,1133,2.44,1189,3.154,1193,2.749,1347,1.856,1992,4.397,1993,7.102,1994,6.453,1995,6.453,1996,6.453,1997,6.453,1998,6.453,1999,6.453,2000,6.453,2001,5.861,2002,6.453,2003,6.453,2004,5.861,2005,4.204,2006,5.76,2007,4.204,2008,4.204,2009,7.028,2010,4.204,2011,4.204,2012,4.204,2013,4.204,2014,5.18,2015,4.204,2016,4.204,2017,5.18,2018,5.18,2019,4.13,2020,4.204,2021,5.18,2022,4.13,2023,5.18,2024,5.18,2025,5.18,2026,5.18,2027,5.18,2028,5.18,2029,3.715,2030,3.715,2031,5.477,2032,3.715,2033,5.18,2034,5.063,2035,3.715,2036,3.715,2037,3.715,2038,3.715,2039,3.715,2040,3.715,2041,3.715]],["title/interfaces/LoggerConfiguration.html",[0,1.253,2006,3.349]],["body/interfaces/LoggerConfiguration.html",[0,1.365,2,2.281,3,0.159,4,0.099,5,0.09,12,0.225,13,0.938,18,0.432,19,0.356,20,0.009,27,5.219,29,0.271,30,1.213,33,0.705,34,2.24,35,1.429,60,1.396,65,2.354,73,0.159,74,0.143,80,2.188,91,1.631,103,1.614,104,1.115,127,1.429,128,3.426,132,3.641,196,1.688,207,2.085,247,2.488,256,0.006,298,0.006,411,3.926,427,5.226,428,5.226,429,5.226,438,3.926,439,3.426,440,3.926,441,3.926,443,6.06,444,3.528,450,6.521,452,2.711,458,6.521,757,1.972,1023,3.609,1133,2.822,1189,3.648,1193,2.281,1347,2.147,1992,3.648,1993,3.926,1994,4.298,1995,4.298,1996,4.298,1997,4.298,1998,4.298,1999,4.298,2000,4.298,2002,4.298,2003,4.298,2006,5.819,2009,7.341,2014,4.298,2017,4.298,2018,4.298,2019,3.426,2021,4.298,2022,3.426,2023,4.298,2024,7.139,2025,7.139,2026,7.139,2027,5.721,2028,5.721,2029,4.298,2030,4.298,2031,5.819,2032,4.298,2033,5.721,2034,5.458,2035,4.298,2036,4.298,2037,4.298,2038,4.298,2039,4.298,2040,4.298,2041,4.298]],["title/modules/MetricModule.html",[355,1.342,373,3.145]],["body/modules/MetricModule.html",[3,0.166,4,0.138,5,0.125,20,0.009,29,0.333,33,0.981,73,0.166,74,0.199,128,4.768,132,3.387,205,3.927,244,2.601,256,0.007,298,0.007,355,2.395,357,2.902,373,5.612,383,2.988,510,3.277,603,4.291,604,4.511,693,4.768,1006,5.077,2042,6.767,2043,6.767,2044,6.767,2045,6.767,2046,6.767]],["title/classes/NotificationRequestDto.html",[74,0.131,2047,3.145]],["body/classes/NotificationRequestDto.html",[3,0.16,4,0.134,5,0.12,12,0.303,13,1.13,18,0.694,19,0.344,20,0.009,29,0.326,73,0.16,74,0.229,256,0.007,298,0.007,300,1.791,306,1.71,307,3.204,308,0.63,318,2.01,776,3.955,792,5.772,796,5.772,1045,4.649,1166,3.955,1904,4.353,2047,5.494,2048,7.369,2049,8.337,2050,6.731,2051,7.798,2052,7.798]],["title/classes/Oauth2AuthorizationServerResponse.html",[74,0.131,2053,3.145]],["body/classes/Oauth2AuthorizationServerResponse.html",[3,0.115,4,0.096,5,0.086,7,0.645,11,1.69,12,0.217,13,0.913,18,0.807,19,0.381,20,0.009,22,1.69,27,3.657,28,5.088,73,0.115,74,0.137,76,4.871,83,2.36,85,3.817,100,2.422,114,4.329,189,1.342,256,0.006,298,0.006,300,1.282,308,0.699,319,3.868,328,4.84,334,3.544,444,2.866,510,4.232,624,2.712,722,5.378,730,6.163,855,2.814,856,5.35,858,5.35,860,5.35,863,5.35,866,5.35,867,5.35,869,5.35,871,5.35,897,4.728,980,3.514,1297,5.542,1300,2.605,1312,4.098,1440,5.378,1520,3.996,1538,3.657,1811,4.13,2053,4.44,2054,7.726,2055,4.673,2056,4.673,2057,8.211,2058,4.673,2059,5.57,2060,4.673,2061,3.772,2062,4.673,2063,4.673,2064,5.57,2065,6.302,2066,4.13]],["title/classes/OfferRequestDto.html",[74,0.131,1737,2.831]],["body/classes/OfferRequestDto.html",[3,0.136,4,0.113,5,0.102,7,0.971,11,1.483,12,0.256,13,1.02,16,1.016,18,0.777,19,0.385,20,0.009,22,1.483,29,0.324,51,2.593,73,0.173,74,0.227,92,3.748,189,2.021,256,0.007,298,0.007,300,1.517,306,1.787,307,2.975,308,0.659,312,4.099,316,2.933,317,3.521,318,1.702,346,2.125,632,3.685,719,1.742,776,3.348,784,4.908,794,4.463,945,3.924,946,4.492,1060,2.593,1113,4.958,1133,3.208,1178,5.279,1737,4.462,1740,3.348,1750,5.16,1751,4.463,1752,4.908,1762,4.958,1904,3.685,2067,6.793,2068,6.249,2069,5.528,2070,4.886,2071,5.528,2072,5.279,2073,5.528,2074,5.528,2075,4.886,2076,5.528,2077,4.463]],["title/classes/OfferResponse.html",[74,0.131,1740,2.704]],["body/classes/OfferResponse.html",[3,0.147,4,0.122,5,0.11,7,0.825,11,1.604,12,0.277,13,1.071,18,0.791,19,0.354,20,0.009,22,1.604,29,0.336,51,2.806,73,0.182,74,0.236,92,2.897,189,1.718,256,0.007,298,0.007,300,1.641,307,2.842,308,0.598,312,3.932,316,3.082,317,3.65,318,1.841,346,2.299,719,2.529,776,3.623,784,3.793,945,3.336,946,3.472,1060,3.764,1113,5.21,1133,3.472,1178,5.547,1737,3.793,1740,4.478,1750,4.929,1751,4.83,1752,4.688,1762,5.21,1904,3.988,2067,6.479,2068,4.83,2072,4.488,2077,4.83,2078,5.982,2079,5.287]],["title/controllers/Oid4vciController.html",[338,1.374,1788,3.349]],["body/controllers/Oid4vciController.html",[3,0.115,4,0.096,5,0.086,7,0.646,11,2.253,12,0.217,16,0.787,19,0.337,20,0.009,29,0.369,33,0.679,51,2.198,73,0.115,74,0.138,85,3.824,88,1.732,95,3.824,103,1.338,104,1.074,130,1.639,131,1.772,154,2.139,182,2.427,184,1.99,185,1.338,187,3.243,237,2.516,243,4.825,244,2.427,254,3.302,256,0.006,298,0.006,306,1.385,308,0.51,330,1.801,336,4.761,338,2.198,340,1.667,342,1.48,345,2.971,346,1.801,498,2.269,510,3.863,515,1.514,516,2.516,644,2.139,657,3.738,663,2.456,719,2.896,738,3.124,740,2.613,741,2.516,749,4.761,750,3.515,751,2.269,752,2.971,753,3.515,754,3.124,755,3.515,757,1.9,923,2.516,925,3.515,1166,2.838,1184,3.39,1347,2.069,1364,4.004,1747,4.325,1748,3.783,1784,2.838,1788,4.737,1797,3.124,1799,3.515,2047,5.384,2080,4.141,2081,4.686,2082,5.581,2083,4.686,2084,4.686,2085,4.686,2086,5.581,2087,4.686,2088,4.686,2089,4.686,2090,4.141,2091,4.141,2092,4.141,2093,2.971,2094,4.686,2095,3.783,2096,5.098,2097,4.686,2098,4.141,2099,4.686,2100,4.141,2101,4.686,2102,4.686,2103,4.686,2104,4.686,2105,4.686,2106,4.686,2107,4.686,2108,4.686]],["title/injectables/Oid4vciService.html",[30,0.837,1747,2.704]],["body/injectables/Oid4vciService.html",[3,0.056,4,0.047,5,0.042,11,2.003,12,0.247,13,0.534,15,1.505,16,0.731,18,0.65,19,0.336,20,0.009,21,1.833,29,0.35,30,0.691,32,3.98,33,0.33,34,2.034,35,0.669,47,2.755,48,1.068,51,1.729,55,2.139,57,1.838,60,0.654,61,1.729,62,1.838,73,0.056,74,0.067,75,1.035,80,2.196,87,0.966,88,1.011,91,0.826,103,1,104,1.995,108,1.604,113,2.146,129,2.337,130,1.258,131,0.639,141,2.383,142,2.535,144,0.923,146,2.083,154,1.573,155,1.494,184,1.978,185,1.099,187,2.608,189,0.654,207,1.991,235,2.511,237,1.979,243,3.27,244,1.416,247,2.644,254,1.604,256,0.003,264,1.222,266,1.838,273,1.838,281,1.379,285,1.845,291,2.337,293,1.517,294,1.443,298,0.003,308,0.575,325,0.852,334,2.165,335,1.102,336,3.096,342,0.864,452,2.055,474,2.055,477,2.597,479,2.866,480,1.883,508,1.604,510,1.785,515,1.406,528,2.944,553,3.272,565,2.405,626,2.232,644,0.771,651,1.222,652,1.845,654,1.321,657,1.676,663,1.135,672,2.945,677,1.379,719,2.722,725,1.517,741,1.222,742,2.977,745,3.2,746,1.443,751,1.102,757,2.961,781,3.559,798,0.852,809,3.548,814,2.765,829,1.909,830,2.765,831,3.484,834,2.765,835,1.517,836,1.517,839,1.517,850,2.813,851,3.403,853,2.977,855,2.107,880,2.585,887,2.597,889,3.761,892,1.708,903,1.58,912,1.708,920,2.765,942,1.604,945,2.055,946,1.321,969,1.708,985,3.749,1023,1.269,1060,1.068,1062,1.838,1133,1.321,1140,1.838,1145,1.179,1166,1.379,1184,3.37,1193,1.068,1214,1.604,1260,2.232,1273,1.379,1301,2.012,1302,2.012,1303,2.012,1304,1.838,1305,2.012,1306,3.258,1307,2.976,1308,2.012,1323,2.012,1338,1.443,1346,4.423,1365,1.838,1373,4.105,1382,2.976,1384,2.945,1474,3.258,1643,1.838,1667,1.604,1737,3.385,1740,2.232,1747,2.232,1777,4.587,1785,3.098,1786,4.002,1789,2.012,1797,2.457,1798,1.604,1803,1.708,1806,1.838,1822,2.813,1853,2.012,2047,3.761,2068,2.976,2091,2.012,2092,2.012,2093,2.945,2109,2.012,2110,5.864,2111,4.644,2112,4.644,2113,2.276,2114,3.686,2115,3.686,2116,2.276,2117,2.276,2118,2.276,2119,2.276,2120,2.276,2121,2.276,2122,3.686,2123,3.258,2124,2.276,2125,2.276,2126,2.276,2127,5.338,2128,2.276,2129,5.338,2130,2.276,2131,3.686,2132,2.276,2133,2.276,2134,4.718,2135,1.838,2136,2.276,2137,2.945,2138,2.597,2139,2.276,2140,2.276,2141,3.686,2142,2.276,2143,2.276,2144,4.105,2145,2.276,2146,2.276,2147,2.276,2148,2.276,2149,2.139,2150,2.276,2151,2.276,2152,2.276,2153,2.012,2154,4.644,2155,2.276,2156,2.276,2157,2.276,2158,2.276,2159,2.276,2160,3.686,2161,2.276,2162,2.276,2163,2.276,2164,4.718,2165,2.276,2166,2.012,2167,1.838,2168,5.338,2169,2.276,2170,2.276,2171,2.276,2172,3.686,2173,2.276,2174,3.686,2175,2.276,2176,2.276,2177,4.718,2178,3.686,2179,3.686,2180,3.686,2181,3.686,2182,3.686,2183,3.686,2184,3.686,2185,3.686,2186,4.399,2187,2.597,2188,2.765,2189,2.276,2190,2.012,2191,5.864,2192,2.276,2193,2.276,2194,2.276,2195,2.276,2196,2.276,2197,2.012,2198,2.276,2199,3.686,2200,2.276,2201,2.276,2202,2.276,2203,2.276,2204,2.276,2205,2.276,2206,2.276,2207,2.276,2208,6.276,2209,2.276,2210,2.976,2211,3.686,2212,2.012,2213,2.276,2214,2.012,2215,2.276,2216,2.276,2217,2.276,2218,4.105,2219,2.276,2220,2.276,2221,2.012,2222,2.276,2223,2.276,2224,4.644,2225,2.276,2226,4.644,2227,2.276,2228,2.276,2229,2.276,2230,2.012,2231,2.276,2232,2.276,2233,2.276,2234,2.012,2235,2.276,2236,2.276,2237,2.276,2238,1.517,2239,2.276,2240,2.012]],["title/controllers/Oid4vpController.html",[338,1.374,2241,3.349]],["body/controllers/Oid4vpController.html",[3,0.12,4,0.1,5,0.09,7,0.675,11,1.743,12,0.227,16,0.81,19,0.286,20,0.009,29,0.365,33,0.709,73,0.12,74,0.144,85,3.935,87,1.282,88,2.133,89,3.26,94,3.446,95,4.419,96,4.875,103,1.218,130,1.784,131,1.824,185,1.367,187,3.194,189,1.866,210,3.26,244,1.88,250,4.93,256,0.006,298,0.006,306,1.425,308,0.525,319,2.709,330,1.88,338,2.246,340,1.74,342,1.523,345,3.101,346,1.88,498,2.368,510,3.146,515,1.558,516,2.626,531,2.838,659,4.315,704,5.478,719,2.893,740,2.727,749,4.331,750,3.669,751,2.368,752,3.101,753,3.669,754,3.26,755,3.669,757,1.983,808,4.513,923,3.489,1200,3.623,1347,2.159,1364,4.12,1784,2.962,1797,4.331,1799,3.669,2082,5.743,2090,4.323,2093,3.101,2095,3.949,2096,5.246,2098,4.323,2100,5.743,2241,5.474,2242,4.323,2243,6.498,2244,6.449,2245,4.891,2246,4.891,2247,4.891,2248,4.323,2249,4.891,2250,4.891,2251,4.578,2252,4.323,2253,4.323,2254,4.891,2255,4.323,2256,4.891,2257,4.891,2258,4.891,2259,4.891,2260,4.891]],["title/modules/Oid4vpModule.html",[355,1.342,1783,2.831]],["body/modules/Oid4vpModule.html",[3,0.131,4,0.109,5,0.098,20,0.009,29,0.377,33,0.772,73,0.131,74,0.156,256,0.006,298,0.006,340,2.445,355,2.287,357,2.284,358,2.579,359,2.759,360,2.759,361,2.498,362,3.806,363,3.806,368,4.412,374,5.158,375,5.158,378,3.559,379,2.759,380,2.665,383,3.033,386,3.226,394,3.996,404,3.996,808,5.052,1783,5.906,1784,5.158,1785,4.943,1786,5.158,1797,4.58,1798,3.753,1799,3.996,1803,3.996,1804,4.58,1805,2.97,2241,5.706,2252,4.707,2261,4.707,2262,4.707,2263,4.707,2264,4.707,2265,5.401,2266,5.326,2267,5.326,2268,4.707]],["title/injectables/Oid4vpService.html",[30,0.837,808,2.489]],["body/injectables/Oid4vpService.html",[3,0.064,4,0.053,5,0.048,9,2.286,11,1.993,12,0.121,15,0.624,16,0.718,18,0.642,19,0.254,20,0.009,22,0.698,24,1.26,29,0.349,30,0.768,33,0.377,34,2.145,35,0.764,47,2.776,48,1.22,51,1.22,52,4.045,60,0.747,61,1.22,63,4.045,73,0.064,74,0.076,80,2.172,87,1.075,88,1.981,92,3.035,97,2.733,98,2.6,103,0.768,104,1.941,113,1.491,114,1.26,124,1.148,127,0.764,130,1.344,141,2.288,142,2.522,146,2.398,154,2.123,155,1.663,177,2.483,182,1.347,184,1.815,185,1.08,186,2.1,187,1.618,189,1.654,219,1.451,225,1.986,227,4.059,234,1.986,235,1.852,244,1.951,245,3.808,247,2.775,250,4.712,255,1.833,256,0.004,264,3.093,278,1.833,285,2.052,291,2.6,298,0.004,305,0.881,308,0.466,310,2.458,319,2.613,325,1.535,330,1,334,2.058,335,1.26,342,0.961,452,3.212,474,2.286,512,3.269,515,1.596,531,2.38,538,2.733,553,2.889,565,2.124,572,1.148,622,1.833,626,2.483,627,3.311,652,2.54,657,1.183,659,3.332,704,4.059,719,2.649,738,2.733,739,1.734,745,3.375,746,1.65,751,1.26,762,1.576,777,1.833,784,1.65,798,0.974,808,2.286,829,1.347,850,3.074,851,2.38,853,4.144,864,2.984,880,1.26,903,2.47,916,1.923,923,2.202,952,1.451,988,4.221,989,2.1,992,2.1,1060,1.22,1157,1.347,1183,2.889,1193,1.22,1202,1.734,1377,2.299,1422,1.833,1424,2.1,1427,1.734,1428,2.1,1445,3.624,1450,4.321,1524,1.451,1538,1.51,1565,2.299,1573,2.299,1740,1.576,1785,3.343,1786,4.221,1797,2.733,1798,1.833,1803,1.952,1822,3.796,1868,2.299,2093,3.218,2134,3.624,2135,2.1,2137,3.218,2149,1.51,2153,3.624,2166,2.299,2186,4.702,2187,2.889,2188,3.076,2190,3.624,2197,5.54,2210,2.1,2212,2.299,2214,2.299,2221,3.624,2244,3.624,2248,3.624,2253,2.299,2269,2.299,2270,4.1,2271,5.075,2272,2.601,2273,4.1,2274,2.601,2275,3.311,2276,3.076,2277,2.601,2278,4.321,2279,2.601,2280,2.601,2281,4.1,2282,2.601,2283,2.601,2284,2.1,2285,2.601,2286,2.601,2287,2.299,2288,6.267,2289,5.76,2290,4.1,2291,4.1,2292,6.267,2293,2.601,2294,2.601,2295,3.311,2296,2.601,2297,2.601,2298,2.299,2299,2.601,2300,2.601,2301,2.601,2302,2.601,2303,6.267,2304,2.601,2305,2.601,2306,2.601,2307,2.601,2308,2.601,2309,2.601,2310,2.601,2311,2.601,2312,2.601,2313,2.601,2314,2.601,2315,4.1,2316,2.601,2317,2.601,2318,2.601,2319,2.601,2320,2.601,2321,2.601,2322,2.299,2323,2.1,2324,1.952,2325,2.299,2326,2.601,2327,1.952,2328,2.1,2329,2.601,2330,2.601,2331,4.1,2332,2.601,2333,2.299,2334,4.1,2335,2.299,2336,2.601,2337,2.299,2338,2.299,2339,2.601,2340,2.601,2341,2.601,2342,2.601,2343,5.76,2344,4.1,2345,4.1,2346,2.601,2347,2.601,2348,2.601,2349,2.601,2350,4.1,2351,2.601,2352,2.601,2353,2.601,2354,2.601,2355,2.601,2356,4.1,2357,2.601,2358,2.601,2359,4.1,2360,2.601,2361,5.075,2362,2.601,2363,4.1,2364,2.601,2365,4.1,2366,4.1,2367,2.601,2368,2.601,2369,2.601,2370,2.601,2371,2.601,2372,2.601,2373,2.601,2374,2.601,2375,2.601]],["title/classes/ParResponseDto.html",[74,0.131,747,3.349]],["body/classes/ParResponseDto.html",[3,0.159,4,0.133,5,0.119,11,2.398,12,0.3,13,1.125,18,0.69,19,0.342,20,0.009,73,0.159,74,0.19,165,4.167,256,0.007,298,0.007,300,1.778,308,0.627,319,3.236,545,6.234,581,6.86,624,3.76,730,6.267,747,5.823,762,5.033,1060,4.041,2061,5.231,2066,5.727,2230,6.86,2376,7.345,2377,7.762]],["title/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.253,842,3.145]],["body/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.205,2,1.295,3,0.068,4,0.056,5,0.051,11,1.976,12,0.128,13,0.622,18,0.688,19,0.301,20,0.009,21,1.089,29,0.343,30,0.805,33,0.4,34,1.623,35,0.811,38,1.295,47,2.198,48,1.295,51,1.295,60,1.233,73,0.106,74,0.081,80,2.053,87,0.724,91,0.963,92,2.08,101,1.061,103,1.279,104,2.009,107,1.672,113,2.274,114,1.336,124,2.328,131,1.48,141,2.101,142,2.613,146,2.246,153,1.336,154,0.935,155,2.768,158,2.723,184,0.87,187,2.544,189,2.046,207,1.184,232,1.945,234,2.881,235,2.689,243,1.539,244,2.026,247,2.026,253,1.602,256,0.004,298,0.004,302,2.198,305,0.935,319,1.79,323,3.603,325,2.228,330,2.287,333,1.742,334,2.412,335,1.336,337,2.831,477,3.715,479,2.831,510,1.336,512,2.473,552,3.026,565,1.43,578,1.75,626,2.601,635,2.764,644,1.786,651,1.482,654,1.602,655,2.493,656,3.805,657,1.255,659,1.381,663,1.322,666,1.295,672,2.723,680,1.84,714,2.071,718,3.603,719,2.694,722,1.945,725,2.863,726,3.026,738,3.515,739,1.84,741,1.482,742,1.539,744,2.071,745,2.553,746,1.75,751,1.336,762,3.193,777,4.192,781,1.84,799,2.071,802,2.228,804,2.228,806,2.228,808,2.94,809,2.831,812,2.071,814,4.836,815,2.228,817,4.803,821,2.228,825,2.228,829,3.339,830,5.121,831,4.463,832,2.791,833,2.228,834,4.463,835,1.84,836,1.84,837,2.228,838,2.228,839,1.84,840,2.228,841,2.228,842,3.715,843,5.204,844,3.026,845,2.228,846,2.228,847,3.468,848,2.228,849,3.468,850,1.672,851,2.493,852,4.803,853,3.317,854,2.228,855,2.081,856,2.071,857,2.228,858,2.071,859,2.228,860,2.071,861,2.228,862,2.228,863,2.071,864,2.225,865,1.75,866,2.071,867,2.071,868,2.228,869,2.071,870,2.228,871,2.071,872,2.228,873,2.228,874,2.228,875,3.468,876,2.228,877,2.071,878,2.228,879,2.228,880,3.45,881,2.228,882,2.228,883,2.228,884,2.228,885,2.228,886,4.257,887,3.715,888,2.228,889,4.192,890,2.228,891,2.228,892,2.071,893,2.228,894,2.228,895,4.803,896,3.468,897,5.346,898,2.228,899,3.468,900,3.468,901,3.468,902,3.468,903,1.842,904,3.468,905,2.228,906,2.228,907,2.228,908,2.228,909,2.228,910,2.228,911,2.228,912,3.222,913,2.228,914,2.228,915,1.602,916,1.295,917,2.228,918,2.228,919,2.228,920,2.071,921,2.228,922,2.071,923,1.482,924,3.222,925,2.071,926,2.228,927,4.257,928,2.228,929,2.228,930,2.228,931,2.228,932,2.228,933,2.071,934,3.468,935,2.228,936,3.222,937,2.071,938,2.228,939,4.257,940,2.228,941,2.228,942,1.945,943,2.228,944,2.228,945,1.539,946,2.493,947,1.945,948,2.228,949,1.75,950,2.228,951,2.228,952,1.539,953,2.228,954,2.228,955,2.228,956,2.228,957,2.228,958,2.228,959,2.071,960,1.945,961,2.071,962,2.071,963,2.228,964,2.228,965,2.228,966,2.071,967,2.228,968,2.228,969,2.071]],["title/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.253,844,3.145]],["body/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.198,2,1.285,3,0.067,4,0.056,5,0.05,11,1.971,12,0.127,13,0.619,16,0.532,18,0.711,19,0.313,20,0.009,21,1.081,29,0.343,30,0.8,33,0.397,34,1.615,35,0.805,38,1.285,47,2.188,48,1.285,51,1.285,60,1.226,73,0.105,74,0.08,80,2.046,87,0.718,91,0.958,92,2.068,101,1.053,103,1.275,104,2.007,107,1.659,113,2.269,114,1.327,124,2.317,131,1.473,141,2.095,142,2.609,146,2.24,153,1.327,154,0.928,155,2.759,158,2.708,184,0.863,187,2.535,189,2.041,207,1.175,232,1.93,234,2.869,235,2.683,243,1.528,244,2.017,247,2.017,253,1.59,256,0.004,298,0.004,302,2.188,305,0.928,319,1.78,323,3.589,325,2.219,330,2.277,333,1.732,334,2.403,335,1.327,337,2.818,477,3.697,479,2.818,510,1.327,512,2.461,552,3.009,565,1.419,578,1.737,626,2.586,635,2.755,644,1.777,651,1.471,654,1.59,655,2.478,656,3.622,657,1.246,659,1.371,663,1.315,666,1.285,672,2.708,680,1.826,714,2.055,718,3.589,719,2.691,722,1.93,725,2.847,726,3.009,738,3.498,739,1.826,741,1.471,742,1.528,744,2.055,745,2.541,746,1.737,751,1.327,762,3.178,777,4.175,781,1.826,799,2.055,802,2.212,804,2.212,806,2.212,808,2.926,809,2.818,812,2.055,814,4.819,815,2.212,817,4.784,821,2.212,825,2.212,829,3.327,830,4.446,831,4.446,832,2.779,833,2.212,834,5.105,835,1.826,836,1.826,837,2.212,838,2.212,839,1.826,840,2.212,841,2.212,842,3.009,843,5.186,844,3.697,845,4.784,846,4.784,847,3.448,848,2.212,849,3.448,850,1.659,851,2.478,852,4.784,853,3.304,854,2.212,855,2.071,856,2.055,857,2.212,858,2.055,859,2.212,860,2.055,861,2.212,862,2.212,863,2.055,864,2.212,865,1.737,866,2.055,867,2.055,868,2.212,869,2.055,870,2.212,871,2.055,872,2.212,873,2.212,874,2.212,875,3.448,876,2.212,877,2.055,878,2.212,879,2.212,880,3.441,881,2.212,882,2.212,883,2.212,884,2.212,885,2.212,886,4.237,887,3.697,888,2.212,889,4.175,890,2.212,891,2.212,892,2.055,893,2.212,894,2.212,895,4.784,896,3.448,897,5.331,898,2.212,899,3.448,900,3.448,901,3.448,902,3.448,903,1.831,904,3.448,905,2.212,906,2.212,907,2.212,908,2.212,909,2.212,910,2.212,911,2.212,912,3.204,913,2.212,914,2.212,915,1.59,916,1.285,917,2.212,918,2.212,919,2.212,920,2.055,921,2.212,922,2.055,923,1.471,924,3.204,925,2.055,926,2.212,927,4.237,928,2.212,929,2.212,930,2.212,931,2.212,932,2.212,933,2.055,934,3.448,935,2.212,936,3.204,937,2.055,938,2.212,939,4.237,940,2.212,941,2.212,942,1.93,943,2.212,944,2.212,945,1.528,946,2.478,947,1.93,948,2.212,949,1.737,950,2.212,951,2.212,952,1.528,953,2.212,954,2.212,955,2.212,956,2.212,957,2.212,958,2.212,959,2.055,960,1.93,961,2.055,962,2.055,963,2.212,964,2.212,965,2.212,966,2.055,967,2.212,968,2.212,969,2.055]],["title/entities/PresentationConfig.html",[952,2.489,970,1.672]],["body/entities/PresentationConfig.html",[3,0.115,4,0.095,5,0.086,7,0.643,10,3.377,11,2.382,12,0.216,13,0.911,15,1.909,16,0.951,18,0.678,19,0.37,20,0.009,25,3.046,26,2.418,29,0.333,49,4.747,51,2.186,72,4.432,73,0.115,74,0.185,91,1.41,98,3.989,131,2.14,144,2.551,146,2.244,162,4.251,182,3.258,189,1.806,196,2.184,200,5.342,244,1.791,245,5.342,256,0.006,298,0.006,306,1.799,307,2.418,308,0.663,316,3.178,318,1.434,325,2.981,333,2.888,334,2.551,346,1.791,430,2.697,633,6.156,634,3.507,635,2.697,637,4.719,666,2.186,707,4.193,771,3.496,949,2.955,952,3.507,970,2.855,972,2.413,974,4.515,976,5.083,982,3.81,983,2.057,1073,4.193,1121,4.193,1124,4.133,1134,5.72,1135,4.118,1143,4.118,1277,3.283,1278,4.719,1364,3.989,1636,3.762,1637,4.118,1638,4.118,1639,4.118,1645,4.118,1647,4.118,1648,4.118,1650,5.56,2251,4.432,2295,5.749,2378,7.413,2379,4.66,2380,7.121,2381,4.66,2382,4.66,2383,5.56,2384,4.66]],["title/classes/PresentationDuringIssuance.html",[74,0.131,658,2.489]],["body/classes/PresentationDuringIssuance.html",[3,0.152,4,0.126,5,0.114,7,0.853,12,0.286,13,1.093,16,0.94,18,0.81,19,0.383,20,0.009,29,0.315,73,0.185,74,0.239,185,1.158,256,0.007,298,0.007,300,1.696,306,1.654,307,3.52,308,0.61,316,3.394,318,1.903,325,3.049,333,3.301,640,3.919,658,4.206,666,2.899,667,4.931,1132,4.783,1354,5.737,1813,4.637,2385,6.181,2386,6.181,2387,5.463,2388,5.463,2389,5.463]],["title/classes/PresentationDuringIssuanceConfig.html",[74,0.131,647,2.976]],["body/classes/PresentationDuringIssuanceConfig.html",[3,0.108,4,0.09,5,0.081,7,0.608,11,1.625,12,0.204,13,0.878,16,0.55,18,0.392,19,0.356,20,0.009,29,0.312,60,2.139,73,0.183,74,0.237,91,1.853,99,2.755,101,2.328,124,3.562,154,2.344,155,3.505,180,2.558,196,2.586,210,4.038,256,0.006,298,0.006,300,1.209,302,3.669,306,0.967,308,0.356,311,3.377,314,2.283,315,2.795,316,2.885,317,3.148,318,1.357,325,2.268,330,1.694,333,2.806,334,2.456,480,2.806,512,4.204,635,3.61,638,2.67,639,4.038,640,2.795,641,3.559,642,3.307,643,4.038,644,1.493,645,2.795,646,4.967,647,5.206,649,3.252,650,3.559,651,4,652,2.206,653,2.939,654,4.016,655,4.886,656,3.949,657,3.552,658,4.867,659,4.137,660,3.559,662,3.559,663,2.13,664,4.89,665,4.876,666,2.068,667,2.67,668,2.458,669,4.544,670,3.559,671,3.559,672,2.795,673,4.89,674,4.89,675,3.515,676,2.939,677,2.67,678,3.307,679,2.458,1669,3.896,2390,4.408]],["title/controllers/PresentationManagementController.html",[338,1.374,2391,3.349]],["body/controllers/PresentationManagementController.html",[3,0.09,4,0.075,5,0.068,7,0.508,11,2.156,12,0.171,15,1.75,16,0.857,18,0.612,19,0.376,20,0.009,24,1.783,29,0.353,33,0.533,51,2.502,52,3.64,60,1.975,73,0.09,74,0.108,80,1.604,83,2.575,87,0.965,88,2.003,91,1.707,92,1.783,99,2.426,100,1.415,101,1.415,103,1.176,104,1.223,130,1.757,141,1.931,142,1.681,185,1.289,187,3.098,189,2.353,197,3.382,198,3.231,234,3.535,237,2.864,244,1.415,250,3.382,256,0.005,285,2.67,298,0.005,305,1.807,306,1.508,308,0.556,311,2.974,312,1.727,325,1.379,335,1.783,338,1.133,340,1.31,342,1.251,346,1.415,444,2.853,480,3.487,483,3.64,498,1.783,503,4.307,515,1.649,516,3.368,518,2.335,519,4.307,520,4.002,528,4.034,536,4.002,541,2.163,587,1.977,635,3.514,656,2.942,740,2.053,741,1.977,757,2.163,764,2.973,784,3.382,808,3.497,952,3.835,1060,2.502,1131,3.096,1190,2.335,1199,3.556,1290,2.454,1317,2.23,1331,4.002,1337,2.454,1338,2.335,1340,2.454,1342,3.497,1343,3.556,1344,3.556,1582,2.762,1667,4.42,1735,5.544,1736,3.254,1738,3.254,1739,4.715,1740,3.799,1741,3.254,1746,2.973,1750,2.454,1752,3.977,1753,3.254,1754,3.254,1755,4.715,1756,2.594,1757,6.079,1758,3.254,1759,3.254,1760,5.064,1761,4.715,1762,3.758,1763,3.254,1769,3.254,1770,3.254,1771,3.254,1772,3.254,1773,3.254,1774,3.254,1775,3.254,1776,3.254,2284,2.973,2391,4.002,2392,3.254,2393,5.334,2394,5.544,2395,3.682,2396,3.682,2397,3.682,2398,3.682,2399,5.71,2400,3.682,2401,3.682,2402,3.682,2403,3.682,2404,3.682,2405,5.334,2406,3.254,2407,2.973,2408,3.682,2409,3.682,2410,3.682,2411,3.682,2412,3.682,2413,3.682,2414,3.682,2415,3.682,2416,3.682,2417,3.682,2418,3.682,2419,3.682,2420,3.682,2421,3.682,2422,3.682,2423,3.682,2424,3.682]],["title/classes/PresentationRequest.html",[74,0.131,2399,3.349]],["body/classes/PresentationRequest.html",[3,0.131,4,0.109,5,0.098,7,0.734,11,2.23,12,0.246,13,0.995,15,1.645,16,0.856,18,0.61,19,0.387,20,0.009,26,2.638,29,0.287,73,0.169,74,0.201,91,1.909,189,2.487,196,2.383,223,5.149,250,4.819,256,0.006,298,0.006,300,1.459,306,1.667,307,2.921,308,0.614,312,3.767,316,2.861,317,3.122,318,1.637,322,4.575,325,3.244,333,3.082,337,3.685,625,3.555,634,3.827,635,3.565,656,2.494,666,2.494,776,3.221,784,4.819,794,4.293,1060,3.565,1692,5.149,1750,5.066,1752,4.819,1760,4.293,1762,3.747,1904,3.545,2070,4.7,2072,3.989,2075,4.7,2077,5.541,2079,4.7,2251,4.836,2399,5.149,2425,6.025,2426,6.864]],["title/interfaces/PresentationRequestOptions.html",[0,1.253,2278,3.349]],["body/interfaces/PresentationRequestOptions.html",[0,1.764,2,2.948,3,0.154,4,0.129,5,0.116,7,0.867,11,2.2,12,0.291,13,1.104,16,1.13,18,0.729,19,0.336,20,0.009,26,2.929,29,0.263,73,0.154,91,1.709,189,2.188,256,0.007,298,0.007,325,3.324,333,3.457,625,3.947,666,2.948,719,2.798,2251,5.37,2278,6.397,2425,4.715,2427,5.555,2428,6.153]],["title/modules/PresentationsModule.html",[355,1.342,2265,2.831]],["body/modules/PresentationsModule.html",[3,0.145,4,0.121,5,0.109,20,0.009,29,0.375,33,0.855,52,5.331,73,0.145,74,0.173,256,0.007,298,0.007,340,2.608,355,2.398,357,2.529,358,2.856,359,3.055,360,3.055,361,2.766,362,3.991,363,3.991,378,3.796,379,3.055,380,2.952,383,3.235,598,3.572,599,2.529,952,3.289,1290,3.932,1783,4.647,1804,4.886,1805,3.289,2265,5.728,2391,5.982,2406,5.213,2407,4.762,2429,5.213,2430,5.213,2431,5.213,2432,5.213,2433,6.161,2434,5.898,2435,7.329,2436,5.898,2437,5.898,2438,5.213,2439,5.898]],["title/injectables/PresentationsService.html",[30,0.837,52,2.591]],["body/injectables/PresentationsService.html",[3,0.047,4,0.039,5,0.098,7,0.885,10,3.097,11,0.856,12,0.089,13,0.462,15,2.12,16,0.763,18,0.771,19,0.311,20,0.009,21,1.622,22,0.512,29,0.336,30,0.598,31,3.199,32,3.658,33,0.277,34,1.884,35,0.561,52,2.785,55,1.109,60,1.533,61,0.896,65,2.324,72,4.064,73,0.047,74,0.121,75,0.869,80,2.125,85,1.932,87,1.258,88,2.224,89,4.081,91,1.77,92,0.925,95,2.907,96,2.394,97,2.127,98,2.023,99,3.129,100,0.734,103,1.479,104,1.859,113,1.959,127,0.938,130,1.675,131,1.619,132,2.056,136,1.109,141,2.052,142,1.929,144,3.232,146,2.555,158,3.043,184,2.323,185,1.289,189,0.916,194,3.199,197,1.211,198,1.157,213,1.653,219,3.578,220,1.542,231,1.211,234,2.324,235,1.5,237,3.445,247,1.226,254,2.248,256,0.003,264,1.713,291,1.211,298,0.003,305,1.626,308,0.596,310,1.545,314,0.989,318,0.588,342,0.748,383,1.409,412,1.109,413,1.157,420,1.157,430,1.762,508,1.346,515,1.649,531,1.109,541,1.946,565,1.653,572,2.943,599,0.819,622,3.382,627,2.576,633,2.248,635,3.385,644,0.647,652,1.597,685,3.632,736,1.932,765,4.657,798,0.715,829,0.989,832,1.927,864,1.653,865,3.882,880,1.545,903,3.265,923,1.713,949,2.023,952,4.11,970,2.16,972,1.653,987,1.157,993,1.109,994,2.887,995,1.433,1023,1.065,1036,1.346,1038,1.932,1040,1.433,1045,1.779,1060,2.706,1124,1.109,1157,4.045,1158,3.882,1172,1.109,1190,3.043,1193,1.927,1194,3.199,1199,2.127,1200,1.779,1201,5.671,1202,1.273,1206,2.907,1207,2.023,1211,1.346,1214,2.248,1216,1.542,1217,1.542,1219,1.542,1220,1.542,1221,2.576,1223,3.317,1224,1.542,1225,1.542,1226,2.576,1227,1.542,1228,1.542,1229,1.542,1230,1.542,1231,3.317,1232,1.542,1233,1.433,1234,1.273,1235,1.542,1236,4.309,1237,2.394,1238,1.542,1239,1.542,1240,1.542,1241,2.576,1242,1.542,1244,2.576,1245,2.576,1246,1.433,1248,1.542,1249,1.688,1250,1.542,1251,1.346,1252,1.542,1253,1.433,1254,1.542,1255,1.542,1256,1.542,1257,1.542,1258,1.542,1259,1.542,1260,1.157,1262,1.346,1263,1.542,1290,1.273,1312,1.713,1364,2.023,1382,3.317,1392,3.632,1394,1.433,1395,1.433,1396,5.892,1397,1.433,1403,1.433,1414,2.82,1454,5.301,1457,5.836,1537,0.956,1557,1.688,1580,1.542,1805,1.065,1942,5.001,1961,1.273,1962,2.127,2022,2.248,2295,1.542,2394,2.82,2407,1.542,2440,1.688,2441,3.191,2442,6.416,2443,6.122,2444,4.109,2445,4.799,2446,3.191,2447,3.191,2448,4.109,2449,3.191,2450,1.542,2451,4.586,2452,4.799,2453,3.191,2454,2.82,2455,2.82,2456,3.191,2457,3.191,2458,1.91,2459,3.191,2460,3.191,2461,1.91,2462,1.91,2463,3.191,2464,1.91,2465,1.91,2466,3.191,2467,3.191,2468,1.91,2469,1.91,2470,5.337,2471,4.799,2472,1.91,2473,3.191,2474,3.191,2475,4.109,2476,3.191,2477,4.799,2478,1.91,2479,3.191,2480,1.91,2481,4.109,2482,1.91,2483,3.191,2484,3.191,2485,1.91,2486,3.191,2487,1.91,2488,2.82,2489,1.542,2490,1.346,2491,1.91,2492,1.91,2493,1.91,2494,3.191,2495,1.91,2496,1.91,2497,1.91,2498,3.191,2499,1.91,2500,1.91,2501,1.91,2502,1.91,2503,1.542,2504,1.91,2505,1.91,2506,1.91,2507,1.91,2508,1.91,2509,1.91,2510,1.91,2511,1.91,2512,1.91,2513,1.91,2514,1.91,2515,1.91,2516,1.91,2517,1.91,2518,1.91,2519,3.191,2520,1.91,2521,1.91,2522,1.91,2523,1.91,2524,1.91,2525,1.91,2526,1.91,2527,4.109,2528,1.91,2529,1.91,2530,1.91,2531,1.91,2532,2.576,2533,3.191,2534,1.91]],["title/classes/RegistrarConfig.html",[58,3.145,74,0.131]],["body/classes/RegistrarConfig.html",[3,0.158,4,0.132,5,0.119,7,0.889,9,4.313,10,4.153,12,0.299,13,1.121,15,2.165,16,1.072,18,0.765,19,0.341,20,0.009,58,5.841,59,4.539,69,6.245,73,0.158,74,0.227,91,1.445,127,1.893,179,5.803,256,0.007,298,0.007,300,1.767,308,0.625,1300,3.592,2535,7.327,2536,5.694,2537,8.289,2538,6.442,2539,6.442]],["title/modules/RegistrarModule.html",[355,1.342,374,2.704]],["body/modules/RegistrarModule.html",[3,0.135,4,0.112,5,0.101,7,0.756,20,0.009,29,0.351,33,0.794,59,5.433,63,5.325,64,4.439,65,3.389,73,0.172,74,0.161,98,4.439,104,1.257,109,4.113,111,4.113,127,2.057,256,0.007,298,0.007,330,2.107,355,2.443,357,3.307,358,2.655,359,2.84,360,2.84,361,2.572,362,3.859,363,3.859,368,4.446,374,5.535,378,3.626,379,2.84,380,2.744,383,3.586,385,4.239,386,3.321,393,4.113,425,4.113,1131,3.182,1172,3.182,1496,5.785,1677,5.651,2019,3.863,2265,5.442,2540,4.846,2541,4.846,2542,4.846,2543,5.483,2544,4.427,2545,5.483,2546,5.483,2547,4.846,2548,4.427,2549,4.113,2550,4.846,2551,4.846,2552,6.815,2553,6.815]],["title/injectables/RegistrarService.html",[30,0.837,63,2.591]],["body/injectables/RegistrarService.html",[0,0.514,1,2.312,3,0.045,4,0.038,5,0.104,6,1.48,7,0.55,8,1.62,9,4.702,10,4.528,11,0.492,12,0.085,13,0.447,14,1.162,15,1.71,16,0.818,17,4.21,18,0.759,19,0.307,20,0.009,21,0.723,22,0.492,23,2.055,24,0.888,25,0.888,26,0.704,27,1.789,28,1.48,29,0.291,30,0.578,31,3.765,32,3.582,33,0.266,34,2.019,35,0.539,36,5.308,37,1.48,38,3.827,39,1.62,40,2.724,41,2.724,42,2.724,43,2.724,44,2.724,45,2.724,46,1.292,47,2.825,48,0.86,49,3.117,50,1.62,51,0.86,52,3.933,53,1.62,54,1.162,55,1.064,56,1.162,57,1.48,58,5.222,59,6.014,60,2.308,61,1.871,62,1.48,63,3.278,64,1.954,65,1.492,66,2.724,67,2.312,68,5.308,69,5.984,70,2.724,71,4.132,72,4.909,73,0.045,74,0.054,75,0.834,76,2.713,77,4.132,78,1.789,79,2.055,80,2.47,81,2.055,82,1.62,83,2.361,84,2.724,85,1.867,86,3.525,87,1.226,88,1.648,89,3.765,90,2.312,91,1.471,92,1.492,93,2.488,94,2.172,95,1.867,96,2.312,97,2.055,98,1.954,99,1.402,100,0.704,101,1.533,102,2.312,103,1.449,104,1.773,105,1.62,106,1.62,107,1.867,108,2.172,109,1.375,110,2.172,111,1.375,112,1.62,113,2.272,114,0.888,115,1.62,116,1.62,117,1.62,118,1.62,119,1.62,120,5.308,121,1.62,122,1.62,123,1.62,124,0.809,125,2.724,126,2.488,127,1.374,128,3.294,129,2.965,130,1.658,131,0.865,132,1.543,133,1.954,134,3.508,135,2.724,136,2.713,137,4.992,138,1.867,139,2.724,140,2.724,141,2.407,142,2.248,143,2.724,144,1.25,145,2.312,146,2.633,147,2.172,148,2.724,149,5.308,150,1.62,151,1.62,152,2.724,153,1.492,154,1.044,155,1.25,156,2.724,157,2.172,158,3.306,159,4.132,160,1.62,161,1.62,162,1.719,163,1.62,164,1.62,165,0.984,166,1.62,167,1.62,168,1.62,169,1.292,170,1.62,171,1.62,172,1.62,173,1.62,174,1.62,175,1.62,176,1.62,177,1.11,178,2.724,179,5.352,180,3.278,181,4.992,182,2.926,183,2.724,184,1.473,185,1.465,186,1.48,187,1.574,188,3.22,189,0.526,190,1.62,191,1.62,192,3.525,193,2.724,194,2.055,195,2.965,196,1.07,197,3.582,198,3.421,199,2.724,200,1.375,201,1.62,202,1.62,203,1.62,204,1.62,205,3.806,206,4.92,207,2.236,208,3.22,209,2.724,210,2.659,211,3.525,212,2.724,213,2.422,214,4.609,215,2.724,216,4.992,217,2.724,218,1.62,219,1.022,220,1.48,221,1.62,222,1.62,223,3.508,224,3.525,225,1.931,226,1.62,227,2.172,228,1.62,229,1.48,230,1.62,231,1.162,232,1.292,233,1.62,234,1.492,235,1.456,236,2.724,237,0.984,238,2.172,239,1.62,240,1.62,241,3.525,242,3.525,243,1.719,244,1.533,245,3.508,246,1.62,247,1.185,248,1.62,249,1.48,250,2.965,251,1.62,252,1.62,253,1.064,254,1.292,255,1.292,256,0.004,257,1.48,258,1.62,259,1.62,260,2.415,261,1.62,262,1.62,263,1.62,264,0.984,265,1.62,266,1.48,267,1.62,268,1.62,269,2.488,270,1.48,271,1.62,272,1.11,273,1.48,274,1.62,275,1.375,276,1.62,277,1.62,278,2.172,279,2.724,280,2.724,281,1.867,282,2.724,283,1.62,284,1.222,285,0.917,286,1.375,287,2.724,288,2.724,289,1.62,290,2.055,291,1.162,292,1.62,293,1.222,294,1.162,295,2.488,296,2.724,297,1.62,298,0.003,308,0.617,342,0.723,515,1.572,727,1.022,798,0.686,807,1.022,1023,1.719,1545,2.488,2554,3.082,2555,3.082,2556,3.082,2557,3.082,2558,3.082,2559,3.082,2560,1.833,2561,1.833,2562,1.833,2563,1.833,2564,1.833,2565,1.833,2566,1.833,2567,1.833,2568,1.833,2569,1.833,2570,1.833,2571,1.833,2572,1.833,2573,1.833,2574,1.833,2575,1.833]],["title/classes/RegistrationCertificateRequest.html",[49,2.976,74,0.131]],["body/classes/RegistrationCertificateRequest.html",[3,0.15,4,0.125,5,0.112,7,0.842,10,4.532,11,2.007,12,0.283,13,1.084,15,1.941,16,0.933,18,0.666,19,0.33,20,0.009,26,2.876,29,0.313,49,5.627,72,5.947,73,0.15,74,0.22,98,4.746,187,3.419,256,0.007,298,0.007,300,1.674,306,1.641,307,3.111,308,0.605,316,3.375,318,1.878,625,3.877,634,4.173,707,4.989,776,3.696,788,5.393,1138,5.615,2576,7.156,2577,8.096,2578,6.102,2579,6.102]],["title/modules/ResolverModule.html",[355,1.342,2433,3.145]],["body/modules/ResolverModule.html",[3,0.158,4,0.132,5,0.119,20,0.009,29,0.346,33,0.932,73,0.158,74,0.189,256,0.007,298,0.007,355,2.491,357,2.757,358,3.113,359,3.33,360,3.33,361,3.016,362,4.145,363,4.145,378,4.002,379,3.33,380,3.218,383,2.838,1804,5.15,1805,3.585,2433,6.36,2451,6.19,2580,5.683,2581,5.683,2582,5.683,2583,6.43,2584,6.43]],["title/injectables/ResolverService.html",[30,0.837,2451,2.976]],["body/injectables/ResolverService.html",[3,0.118,4,0.098,5,0.088,7,0.661,10,2.573,12,0.222,16,0.799,19,0.283,20,0.009,21,3.044,22,2.219,24,2.321,29,0.346,30,1.201,33,0.694,73,0.118,74,0.141,87,1.257,88,1.759,103,1.354,104,1.768,113,2.362,127,1.884,130,1.375,136,3.72,141,2.224,142,1.511,184,2.02,185,1.201,189,1.376,207,2.749,235,2.815,238,4.517,244,1.842,256,0.006,257,3.87,298,0.006,308,0.518,310,4.09,342,1.503,479,3.442,515,1.537,561,3.87,572,2.83,736,2.903,739,3.195,798,1.795,829,2.482,832,4.026,855,3.265,880,3.104,903,2.749,1145,3.32,1158,3.039,1347,2.116,1427,4.273,1524,3.575,1537,2.399,1777,3.195,1805,2.672,1942,6.206,1962,5.141,2450,3.87,2451,4.273,2455,5.666,2489,5.176,2490,3.377,2585,4.236,2586,6.411,2587,6.411,2588,4.793,2589,6.411,2590,4.793,2591,6.411,2592,6.411,2593,5.176,2594,6.411,2595,4.793,2596,4.793,2597,4.236,2598,4.793,2599,4.793,2600,4.793,2601,4.793,2602,4.793,2603,4.793,2604,4.793,2605,4.793,2606,4.793,2607,4.793,2608,4.793,2609,4.793,2610,4.793,2611,4.793,2612,6.411,2613,4.793,2614,4.793,2615,4.793,2616,4.793,2617,4.793,2618,4.793,2619,4.793,2620,4.793,2621,4.793,2622,4.793,2623,4.793]],["title/classes/SchemaResponse.html",[74,0.131,1161,3.145]],["body/classes/SchemaResponse.html",[3,0.155,4,0.129,5,0.116,12,0.293,13,1.268,18,0.76,19,0.396,20,0.009,73,0.155,74,0.186,256,0.007,298,0.007,300,1.734,305,2.59,308,0.69,330,3.16,430,3.279,624,3.668,1131,4.771,1133,4.438,1161,5.388,1168,6.563,1317,4.631,1354,6.164,2061,5.103,2624,7.647,2625,7.647,2626,7.647,2627,5.586,2628,5.586,2629,5.586]],["title/entities/Session.html",[719,1.407,970,1.672]],["body/entities/Session.html",[3,0.074,4,0.062,5,0.056,7,0.416,11,2.242,12,0.14,13,0.904,15,1.863,16,1.097,18,0.756,19,0.384,20,0.009,25,2.7,26,2.143,29,0.296,51,2.158,65,1.462,73,0.137,74,0.089,91,1.587,131,2.487,138,3.377,144,1.866,146,1.758,154,2.492,162,3.478,189,1.321,250,3.536,256,0.004,298,0.004,306,1.865,308,0.687,319,3.305,325,2.755,331,3.452,333,2.723,335,3.02,336,4.476,350,3.452,351,2.787,430,3.034,480,2.261,541,2.261,550,2.918,572,2.031,634,3.945,635,3.253,637,3.452,645,2.918,652,1.511,656,2.926,663,2.481,666,1.416,707,4.717,718,3.377,719,2.659,726,4.395,762,3.377,768,4.929,889,3.929,903,1.294,945,4.613,946,3.236,970,2.514,972,1.563,974,5.301,982,2.787,983,1.333,1045,1.683,1060,2.926,1073,5.908,1075,2.437,1124,3.236,1134,6.272,1157,1.563,1158,1.914,1166,1.828,1181,5.185,1183,3.242,1184,4.073,1185,4.184,1202,4.158,1260,1.828,1277,2.127,1278,3.452,1300,1.683,1317,3.778,1364,2.918,1384,1.914,1397,2.265,1532,3.452,1604,3.242,1737,3.536,2050,3.715,2138,3.929,2167,4.502,2238,2.012,2251,3.242,2284,2.437,2298,4.929,2630,2.437,2631,3.018,2632,3.018,2633,3.018,2634,3.018,2635,4.929,2636,3.018,2637,4.602,2638,4.602,2639,3.018,2640,3.018,2641,3.018,2642,3.018,2643,5.576,2644,3.018,2645,3.018,2646,3.018,2647,4.502,2648,3.018,2649,3.018,2650,4.067,2651,4.602,2652,3.018,2653,4.602,2654,3.018,2655,4.602,2656,3.018,2657,2.437,2658,2.012,2659,2.437]],["title/controllers/SessionController.html",[338,1.374,2660,3.349]],["body/controllers/SessionController.html",[3,0.124,4,0.103,5,0.093,7,0.696,12,0.234,15,1.96,16,0.827,18,0.659,19,0.292,20,0.009,26,2.549,29,0.363,33,0.731,73,0.124,74,0.148,80,1.995,83,2.484,87,1.323,88,2.033,103,1.389,130,1.688,154,2.247,184,2.481,185,1.243,187,1.991,256,0.006,298,0.006,305,2.51,306,1.625,308,0.599,338,1.553,340,1.796,342,1.555,346,1.939,351,4.017,480,3.005,498,2.443,515,1.59,516,2.709,518,3.199,528,3.692,541,2.689,587,2.709,595,4.673,596,2.613,649,3.561,719,2.793,740,2.813,745,3.588,757,2.689,990,3.978,991,3.363,1038,4.017,1200,3.698,1206,4.767,1337,3.363,1338,3.199,1340,3.363,1342,2.813,1343,3.363,1344,3.363,1667,3.555,2658,4.421,2660,4.976,2661,4.459,2662,7.871,2663,6.633,2664,6.633,2665,5.045,2666,5.045,2667,6.633,2668,5.045,2669,5.045,2670,5.247,2671,6.633,2672,5.045,2673,4.073,2674,4.073,2675,4.073,2676,4.073,2677,5.045,2678,5.045,2679,5.045,2680,5.045,2681,5.045,2682,5.045,2683,5.045]],["title/guards/SessionGuard.html",[693,3.145,752,2.831]],["body/guards/SessionGuard.html",[3,0.145,4,0.121,5,0.109,11,1.966,12,0.273,15,1.757,16,0.914,19,0.323,20,0.009,29,0.307,30,1.374,33,0.855,73,0.145,74,0.173,75,2.683,87,1.546,103,1.105,104,1.828,113,2.154,130,1.265,131,1.655,141,2.455,142,1.859,184,2.31,185,1.374,235,2.675,256,0.007,298,0.007,308,0.592,342,1.718,474,4.446,515,1.912,719,2.703,745,4.234,752,4.647,757,2.392,880,3.549,1347,2.604,1815,7.372,1819,6.478,1820,5.877,1822,3.572,2673,4.762,2684,5.898,2685,5.213,2686,5.898,2687,5.898,2688,5.898,2689,7.974,2690,5.213,2691,5.898,2692,5.898,2693,5.213]],["title/interfaces/SessionLogContext.html",[0,1.253,2137,2.831]],["body/interfaces/SessionLogContext.html",[0,1.564,2,2.615,3,0.137,4,0.114,5,0.103,7,0.769,12,0.258,13,1.025,15,1.696,16,1.052,18,0.807,19,0.386,20,0.009,22,1.897,25,3.425,26,3.141,67,4.182,73,0.137,144,3.151,146,2.576,256,0.007,298,0.007,308,0.451,351,4.284,452,3.108,474,4.557,512,3.957,657,3.837,659,4.221,719,2.793,1137,6.252,1181,4.984,1193,3.318,1274,4.984,1822,4.706,2137,4.485,2187,5.759,2188,6.569,2428,5.711,2694,4.984,2695,4.927,2696,5.574,2697,5.574,2698,7.074,2699,7.074,2700,7.074,2701,7.074]],["title/injectables/SessionLoggerInterceptor.html",[30,0.837,1784,2.704]],["body/injectables/SessionLoggerInterceptor.html",[3,0.085,4,0.071,5,0.064,7,0.92,11,2.256,12,0.16,13,0.737,16,0.753,19,0.328,20,0.009,22,0.925,27,2.952,29,0.322,30,0.953,33,0.5,34,2.524,35,1.014,73,0.085,74,0.101,75,1.569,80,2.424,83,1.292,85,3.081,87,1.749,88,2.041,89,4.74,90,5.003,91,1.141,100,1.326,102,3.816,103,1.25,104,1.965,130,1.43,132,1.727,134,4.533,146,1.603,155,3.202,169,4.699,185,1.25,187,3.32,189,1.735,219,2.837,235,1.259,247,2.322,255,2.431,256,0.005,285,2.546,298,0.005,308,0.539,334,3.202,342,1.193,351,4.039,412,2.003,413,2.09,439,2.431,452,3.718,474,3.965,479,1.853,480,1.399,481,4.496,483,2.003,486,3.05,510,1.671,515,1.449,542,2.786,563,2.09,719,2.489,757,3.017,798,1.292,1045,3.369,1145,3.683,1193,3.335,1194,4.959,1251,2.431,1262,3.584,1513,3.05,1608,3.816,1784,4.039,1816,3.05,1817,7.125,1820,4.699,1822,4.506,1823,2.786,1829,3.05,1948,5.003,2031,2.589,2034,3.816,2095,2.786,2186,5.003,2187,5.01,2238,2.3,2275,4.107,2276,2.589,2490,2.431,2532,4.878,2690,3.05,2694,5.01,2702,3.05,2703,5.087,2704,5.087,2705,5.087,2706,5.087,2707,5.087,2708,5.087,2709,6.669,2710,3.45,2711,5.087,2712,5.087,2713,5.087,2714,5.087,2715,5.087,2716,7.111,2717,5.087,2718,5.087,2719,3.45,2720,5.087,2721,6.042,2722,5.087,2723,6.669,2724,5.087,2725,3.45,2726,3.45,2727,3.45,2728,4.107,2729,3.45,2730,3.45,2731,3.05,2732,3.45,2733,3.45,2734,3.45,2735,3.45,2736,3.45,2737,3.45,2738,3.45,2739,3.45,2740,3.45,2741,3.45,2742,3.45,2743,6.042,2744,6.042,2745,3.45,2746,3.45,2747,6.669,2748,3.45,2749,3.45,2750,3.45,2751,3.45,2752,3.45,2753,3.45,2754,3.45,2755,3.45,2756,3.05,2757,3.05,2758,2.431,2759,3.05,2760,3.05,2761,3.45,2762,3.05,2763,3.05,2764,3.45,2765,3.45,2766,3.45,2767,3.45,2768,5.087,2769,3.45]],["title/injectables/SessionLoggerService.html",[30,0.837,1785,2.591]],["body/injectables/SessionLoggerService.html",[3,0.067,4,0.056,5,0.05,7,0.587,11,1.403,12,0.126,13,0.616,16,0.979,18,0.71,19,0.357,20,0.009,27,4.117,29,0.247,30,0.797,33,0.395,34,2.374,35,0.801,73,0.067,74,0.08,80,2.207,83,1.959,87,1.55,88,1.167,89,2.836,90,3.192,91,0.954,102,3.192,103,1.472,104,1.199,127,1.25,130,1.685,132,1.364,134,3.925,144,1.105,155,2.396,182,1.412,185,1.516,247,3.279,256,0.004,298,0.004,308,0.654,319,2.464,342,0.997,412,1.582,413,1.651,439,1.921,452,3.787,512,3.537,515,1.883,635,1.824,644,1.441,653,2.836,663,2.091,719,2.72,737,4.624,757,2.599,766,3.76,798,1.021,820,6.226,1023,4.3,1045,4.092,1184,3.441,1193,2.772,1194,4.892,1251,2.997,1253,3.192,1260,1.651,1262,5.171,1438,4.434,1604,4.164,1608,4.434,1785,3.43,1822,5.355,1948,3.192,2019,2.997,2031,2.045,2034,6.439,2050,5.174,2137,5.67,2188,5.322,2238,1.817,2276,3.192,2287,2.41,2635,5.665,2694,5.768,2756,3.76,2757,7.377,2758,2.997,2759,3.76,2770,2.41,2771,5.91,2772,4.254,2773,4.254,2774,5.231,2775,5.231,2776,4.254,2777,5.231,2778,4.254,2779,5.231,2780,5.231,2781,5.231,2782,4.254,2783,5.91,2784,2.726,2785,4.254,2786,4.254,2787,9.097,2788,2.726,2789,2.726,2790,6.409,2791,2.726,2792,2.726,2793,2.726,2794,4.254,2795,2.726,2796,5.231,2797,2.726,2798,2.726,2799,4.254,2800,2.726,2801,2.726,2802,2.726,2803,2.726,2804,2.726,2805,2.726,2806,2.726,2807,4.254,2808,2.726,2809,2.726,2810,2.726,2811,7.711,2812,7.711,2813,2.045,2814,7.338,2815,2.726,2816,2.726,2817,2.726,2818,2.726,2819,2.726,2820,2.726,2821,2.726,2822,2.726,2823,2.726,2824,2.726,2825,4.254]],["title/modules/SessionModule.html",[355,1.342,375,2.704]],["body/modules/SessionModule.html",[3,0.133,4,0.11,5,0.099,7,0.744,20,0.009,29,0.368,33,0.782,64,4.393,65,3.705,73,0.17,74,0.158,104,1.237,165,2.896,185,1.011,256,0.006,298,0.006,340,2.465,355,2.428,357,2.313,358,2.612,359,2.794,360,2.794,361,2.53,362,3.83,363,3.83,375,5.466,378,3.588,379,2.794,380,2.7,383,3.058,385,4.196,403,4.047,430,2.971,480,3.103,541,2.809,579,4.047,580,4.355,586,5.419,595,3.801,596,2.794,597,4.355,598,3.267,599,2.313,602,6.123,603,3.421,604,3.596,619,4.355,620,4.355,719,1.7,745,4.395,2324,5.741,2658,5.567,2660,5.741,2673,4.355,2674,4.355,2826,4.768,2827,4.768,2828,5.395,2829,4.768,2830,4.355,2831,5.395,2832,4.355,2833,4.768,2834,4.047,2835,4.768,2836,4.768,2837,5.395,2838,5.395,2839,4.768,2840,4.768]],["title/injectables/SessionService.html",[30,0.837,745,2.162]],["body/injectables/SessionService.html",[3,0.08,4,0.066,5,0.06,12,0.15,15,1.396,16,0.906,18,0.647,19,0.32,20,0.009,29,0.332,30,0.91,31,4.846,33,0.47,34,2.32,35,0.952,38,1.52,60,1.394,73,0.08,74,0.095,75,1.474,80,1.944,87,1.273,88,2.068,92,3.52,100,1.245,103,1.413,104,1.879,113,1.427,130,1.817,138,2.94,141,2.44,142,2.038,146,2.183,177,2.94,182,1.678,184,1.53,185,1.362,195,3.078,205,2.818,256,0.005,285,3.236,298,0.005,308,0.641,342,1.138,348,4.1,361,2.277,406,2.616,430,2.497,515,1.743,539,2.431,541,3.367,599,1.39,603,2.055,620,2.616,626,4.889,631,2.431,644,1.972,649,2.607,675,2.818,719,2.761,727,2.707,745,2.351,757,1.969,781,3.881,798,1.213,851,1.881,853,2.707,877,3.642,946,2.818,947,2.283,983,1.43,993,1.881,994,3.236,996,2.616,997,5.22,998,2.431,1006,2.431,1007,4.7,1023,1.807,1038,2.94,1124,1.881,1260,3.526,1604,4.102,1692,3.642,2138,4.88,2149,2.818,2238,3.236,2647,5.22,2657,2.616,2658,5.025,2674,2.616,2832,3.92,2834,3.642,2839,6.121,2840,6.121,2841,2.864,2842,6.466,2843,4.855,2844,6.466,2845,3.24,2846,7.538,2847,5.822,2848,3.24,2849,4.855,2850,4.855,2851,6.466,2852,3.24,2853,4.855,2854,6.466,2855,3.24,2856,4.855,2857,3.24,2858,3.24,2859,4.855,2860,6.466,2861,3.24,2862,4.855,2863,3.24,2864,4.855,2865,6.466,2866,4.855,2867,4.855,2868,4.291,2869,4.291,2870,4.855,2871,3.24,2872,4.291,2873,4.855,2874,3.24,2875,4.855,2876,4.855,2877,4.855,2878,3.24,2879,3.24,2880,3.24,2881,3.24,2882,3.24,2883,3.24,2884,4.855,2885,4.855,2886,3.24,2887,4.855,2888,3.24,2889,3.24,2890,4.855,2891,4.855,2892,4.855,2893,3.24,2894,4.855,2895,4.855,2896,4.855,2897,3.24,2898,4.855,2899,3.24,2900,3.24,2901,5.822,2902,4.855,2903,3.24,2904,2.864,2905,3.24,2906,3.24,2907,3.24,2908,3.24,2909,3.24,2910,4.855,2911,3.24,2912,3.24,2913,3.24,2914,3.24]],["title/controllers/StatusListController.html",[338,1.374,2915,3.349]],["body/controllers/StatusListController.html",[3,0.15,4,0.125,5,0.112,12,0.283,16,0.761,18,0.72,19,0.357,20,0.009,29,0.339,33,0.884,73,0.15,74,0.179,88,1.674,103,1.144,130,1.605,131,1.713,146,2.359,185,1.144,256,0.007,298,0.007,306,1.338,308,0.493,310,2.955,338,1.878,340,2.172,342,1.755,345,3.869,346,2.345,498,2.955,515,1.463,518,3.869,541,3.283,596,3.877,754,4.068,990,4.347,991,4.068,1312,4.347,1342,4.514,1347,2.694,2915,5.615,2916,4.746,2917,5.393,2918,6.102,2919,6.615,2920,4.926,2921,7.484,2922,6.102,2923,7.484,2924,6.102,2925,6.102,2926,6.102,2927,5.393,2928,6.102,2929,6.102]],["title/interfaces/StatusListFile.html",[0,1.253,2930,3.349]],["body/interfaces/StatusListFile.html",[0,0.918,2,1.535,3,0.08,4,0.067,5,0.153,12,0.271,13,0.709,15,0.784,16,0.61,18,0.748,19,0.286,20,0.009,29,0.348,30,0.917,32,3.713,33,0.474,34,1.803,35,0.961,47,2.441,48,1.535,54,2.075,55,1.899,56,3.101,61,3.422,73,0.08,74,0.096,75,1.488,80,2.338,87,0.858,88,1.607,91,1.097,103,1.303,104,2.021,113,2.222,127,0.961,130,0.702,141,2,142,2.3,146,2.622,147,2.305,157,2.305,165,4.174,169,2.305,177,3.547,184,1.031,198,1.982,213,1.695,235,1.785,237,1.757,244,1.258,256,0.005,264,2.626,281,3.547,284,2.181,285,3.252,286,4.393,293,2.181,294,2.075,298,0.005,305,2.355,310,1.584,444,1.488,474,2.727,541,3.539,572,2.159,573,4.9,596,1.695,599,1.403,652,1.637,663,1.505,719,2.192,751,1.584,829,2.533,850,3.547,851,1.899,853,2.727,864,1.695,880,1.584,903,3.129,916,1.535,983,1.444,987,1.982,990,1.757,993,1.899,994,2.447,1005,1.982,1038,2.962,1060,1.535,1147,2.642,1157,2.533,1207,2.075,1214,3.446,1234,4.864,1312,4.596,1342,2.727,1384,3.713,1421,3.669,1422,2.305,1427,2.181,1908,2.642,1961,2.181,1962,3.26,1965,2.455,2149,1.899,2323,2.642,2327,2.455,2503,2.642,2659,2.642,2670,3.26,2676,2.642,2758,5.702,2916,2.075,2920,2.642,2930,5.217,2931,2.642,2932,6.147,2933,5.743,2934,4.322,2935,2.892,2936,2.892,2937,4.322,2938,2.642,2939,2.181,2940,2.642,2941,2.642,2942,2.892,2943,2.892,2944,2.892,2945,2.892,2946,2.892,2947,2.892,2948,2.892,2949,4.322,2950,5.743,2951,4.322,2952,2.892,2953,2.892,2954,5.176,2955,2.892,2956,4.322,2957,2.892,2958,2.892,2959,2.892,2960,2.892,2961,2.892,2962,2.892,2963,2.892,2964,2.892,2965,2.892,2966,4.322,2967,2.892,2968,4.322,2969,2.892,2970,2.892,2971,4.322,2972,4.322,2973,2.892,2974,2.892,2975,2.892,2976,2.892,2977,5.176,2978,2.892,2979,2.892,2980,2.892,2981,2.892,2982,2.892,2983,2.892,2984,2.642,2985,5.176,2986,2.892,2987,2.892,2988,2.892,2989,6.147,2990,2.892,2991,2.892,2992,4.322,2993,2.892,2994,2.892,2995,2.892,2996,2.892,2997,2.892,2998,2.892,2999,4.322,3000,4.322,3001,2.892,3002,2.892,3003,2.892]],["title/modules/StatusListModule.html",[355,1.342,586,2.831]],["body/modules/StatusListModule.html",[3,0.148,4,0.123,5,0.111,20,0.009,29,0.368,33,0.875,73,0.148,74,0.177,256,0.007,298,0.007,340,2.646,355,2.423,357,2.588,358,2.923,359,3.126,360,3.126,361,2.831,362,4.032,363,4.032,368,4.554,378,3.851,379,3.126,380,3.021,383,3.282,386,3.656,541,3.015,586,5.751,596,3.126,598,3.656,599,2.588,990,4.947,991,4.024,2915,6.045,2916,3.827,2939,4.024,2940,4.873,2941,4.873,3004,5.335,3005,5.335,3006,6.036,3007,5.335,3008,6.036,3009,6.036,3010,6.036]],["title/injectables/StatusListService.html",[30,0.837,990,2.397]],["body/injectables/StatusListService.html",[0,0.729,3,0.064,4,0.053,5,0.152,12,0.235,13,0.593,15,0.982,16,0.948,18,0.791,19,0.342,20,0.009,29,0.33,30,0.768,32,4.219,33,0.376,34,2.048,35,0.763,47,2.903,48,1.218,54,1.647,55,1.507,56,2.597,61,3.121,73,0.064,74,0.076,75,1.181,80,2.527,87,1.074,88,1.391,91,1.137,103,1.174,104,1.953,113,2.182,127,1.203,130,1.663,141,2.427,142,2.097,146,2.727,147,2.886,157,2.886,165,3.875,169,2.886,177,3.071,184,1.291,185,1.425,198,2.48,213,1.345,235,1.495,237,1.395,244,0.998,256,0.004,264,2.199,281,3.071,284,2.73,285,3.33,286,3.804,293,1.731,294,1.647,298,0.004,305,2.576,308,0.637,310,1.258,342,0.96,430,1.114,444,1.863,474,2.284,483,1.507,515,1.823,541,3.564,572,1.808,573,4.413,596,4.143,599,1.114,652,1.3,663,1.561,719,2.341,751,1.258,798,0.973,807,1.448,829,2.121,850,3.071,851,1.507,853,2.284,864,1.345,880,1.258,903,2.174,916,1.218,983,1.147,987,1.573,990,2.199,993,1.507,994,2.88,1005,2.48,1023,2.284,1038,3.486,1060,1.218,1078,3.073,1147,2.097,1157,2.121,1207,1.647,1214,4.055,1234,3.38,1312,4.623,1342,2.284,1384,3.971,1421,3.073,1422,1.83,1427,1.731,1545,3.307,1908,3.307,1961,1.731,1962,2.73,1965,3.073,2149,1.507,2323,2.097,2327,1.949,2503,3.307,2659,2.097,2670,3.837,2676,2.097,2758,5.233,2916,5.073,2919,3.62,2920,3.307,2930,5.225,2931,2.097,2932,3.62,2933,3.62,2934,3.62,2935,2.296,2936,2.296,2937,3.62,2938,2.097,2939,1.731,2940,2.097,2941,2.097,2942,2.296,2943,4.481,2944,3.62,2945,2.296,2946,4.481,2947,2.296,2948,3.62,2949,5.087,2950,5.881,2951,4.481,2952,3.62,2953,3.62,2954,4.481,2955,2.296,2956,3.62,2957,2.296,2958,2.296,2959,2.296,2960,2.296,2961,2.296,2962,2.296,2963,2.296,2964,2.296,2965,2.296,2966,3.62,2967,3.62,2968,3.62,2969,2.296,2970,2.296,2971,3.62,2972,3.62,2973,2.296,2974,2.296,2975,2.296,2976,2.296,2977,4.481,2978,2.296,2979,3.62,2980,2.296,2981,3.62,2982,2.296,2983,2.296,2984,3.307,2985,5.535,2986,4.481,2987,2.296,2988,2.296,2989,5.535,2990,2.296,2991,2.296,2992,3.62,2993,2.296,2994,2.296,2995,3.62,2996,2.296,2997,3.62,2998,2.296,2999,3.62,3000,3.62,3001,2.296,3002,2.296,3003,2.296,3011,4.095,3012,4.095,3013,4.095,3014,4.095,3015,4.095,3016,4.095,3017,2.597,3018,2.597,3019,2.597,3020,2.597,3021,2.597,3022,2.597,3023,2.597,3024,2.597,3025,2.597,3026,2.597,3027,2.597]],["title/entities/StatusMapping.html",[970,1.672,2939,2.976]],["body/entities/StatusMapping.html",[3,0.144,4,0.12,5,0.108,12,0.386,13,1.058,18,0.777,19,0.394,20,0.009,29,0.245,73,0.144,74,0.172,131,2.512,165,3.922,256,0.007,298,0.007,306,1.826,308,0.673,474,4.436,970,2.735,972,3.039,976,5.967,982,5.187,983,2.59,1277,5.866,1312,4.271,1384,5.044,2916,5.431,2939,4.87,3028,7.57,3029,5.185,3030,8.732,3031,5.867,3032,7.305,3033,5.867,3034,5.867,3035,5.867]],["title/classes/StatusUpdateDto.html",[74,0.131,2670,2.976]],["body/classes/StatusUpdateDto.html",[3,0.142,4,0.118,5,0.106,12,0.267,13,1.047,15,1.984,16,1.032,17,6.68,18,0.736,19,0.348,20,0.009,29,0.241,73,0.142,74,0.212,91,1.62,154,2.448,158,4.582,165,3.88,256,0.007,264,3.88,298,0.007,300,1.582,306,1.731,307,3.18,308,0.638,315,3.656,317,3.287,318,1.775,337,3.88,474,4.401,480,2.93,541,3.455,663,2.547,719,2.608,1176,4.655,1384,5.005,2149,4.802,2670,4.817,2675,6.68,2916,5.246,3036,5.096,3037,5.766,3038,5.766,3039,5.766,3040,5.766,3041,7.226,3042,5.766]],["title/interfaces/TokenPayload.html",[0,1.253,528,2.094]],["body/interfaces/TokenPayload.html",[0,1.787,2,2.987,3,0.157,4,0.13,5,0.117,7,0.879,9,3.551,11,2.06,12,0.295,13,1.113,18,0.734,19,0.281,20,0.009,29,0.266,33,0.923,38,2.987,73,0.189,83,3.207,92,3.72,103,1.194,104,1.761,154,2.157,219,3.551,253,3.696,256,0.007,298,0.007,480,3.115,528,3.869,538,4.246,572,2.812,573,6.035,727,3.551,1317,3.857,1820,5.413,3043,5.142,3044,6.79,3045,5.629,3046,5.629,3047,5.629]],["title/classes/TokenResponse.html",[74,0.131,506,3.349]],["body/classes/TokenResponse.html",[3,0.165,4,0.138,5,0.124,12,0.312,13,1.15,18,0.706,19,0.35,20,0.008,73,0.165,74,0.197,165,4.261,256,0.007,298,0.007,300,1.845,308,0.682,320,4.74,506,5.954,542,6.816,544,7.462,545,6.334,624,3.904,2627,5.945,2628,5.945,2629,5.945,3048,7.708]],["title/classes/UpdateCredentialIssuanceBindingDto.html",[74,0.131,1118,3.145]],["body/classes/UpdateCredentialIssuanceBindingDto.html",[3,0.121,4,0.101,5,0.091,7,1.218,12,0.229,13,0.948,15,2.134,18,0.778,19,0.218,20,0.009,22,2.368,25,2.393,26,1.899,29,0.274,60,1.419,73,0.18,74,0.229,91,1.75,101,2.819,113,2.155,162,2.755,182,2.559,189,1.419,195,4.148,196,1.715,225,3.932,256,0.006,298,0.006,300,1.356,306,1.084,307,3,308,0.399,312,4.142,318,1.521,346,1.899,625,4.043,644,2.883,663,2.66,980,4.819,1092,3.482,1093,4.908,1094,3.707,1095,3.989,1096,5.053,1097,4.61,1098,4.61,1099,3.989,1100,5.282,1103,5.921,1104,5.921,1105,5.921,1106,5.921,1109,6.556,1112,5.282,1113,6.222,1114,5.282,1115,5.921,1116,5.282,1117,5.282,1118,4.61,1119,3.989,1120,3.482,1121,3.294,1122,3.707,1123,3.989,1124,2.868,3049,4.941,3050,4.941]],["title/classes/VCT.html",[74,0.131,1132,2.831]],["body/classes/VCT.html",[3,0.135,4,0.112,5,0.101,7,1.063,12,0.254,13,1.013,16,1.134,18,0.819,19,0.389,20,0.009,29,0.292,73,0.172,74,0.226,185,1.444,256,0.007,298,0.007,300,1.502,306,1.912,307,3.549,308,0.705,316,2.915,318,1.685,325,2.05,333,2.835,640,3.471,658,3.052,666,2.568,667,5.347,1132,5.319,1354,6.221,1813,5.78,2387,6.81,2388,6.81,2389,6.81,3051,5.474,3052,5.474,3053,5.474,3054,5.474,3055,5.474,3056,5.474,3057,5.474]],["title/modules/VerifierModule.html",[355,1.342,376,3.145]],["body/modules/VerifierModule.html",[3,0.146,4,0.122,5,0.11,20,0.009,29,0.371,33,0.862,73,0.146,74,0.175,256,0.007,298,0.007,355,2.408,357,2.552,358,2.881,359,3.082,360,3.082,361,2.791,362,2.978,363,2.978,368,4.538,374,5.307,375,5.307,376,6.526,378,3.817,379,3.082,380,2.978,383,3.253,386,3.604,394,4.464,404,4.464,1783,5.556,1804,4.913,1805,3.318,2265,5.556,2268,5.259,2438,5.259,3058,5.95,3059,5.95,3060,5.95]],["title/classes/WebHookAuthConfig.html",[74,0.131,326,3.145]],["body/classes/WebHookAuthConfig.html",[3,0.126,4,0.104,5,0.094,7,0.705,12,0.237,13,0.969,16,0.637,18,0.663,19,0.401,20,0.009,22,2.201,29,0.28,60,2.14,73,0.194,74,0.241,81,5.472,91,1.924,124,2.255,185,0.957,196,2.849,256,0.006,298,0.006,299,5.572,300,1.401,301,3.598,302,3.703,303,5.252,304,4.123,305,2.264,306,1.466,307,3.039,308,0.54,310,3.237,311,3.728,312,3.136,314,2.645,315,3.238,316,3.107,317,3.041,318,1.572,319,2.129,320,3.598,321,4.123,322,3.404,323,4.514,324,6.158,325,3.153,326,5.572,327,5.398,328,4.239,329,5.398,330,2.569,331,3.831,332,3.598,333,2.071,334,2.711,335,2.473,336,3.404,337,2.742,3061,5.107,3062,5.107,3063,5.107]],["title/classes/WebhookConfig.html",[74,0.131,333,1.81]],["body/classes/WebhookConfig.html",[3,0.125,4,0.104,5,0.094,7,0.703,12,0.236,13,0.968,16,0.985,18,0.703,19,0.391,20,0.009,22,2.12,29,0.279,60,1.464,73,0.194,74,0.241,81,5.268,91,1.923,124,3.288,185,0.956,196,2.922,256,0.006,298,0.006,299,5.248,300,1.399,301,3.593,302,3.668,303,5.569,304,4.117,305,2.262,306,1.465,307,3.153,308,0.54,310,3.234,311,3.724,312,3.133,314,2.641,315,3.233,316,3.105,317,3.038,318,1.57,319,2.126,320,3.593,321,4.117,322,3.399,323,4.045,324,5.588,325,3.152,326,5.569,327,4.117,328,3.233,329,4.117,330,1.96,331,5.011,332,4.706,333,2.708,334,3.327,335,3.234,336,4.452,337,3.586,3064,5.099,3065,5.099,3066,5.099]],["title/injectables/WebhookService.html",[30,0.837,1786,2.704]],["body/injectables/WebhookService.html",[3,0.092,4,0.076,5,0.069,7,0.514,12,0.173,16,0.787,19,0.278,20,0.009,29,0.33,30,1.008,33,0.54,73,0.092,74,0.109,80,1.899,87,1.814,88,2.255,95,3.259,103,1.008,104,1.448,113,1.581,127,1.581,130,1.154,138,3.259,141,2.483,142,2.18,154,2.669,185,1.184,189,1.986,219,3.001,235,1.964,237,3.713,244,2.068,247,2.068,256,0.005,298,0.005,303,3.792,308,0.51,311,3.001,324,4.037,325,3.275,337,2.889,342,1.262,479,3.713,515,1.514,635,2.308,644,1.823,651,2.889,719,2.788,745,3.906,746,2.363,751,1.805,798,1.395,851,3.123,962,5.734,1036,5.385,1040,4.037,1044,5.584,1133,3.123,1141,4.345,1184,4.627,1193,1.748,1785,4.014,1786,4.189,1798,2.626,1805,2.078,1822,2.257,1942,5.912,2093,4.386,2137,4.996,2167,4.345,2186,6.466,2210,4.345,2234,3.294,2240,4.756,2337,5.582,2338,4.756,2450,3.009,2489,5.099,2490,2.626,3067,3.294,3068,6.316,3069,6.316,3070,3.727,3071,3.727,3072,3.727,3073,3.727,3074,3.727,3075,5.381,3076,3.727,3077,3.727,3078,3.727,3079,3.727,3080,3.727,3081,6.916,3082,6.916,3083,5.381,3084,3.727,3085,5.381,3086,5.381,3087,5.381,3088,5.381,3089,7.643,3090,5.381,3091,4.756,3092,5.381,3093,5.381,3094,5.381,3095,5.381,3096,5.381,3097,3.727,3098,3.727,3099,3.727,3100,3.727,3101,5.381,3102,3.727]],["title/controllers/WellKnownController.html",[338,1.374,382,3.349]],["body/controllers/WellKnownController.html",[3,0.106,4,0.088,5,0.079,7,0.942,12,0.199,16,0.851,19,0.341,20,0.009,22,1.596,29,0.36,33,0.622,73,0.106,74,0.126,87,1.126,88,1.873,100,2.623,103,1.279,114,3.974,130,1.844,131,1.67,141,2.464,144,2.413,146,1.354,184,1.875,185,1.381,256,0.006,298,0.006,306,1.497,308,0.552,310,2.08,319,3.422,330,1.651,338,2.101,340,1.529,342,1.395,345,2.724,346,1.651,377,4.912,382,5.121,387,5.511,388,5.528,414,3.796,444,2.706,498,2.08,515,1.636,531,3.453,536,3.222,663,1.832,675,2.493,711,7.395,712,4.464,719,2.84,727,2.395,740,2.395,749,4.55,750,3.222,751,2.08,752,2.724,753,3.222,754,2.863,755,3.222,757,1.742,800,6.033,812,3.222,855,3.302,1145,4.251,1200,3.318,1206,3.603,1297,4.672,1347,1.896,1520,3.773,1538,3.453,1539,2.863,1746,3.468,1767,3.796,1777,4.55,2053,4.81,2096,4.804,2123,3.796,2927,5.259,3103,3.796,3104,4.295,3105,6.513,3106,5.259,3107,5.95,3108,4.295,3109,4.295,3110,5.95,3111,4.295,3112,4.295,3113,6.158,3114,5.949,3115,4.295,3116,4.295,3117,4.295,3118,4.295,3119,3.796,3120,3.796,3121,5.95,3122,5.259,3123,4.295,3124,3.796,3125,4.295,3126,4.295,3127,4.295,3128,4.295,3129,3.796,3130,4.295,3131,4.295,3132,4.295,3133,4.295,3134,4.295,3135,4.295,3136,4.295]],["title/injectables/WellKnownService.html",[30,0.837,377,2.976]],["body/injectables/WellKnownService.html",[3,0.092,4,0.076,5,0.069,7,0.514,9,3.001,11,1,12,0.173,16,0.862,18,0.562,19,0.368,20,0.009,22,1.694,29,0.349,30,1.008,33,0.54,47,3.363,48,1.748,73,0.092,74,0.109,80,2.08,83,2.015,87,1.814,88,2.012,100,2.068,103,1.296,104,1.234,114,3.058,127,1.581,130,1.79,141,2.353,142,1.991,144,3.099,146,1.696,153,3.349,177,2.257,184,1.696,185,1.296,205,2.163,223,4.037,225,2.606,256,0.005,298,0.005,305,1.823,308,0.559,319,2.633,342,1.262,377,4.611,387,4.345,388,5.503,444,3.476,468,3.294,483,3.123,515,1.658,531,3.123,572,2.376,573,2.626,634,3.001,663,1.657,712,4.037,719,2.63,725,3.587,727,3.001,742,4.498,751,1.805,757,2.805,798,1.395,853,3.522,855,3.11,903,2.708,916,1.748,959,2.796,1138,2.796,1145,4.499,1200,4.262,1206,3.259,1296,4.037,1297,4.651,1421,2.796,1422,2.626,1424,3.009,1427,2.484,1428,3.009,1458,5.253,1520,4.386,1524,2.078,1538,3.123,1539,2.484,1747,4.772,1748,3.009,1756,3.792,1865,4.756,2053,4.873,2144,3.294,2149,2.163,2322,3.294,2325,3.294,2327,2.796,2328,4.345,2333,3.294,2335,3.294,2593,4.345,2597,3.294,2834,4.037,3105,4.756,3106,4.756,3113,5.503,3114,5.584,3119,3.294,3120,3.294,3122,3.294,3124,3.294,3129,3.294,3137,3.294,3138,5.381,3139,5.381,3140,5.381,3141,3.727,3142,3.727,3143,5.381,3144,3.727,3145,4.037,3146,5.381,3147,3.727,3148,5.381,3149,5.381,3150,5.381,3151,5.381,3152,5.189,3153,5.582,3154,4.756,3155,5.381,3156,3.727,3157,3.727,3158,3.727,3159,3.727,3160,3.727,3161,3.727,3162,3.727,3163,3.727,3164,5.381,3165,3.727,3166,3.727,3167,3.727,3168,3.727,3169,3.727,3170,3.727]],["title/changelog.html",[1033,2.48,2813,2.791,3171,3.72]],["body/changelog.html",[5,0.086,20,0.006,22,1.244,60,2.186,78,3.64,95,2.81,100,2.731,101,2.411,103,0.87,124,2.048,144,2.543,205,5.15,206,3.481,256,0.006,290,3.093,298,0.007,312,2.177,325,2.349,334,2.543,350,3.481,353,3.481,397,3.093,420,3.799,452,2.587,463,3.481,480,1.882,539,3.481,550,2.942,633,3.27,635,1.99,644,2.125,855,1.831,942,5.007,1038,3.799,1122,3.481,1145,2.403,1193,2.177,1312,2.491,1586,3.746,1629,4.101,1864,5.544,1877,4.101,2275,3.746,2532,5.737,2650,4.101,3153,4.101,3172,4.64,3173,7.716,3174,4.64,3175,8.729,3176,8.729,3177,4.101,3178,4.101,3179,4.64,3180,4.64,3181,4.64,3182,6.273,3183,7.611,3184,4.64,3185,4.64,3186,4.64,3187,4.64,3188,4.64,3189,4.101,3190,4.64,3191,4.64,3192,3.746,3193,4.64,3194,4.101,3195,6.273,3196,4.64,3197,6.727,3198,4.64,3199,6.273,3200,4.64,3201,4.64,3202,4.64,3203,4.64,3204,4.64,3205,8.635,3206,3.481,3207,4.64,3208,4.64,3209,4.64,3210,4.101,3211,4.64,3212,4.64,3213,4.101,3214,4.64,3215,4.64,3216,4.101,3217,8.981,3218,6.273,3219,5.331,3220,4.64,3221,6.281,3222,6.273,3223,4.64,3224,4.64,3225,6.273,3226,4.64,3227,4.64,3228,4.64,3229,4.64,3230,4.64,3231,4.64,3232,4.64,3233,6.273,3234,4.64,3235,6.273,3236,4.64,3237,4.64,3238,4.64,3239,4.64,3240,4.64,3241,4.64,3242,4.64,3243,4.64,3244,4.64,3245,4.64,3246,4.64,3247,4.64,3248,4.64,3249,4.64,3250,4.64,3251,4.64,3252,4.64,3253,4.64,3254,4.64,3255,4.101,3256,4.64,3257,4.64,3258,4.64,3259,4.101,3260,4.64,3261,4.64,3262,4.64,3263,4.64,3264,4.64,3265,4.64,3266,4.64,3267,4.101,3268,4.64,3269,4.64,3270,4.64,3271,4.64,3272,4.64,3273,4.64,3274,4.64,3275,4.64,3276,4.64,3277,4.64,3278,4.64,3279,4.64,3280,4.64,3281,4.64,3282,4.64,3283,4.64,3284,4.64,3285,4.64,3286,4.64,3287,4.64,3288,4.64,3289,4.101,3290,4.64,3291,4.101,3292,4.64,3293,4.101,3294,4.64,3295,4.64,3296,4.64,3297,4.64,3298,4.64]],["title/coverage.html",[3299,5.4]],["body/coverage.html",[0,2.24,1,1.929,5,0.047,6,3.28,11,0.69,19,0.341,20,0.009,21,1.015,22,0.69,26,0.988,30,1.633,38,1.206,47,1.072,49,1.714,52,1.492,58,1.812,63,1.492,74,0.263,83,0.963,113,0.756,114,1.245,136,2.358,256,0.004,264,4.86,298,0.004,299,1.812,301,4.033,319,1.072,323,1.557,326,1.812,333,1.043,338,2.515,339,1.929,341,2.273,361,1.206,377,1.714,382,1.929,388,3.048,390,1.929,393,1.929,399,1.929,401,2.076,403,1.929,409,1.929,496,1.929,497,2.273,502,1.929,506,1.929,521,1.631,523,1.557,528,1.206,587,1.381,588,1.812,589,2.076,596,2.609,600,1.714,622,1.812,623,2.273,624,4.174,638,1.557,639,4.155,640,4.201,644,1.939,646,1.714,647,1.714,658,1.434,667,2.461,679,1.434,680,1.714,681,2.273,693,1.812,704,1.812,705,2.273,708,1.929,709,2.273,718,1.557,719,0.81,742,1.434,745,1.245,747,1.929,749,1.714,752,1.631,775,2.273,776,4.013,799,3.779,808,1.434,809,1.381,836,1.714,842,1.812,844,1.812,855,1.015,915,1.492,922,6.887,952,1.434,970,2.693,971,1.631,973,3.28,979,1.812,984,3.28,988,1.557,990,1.381,1068,2.273,1069,2.273,1072,3.28,1077,2.076,1092,1.812,1093,3.779,1094,3.779,1118,1.812,1120,1.812,1125,1.492,1126,2.273,1132,1.631,1148,1.631,1161,1.812,1168,1.929,1173,1.929,1174,3.28,1179,1.714,1184,1.381,1186,1.631,1187,2.273,1188,1.812,1189,3.779,1193,1.206,1268,2.273,1269,2.273,1273,1.557,1296,1.929,1297,4.201,1298,2.273,1299,3.28,1324,1.929,1325,2.273,1346,1.557,1353,1.929,1354,4.033,1355,2.076,1356,2.273,1372,2.273,1435,1.812,1436,4.621,1437,4.621,1446,1.714,1454,1.929,1458,1.714,1459,3.28,1467,2.076,1471,1.929,1480,1.929,1486,2.076,1488,2.076,1518,1.929,1519,3.28,1539,1.714,1540,2.273,1577,1.929,1578,3.28,1616,1.929,1617,2.273,1635,2.273,1636,3.28,1652,1.929,1653,2.273,1676,2.273,1731,1.929,1732,2.273,1733,2.076,1734,2.273,1737,1.631,1740,1.557,1747,1.557,1777,1.714,1778,2.273,1784,1.557,1785,1.492,1786,1.557,1787,2.076,1788,1.929,1812,2.273,1825,2.076,1840,2.273,1892,3.28,1893,3.28,1906,1.631,1907,2.273,1918,1.812,1919,1.714,1933,2.076,1938,2.273,1940,2.273,1957,3.28,1992,1.929,1993,3.28,2006,1.929,2047,1.812,2048,2.273,2053,1.812,2054,2.273,2067,3.28,2080,2.273,2093,1.631,2109,2.273,2137,1.631,2138,1.812,2241,1.929,2242,2.273,2269,2.273,2278,1.929,2324,3.779,2376,2.273,2378,2.273,2391,1.929,2392,2.273,2399,1.929,2425,3.048,2427,2.273,2440,2.273,2451,1.714,2535,2.273,2536,2.273,2544,2.076,2576,2.273,2585,2.273,2630,4.067,2660,1.929,2661,2.273,2670,1.714,2675,2.076,2685,2.273,2694,4.391,2695,2.273,2702,2.273,2728,2.076,2770,2.273,2830,2.076,2841,2.273,2869,7.223,2915,1.929,2916,3.952,2917,2.273,2930,1.929,2931,3.28,2939,1.714,3028,2.273,3029,2.273,3036,2.273,3043,3.28,3048,2.273,3067,2.273,3103,2.273,3113,1.929,3137,2.273,3192,3.28,3206,1.929,3216,2.273,3259,2.273,3299,2.273,3300,2.571,3301,2.571,3302,5.856,3303,6.233,3304,7.404,3305,8.502,3306,2.571,3307,5.037,3308,7.582,3309,5.723,3310,2.571,3311,2.571,3312,3.591,3313,2.571,3314,4.063,3315,2.571,3316,6.938,3317,5.723,3318,5.037,3319,2.273,3320,4.063,3321,2.273,3322,4.063,3323,7.981,3324,2.571,3325,4.063,3326,2.571,3327,2.571,3328,6.938,3329,2.571,3330,2.571,3331,2.571,3332,2.571,3333,5.723,3334,2.571,3335,2.571,3336,5.037,3337,4.063,3338,2.571,3339,2.571,3340,8.172,3341,2.273,3342,2.571,3343,5.037,3344,5.037,3345,2.571,3346,4.063,3347,2.571,3348,2.273,3349,2.571,3350,2.571,3351,2.273,3352,2.571,3353,2.273,3354,2.571,3355,2.571,3356,2.571,3357,2.571,3358,3.591,3359,2.571,3360,2.571,3361,2.076,3362,2.273,3363,2.571,3364,2.571,3365,2.571,3366,2.571,3367,2.571,3368,2.571]],["title/dependencies.html",[358,2.602,3369,3.288]],["body/dependencies.html",[20,0.009,33,0.794,35,1.611,37,4.427,38,3.283,74,0.205,256,0.007,298,0.007,314,2.84,318,1.688,346,2.107,358,2.655,385,3.321,396,4.846,397,3.655,406,4.427,412,3.182,413,4.67,443,4.113,541,2.223,591,4.113,599,2.351,603,3.477,604,3.655,741,2.944,835,3.655,903,3.002,983,2.421,998,4.113,1145,2.84,1157,4.208,1158,3.477,1166,3.321,1312,2.944,1394,4.113,1395,4.113,1397,4.113,1537,2.744,1538,3.182,1627,4.427,1752,3.477,1805,3.057,1823,4.427,1857,4.846,1859,4.846,1961,3.655,2022,3.863,2135,4.427,2490,3.863,2938,4.427,3370,7,3371,5.483,3372,7.711,3373,5.483,3374,5.483,3375,5.483,3376,5.483,3377,5.483,3378,5.483,3379,5.483,3380,5.483,3381,5.483,3382,7,3383,8.123,3384,8.123,3385,8.123,3386,5.483,3387,5.483,3388,8.123,3389,5.483,3390,5.483,3391,5.483,3392,5.483,3393,5.483,3394,5.483,3395,5.483,3396,5.483,3397,5.483,3398,5.483,3399,5.483,3400,5.483,3401,5.483,3402,5.483,3403,5.483,3404,5.483,3405,5.483,3406,5.483,3407,5.483,3408,5.483,3409,5.483,3410,5.483,3411,5.483,3412,5.483]],["title/miscellaneous/enumerations.html",[3413,2.253,3414,4.75]],["body/miscellaneous/enumerations.html",[11,1.804,12,0.312,19,0.296,20,0.008,138,4.074,189,1.932,196,2.335,256,0.007,298,0.007,305,2.954,322,4.484,635,2.885,776,4.807,1060,3.723,1300,3.751,1750,5.291,1752,5.032,1756,4.74,2072,5.046,2425,5.046,2549,5.046,3114,6.408,3152,5.046,3154,5.945,3361,5.431,3413,4.074,3414,5.945,3415,5.945,3416,7.936,3417,6.727,3418,6.727,3419,6.727]],["title/miscellaneous/functions.html",[683,4.339,3413,2.253]],["body/miscellaneous/functions.html",[11,2.278,12,0.316,16,0.851,19,0.301,20,0.008,130,1.463,136,4.644,138,4.132,185,1.279,243,3.804,256,0.007,298,0.007,361,4.109,412,3.959,479,3.663,515,1.636,554,5.118,682,6.03,683,5.508,741,3.663,836,5.335,887,4.807,1005,4.132,3348,6.03,3351,6.03,3413,4.132,3420,6.822,3421,6.822,3422,6.822]],["title/index.html",[12,0.172,1033,2.48,2813,2.791]],["body/index.html",[4,0.123,19,0.193,20,0.009,22,1.85,38,2.054,60,1.258,61,2.054,81,5.194,83,2.258,91,0.982,93,3.536,127,1.287,129,3.824,153,2.92,154,1.483,195,2.777,197,2.777,208,3.536,256,0.006,284,2.919,298,0.006,302,2.514,312,2.054,328,2.777,347,5.999,352,6.095,353,5.846,354,3.871,432,3.871,444,1.992,483,2.542,511,5.33,516,2.351,538,2.919,539,4.524,540,3.536,541,1.776,548,2.919,549,3.086,550,2.777,561,4.868,563,3.652,579,3.286,619,3.536,649,2.351,656,2.054,657,1.992,659,2.192,663,1.348,675,2.542,855,1.728,903,1.878,923,3.989,999,5.568,1055,5.574,1141,3.536,1157,2.268,1158,2.777,1160,3.536,1233,3.286,1275,3.871,1312,2.351,1342,3.362,1515,3.536,1528,3.086,1566,3.871,1619,3.871,1756,3.086,1894,3.286,2022,4.249,2177,5.33,2218,3.871,2276,5.174,2328,3.536,2758,3.086,2868,3.871,3145,3.286,3177,3.871,3178,5.33,3194,3.871,3197,5.33,3206,5.574,3210,3.871,3219,3.286,3221,3.871,3255,6.567,3289,6.095,3291,3.871,3423,4.379,3424,6.03,3425,4.379,3426,3.871,3427,4.379,3428,6.896,3429,4.379,3430,4.379,3431,6.03,3432,3.536,3433,4.379,3434,4.379,3435,6.03,3436,4.379,3437,4.379,3438,4.379,3439,4.379,3440,4.379,3441,4.379,3442,4.379,3443,4.379,3444,4.379,3445,4.379,3446,4.379,3447,4.379,3448,4.379,3449,4.379,3450,4.379,3451,4.379,3452,4.379,3453,4.379,3454,4.379,3455,4.379,3456,4.379,3457,4.379,3458,4.379,3459,4.379,3460,3.871,3461,4.379,3462,6.03,3463,3.871,3464,4.379,3465,4.379,3466,6.03,3467,4.379,3468,6.03,3469,4.379,3470,4.379,3471,4.379,3472,4.379,3473,4.379,3474,4.379,3475,6.03,3476,4.379,3477,4.379,3478,4.379,3479,4.379,3480,4.379,3481,4.379,3482,6.03,3483,6.03,3484,4.379,3485,3.871,3486,3.871,3487,4.379,3488,4.379,3489,4.379,3490,6.03,3491,4.379,3492,6.03,3493,6.03,3494,4.379,3495,4.379,3496,6.896,3497,4.379,3498,4.379,3499,3.871,3500,4.379,3501,4.379,3502,4.379,3503,4.379,3504,4.379,3505,4.379,3506,4.379,3507,4.379,3508,4.379,3509,4.379,3510,4.379,3511,4.379,3512,3.871,3513,6.03,3514,4.379,3515,4.379,3516,4.379,3517,6.03,3518,4.379,3519,4.379,3520,4.379,3521,4.379,3522,4.379,3523,4.379,3524,3.871,3525,4.379,3526,4.379,3527,4.379,3528,4.379,3529,6.03,3530,4.379,3531,4.379,3532,4.379,3533,4.379,3534,3.871,3535,4.379,3536,4.379,3537,6.03,3538,4.379,3539,4.379,3540,4.379,3541,4.379,3542,4.524,3543,3.871,3544,3.871,3545,3.536]],["title/license.html",[1033,2.48,2813,2.791,3542,2.791]],["body/license.html",[2,1.157,4,0.159,5,0.131,7,0.34,20,0.006,24,1.195,29,0.103,46,2.771,64,1.565,67,5.481,74,0.072,91,0.553,101,2.878,127,0.725,129,1.565,133,4.126,153,1.195,162,1.376,179,2.95,185,0.737,205,2.282,206,1.851,249,3.958,253,2.282,255,1.738,256,0.004,269,1.992,270,4.515,275,1.851,298,0.004,308,0.199,311,1.376,312,2.623,330,2.149,337,3.279,350,1.851,351,1.494,380,1.235,483,1.432,548,1.645,550,1.565,552,3.454,626,1.494,649,1.325,655,2.282,656,2.299,676,1.645,677,3.387,741,2.111,924,1.851,936,1.851,945,2.193,970,2.804,972,1.278,1045,1.376,1128,3.175,1152,2.181,1181,1.738,1183,1.738,1202,1.645,1237,3.678,1246,2.95,1274,4.303,1307,3.175,1310,2.181,1317,3.941,1342,1.376,1532,6.246,1610,4.931,1621,2.181,1643,3.175,1677,3.175,1766,3.475,1894,1.851,1953,2.181,2064,4.942,2086,2.181,2149,1.432,2164,3.475,2255,4.333,2383,3.475,2428,1.992,2454,2.181,2488,4.942,2549,1.851,2593,1.992,2760,4.333,2762,2.181,2763,3.475,2872,2.181,2904,2.181,2984,3.175,3091,2.181,3145,3.678,3152,1.851,3173,2.181,3206,3.678,3219,3.678,3267,2.181,3293,2.181,3302,2.181,3460,3.475,3463,2.181,3499,2.181,3512,2.181,3524,2.181,3534,2.181,3542,6.685,3543,2.181,3544,6.457,3545,4.515,3546,2.467,3547,2.467,3548,2.467,3549,7.305,3550,7.901,3551,5.592,3552,6.108,3553,2.467,3554,8.099,3555,7.489,3556,2.467,3557,2.467,3558,7.489,3559,7.782,3560,6.108,3561,2.467,3562,6.108,3563,2.467,3564,5.592,3565,2.467,3566,2.467,3567,5.592,3568,3.932,3569,3.932,3570,2.467,3571,4.902,3572,3.932,3573,3.932,3574,2.467,3575,3.932,3576,2.467,3577,3.932,3578,2.467,3579,2.467,3580,2.467,3581,2.467,3582,2.467,3583,2.467,3584,4.902,3585,2.467,3586,4.902,3587,3.932,3588,7.901,3589,6.508,3590,5.592,3591,3.932,3592,2.467,3593,2.467,3594,2.467,3595,2.467,3596,2.467,3597,2.467,3598,8.911,3599,4.902,3600,2.467,3601,7.305,3602,2.467,3603,3.932,3604,2.467,3605,8.325,3606,8.387,3607,2.467,3608,2.467,3609,2.467,3610,2.467,3611,2.467,3612,2.467,3613,3.932,3614,2.467,3615,2.467,3616,2.467,3617,2.467,3618,5.592,3619,6.108,3620,2.467,3621,3.932,3622,5.592,3623,3.932,3624,2.467,3625,6.108,3626,2.467,3627,2.467,3628,4.902,3629,2.467,3630,2.467,3631,2.467,3632,3.932,3633,2.467,3634,2.467,3635,2.467,3636,4.902,3637,2.467,3638,2.467,3639,2.467,3640,7.489,3641,2.467,3642,3.932,3643,7.088,3644,3.932,3645,3.932,3646,3.932,3647,4.902,3648,3.932,3649,4.902,3650,3.932,3651,3.932,3652,3.932,3653,2.467,3654,3.932,3655,2.467,3656,6.108,3657,6.827,3658,4.902,3659,3.932,3660,2.467,3661,3.932,3662,2.467,3663,2.467,3664,4.902,3665,2.467,3666,2.467,3667,2.467,3668,4.902,3669,2.467,3670,2.467,3671,2.467,3672,3.932,3673,2.467,3674,2.467,3675,2.467,3676,2.467,3677,2.467,3678,2.467,3679,2.467,3680,3.932,3681,2.467,3682,2.467,3683,2.467,3684,2.467,3685,2.467,3686,2.467,3687,2.467,3688,4.902,3689,2.467,3690,2.467,3691,2.467,3692,2.467,3693,2.467,3694,2.467,3695,7.088,3696,2.467,3697,2.467,3698,2.467,3699,2.467,3700,2.467,3701,5.592,3702,3.932,3703,5.592,3704,2.467,3705,2.467,3706,2.467,3707,4.902,3708,2.467,3709,2.467,3710,3.932,3711,2.467,3712,2.467,3713,2.467,3714,2.467,3715,2.467,3716,2.467,3717,2.467,3718,2.467,3719,2.467,3720,2.467,3721,4.902,3722,5.592,3723,2.467,3724,2.467,3725,2.467,3726,2.467,3727,2.467,3728,2.467,3729,2.467,3730,2.467,3731,2.467,3732,2.467,3733,3.932,3734,2.467,3735,2.467,3736,3.932,3737,2.467,3738,2.467,3739,2.467,3740,2.467,3741,2.467,3742,2.467,3743,2.467,3744,5.592,3745,4.902,3746,4.902,3747,4.902,3748,3.932,3749,4.902,3750,3.932,3751,3.932,3752,3.932,3753,2.467,3754,2.467,3755,2.467,3756,2.467,3757,2.467,3758,2.467,3759,2.467,3760,3.932,3761,2.467,3762,2.467,3763,6.108,3764,2.467,3765,2.467,3766,2.467,3767,2.467,3768,2.467,3769,2.467,3770,2.467,3771,2.467,3772,6.108,3773,2.467,3774,2.467,3775,2.467,3776,2.467,3777,2.467,3778,2.467,3779,2.467,3780,2.467,3781,2.467,3782,2.467,3783,2.467,3784,2.467,3785,2.467,3786,2.467,3787,4.902,3788,2.467,3789,2.467,3790,2.467,3791,3.932,3792,2.467,3793,2.467,3794,2.467,3795,2.467,3796,2.467,3797,2.467,3798,2.467,3799,2.467,3800,2.467,3801,2.467,3802,2.467,3803,2.467,3804,2.467,3805,2.467,3806,2.467,3807,3.932,3808,2.467,3809,2.467,3810,3.932,3811,3.932,3812,2.467,3813,2.467,3814,2.467,3815,2.467,3816,2.467,3817,2.467,3818,2.467,3819,2.467,3820,2.467,3821,2.467,3822,2.181,3823,2.181,3824,2.467,3825,2.467,3826,2.467,3827,2.467,3828,2.467,3829,2.467]],["title/modules.html",[357,2.62]],["body/modules.html",[20,0.007,256,0.007,298,0.007,356,4.715,357,2.695,367,4.428,368,3.947,369,4.428,370,4.428,371,4.428,372,4.428,373,4.428,374,3.806,375,3.806,376,4.428,548,5.684,550,5.872,586,3.985,1783,3.985,2265,3.985,2433,4.428,3830,9.26,3831,9.26,3832,9.361,3833,8.526]],["title/overview.html",[3432,4.933]],["body/overview.html",[2,1.742,20,0.009,47,3.281,52,4.568,63,4.568,256,0.005,294,2.355,298,0.005,300,1.019,340,1.322,355,1.117,356,6.838,357,1.593,358,1.799,359,1.924,360,1.924,361,1.742,362,1.859,363,1.859,364,3.283,365,3.283,366,3.283,367,6.312,368,4.602,369,4.866,370,4.442,371,6.461,372,4.442,373,4.442,374,5.217,375,5.114,376,6.069,377,4.202,378,2.781,379,1.924,380,1.859,521,4.991,523,3.818,582,3.283,583,3.283,584,3.283,585,3.283,586,5.287,587,4.226,588,5.546,693,2.617,742,4.389,745,3.812,798,1.391,808,4.389,809,3.385,972,1.924,988,4.767,990,4.226,1186,3.997,1346,3.818,1458,5.248,1476,3.283,1477,3.283,1478,3.283,1747,4.767,1779,3.283,1780,3.283,1781,3.283,1782,3.283,1783,5.7,1784,4.182,1785,4.008,1786,4.182,2149,2.156,2261,3.283,2262,3.283,2263,3.283,2264,3.283,2265,5.287,2429,3.283,2430,3.283,2431,3.283,2432,3.283,2433,5.379,2451,5.248,2540,3.283,2541,3.283,2542,3.283,2580,3.283,2581,3.283,2582,3.283,2826,3.283,2827,3.283,2829,3.283,3004,3.283,3005,3.283,3007,3.283,3189,3.283,3192,2.999,3213,3.283,3341,3.283,3432,2.999,3834,3.714]],["title/properties.html",[13,0.779,3369,3.288]],["body/properties.html",[7,0.955,13,1.003,20,0.009,256,0.008,298,0.008,353,6.054,923,3.716,994,3.464,1055,5.192,3145,5.192,3219,5.192,3426,6.117,3485,7.133,3486,6.117,3542,5.192,3545,5.588,3822,6.117,3823,6.117,3835,6.921,3836,6.921,3837,6.921,3838,6.921,3839,6.921]],["title/miscellaneous/typealiases.html",[3413,2.253,3840,5.374]],["body/miscellaneous/typealiases.html",[9,3.348,12,0.278,19,0.396,20,0.009,65,2.907,99,2.731,100,2.307,136,4.3,138,3.636,155,2.434,196,2.084,247,2.307,256,0.007,298,0.007,301,4.23,302,3.089,303,4.23,322,4.002,323,4.488,348,3.807,480,2.434,512,2.816,632,5.748,639,4.002,640,4.699,643,4.002,649,3.223,676,4.002,677,3.636,678,4.504,679,4.132,719,1.892,864,3.11,915,4.3,970,2.248,973,4.847,979,5.221,980,3.348,1072,4.847,1077,5.983,1078,4.504,1184,3.979,1260,3.636,1300,3.348,1436,4.847,1437,6.776,1446,4.94,1454,5.559,1459,4.847,1467,5.983,1471,4.504,2138,5.221,2238,4.002,2630,4.847,2647,4.847,2657,4.847,2658,4.002,3413,3.636,3841,6.003,3842,6.003,3843,6.003,3844,6.003,3845,6.003,3846,6.003,3847,8.038,3848,7.41]],["title/miscellaneous/variables.html",[2548,4.339,3413,2.253]],["body/miscellaneous/variables.html",[9,1.842,11,1.964,12,0.153,18,0.675,19,0.367,20,0.009,21,1.944,22,0.886,59,2.328,60,0.949,65,1.6,78,1.918,83,2.206,103,1.461,104,1.888,109,2.479,111,2.479,113,1.448,127,0.971,129,2.095,131,1.383,132,2.465,133,5.393,141,2.15,142,2.391,185,1.104,196,1.147,219,3.894,231,4.14,256,0.005,298,0.005,305,2.904,330,1.27,342,0.775,355,1.481,390,3.696,393,3.696,399,3.696,401,3.977,403,3.696,409,3.696,425,3.696,430,3.727,452,1.842,479,1.774,480,1.34,483,1.918,528,1.55,554,2.479,572,1.459,579,2.479,580,2.668,589,2.668,605,6.892,606,2.92,607,6.705,608,6.172,609,2.92,610,2.92,611,2.668,612,2.92,613,2.92,614,2.92,615,2.479,616,2.92,652,1.654,657,1.503,659,1.654,719,2.058,727,3.284,749,3.284,832,3.062,865,3.124,916,1.55,1131,1.918,1145,1.711,1172,1.918,1193,2.311,1317,4.913,1435,2.328,1441,2.668,1446,2.203,1447,2.92,1451,2.92,1452,2.92,1455,2.92,1456,4.898,1457,4.756,1471,5.239,1486,2.668,1488,3.977,1489,2.92,1490,2.92,1491,2.92,1492,2.92,1493,5.771,1494,6.172,1495,6.125,1496,6.086,1497,2.92,1498,2.92,1499,2.92,1500,2.92,1501,2.92,1787,2.668,1806,2.668,1820,4.15,1825,3.977,1827,2.92,1933,2.668,1941,5.206,1945,2.92,1946,2.92,1947,2.92,1948,2.479,1949,2.92,1950,2.92,1951,2.92,1952,2.92,2019,2.328,2059,4.354,2093,3.124,2187,3.471,2324,4.419,2544,2.668,2547,2.92,2548,3.977,2549,2.479,2550,2.92,2551,2.92,2552,5.206,2553,5.206,2658,2.203,2693,2.92,2694,2.328,2728,3.977,2731,4.354,2830,2.668,2832,2.668,2833,2.92,2834,2.479,2835,2.92,2836,2.92,3043,2.668,3044,5.206,3045,5.206,3046,5.206,3047,2.92,3113,3.696,3152,2.479,3312,2.92,3319,2.92,3321,2.92,3353,2.92,3358,5.206,3361,2.668,3362,4.354,3413,2.001,3415,2.92,3849,3.304,3850,3.304,3851,3.304,3852,3.304,3853,4.926,3854,3.304,3855,3.304,3856,3.304,3857,4.926,3858,3.304,3859,3.304,3860,3.304,3861,3.304,3862,5.89,3863,3.304,3864,3.304,3865,3.304,3866,7.323,3867,3.304,3868,5.89,3869,4.926,3870,3.304,3871,3.304,3872,4.926,3873,3.304,3874,4.926,3875,3.304,3876,3.304,3877,3.304,3878,3.304,3879,4.926,3880,3.304,3881,3.304,3882,3.304,3883,3.304]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":264,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["0.0.1",{"_index":3835,"title":{},"body":{"properties.html":{}}}],["0.14.0",{"_index":3388,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":3393,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":3407,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":3383,"title":{},"body":{"dependencies.html":{}}}],["0.3.25",{"_index":3411,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":2964,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["0.5.1",{"_index":3392,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":3305,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3334,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":3335,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3301,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3304,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":3307,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3337,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3357,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3322,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":1116,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["01'})@isstring",{"_index":1110,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["02",{"_index":1119,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["02'})@isstring",{"_index":3049,"title":{},"body":{"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["03t10:30:00z",{"_index":1123,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["05",{"_index":3174,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":3205,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":1122,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"changelog.html":{}}}],["09",{"_index":3271,"title":{},"body":{"changelog.html":{}}}],["0bd3568",{"_index":3200,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":2149,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/WellKnownService.html":{},"license.html":{},"overview.html":{}}}],["1.0.0",{"_index":3270,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":3258,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":3252,"title":{},"body":{"changelog.html":{}}}],["1.10.0",{"_index":3391,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":3236,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":3233,"title":{},"body":{"changelog.html":{}}}],["1.2.2",{"_index":3229,"title":{},"body":{"changelog.html":{}}}],["1.2.3",{"_index":3215,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":3204,"title":{},"body":{"changelog.html":{}}}],["1.4.0",{"_index":3172,"title":{},"body":{"changelog.html":{}}}],["1.5.4",{"_index":3405,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":3340,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":3347,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":3303,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":3320,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":3311,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":3342,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":3259,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["10,000",{"_index":2949,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["10.5.0",{"_index":3402,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":922,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["1000",{"_index":177,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["10000",{"_index":2957,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["11",{"_index":3253,"title":{},"body":{"changelog.html":{}}}],["11.0.0",{"_index":3382,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":3377,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":3412,"title":{},"body":{"dependencies.html":{}}}],["11.1.3",{"_index":3372,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":3381,"title":{},"body":{"dependencies.html":{}}}],["11/17",{"_index":3327,"title":{},"body":{"coverage.html":{}}}],["11/18",{"_index":3315,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":3211,"title":{},"body":{"changelog.html":{}}}],["12/14",{"_index":3360,"title":{},"body":{"coverage.html":{}}}],["12/schema",{"_index":2626,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["12395c8",{"_index":3278,"title":{},"body":{"changelog.html":{}}}],["123e4567",{"_index":1103,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["12d3",{"_index":1105,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["13",{"_index":3213,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["13.0.0",{"_index":3403,"title":{},"body":{"dependencies.html":{}}}],["14/14",{"_index":3363,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":3189,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["15.1.3",{"_index":3404,"title":{},"body":{"dependencies.html":{}}}],["16",{"_index":3341,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["17.13.3",{"_index":3394,"title":{},"body":{"dependencies.html":{}}}],["17/17",{"_index":3352,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":3183,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":3199,"title":{},"body":{"changelog.html":{}}}],["1912bb8",{"_index":3207,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":290,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"changelog.html":{}}}],["2.0",{"_index":3145,"title":{},"body":{"injectables/WellKnownService.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["2/2",{"_index":3333,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":3336,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":3216,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["200",{"_index":505,"title":{},"body":{"controllers/AuthController.html":{}}}],["2004",{"_index":3547,"title":{},"body":{"license.html":{}}}],["201",{"_index":1739,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["2024",{"_index":1109,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["2025",{"_index":3173,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["20250602121005",{"_index":3385,"title":{},"body":{"dependencies.html":{}}}],["22",{"_index":3179,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":3355,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":579,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["24h",{"_index":577,"title":{},"body":{"controllers/AuthController.html":{}}}],["25",{"_index":3192,"title":{},"body":{"changelog.html":{},"coverage.html":{},"overview.html":{}}}],["256",{"_index":1417,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{}}}],["259ab39",{"_index":3220,"title":{},"body":{"changelog.html":{}}}],["2742ec4",{"_index":3298,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":3195,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":3202,"title":{},"body":{"changelog.html":{}}}],["2913417",{"_index":3228,"title":{},"body":{"changelog.html":{}}}],["295428b",{"_index":3232,"title":{},"body":{"changelog.html":{}}}],["2a71850",{"_index":3282,"title":{},"body":{"changelog.html":{}}}],["2aa727a",{"_index":3226,"title":{},"body":{"changelog.html":{}}}],["2f07af2",{"_index":3281,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":3246,"title":{},"body":{"changelog.html":{}}}],["3.0.1",{"_index":3376,"title":{},"body":{"dependencies.html":{}}}],["3.14.1",{"_index":3397,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":3370,"title":{},"body":{"dependencies.html":{}}}],["3/13",{"_index":3356,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":3323,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3344,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":3346,"title":{},"body":{"coverage.html":{}}}],["3/6",{"_index":3339,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":919,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["3000:3000",{"_index":3495,"title":{},"body":{"index.html":{}}}],["32",{"_index":3493,"title":{},"body":{"index.html":{}}}],["32fbd8e",{"_index":3242,"title":{},"body":{"changelog.html":{}}}],["33ac2c7",{"_index":3284,"title":{},"body":{"changelog.html":{}}}],["35",{"_index":3834,"title":{},"body":{"overview.html":{}}}],["35f4d1e",{"_index":3256,"title":{},"body":{"changelog.html":{}}}],["3600",{"_index":2217,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["36492f7",{"_index":3193,"title":{},"body":{"changelog.html":{}}}],["38",{"_index":3349,"title":{},"body":{"coverage.html":{}}}],["39b17b8",{"_index":3181,"title":{},"body":{"changelog.html":{}}}],["3ac47ec",{"_index":3275,"title":{},"body":{"changelog.html":{}}}],["4.0.0",{"_index":3371,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":3399,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":3373,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":3398,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":3328,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":3318,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":3310,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":507,"title":{},"body":{"controllers/AuthController.html":{}}}],["40ccd32",{"_index":3277,"title":{},"body":{"changelog.html":{}}}],["426614174000",{"_index":1115,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["426614174000'})@isuuid",{"_index":1107,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["45f3f7f",{"_index":3279,"title":{},"body":{"changelog.html":{}}}],["46c9ce6",{"_index":3251,"title":{},"body":{"changelog.html":{}}}],["47",{"_index":3331,"title":{},"body":{"coverage.html":{}}}],["4be0171",{"_index":3280,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":1868,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/Oid4vpService.html":{}}}],["5.0.3",{"_index":3380,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":3410,"title":{},"body":{"dependencies.html":{}}}],["5/13",{"_index":3350,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":3316,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":3302,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["500",{"_index":769,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["53804b0",{"_index":3209,"title":{},"body":{"changelog.html":{}}}],["54e8a4e",{"_index":3288,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":3239,"title":{},"body":{"changelog.html":{}}}],["6.0.0",{"_index":3379,"title":{},"body":{"dependencies.html":{}}}],["6.0.11",{"_index":3395,"title":{},"body":{"dependencies.html":{}}}],["6.0.2",{"_index":3389,"title":{},"body":{"dependencies.html":{}}}],["6/10",{"_index":3306,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":2324,"title":{},"body":{"injectables/Oid4vpService.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["61",{"_index":3314,"title":{},"body":{"coverage.html":{}}}],["64",{"_index":3326,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":3309,"title":{},"body":{"coverage.html":{}}}],["6a6cdb6",{"_index":3268,"title":{},"body":{"changelog.html":{}}}],["6bb4aa9",{"_index":3231,"title":{},"body":{"changelog.html":{}}}],["6d31de0",{"_index":3263,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":3250,"title":{},"body":{"changelog.html":{}}}],["7.8.2",{"_index":3408,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":3338,"title":{},"body":{"coverage.html":{}}}],["7337c24",{"_index":3190,"title":{},"body":{"changelog.html":{}}}],["75",{"_index":3343,"title":{},"body":{"coverage.html":{}}}],["7a6a69c",{"_index":3223,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":294,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"overview.html":{}}}],["8.16.3",{"_index":3401,"title":{},"body":{"dependencies.html":{}}}],["8/10",{"_index":3354,"title":{},"body":{"coverage.html":{}}}],["8/13",{"_index":3329,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":3345,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":3317,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":3359,"title":{},"body":{"coverage.html":{}}}],["86400",{"_index":546,"title":{},"body":{"controllers/AuthController.html":{}}}],["88fbb1f",{"_index":3196,"title":{},"body":{"changelog.html":{}}}],["892b30e",{"_index":3276,"title":{},"body":{"changelog.html":{}}}],["8dc4986",{"_index":3203,"title":{},"body":{"changelog.html":{}}}],["8f9498a",{"_index":3234,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":3557,"title":{},"body":{"license.html":{}}}],["9/10",{"_index":3366,"title":{},"body":{"coverage.html":{}}}],["9/19",{"_index":3332,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":3364,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":3365,"title":{},"body":{"coverage.html":{}}}],["905e17c",{"_index":3235,"title":{},"body":{"changelog.html":{}}}],["9104df3",{"_index":3238,"title":{},"body":{"changelog.html":{}}}],["91b5499",{"_index":3254,"title":{},"body":{"changelog.html":{}}}],["937603a",{"_index":3257,"title":{},"body":{"changelog.html":{}}}],["98303c1",{"_index":3290,"title":{},"body":{"changelog.html":{}}}],["a128gcm",{"_index":2318,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["a456",{"_index":1106,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["a946a08",{"_index":3180,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":3725,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":1964,"title":{},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["abstraction",{"_index":3450,"title":{},"body":{"index.html":{}}}],["ac4ee24",{"_index":3287,"title":{},"body":{"changelog.html":{}}}],["accept",{"_index":1767,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/WellKnownController.html":{}}}],["acceptance",{"_index":3789,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":3787,"title":{},"body":{"license.html":{}}}],["accepts",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":9,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"entities/CertEntity.html":{},"injectables/Oid4vpService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["access_token",{"_index":542,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{}}}],["accesscert",{"_index":2331,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscert?.length",{"_index":2342,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscertificatecontrollerfindone",{"_index":40,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificatecontrollerregister",{"_index":41,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificateid",{"_index":2537,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["accesscertificateresponse",{"_index":1,"title":{"interfaces/AccessCertificateResponse.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"coverage.html":{}}}],["accessing",{"_index":90,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["accesstoken",{"_index":86,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesstokenrequest",{"_index":886,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["accordingly",{"_index":1049,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["act",{"_index":3795,"title":{},"body":{"license.html":{}}}],["acting",{"_index":3563,"title":{},"body":{"license.html":{}}}],["action",{"_index":2289,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["active",{"_index":2647,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["acts",{"_index":3770,"title":{},"body":{"license.html":{}}}],["add",{"_index":205,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/MetricModule.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/WellKnownService.html":{},"changelog.html":{},"license.html":{}}}],["add(issuer_state",{"_index":2850,"title":{},"body":{"injectables/SessionService.html":{}}}],["addaccesscertificate",{"_index":224,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["addaccesscertificate(config",{"_index":2560,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addendum",{"_index":3716,"title":{},"body":{"license.html":{}}}],["adding",{"_index":68,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["additional",{"_index":1274,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["additionaldata",{"_index":2787,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["additions",{"_index":3620,"title":{},"body":{"license.html":{}}}],["addkey",{"_index":1909,"title":{},"body":{"controllers/KeyController.html":{}}}],["addkey(token",{"_index":1912,"title":{},"body":{"controllers/KeyController.html":{}}}],["addregistrationcertificate",{"_index":242,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["addregistrationcertificate(req",{"_index":2562,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp",{"_index":2554,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp(tenantid",{"_index":183,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["adds",{"_index":178,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["adjust",{"_index":3274,"title":{},"body":{"changelog.html":{}}}],["advancing",{"_index":3533,"title":{},"body":{"index.html":{}}}],["advised",{"_index":3785,"title":{},"body":{"license.html":{}}}],["against",{"_index":1246,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"license.html":{}}}],["agent",{"_index":481,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["agree",{"_index":3798,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":3747,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":3730,"title":{},"body":{"license.html":{}}}],["alg",{"_index":916,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["algorithm",{"_index":272,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/RegistrarService.html":{}}}],["algorithms",{"_index":1440,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["alias",{"_index":3308,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":3841,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":2139,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["alleging",{"_index":3677,"title":{},"body":{"license.html":{}}}],["allowedauthenticationschemes",{"_index":2182,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["allowedsigningalgs",{"_index":901,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["allowing",{"_index":1046,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["allowinsecureurls",{"_index":1810,"title":{},"body":{"modules/IssuerModule.html":{}}}],["alone",{"_index":3669,"title":{},"body":{"license.html":{}}}],["along",{"_index":3708,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":3715,"title":{},"body":{"license.html":{}}}],["alpha",{"_index":3384,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":197,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["always",{"_index":1533,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["amount",{"_index":1322,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["and/or",{"_index":3792,"title":{},"body":{"license.html":{}}}],["annotations",{"_index":3610,"title":{},"body":{"license.html":{}}}],["any).issuer",{"_index":1890,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["any).method",{"_index":966,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/IssuanceService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["apache",{"_index":3545,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["api",{"_index":81,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"injectables/RegistrarService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{}}}],["api:read",{"_index":2411,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["api:write",{"_index":2412,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apibody",{"_index":520,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apibody({description",{"_index":729,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["apiexcludecontroller",{"_index":345,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiexcludecontroller(process.env.swagger_all",{"_index":754,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiheader",{"_index":3126,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apihideproperty",{"_index":1650,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apihideproperty()@column('varchar",{"_index":1647,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apikey",{"_index":324,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{}}}],["apikeyconfig",{"_index":299,"title":{"classes/ApiKeyConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["apioperation",{"_index":3121,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apioperation({summary",{"_index":3115,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiparam",{"_index":2096,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["apiproduces",{"_index":1746,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["apiproduces('application/json",{"_index":1759,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproduces(mediatype.application_json",{"_index":3128,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiproperty",{"_index":1113,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["apiproperty({description",{"_index":1099,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["apiproperty({example",{"_index":2071,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["apiresponse",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiresponse({description",{"_index":1738,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apisecurity",{"_index":1337,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apisecurity('oauth2",{"_index":1344,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apitags",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{}}}],["apitags('authentication",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('issuer",{"_index":1341,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["apitags('presentation",{"_index":2410,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apitags('session",{"_index":2677,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags('status",{"_index":2925,"title":{},"body":{"controllers/StatusListController.html":{}}}],["app/app.controller",{"_index":415,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":339,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appear",{"_index":3712,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":3603,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":3745,"title":{},"body":{"license.html":{}}}],["application",{"_index":138,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["application/json",{"_index":1756,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["application/jwk",{"_index":3110,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["application/jwt",{"_index":3154,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["application/statuslist+jwt",{"_index":2923,"title":{},"body":{"controllers/StatusListController.html":{}}}],["application_json",{"_index":3418,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["application_jwt",{"_index":3419,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["applies",{"_index":3663,"title":{},"body":{"license.html":{}}}],["apply",{"_index":3807,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":356,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":3815,"title":{},"body":{"license.html":{}}}],["appropriateness",{"_index":3759,"title":{},"body":{"license.html":{}}}],["architecture",{"_index":3525,"title":{},"body":{"index.html":{}}}],["archives",{"_index":3821,"title":{},"body":{"license.html":{}}}],["arising",{"_index":3776,"title":{},"body":{"license.html":{}}}],["array",{"_index":1207,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array(size",{"_index":2960,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array(size).fill(0).map",{"_index":2958,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array.isarray(dcql_query",{"_index":2301,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["ask",{"_index":3540,"title":{},"body":{"index.html":{}}}],["asserted",{"_index":3804,"title":{},"body":{"license.html":{}}}],["associated",{"_index":1181,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["assume",{"_index":936,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"license.html":{}}}],["async",{"_index":141,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["att",{"_index":2527,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attach",{"_index":3808,"title":{},"body":{"license.html":{}}}],["attached",{"_index":3602,"title":{},"body":{"license.html":{}}}],["attestation",{"_index":925,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["attestations",{"_index":2475,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attestations.map((att",{"_index":2528,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attestations—issuing",{"_index":3461,"title":{},"body":{"index.html":{}}}],["attribute",{"_index":1275,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"index.html":{}}}],["attribution",{"_index":3701,"title":{},"body":{"license.html":{}}}],["aud",{"_index":2321,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["audience",{"_index":578,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth",{"_index":124,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["auth.controller",{"_index":594,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":593,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.guard",{"_index":1340,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth/auth.module",{"_index":410,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/token.decorator",{"_index":1338,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth_client_id",{"_index":616,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["auth_client_secret",{"_index":615,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"miscellaneous/variables.html":{}}}],["auth_client_secret=$(openssl",{"_index":3494,"title":{},"body":{"index.html":{}}}],["auth_client_secret=your",{"_index":3500,"title":{},"body":{"index.html":{}}}],["auth_queries",{"_index":768,"title":{},"body":{"controllers/AuthorizeController.html":{},"entities/Session.html":{}}}],["auth_session",{"_index":777,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth_validation_schema",{"_index":409,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authconfig",{"_index":323,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["authcontroller",{"_index":496,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticating",{"_index":84,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["authentication",{"_index":302,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["authenticationconfig",{"_index":679,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["authenticationconfigdto",{"_index":638,"title":{"classes/AuthenticationConfigDto.html":{}},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationconfighelper",{"_index":680,"title":{"classes/AuthenticationConfigHelper.html":{}},"body":{"classes/AuthenticationConfigHelper.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["authenticationconfighelper.getpresentationconfig(authconfig",{"_index":953,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationconfighelper.isauthurlauth(authconfig",{"_index":957,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationconfighelper.isnoneauth(authconfig",{"_index":963,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationconfighelper.ispresentationduringissuanceauth",{"_index":951,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationurlconfig",{"_index":646,"title":{"classes/AuthenticationUrlConfig.html":{}},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authguard",{"_index":1824,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":1814,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authheader",{"_index":555,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.startswith('basic",{"_index":557,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.substring(6",{"_index":559,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":367,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":3839,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":319,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["authorization_challenge_endpoint",{"_index":871,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_code",{"_index":889,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorization_encrypted_response_alg",{"_index":2316,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_encrypted_response_enc",{"_index":2317,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_endpoint",{"_index":858,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_request",{"_index":2287,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{}}}],["authorization_server",{"_index":1301,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["authorization_servers",{"_index":1302,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["authorizationchallengeendpoint",{"_index":714,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationchallengeendpoint(res",{"_index":717,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{}}}],["authorizationcodegrantidentifier",{"_index":830,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationresponse",{"_index":704,"title":{"classes/AuthorizationResponse.html":{}},"body":{"classes/AuthorizationResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["authorizationserver",{"_index":847,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata",{"_index":814,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.dpop_signing_alg_values_supported",{"_index":902,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.issuer",{"_index":920,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservers",{"_index":2154,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["authorize",{"_index":715,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(@query",{"_index":758,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(queries",{"_index":723,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize.service",{"_index":743,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize/authorize.controller",{"_index":1792,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorize/authorize.service",{"_index":1789,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["authorizecontroller",{"_index":708,"title":{"controllers/AuthorizeController.html":{}},"body":{"controllers/AuthorizeController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["authorized",{"_index":655,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"license.html":{}}}],["authorized_code",{"_index":892,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizequeries",{"_index":718,"title":{"classes/AuthorizeQueries.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"coverage.html":{}}}],["authorizequeries})@post('par",{"_index":731,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorizeservice",{"_index":742,"title":{"injectables/AuthorizeService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"overview.html":{}}}],["authorship",{"_index":3599,"title":{},"body":{"license.html":{}}}],["authresponse",{"_index":622,"title":{"interfaces/AuthResponse.html":{}},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["authserver",{"_index":849,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/.well",{"_index":861,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize",{"_index":859,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/challenge",{"_index":872,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/par",{"_index":868,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/token",{"_index":857,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authtype",{"_index":3083,"title":{},"body":{"injectables/WebhookService.html":{}}}],["authurl",{"_index":671,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["authz",{"_index":2329,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authzmetadata",{"_index":800,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/WellKnownController.html":{}}}],["authzmetadata(session",{"_index":812,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/WellKnownController.html":{}}}],["authzservice",{"_index":2115,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["autoloadentities",{"_index":1506,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["autologging",{"_index":460,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":2021,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["available",{"_index":548,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"index.html":{},"license.html":{},"modules.html":{}}}],["avoid",{"_index":2761,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["await",{"_index":142,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["axios",{"_index":3390,"title":{},"body":{"dependencies.html":{}}}],["b",{"_index":3691,"title":{},"body":{"license.html":{}}}],["b3abd57",{"_index":3295,"title":{},"body":{"changelog.html":{}}}],["b989c6c",{"_index":3244,"title":{},"body":{"changelog.html":{}}}],["b99786b",{"_index":3214,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":567,"title":{},"body":{"controllers/AuthController.html":{}}}],["backend",{"_index":3428,"title":{},"body":{"index.html":{}}}],["badgateway/oauth2",{"_index":37,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"dependencies.html":{}}}],["badrequestexception",{"_index":985,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{}}}],["badrequestexception('session",{"_index":2185,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["base",{"_index":641,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["base64",{"_index":561,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ResolverService.html":{},"index.html":{}}}],["base64credentials",{"_index":558,"title":{},"body":{"controllers/AuthController.html":{}}}],["base64url",{"_index":3878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":129,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["baseurl",{"_index":122,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["basic",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{}}}],["basis",{"_index":3748,"title":{},"body":{"license.html":{}}}],["batch",{"_index":1315,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batch_credential_issuance",{"_index":1303,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["batch_size",{"_index":1323,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["batches",{"_index":2229,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["bearer",{"_index":320,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/TokenResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["beef4d2",{"_index":3249,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":933,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["behalf",{"_index":3625,"title":{},"body":{"license.html":{}}}],["being",{"_index":1137,"title":{},"body":{"entities/CredentialConfig.html":{},"interfaces/SessionLogContext.html":{}}}],["below",{"_index":3604,"title":{},"body":{"license.html":{}}}],["beneficial",{"_index":3583,"title":{},"body":{"license.html":{}}}],["better",{"_index":3087,"title":{},"body":{"injectables/WebhookService.html":{}}}],["between",{"_index":630,"title":{},"body":{"interfaces/AuthResponse.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/IssuanceService.html":{}}}],["binary",{"_index":1758,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bind",{"_index":3617,"title":{},"body":{"license.html":{}}}],["binding",{"_index":1096,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["binding.credentialconfig",{"_index":1150,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["binding.credentialconfigid",{"_index":1409,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["binding.dto.ts",{"_index":1094,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["binding.dto.ts:13",{"_index":1102,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["binding.dto.ts:20",{"_index":1108,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["binding.dto.ts:28",{"_index":1111,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["binding.dto.ts:40",{"_index":3050,"title":{},"body":{"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["binding.dto.ts:51",{"_index":1293,"title":{},"body":{"classes/CredentialIssuanceBindingResponseDto.html":{}}}],["binding.dto.ts:57",{"_index":1292,"title":{},"body":{"classes/CredentialIssuanceBindingResponseDto.html":{}}}],["binding.dto.ts:63",{"_index":1294,"title":{},"body":{"classes/CredentialIssuanceBindingResponseDto.html":{}}}],["binding.dto.ts:69",{"_index":1295,"title":{},"body":{"classes/CredentialIssuanceBindingResponseDto.html":{}}}],["binding.dto.ts:75",{"_index":1291,"title":{},"body":{"classes/CredentialIssuanceBindingResponseDto.html":{}}}],["binding.entity",{"_index":1170,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["binding.entity.ts",{"_index":1269,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"coverage.html":{}}}],["binding.entity.ts:12",{"_index":1283,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:15",{"_index":1286,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:24",{"_index":1282,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:33",{"_index":1285,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:39",{"_index":1287,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:45",{"_index":1279,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.issuanceconfig",{"_index":1640,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["binding?.keyid",{"_index":1412,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["bindings",{"_index":1153,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["bits",{"_index":2932,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["bitsperstatus",{"_index":2933,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["body",{"_index":187,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["body.auth_session",{"_index":934,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.client_id",{"_index":568,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.client_secret",{"_index":569,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.code",{"_index":890,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.credentialconfigurationids",{"_index":2161,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.event",{"_index":2226,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.grant_type",{"_index":551,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.issuanceid",{"_index":2160,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.issuer_state",{"_index":927,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.notification_id",{"_index":2224,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.requestid",{"_index":2416,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body.response",{"_index":2355,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["body.response_type",{"_index":1769,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["body.webhook",{"_index":2417,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body['pre",{"_index":891,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["boilerplate",{"_index":3809,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":27,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["bootstrap",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":764,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bound",{"_index":252,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["boundaries",{"_index":3471,"title":{},"body":{"index.html":{}}}],["brackets",{"_index":3811,"title":{},"body":{"license.html":{}}}],["branch",{"_index":3519,"title":{},"body":{"index.html":{}}}],["bridges",{"_index":3427,"title":{},"body":{"index.html":{}}}],["browse",{"_index":3832,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3830,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":1770,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["buffer.from",{"_index":560,"title":{},"body":{"controllers/AuthController.html":{}}}],["buffer.from(signature).tostring('base64url",{"_index":3875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.from(signaturebase64url",{"_index":3877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bug",{"_index":3175,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":3837,"title":{},"body":{"properties.html":{}}}],["build",{"_index":3294,"title":{},"body":{"changelog.html":{}}}],["builder/querypartialentity",{"_index":2880,"title":{},"body":{"injectables/SessionService.html":{}}}],["built",{"_index":3467,"title":{},"body":{"index.html":{}}}],["bundle",{"_index":2233,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["business",{"_index":3456,"title":{},"body":{"index.html":{}}}],["c",{"_index":3698,"title":{},"body":{"license.html":{}}}],["c.id",{"_index":1018,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["c3b1b48",{"_index":3260,"title":{},"body":{"changelog.html":{}}}],["c805439",{"_index":3273,"title":{},"body":{"changelog.html":{}}}],["cache",{"_index":1865,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/WellKnownService.html":{}}}],["call",{"_index":2713,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["callback",{"_index":631,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{}}}],["callbacks",{"_index":672,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["called",{"_index":137,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["callhandler",{"_index":2709,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["calls",{"_index":3478,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":1815,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/SessionGuard.html":{}}}],["canactivate(context",{"_index":1819,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/SessionGuard.html":{}}}],["carry",{"_index":3693,"title":{},"body":{"license.html":{}}}],["case",{"_index":1474,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/Oid4vciService.html":{}}}],["catch",{"_index":565,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{}}}],["catcherror",{"_index":2726,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["catcherror((error",{"_index":2754,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["cause",{"_index":3573,"title":{},"body":{"license.html":{}}}],["cb",{"_index":1873,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cb(err",{"_index":1876,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cd",{"_index":3487,"title":{},"body":{"index.html":{}}}],["cert",{"_index":238,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["cert.crt",{"_index":1974,"title":{},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["cert.id",{"_index":261,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cert.publickey.export",{"_index":2610,"title":{},"body":{"injectables/ResolverService.html":{}}}],["cert.revoked",{"_index":259,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cert.subjectaltname?.includes(new",{"_index":2606,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certentity",{"_index":971,"title":{"entities/CertEntity.html":{}},"body":{"entities/CertEntity.html":{},"modules/CryptoModule.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["certificate",{"_index":10,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{}}}],["certificatechainlength",{"_index":2341,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["certificates",{"_index":71,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["certificatetype",{"_index":979,"title":{},"body":{"entities/CertEntity.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["certrepository",{"_index":1954,"title":{},"body":{"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["certs",{"_index":257,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["certs?.length",{"_index":263,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["certs[0",{"_index":2605,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certs[0].jwt",{"_index":265,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["chain",{"_index":2601,"title":{},"body":{"injectables/ResolverService.html":{}}}],["challenge",{"_index":722,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["changed",{"_index":3697,"title":{},"body":{"license.html":{}}}],["changelog",{"_index":3171,"title":{"changelog.html":{}},"body":{}}],["character",{"_index":3499,"title":{},"body":{"index.html":{},"license.html":{}}}],["charge",{"_index":3649,"title":{},"body":{"license.html":{}}}],["check",{"_index":207,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"classes/AuthenticationConfigHelper.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["checked",{"_index":941,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["checking",{"_index":2948,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["checks",{"_index":126,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/HealthController.html":{},"injectables/RegistrarService.html":{}}}],["checl",{"_index":2611,"title":{},"body":{"injectables/ResolverService.html":{}}}],["choice",{"_index":3438,"title":{},"body":{"index.html":{}}}],["choose",{"_index":3512,"title":{},"body":{"index.html":{},"license.html":{}}}],["ci",{"_index":3217,"title":{},"body":{"changelog.html":{}}}],["claim",{"_index":3674,"title":{},"body":{"license.html":{}}}],["claims",{"_index":1128,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"license.html":{}}}],["class",{"_index":74,"title":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/IssuanceDto.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrarConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"license.html":{}}}],["classes",{"_index":300,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/IssuanceDto.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrarConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"overview.html":{}}}],["clean",{"_index":3470,"title":{},"body":{"index.html":{}}}],["clear",{"_index":2369,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client",{"_index":38,"title":{"interfaces/Client.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["client.id",{"_index":574,"title":{},"body":{"controllers/AuthController.html":{}}}],["client.secret",{"_index":1019,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["client.service",{"_index":524,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["client_credentials",{"_index":535,"title":{},"body":{"controllers/AuthController.html":{}}}],["client_id",{"_index":538,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["client_metadata",{"_index":2309,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_name",{"_index":2319,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_secret",{"_index":540,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"index.html":{}}}],["clientcredentialsdto",{"_index":502,"title":{"classes/ClientCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["cliententry",{"_index":600,"title":{"entities/ClientEntry.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"coverage.html":{}}}],["clientid",{"_index":107,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["clientrepository",{"_index":1002,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clients",{"_index":621,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clientsecret",{"_index":110,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{}}}],["clientservice",{"_index":523,"title":{"injectables/ClientService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["clientstatus",{"_index":1077,"title":{},"body":{"entities/ClientEntry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["clone",{"_index":3482,"title":{},"body":{"index.html":{}}}],["cloudflare",{"_index":3261,"title":{},"body":{"changelog.html":{}}}],["cluster_appmodule",{"_index":364,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":366,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":365,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":582,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":585,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":584,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":583,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cryptomodule",{"_index":1476,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_cryptomodule_exports",{"_index":1478,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_cryptomodule_providers",{"_index":1477,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_issuermodule",{"_index":1779,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_exports",{"_index":1780,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_imports",{"_index":1782,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_providers",{"_index":1781,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule",{"_index":2261,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_exports",{"_index":2263,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_imports",{"_index":2264,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_providers",{"_index":2262,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule",{"_index":2429,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_exports",{"_index":2431,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_imports",{"_index":2432,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_providers",{"_index":2430,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_registrarmodule",{"_index":2540,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_registrarmodule_exports",{"_index":2542,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_registrarmodule_imports",{"_index":2543,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["cluster_registrarmodule_providers",{"_index":2541,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_resolvermodule",{"_index":2580,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_resolvermodule_exports",{"_index":2581,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_resolvermodule_providers",{"_index":2582,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_sessionmodule",{"_index":2826,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_exports",{"_index":2829,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_imports",{"_index":2828,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":2827,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule",{"_index":3004,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule_exports",{"_index":3005,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule_imports",{"_index":3006,"title":{},"body":{"modules/StatusListModule.html":{}}}],["cluster_statuslistmodule_providers",{"_index":3007,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_verifiermodule",{"_index":3058,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cluster_verifiermodule_imports",{"_index":3059,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cnf",{"_index":1382,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["cnonce",{"_index":912,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["cnonceexpiresin",{"_index":921,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["cnonceexpiresinseconds",{"_index":2216,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["code",{"_index":656,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{},"index.html":{},"license.html":{}}}],["code_challenge",{"_index":778,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_method",{"_index":779,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_methods_supported",{"_index":869,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["codecov",{"_index":3237,"title":{},"body":{"changelog.html":{}}}],["colorize",{"_index":464,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":982,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}}}],["column('json",{"_index":1134,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["column('json')@isobject",{"_index":1143,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{}}}],["column('varchar",{"_index":974,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["column({type",{"_index":1277,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}}}],["combination",{"_index":3670,"title":{},"body":{"license.html":{}}}],["comment",{"_index":3816,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":3783,"title":{},"body":{"license.html":{}}}],["common",{"_index":3566,"title":{},"body":{"license.html":{}}}],["commonoptions",{"_index":1504,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["communicates",{"_index":3451,"title":{},"body":{"index.html":{}}}],["communication",{"_index":3628,"title":{},"body":{"license.html":{}}}],["community",{"_index":3539,"title":{},"body":{"index.html":{}}}],["comparison",{"_index":271,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["compatible",{"_index":3177,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["compiled",{"_index":3596,"title":{},"body":{"license.html":{}}}],["complete",{"_index":2460,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["completed",{"_index":2238,"title":{},"body":{"injectables/Oid4vciService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["completion",{"_index":2796,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["compliance",{"_index":3824,"title":{},"body":{"license.html":{}}}],["complies",{"_index":3719,"title":{},"body":{"license.html":{}}}],["computer",{"_index":3781,"title":{},"body":{"license.html":{}}}],["condition",{"_index":2862,"title":{},"body":{"injectables/SessionService.html":{}}}],["conditions",{"_index":3550,"title":{},"body":{"license.html":{}}}],["config",{"_index":60,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["config.accesscertificateid",{"_index":211,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["config.authenticationconfig",{"_index":950,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["config.config",{"_index":700,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.credentialconfigid",{"_index":2163,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["config.dto",{"_index":668,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.dto.ts",{"_index":640,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/VCT.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["config.dto.ts:10",{"_index":3051,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:12",{"_index":3052,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:14",{"_index":3053,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:16",{"_index":3055,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:18",{"_index":3056,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:22",{"_index":701,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:23",{"_index":2385,"title":{},"body":{"classes/PresentationDuringIssuance.html":{}}}],["config.dto.ts:25",{"_index":2386,"title":{},"body":{"classes/PresentationDuringIssuance.html":{}}}],["config.dto.ts:31",{"_index":703,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:45",{"_index":2390,"title":{},"body":{"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.dto.ts:6",{"_index":3057,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:60",{"_index":661,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["config.dto.ts:69",{"_index":648,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["config.dto.ts:8",{"_index":3054,"title":{},"body":{"classes/VCT.html":{}}}],["config.entity",{"_index":1290,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["config.entity.ts",{"_index":1636,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"coverage.html":{}}}],["config.entity.ts:17",{"_index":1645,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:24",{"_index":1648,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:32",{"_index":2379,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:33",{"_index":1641,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:38",{"_index":2382,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:44",{"_index":1638,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:50",{"_index":1639,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:56",{"_index":1646,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.helper",{"_index":841,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["config.helper.ts",{"_index":681,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{},"coverage.html":{}}}],["config.helper.ts:14",{"_index":695,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.helper.ts:23",{"_index":692,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.helper.ts:32",{"_index":697,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.helper.ts:44",{"_index":690,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.id",{"_index":149,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["config.method",{"_index":698,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.service",{"_index":1339,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["config.service.ts",{"_index":1189,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["config.service.ts:109",{"_index":1209,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:123",{"_index":1213,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:136",{"_index":1198,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:16",{"_index":1195,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:17",{"_index":2004,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:23",{"_index":2013,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:31",{"_index":1210,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:47",{"_index":2015,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:59",{"_index":2005,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:63",{"_index":2012,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:67",{"_index":2011,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:71",{"_index":2010,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:75",{"_index":2008,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:79",{"_index":2007,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:86",{"_index":2016,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:94",{"_index":2020,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:97",{"_index":1205,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.ts",{"_index":2536,"title":{},"body":{"classes/RegistrarConfig.html":{},"coverage.html":{}}}],["config.ts:12",{"_index":2538,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["config.ts:8",{"_index":2539,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["config/credential",{"_index":1188,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["config_folder",{"_index":436,"title":{},"body":{"modules/AppModule.html":{}}}],["config_import",{"_index":433,"title":{},"body":{"modules/AppModule.html":{}}}],["config_import_force",{"_index":435,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":384,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configmodule.forroot",{"_index":417,"title":{},"body":{"modules/AppModule.html":{}}}],["configpath",{"_index":1219,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["configs",{"_index":1211,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["configservice",{"_index":34,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["configservice.get",{"_index":451,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configservice.get('jwt_issuer",{"_index":1889,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":1884,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_client_id",{"_index":1881,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_internal_issuer_url",{"_index":1880,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_internal_issuer_url')}/protocol/openid",{"_index":1870,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('log_level",{"_index":459,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('oidc",{"_index":1861,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow('db_database",{"_index":1516,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_host",{"_index":1508,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_password",{"_index":1514,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_port",{"_index":1510,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_username",{"_index":1512,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('folder",{"_index":491,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configservie",{"_index":1464,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["configuration",{"_index":91,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{},"license.html":{}}}],["configuration(@token",{"_index":2420,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configuration(user",{"_index":2395,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configurations",{"_index":99,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/typealiases.html":{}}}],["configure",{"_index":3483,"title":{},"body":{"index.html":{}}}],["configured",{"_index":1692,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationRequest.html":{},"injectables/SessionService.html":{}}}],["conflictexception",{"_index":829,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["conflictexception('authorization",{"_index":893,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["conflictexception('certificate",{"_index":1975,"title":{},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["conflictexception('issuer",{"_index":2618,"title":{},"body":{"injectables/ResolverService.html":{}}}],["conflictexception('no",{"_index":2357,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["conflictexception(`request",{"_index":2509,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["connect",{"_index":3541,"title":{},"body":{"index.html":{}}}],["connect/certs",{"_index":1871,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["connect/token",{"_index":116,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["connection",{"_index":1622,"title":{},"body":{"controllers/HealthController.html":{}}}],["consequential",{"_index":3775,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":3794,"title":{},"body":{"license.html":{}}}],["console",{"_index":3241,"title":{},"body":{"changelog.html":{}}}],["console.error",{"_index":267,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["console.error('error",{"_index":217,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["console.error(err",{"_index":1037,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["console.log('keycloak",{"_index":1874,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["console.log('session",{"_index":2107,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["console.log(err",{"_index":2519,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["console.warn('access",{"_index":222,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["conspicuously",{"_index":3637,"title":{},"body":{"license.html":{}}}],["const",{"_index":104,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["constitutes",{"_index":3678,"title":{},"body":{"license.html":{}}}],["constraints",{"_index":1257,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["constructor",{"_index":87,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["constructor(authzservice",{"_index":2113,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["constructor(configservice",{"_index":807,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["constructor(configservie",{"_index":1462,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["constructor(credentialconfigrepository",{"_index":1192,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["constructor(cryptoservice",{"_index":1377,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["constructor(httpservice",{"_index":2450,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/WebhookService.html":{}}}],["constructor(issuanceconfigrepo",{"_index":1680,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["constructor(logger",{"_index":2784,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["constructor(oid4vciservice",{"_index":3141,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["constructor(private",{"_index":1347,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["constructor(reflector",{"_index":1816,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["constructor(sessionrepository",{"_index":2845,"title":{},"body":{"injectables/SessionService.html":{}}}],["constructor(sessionservice",{"_index":2686,"title":{},"body":{"guards/SessionGuard.html":{}}}],["construed",{"_index":3717,"title":{},"body":{"license.html":{}}}],["contained",{"_index":3705,"title":{},"body":{"license.html":{}}}],["containing",{"_index":634,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"injectables/WellKnownService.html":{}}}],["content",{"_index":483,"title":{},"body":{"modules/AppModule.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["contents",{"_index":3713,"title":{},"body":{"license.html":{}}}],["contenttype",{"_index":3113,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":1822,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{}}}],["context.flowtype",{"_index":2812,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.getclass",{"_index":1830,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":1829,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.sessionid",{"_index":2814,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.switchtohttp().getrequest",{"_index":2690,"title":{},"body":{"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":2732,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.tenantid",{"_index":2815,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.ts",{"_index":2695,"title":{},"body":{"interfaces/SessionLogContext.html":{},"coverage.html":{}}}],["context.ts:21",{"_index":2697,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["continue",{"_index":1244,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["contract",{"_index":3575,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":3526,"title":{},"body":{"index.html":{}}}],["contributing.md",{"_index":3535,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":3619,"title":{},"body":{"license.html":{}}}],["contribution(s",{"_index":3668,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":3721,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":3640,"title":{},"body":{"license.html":{}}}],["contributors",{"_index":3531,"title":{},"body":{"index.html":{}}}],["contributory",{"_index":3679,"title":{},"body":{"license.html":{}}}],["control",{"_index":3564,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":3565,"title":{},"body":{"license.html":{}}}],["controller",{"_index":338,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["controller(':session/.well",{"_index":3125,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["controller(':session/authorize",{"_index":756,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["controller(':session/vci",{"_index":2097,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["controller(':tenantid/credentials",{"_index":1366,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["controller(':tenantid/status",{"_index":2926,"title":{},"body":{"controllers/StatusListController.html":{}}}],["controller('auth",{"_index":533,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('health",{"_index":1628,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('issuer",{"_index":1345,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["controller('key",{"_index":1923,"title":{},"body":{"controllers/KeyController.html":{}}}],["controller('oid4vp",{"_index":2254,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["controller('presentation",{"_index":2413,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["controller('session",{"_index":2678,"title":{},"body":{"controllers/SessionController.html":{}}}],["controllers",{"_index":340,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"modules/CryptoModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["conversions",{"_index":3597,"title":{},"body":{"license.html":{}}}],["convert",{"_index":1721,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["coordinate",{"_index":1535,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["copies",{"_index":3685,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2760,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["copyright",{"_index":3559,"title":{},"body":{"license.html":{}}}],["core",{"_index":3459,"title":{},"body":{"index.html":{}}}],["correct",{"_index":942,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"changelog.html":{}}}],["corresponds",{"_index":678,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/typealiases.html":{}}}],["count",{"_index":1007,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/SessionService.html":{}}}],["countby",{"_index":1025,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["counter",{"_index":1231,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["counterclaim",{"_index":3675,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":3299,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covered",{"_index":246,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cp",{"_index":3488,"title":{},"body":{"index.html":{}}}],["crddential",{"_index":1146,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["create",{"_index":285,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["create(session",{"_index":2853,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(tenantid",{"_index":1966,"title":{},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["create_authorization_request",{"_index":2290,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest",{"_index":2270,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest(session",{"_index":2273,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationservermetadata",{"_index":854,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["createcredentialissuancebindingdto",{"_index":1092,"title":{"classes/CreateCredentialIssuanceBindingDto.html":{}},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["createcredentialoffer",{"_index":2169,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["created",{"_index":182,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["createdat",{"_index":1124,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["createdsession",{"_index":2896,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.issuanceid",{"_index":2900,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.tenantid",{"_index":2899,"title":{},"body":{"injectables/SessionService.html":{}}}],["createentry",{"_index":2986,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createentry(session",{"_index":3017,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createheaderandpayload",{"_index":2934,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createlist",{"_index":3011,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist(tenantid",{"_index":2967,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createoffer",{"_index":2111,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["createoffer(body",{"_index":2116,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["createparamdecorator",{"_index":3044,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["createrequest",{"_index":2271,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createrequest(requestid",{"_index":2277,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["creates",{"_index":1450,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{}}}],["creating",{"_index":1095,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["cred",{"_index":2201,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["cred.length",{"_index":2206,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential",{"_index":663,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"index.html":{}}}],["credential(req",{"_index":2083,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credential_accepted",{"_index":2237,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_configurations_supported",{"_index":1304,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{}}}],["credential_configurations_supported[value.id",{"_index":1399,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_creation",{"_index":2821,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_endpoint",{"_index":1305,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["credential_issuance",{"_index":2820,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_issuer",{"_index":1306,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["credential_issuer}/vci/credential",{"_index":2147,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_issuer}/vci/notification",{"_index":2148,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_request",{"_index":2189,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_revoked",{"_index":2052,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["credential_verification",{"_index":2823,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credentialconfig",{"_index":1125,"title":{"entities/CredentialConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialconfig.config",{"_index":1728,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfig.credentialissuancebindings",{"_index":1281,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["credentialconfig.keyid",{"_index":1729,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfig.schema",{"_index":1434,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct",{"_index":1429,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct.vct",{"_index":1430,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigid",{"_index":1097,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/IssuanceService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["credentialconfigid.id",{"_index":1719,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfigid.keyid",{"_index":1709,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfigmapping",{"_index":1173,"title":{"classes/CredentialConfigMapping.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["credentialconfigrepo",{"_index":1378,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigrepository",{"_index":1196,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfigs",{"_index":1182,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{}}}],["credentialconfigservice",{"_index":1186,"title":{"injectables/CredentialConfigService.html":{}},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"overview.html":{}}}],["credentialconfiguration",{"_index":1401,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.claims",{"_index":1405,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.disclosureframe",{"_index":1406,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigurationid",{"_index":1384,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["credentialconfigurationids",{"_index":2068,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{}}}],["credentialconfigurationsupported",{"_index":1142,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{}}}],["credentialcount",{"_index":2365,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialid",{"_index":1391,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialissuancebinding",{"_index":1148,"title":{"entities/CredentialIssuanceBinding.html":{}},"body":{"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialissuancebindingrepo",{"_index":1681,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialissuancebindingresponsedto",{"_index":1120,"title":{"classes/CredentialIssuanceBindingResponseDto.html":{}},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["credentialissuancebindings",{"_index":1129,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{}}}],["credentialissuer",{"_index":2144,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/WellKnownService.html":{}}}],["credentialissuermetadatadto",{"_index":1296,"title":{"classes/CredentialIssuerMetadataDto.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["credentialofferobject",{"_index":2643,"title":{},"body":{"entities/Session.html":{}}}],["credentialpayload",{"_index":2167,"title":{},"body":{"injectables/Oid4vciService.html":{},"entities/Session.html":{},"injectables/WebhookService.html":{}}}],["credentialrequest",{"_index":2174,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialresponse",{"_index":2091,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["credentials",{"_index":154,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"injectables/WebhookService.html":{},"index.html":{}}}],["credentials.dto",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":1069,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:5",{"_index":1070,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:7",{"_index":1071,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.length",{"_index":2214,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["credentials.push",{"_index":1720,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentials.push(cred",{"_index":2203,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentials.split",{"_index":564,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials/credential",{"_index":1698,"title":{},"body":{"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials/credentials.controller",{"_index":1793,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials/credentials.service",{"_index":1365,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["credentials/entities/credential.entity",{"_index":1289,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials?.length",{"_index":2366,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialsconfigservice",{"_index":1682,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialscontroller",{"_index":1324,"title":{"controllers/CredentialsController.html":{}},"body":{"controllers/CredentialsController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsissued",{"_index":2213,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialsize",{"_index":2205,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialsmetadatacontroller",{"_index":1353,"title":{"controllers/CredentialsMetadataController.html":{}},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsservice",{"_index":1346,"title":{"injectables/CredentialsService.html":{}},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"coverage.html":{},"overview.html":{}}}],["credentialtype",{"_index":2790,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["cron",{"_index":2866,"title":{},"body":{"injectables/SessionService.html":{}}}],["cross",{"_index":3673,"title":{},"body":{"license.html":{}}}],["crt",{"_index":14,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["crv",{"_index":1526,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["crypto",{"_index":1466,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["crypto.service",{"_index":1481,"title":{},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{}}}],["crypto.webcrypto.subtle.exportkey",{"_index":3869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.generatekey",{"_index":3867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.importkey",{"_index":3872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.sign",{"_index":3873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.verify",{"_index":3880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto/crypto.module",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["crypto/crypto.service",{"_index":48,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["crypto/encryption/encryption.service",{"_index":989,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{}}}],["crypto/key/crypto/crypto.module",{"_index":402,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto/key/crypto/crypto.service",{"_index":3159,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["crypto/key/key.module",{"_index":400,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto_alg",{"_index":3864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto_validation_schema",{"_index":401,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptographic",{"_index":93,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["cryptoimplementation",{"_index":1435,"title":{"interfaces/CryptoImplementation.html":{}},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptoimplementationservice",{"_index":1458,"title":{"injectables/CryptoImplementationService.html":{}},"body":{"injectables/CryptoImplementationService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"overview.html":{}}}],["cryptomodule",{"_index":368,"title":{"modules/CryptoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["cryptoservice",{"_index":47,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"overview.html":{}}}],["cryptotype",{"_index":1467,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ctx",{"_index":3045,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3046,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["curl",{"_index":3505,"title":{},"body":{"index.html":{}}}],["current_timestamp",{"_index":1278,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["currently",{"_index":327,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["curve",{"_index":1522,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["customary",{"_index":3739,"title":{},"body":{"license.html":{}}}],["customprops",{"_index":473,"title":{},"body":{"modules/AppModule.html":{}}}],["d",{"_index":1894,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"index.html":{},"license.html":{}}}],["d6205da",{"_index":3292,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":3772,"title":{},"body":{"license.html":{}}}],["data",{"_index":219,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["data.revoked",{"_index":221,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["database",{"_index":1515,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"index.html":{}}}],["database/database.module",{"_index":407,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":369,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":162,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"license.html":{}}}],["date().gettime",{"_index":1424,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["date(date.now",{"_index":2914,"title":{},"body":{"injectables/SessionService.html":{}}}],["date(token.expiresat",{"_index":164,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["date.gettime",{"_index":176,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["date.now",{"_index":2744,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["day",{"_index":2876,"title":{},"body":{"injectables/SessionService.html":{}}}],["db",{"_index":1629,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["db_database",{"_index":1501,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_host",{"_index":1492,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_password",{"_index":1500,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_port",{"_index":1497,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_type",{"_index":1489,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_username",{"_index":1499,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_validation_schema",{"_index":1488,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbtype",{"_index":1503,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dc+sd",{"_index":2313,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcql",{"_index":2380,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["dcql_query",{"_index":245,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{}}}],["dcql_query.length",{"_index":2302,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcqlquerycount",{"_index":2300,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dd",{"_index":469,"title":{},"body":{"modules/AppModule.html":{}}}],["de",{"_index":1058,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["deal",{"_index":1754,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["debug",{"_index":427,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["debugging",{"_index":1611,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["declarations",{"_index":360,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["decode",{"_index":1609,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodedvc",{"_index":2511,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.header",{"_index":2514,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.payload",{"_index":2513,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodejwt",{"_index":1581,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodejwt(token",{"_index":1613,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodetoken",{"_index":1832,"title":{},"body":{"injectables/JwtService.html":{}}}],["decodetoken(token",{"_index":1612,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decorator",{"_index":3862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":306,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["decrease",{"_index":2905,"title":{},"body":{"injectables/SessionService.html":{}}}],["decryption",{"_index":1542,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe",{"_index":1543,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe(response",{"_index":1547,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["dedicated",{"_index":2372,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["deeppartial",{"_index":2854,"title":{},"body":{"injectables/SessionService.html":{}}}],["default",{"_index":430,"title":{},"body":{"modules/AppModule.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/CryptoImplementationService.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"miscellaneous/variables.html":{}}}],["defaultmetrics",{"_index":2046,"title":{},"body":{"modules/MetricModule.html":{}}}],["defend",{"_index":3800,"title":{},"body":{"license.html":{}}}],["define",{"_index":771,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{}}}],["defined",{"_index":308,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"license.html":{}}}],["defines",{"_index":2547,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["definition",{"_index":3568,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":3553,"title":{},"body":{"license.html":{}}}],["degree",{"_index":1114,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["degree'})@isstring",{"_index":1101,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["delete",{"_index":1190,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["delete(':id",{"_index":1331,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{}}}],["delete(tenantid",{"_index":1197,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["deleteconfiguration",{"_index":2393,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(@param('id",{"_index":2423,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(id",{"_index":2397,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteissuanceconfiguration",{"_index":1327,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["deleteissuanceconfiguration(id",{"_index":1330,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{}}}],["deleteissuanceconfiguration(tenantid",{"_index":1685,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["deletekey",{"_index":1910,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(@token",{"_index":1929,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(token",{"_index":1914,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletepresentationconfig",{"_index":2446,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletepresentationconfig(id",{"_index":2457,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletes",{"_index":1199,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["deletion",{"_index":2459,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deliberate",{"_index":3767,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":358,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":3218,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":3225,"title":{},"body":{"changelog.html":{}}}],["derivative",{"_index":3605,"title":{},"body":{"license.html":{}}}],["derived",{"_index":3607,"title":{},"body":{"license.html":{}}}],["desc",{"_index":2504,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["describing",{"_index":3740,"title":{},"body":{"license.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"interfaces/CryptoImplementation.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"license.html":{},"properties.html":{}}}],["designated",{"_index":3639,"title":{},"body":{"license.html":{}}}],["details",{"_index":707,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"entities/PresentationConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{}}}],["determine",{"_index":3863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["determines",{"_index":642,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["determining",{"_index":3758,"title":{},"body":{"license.html":{}}}],["dev",{"_index":1056,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["developers",{"_index":3529,"title":{},"body":{"index.html":{}}}],["development",{"_index":3466,"title":{},"body":{"index.html":{}}}],["development/testing",{"_index":1014,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["df29d1e",{"_index":3269,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":275,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["differnt",{"_index":2220,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["digest",{"_index":1392,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["diplomatic",{"_index":3423,"title":{},"body":{"index.html":{}}}],["direct",{"_index":3571,"title":{},"body":{"license.html":{}}}],["direct_post.jwt",{"_index":2308,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["direction",{"_index":3574,"title":{},"body":{"license.html":{}}}],["directly",{"_index":964,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["directory",{"_index":2467,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["disable",{"_index":168,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["disclaimer",{"_index":3743,"title":{},"body":{"license.html":{}}}],["disclosure",{"_index":1155,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["disclosureframe",{"_index":1130,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{}}}],["discord",{"_index":3538,"title":{},"body":{"index.html":{}}}],["discoveryendpoint",{"_index":117,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["discussing",{"_index":3634,"title":{},"body":{"license.html":{}}}],["display",{"_index":1307,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{},"license.html":{}}}],["display.json",{"_index":1062,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{}}}],["displayinfo",{"_index":1054,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["distribute",{"_index":3656,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":3707,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":3552,"title":{},"body":{"license.html":{}}}],["dns",{"_index":233,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["docker",{"_index":3289,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["document",{"_index":2593,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{},"license.html":{}}}],["documentation",{"_index":3206,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["documents",{"_index":2456,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["don't",{"_index":3814,"title":{},"body":{"license.html":{}}}],["dpop",{"_index":897,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpop_jkt",{"_index":780,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["dpop_signing_alg_values_supported",{"_index":863,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpopvalue",{"_index":895,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dto",{"_index":625,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["dto/auth",{"_index":2492,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dto/authentication",{"_index":1651,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{}}}],["dto/authorization",{"_index":2253,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["dto/authorize",{"_index":744,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dto/client",{"_index":526,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/credential",{"_index":3158,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["dto/issuance.dto",{"_index":1663,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["dto/issuer",{"_index":2596,"title":{},"body":{"injectables/ResolverService.html":{}}}],["dto/jwks",{"_index":3119,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/key",{"_index":1921,"title":{},"body":{"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["dto/notification",{"_index":2092,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["dto/oauth",{"_index":3120,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/offer",{"_index":2136,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["dto/par",{"_index":748,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["dto/presentation",{"_index":2285,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dto/status",{"_index":2942,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["dto/token",{"_index":530,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/vp",{"_index":2384,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["duration",{"_index":2747,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["duration}ms",{"_index":2753,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["during",{"_index":1141,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/WebhookService.html":{},"index.html":{}}}],["dynamicmodule",{"_index":1936,"title":{},"body":{"modules/KeyModule.html":{}}}],["e",{"_index":3496,"title":{},"body":{"index.html":{}}}],["e.g",{"_index":2699,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["e17bb4a",{"_index":3184,"title":{},"body":{"changelog.html":{}}}],["e3e5971",{"_index":3240,"title":{},"body":{"changelog.html":{}}}],["e89b",{"_index":1104,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["each",{"_index":677,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/Oid4vciService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["early",{"_index":3465,"title":{},"body":{"index.html":{}}}],["easier",{"_index":269,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["easily",{"_index":3453,"title":{},"body":{"index.html":{}}}],["easy",{"_index":3472,"title":{},"body":{"index.html":{}}}],["ec",{"_index":1523,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["ec_public",{"_index":1518,"title":{"classes/EC_Public.html":{}},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"coverage.html":{}}}],["ecdh",{"_index":1573,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["echo",{"_index":3490,"title":{},"body":{"index.html":{}}}],["ecosystem",{"_index":3435,"title":{},"body":{"index.html":{}}}],["ed25519",{"_index":1471,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["eddsa",{"_index":3866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["editorial",{"_index":3608,"title":{},"body":{"license.html":{}}}],["elaborations",{"_index":3611,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":3460,"title":{},"body":{"index.html":{},"license.html":{}}}],["element",{"_index":1147,"title":{},"body":{"entities/CredentialConfig.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["elements",{"_index":1234,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["elliptic",{"_index":1521,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["emits",{"_index":2717,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["emitter",{"_index":3375,"title":{},"body":{"dependencies.html":{}}}],["empty",{"_index":286,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["enabled",{"_index":128,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"injectables/RegistrarService.html":{}}}],["enabledebugmode",{"_index":2025,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablehttplogger",{"_index":450,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablesessionlogger",{"_index":2024,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enclosed",{"_index":3810,"title":{},"body":{"license.html":{}}}],["encodeuricomponent(key)}=${encodeuricomponent(value",{"_index":2353,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["encrypt",{"_index":1552,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encrypted",{"_index":1553,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption",{"_index":1541,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption.json",{"_index":1561,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption/encryption.service",{"_index":1482,"title":{},"body":{"modules/CryptoModule.html":{}}}],["encryptionservice",{"_index":988,"title":{"injectables/EncryptionService.html":{}},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"coverage.html":{},"overview.html":{}}}],["encrypts",{"_index":1550,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["end",{"_index":3806,"title":{},"body":{"license.html":{}}}],["endpoint",{"_index":510,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"modules/MetricModule.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["endpoints",{"_index":712,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/HealthController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["ensure",{"_index":157,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["entities",{"_index":972,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{},"license.html":{},"overview.html":{}}}],["entities/cert.entity",{"_index":1943,"title":{},"body":{"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["entities/credential",{"_index":1699,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["entities/credential.entity",{"_index":1215,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{}}}],["entities/issuance",{"_index":1697,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["entities/presentation",{"_index":2407,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["entities/session.entity",{"_index":2674,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["entities/status",{"_index":2940,"title":{},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["entitites/client.entity",{"_index":601,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["entity",{"_index":970,"title":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{},"coverage.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["entries",{"_index":2950,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["entries.length",{"_index":3001,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["entry",{"_index":2985,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["enum",{"_index":322,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/PresentationRequest.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["enumerations",{"_index":3414,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":3255,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["env.example",{"_index":3489,"title":{},"body":{"index.html":{}}}],["environment",{"_index":2019,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/RegistrarModule.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":1036,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"injectables/WebhookService.html":{}}}],["err.message",{"_index":1040,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/PresentationsService.html":{},"injectables/WebhookService.html":{}}}],["error",{"_index":247,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"miscellaneous/typealiases.html":{}}}],["error('credential",{"_index":944,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["error('error",{"_index":236,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["error('invalid",{"_index":2176,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["error('issuer",{"_index":2599,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error('key",{"_index":2623,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error('no",{"_index":2522,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["error('stack",{"_index":2991,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["error('subject",{"_index":2608,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(`error",{"_index":3096,"title":{},"body":{"injectables/WebhookService.html":{}}}],["error(`invalid",{"_index":1607,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["error(`unsupported",{"_index":1475,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["error.constraints",{"_index":1258,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error.message",{"_index":1608,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.name",{"_index":2756,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.property",{"_index":1256,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error.stack",{"_index":2759,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.value",{"_index":1259,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error_description",{"_index":932,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["errors",{"_index":1253,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerService.html":{}}}],["es",{"_index":1565,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["es256",{"_index":864,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{}}}],["es256.getverifier(publickey",{"_index":2516,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["eslint",{"_index":167,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["eslint/no",{"_index":172,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["etc",{"_index":3523,"title":{},"body":{"index.html":{}}}],["eudi",{"_index":1055,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"index.html":{},"properties.html":{}}}],["eudiplo",{"_index":347,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"index.html":{}}}],["even",{"_index":3463,"title":{},"body":{"index.html":{},"license.html":{}}}],["event",{"_index":1045,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/NotificationRequestDto.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"license.html":{}}}],["events",{"_index":2771,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["everything",{"_index":1042,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["example",{"_index":312,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["examples",{"_index":503,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["except",{"_index":3658,"title":{},"body":{"license.html":{}}}],["exchange",{"_index":737,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["excluding",{"_index":3636,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":3648,"title":{},"body":{"license.html":{}}}],["executed",{"_index":3731,"title":{},"body":{"license.html":{}}}],["execution",{"_index":2712,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["executioncontext",{"_index":1820,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["exercise",{"_index":3762,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":3585,"title":{},"body":{"license.html":{}}}],["exist",{"_index":284,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{}}}],["existing",{"_index":195,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"index.html":{}}}],["exists",{"_index":198,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["existssync",{"_index":54,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["existssync(file",{"_index":2955,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["existssync(filepath",{"_index":283,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["existssync(folder",{"_index":1051,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["existssync(privateencryptionpath",{"_index":1563,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exp",{"_index":2322,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["expandvariables",{"_index":446,"title":{},"body":{"modules/AppModule.html":{}}}],["expected",{"_index":2072,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["expectedcode",{"_index":910,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectednonce",{"_index":2198,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["expectedpreauthorizedcode",{"_index":905,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedtxcode",{"_index":907,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expiration",{"_index":2377,"title":{},"body":{"classes/ParResponseDto.html":{}}}],["expirationdate",{"_index":163,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["expirationdate.gettime",{"_index":175,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["expire",{"_index":1888,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expired",{"_index":2657,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["expires_in",{"_index":545,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{}}}],["expiresin",{"_index":576,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["expiresinseconds",{"_index":918,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["explicitly",{"_index":3723,"title":{},"body":{"license.html":{}}}],["export",{"_index":73,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["exportjwk",{"_index":1558,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exportjwk(secret.privatekey",{"_index":1569,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exportjwk(secret.publickey",{"_index":1570,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exports",{"_index":363,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["express",{"_index":741,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["extends",{"_index":1813,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["extends#integrity",{"_index":2387,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["external",{"_index":549,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["extract",{"_index":554,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["extractable",{"_index":1567,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["extractjwt",{"_index":1855,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1878,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":543,"title":{},"body":{"controllers/AuthController.html":{}}}],["f15f6ab",{"_index":3212,"title":{},"body":{"changelog.html":{}}}],["f75298f",{"_index":3247,"title":{},"body":{"changelog.html":{}}}],["f7e7505",{"_index":3266,"title":{},"body":{"changelog.html":{}}}],["face",{"_index":3436,"title":{},"body":{"index.html":{}}}],["failed",{"_index":1260,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["failure",{"_index":2904,"title":{},"body":{"injectables/SessionService.html":{},"license.html":{}}}],["fall",{"_index":566,"title":{},"body":{"controllers/AuthController.html":{}}}],["false",{"_index":132,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["fatal",{"_index":429,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["feature",{"_index":3198,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":3197,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fee",{"_index":3788,"title":{},"body":{"license.html":{}}}],["fetch",{"_index":2486,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fields",{"_index":255,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["fifty",{"_index":3578,"title":{},"body":{"license.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"changelog.html":{},"coverage.html":{},"license.html":{}}}],["file#asynchronous",{"_index":456,"title":{},"body":{"modules/AppModule.html":{}}}],["file.bits",{"_index":2970,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.elements[id",{"_index":2996,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.jwt",{"_index":2976,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.replace('.json",{"_index":1242,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["file.stack.pop",{"_index":2990,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["filed",{"_index":3683,"title":{},"body":{"license.html":{}}}],["filename",{"_index":2943,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["filepath",{"_index":280,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["files",{"_index":1237,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"license.html":{}}}],["filesystem",{"_index":1939,"title":{},"body":{"modules/KeyModule.html":{}}}],["filesystemkeyservice",{"_index":1938,"title":{},"body":{"modules/KeyModule.html":{},"coverage.html":{}}}],["fill(0",{"_index":2961,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["filter((tenant",{"_index":1229,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["finally",{"_index":2594,"title":{},"body":{"injectables/ResolverService.html":{}}}],["find",{"_index":1020,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["findclientbyid",{"_index":1080,"title":{},"body":{"injectables/ClientService.html":{}}}],["findclientbyid(clientid",{"_index":1021,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["finding",{"_index":218,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["findonebyorfail",{"_index":1403,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{}}}],["findoptionswhere",{"_index":2860,"title":{},"body":{"injectables/SessionService.html":{}}}],["fine",{"_index":1043,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["first",{"_index":2592,"title":{},"body":{"injectables/ResolverService.html":{}}}],["firstvaluefrom",{"_index":2489,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/WebhookService.html":{}}}],["firstvaluefrom(this.httpservice.get(uri)).then",{"_index":2520,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fitness",{"_index":3755,"title":{},"body":{"license.html":{}}}],["fixes",{"_index":3176,"title":{},"body":{"changelog.html":{}}}],["flow",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/typealiases.html":{}}}],["flow_complete",{"_index":2818,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_error",{"_index":2819,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_start",{"_index":2816,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flows",{"_index":3210,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["flowtype",{"_index":2187,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["focus",{"_index":3455,"title":{},"body":{"index.html":{}}}],["folder",{"_index":420,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"changelog.html":{}}}],["following",{"_index":3688,"title":{},"body":{"license.html":{}}}],["force",{"_index":1223,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["form",{"_index":3588,"title":{},"body":{"license.html":{}}}],["format",{"_index":24,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"classes/EC_Public.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"license.html":{}}}],["formats",{"_index":3150,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["forroot",{"_index":1934,"title":{},"body":{"modules/KeyModule.html":{}}}],["forwardref",{"_index":2435,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["found",{"_index":880,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["foundation",{"_index":353,"title":{},"body":{"controllers/AppController.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["frame",{"_index":1156,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["free",{"_index":2984,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"license.html":{}}}],["friendly",{"_index":3477,"title":{},"body":{"index.html":{}}}],["fs",{"_index":987,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["full",{"_index":3509,"title":{},"body":{"index.html":{}}}],["function",{"_index":136,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":683,"title":{"miscellaneous/functions.html":{}},"body":{"classes/AuthenticationConfigHelper.html":{},"miscellaneous/functions.html":{}}}],["further",{"_index":2655,"title":{},"body":{"entities/Session.html":{}}}],["g",{"_index":2153,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["gauge",{"_index":997,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/SessionService.html":{}}}],["general",{"_index":3264,"title":{},"body":{"changelog.html":{}}}],["generate",{"_index":1582,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/PresentationManagementController.html":{}}}],["generated",{"_index":46,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["generated/client.gen",{"_index":39,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["generatekeypair",{"_index":1441,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["generatekeypair('ecdh",{"_index":1564,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generates",{"_index":1445,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{}}}],["generatesalt",{"_index":1393,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["generatetoken",{"_index":1584,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generatetoken(payload",{"_index":1836,"title":{},"body":{"injectables/JwtService.html":{}}}],["generatetokenoptions",{"_index":1577,"title":{"interfaces/GenerateTokenOptions.html":{}},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["generation",{"_index":1586,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"changelog.html":{}}}],["generic",{"_index":1438,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/SessionLoggerService.html":{}}}],["get(':id",{"_index":2667,"title":{},"body":{"controllers/SessionController.html":{}}}],["get('jwks.json",{"_index":3134,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('oauth",{"_index":3107,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('openid",{"_index":3130,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('request/:session",{"_index":2256,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get('request/:session')@sessionlogger('session",{"_index":2246,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get('schema/:id",{"_index":1359,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('session",{"_index":2106,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["get('status",{"_index":2921,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get('vct/:id",{"_index":1362,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get()@healthcheck",{"_index":1623,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(state",{"_index":2856,"title":{},"body":{"injectables/SessionService.html":{}}}],["get(tenantid",{"_index":1204,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getaccesscertificateid",{"_index":2555,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getaccesscertificateid(config",{"_index":209,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["getalg",{"_index":1460,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getall",{"_index":2842,"title":{},"body":{"injectables/SessionService.html":{}}}],["getallsessions",{"_index":2662,"title":{},"body":{"controllers/SessionController.html":{}}}],["getauthorizationserver",{"_index":801,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["getauthorizationserver(tenantid",{"_index":815,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["getauthzmetadata",{"_index":3139,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getauthzmetadata(session",{"_index":3143,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getby",{"_index":877,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["getby(where",{"_index":2859,"title":{},"body":{"injectables/SessionService.html":{}}}],["getbyid",{"_index":1191,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getbyid(tenantid",{"_index":1208,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getcertificate",{"_index":1976,"title":{},"body":{"classes/KeyService.html":{}}}],["getcertificate(tenantid",{"_index":1972,"title":{},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["getclients",{"_index":1010,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["getconfig",{"_index":3012,"title":{},"body":{"injectables/StatusListService.html":{}}}],["getconfig(tenantid",{"_index":2979,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["getconfigs",{"_index":1328,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(@token",{"_index":1348,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(user",{"_index":1333,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfiguration",{"_index":1994,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getcredential",{"_index":1373,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{}}}],["getcredential(credentialconfigurationid",{"_index":1381,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredential(req",{"_index":2118,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["getcredentialconfigurationsupported",{"_index":1374,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfigurationsupported(tenantid",{"_index":1385,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcrypto",{"_index":1461,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getcrypto(alg",{"_index":1468,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getencryptionpublickey",{"_index":1544,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getencryptionpublickey(tenantid",{"_index":1554,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getexternaloidcconfig",{"_index":1842,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getexternaloidcconfig(configservice",{"_index":1845,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getheadersfromrequest",{"_index":836,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getheadersfromrequest(req",{"_index":887,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["gethello",{"_index":343,"title":{},"body":{"controllers/AppController.html":{}}}],["getintegratedoauth2config",{"_index":1843,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getintegratedoauth2config(configservice",{"_index":1849,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getissuanceconfiguration",{"_index":1678,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfiguration(tenantid",{"_index":1687,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid",{"_index":1679,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid(body.issuanceid",{"_index":2159,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["getissuanceconfigurationbyid(issuanceconfigid",{"_index":1689,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurations",{"_index":1655,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(@token",{"_index":1664,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(user",{"_index":1658,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuermetadata",{"_index":3140,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getissuermetadata(session",{"_index":3146,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getjwks",{"_index":3106,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["getjwks(@sessionentity",{"_index":3135,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(session",{"_index":3109,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(tenantid",{"_index":3155,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getkeys",{"_index":1911,"title":{},"body":{"controllers/KeyController.html":{},"classes/KeyService.html":{}}}],["getkeys(@token",{"_index":1925,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkeys(tenantid",{"_index":1970,"title":{},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["getkeys(token",{"_index":1916,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkid",{"_index":1977,"title":{},"body":{"classes/KeyService.html":{}}}],["getkid(tenantid",{"_index":1969,"title":{},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["getlist",{"_index":2919,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlist(@param('tenantid",{"_index":2928,"title":{},"body":{"controllers/StatusListController.html":{}}}],["getlist(tenantid",{"_index":2920,"title":{},"body":{"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["getlogformat",{"_index":1995,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getloglevel",{"_index":1996,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getoauth2token",{"_index":499,"title":{},"body":{"controllers/AuthController.html":{}}}],["getoauth2token(body",{"_index":500,"title":{},"body":{"controllers/AuthController.html":{}}}],["getoffer",{"_index":1735,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoffer(res",{"_index":1736,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getorthrow('public_url",{"_index":229,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/IssuerModule.html":{},"injectables/RegistrarService.html":{}}}],["getpresentationconfig",{"_index":685,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{},"injectables/PresentationsService.html":{}}}],["getpresentationconfig(config",{"_index":689,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["getpresentationconfig(id",{"_index":2461,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs",{"_index":2447,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs(tenantid",{"_index":2463,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpublickey",{"_index":1971,"title":{},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["getpublickey(type",{"_index":1983,"title":{},"body":{"classes/KeyService.html":{}}}],["getrepositorytoken",{"_index":1944,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrepositorytoken(certentity",{"_index":1956,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrequestwithsession",{"_index":2243,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(@sessionentity",{"_index":2257,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(session",{"_index":2245,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getresponse",{"_index":2244,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["getresponse(body",{"_index":2248,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["getschema",{"_index":1375,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschema(credentialconfigurationid",{"_index":1387,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getsession",{"_index":2663,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(@param('id",{"_index":2680,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(id",{"_index":2666,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsigner",{"_index":1442,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsigner(privatekeyjwk",{"_index":1447,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["getting",{"_index":1033,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialIssuerMetadataDto.html":{}}}],["getvct",{"_index":1376,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getvct(credentialid",{"_index":1389,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getverifier",{"_index":1443,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getverifier(publickeyjwk",{"_index":1452,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["ghcr.io/openwallet",{"_index":3503,"title":{},"body":{"index.html":{}}}],["git",{"_index":3484,"title":{},"body":{"index.html":{}}}],["give",{"_index":3689,"title":{},"body":{"license.html":{}}}],["given",{"_index":1200,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["global",{"_index":1937,"title":{},"body":{"modules/KeyModule.html":{}}}],["globalthis.headers",{"_index":3422,"title":{},"body":{"miscellaneous/functions.html":{}}}],["goodwill",{"_index":3779,"title":{},"body":{"license.html":{}}}],["governing",{"_index":3828,"title":{},"body":{"license.html":{}}}],["grant",{"_index":552,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"license.html":{}}}],["grant_type",{"_index":537,"title":{},"body":{"controllers/AuthController.html":{}}}],["granted",{"_index":3587,"title":{},"body":{"license.html":{}}}],["granting",{"_index":3561,"title":{},"body":{"license.html":{}}}],["grants",{"_index":2164,"title":{},"body":{"injectables/Oid4vciService.html":{},"license.html":{}}}],["granttype",{"_index":843,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["granular",{"_index":3208,"title":{},"body":{"changelog.html":{}}}],["graph",{"_index":3833,"title":{},"body":{"modules.html":{}}}],["grossly",{"_index":3768,"title":{},"body":{"license.html":{}}}],["guard",{"_index":693,"title":{"guards/SessionGuard.html":{}},"body":{"classes/AuthenticationConfigHelper.html":{},"modules/MetricModule.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":2684,"title":{},"body":{"guards/SessionGuard.html":{}}}],["guide",{"_index":3511,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":3536,"title":{},"body":{"index.html":{}}}],["h",{"_index":3507,"title":{},"body":{"index.html":{}}}],["handle",{"_index":725,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{}}}],["handled",{"_index":1605,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["handlenotification",{"_index":2112,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["handlenotification(req",{"_index":2120,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["handler",{"_index":2714,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["handles",{"_index":713,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["handlesigningkeyerror",{"_index":1872,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handling",{"_index":95,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/EncryptionService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/WebhookService.html":{},"changelog.html":{}}}],["harmless",{"_index":3802,"title":{},"body":{"license.html":{}}}],["hasentry",{"_index":1710,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["hashalg",{"_index":1415,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hasher",{"_index":1414,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["hasresponsedata",{"_index":3095,"title":{},"body":{"injectables/WebhookService.html":{}}}],["haswebhook",{"_index":2360,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["header",{"_index":310,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["header('content",{"_index":2927,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["header.kid",{"_index":2622,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c",{"_index":2600,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c.map",{"_index":2603,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header['jwk",{"_index":2612,"title":{},"body":{"injectables/ResolverService.html":{}}}],["headername",{"_index":304,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["headers",{"_index":479,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WebhookService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["headers.authorization",{"_index":556,"title":{},"body":{"controllers/AuthController.html":{}}}],["headers[session.webhook!.auth.config.headername",{"_index":3078,"title":{},"body":{"injectables/WebhookService.html":{}}}],["headers[webhook.auth.config.headername",{"_index":3099,"title":{},"body":{"injectables/WebhookService.html":{}}}],["health",{"_index":1618,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1633,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":408,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1625,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1620,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1616,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":370,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["help",{"_index":619,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{},"index.html":{}}}],["here",{"_index":959,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{}}}],["hereby",{"_index":3644,"title":{},"body":{"license.html":{}}}],["herein",{"_index":3727,"title":{},"body":{"license.html":{}}}],["hh:mm:ss",{"_index":470,"title":{},"body":{"modules/AppModule.html":{}}}],["hold",{"_index":3801,"title":{},"body":{"license.html":{}}}],["host",{"_index":227,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["hosted",{"_index":1171,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["hostname",{"_index":2303,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid}/credentials",{"_index":1431,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["host}/oid4vp/response/${session.id",{"_index":2306,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["hot",{"_index":2017,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["hour",{"_index":2834,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["hours",{"_index":580,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["hs256",{"_index":1594,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["http",{"_index":2022,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{},"index.html":{}}}],["http://localhost:3000/auth/oauth2/token",{"_index":3506,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licenses",{"_index":3548,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":3826,"title":{},"body":{"license.html":{}}}],["httpmethod",{"_index":831,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["httpmodule",{"_index":1804,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules/VerifierModule.html":{}}}],["https://github.com/iamolegga/nestjs",{"_index":453,"title":{},"body":{"modules/AppModule.html":{}}}],["https://github.com/openwallet",{"_index":3485,"title":{},"body":{"index.html":{},"properties.html":{}}}],["https://json",{"_index":2624,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["https://openwallet",{"_index":352,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["httpservice",{"_index":1942,"title":{},"body":{"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/WebhookService.html":{}}}],["iat",{"_index":1422,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["id",{"_index":15,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["identification",{"_index":3820,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":26,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["identifying",{"_index":3813,"title":{},"body":{"license.html":{}}}],["ids",{"_index":1180,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{}}}],["idx",{"_index":2989,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["ignore",{"_index":471,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":1886,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ii",{"_index":3576,"title":{},"body":{"license.html":{}}}],["iii",{"_index":3582,"title":{},"body":{"license.html":{}}}],["image",{"_index":1774,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png",{"_index":1757,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png')@apibody({type",{"_index":1742,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["image/png')@useguards(jwtauthguard)@apisecurity('oauth2')@apibody({type",{"_index":2400,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["imeplement",{"_index":1439,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation",{"_index":1472,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.ts",{"_index":1437,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.ts:19",{"_index":1444,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:24",{"_index":1449,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:29",{"_index":1453,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implements",{"_index":75,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/EC_Public.html":{},"injectables/IssuanceService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["implied",{"_index":3751,"title":{},"body":{"license.html":{}}}],["import",{"_index":29,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"license.html":{}}}],["import(tenantid",{"_index":1967,"title":{},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["import.dto",{"_index":1922,"title":{},"body":{"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["import.dto.ts",{"_index":1893,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"coverage.html":{}}}],["import.dto.ts:10",{"_index":1902,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:12",{"_index":1903,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:14",{"_index":1897,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:16",{"_index":1898,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:18",{"_index":1896,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:29",{"_index":1932,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:36",{"_index":1931,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:6",{"_index":1899,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:8",{"_index":1901,"title":{},"body":{"classes/Key.html":{}}}],["imported",{"_index":1263,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["importing",{"_index":1905,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["importjwk",{"_index":1557,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{}}}],["importjwk(payload.cnf.jwk",{"_index":2523,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["imports",{"_index":383,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CredentialConfigService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["improve",{"_index":3182,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":3265,"title":{},"body":{"changelog.html":{}}}],["improving",{"_index":3635,"title":{},"body":{"license.html":{}}}],["inability",{"_index":3777,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":3774,"title":{},"body":{"license.html":{}}}],["include",{"_index":2255,"title":{},"body":{"controllers/Oid4vpController.html":{},"license.html":{}}}],["included",{"_index":1643,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/Oid4vciService.html":{},"license.html":{}}}],["includes",{"_index":1183,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{},"license.html":{}}}],["including",{"_index":67,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["inclusion",{"_index":3623,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":3642,"title":{},"body":{"license.html":{}}}],["incurred",{"_index":3803,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":3799,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":3790,"title":{},"body":{"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":2696,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["indexes",{"_index":2951,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["indicated",{"_index":3600,"title":{},"body":{"license.html":{}}}],["indicates",{"_index":28,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{}}}],["indicating",{"_index":2426,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["indirect",{"_index":3572,"title":{},"body":{"license.html":{}}}],["individual",{"_index":3584,"title":{},"body":{"license.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["information",{"_index":351,"title":{},"body":{"controllers/AppController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/IssuerManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["informational",{"_index":3714,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":3667,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":3680,"title":{},"body":{"license.html":{}}}],["init",{"_index":1078,"title":{},"body":{"entities/ClientEntry.html":{},"classes/KeyService.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{}}}],["init(tenantid",{"_index":1965,"title":{},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["initialconfig",{"_index":287,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["initialization",{"_index":2817,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["initialize",{"_index":1005,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/functions.html":{}}}],["initialized",{"_index":145,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["initializes",{"_index":97,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/CredentialsController.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["inject",{"_index":448,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{}}}],["inject('keyservice",{"_index":1924,"title":{},"body":{"controllers/KeyController.html":{}}}],["injectable",{"_index":30,"title":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["injectables",{"_index":798,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"overview.html":{}}}],["injectmetric",{"_index":996,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/SessionService.html":{}}}],["injectmetric('sessions",{"_index":2883,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectmetric('tenant_client_total",{"_index":1003,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["injectrepository",{"_index":993,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["injectrepository(cliententry",{"_index":1001,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["injectrepository(credentialconfig",{"_index":1218,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{}}}],["injectrepository(credentialissuancebinding",{"_index":1701,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["injectrepository(issuanceconfig",{"_index":1700,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["injectrepository(presentationconfig",{"_index":2493,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["injectrepository(session",{"_index":2882,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository(statusmapping",{"_index":2945,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["install",{"_index":3285,"title":{},"body":{"changelog.html":{}}}],["instance",{"_index":89,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["instance.decode(`${data}.${signature",{"_index":2512,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["instanceof",{"_index":1875,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["instead",{"_index":3227,"title":{},"body":{"changelog.html":{}}}],["institute",{"_index":3671,"title":{},"body":{"license.html":{}}}],["institutions",{"_index":3530,"title":{},"body":{"index.html":{}}}],["insufficient_authorization",{"_index":931,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["int",{"_index":3032,"title":{},"body":{"entities/StatusMapping.html":{}}}],["integrated",{"_index":1583,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["integrates",{"_index":3452,"title":{},"body":{"index.html":{}}}],["integration",{"_index":999,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"index.html":{}}}],["intended",{"_index":1531,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["intentionally",{"_index":3621,"title":{},"body":{"license.html":{}}}],["interact",{"_index":3836,"title":{},"body":{"properties.html":{}}}],["interacting",{"_index":77,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["interaction",{"_index":66,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["intercept",{"_index":2705,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercept(context",{"_index":2708,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interceptor",{"_index":2703,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercepts",{"_index":2711,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interested",{"_index":3532,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"injectables/JwtService.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"interfaces/TokenPayload.html":{},"license.html":{},"overview.html":{}}}],["interval",{"_index":2887,"title":{},"body":{"injectables/SessionService.html":{}}}],["intervaltime",{"_index":2885,"title":{},"body":{"injectables/SessionService.html":{}}}],["invalid",{"_index":508,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["irrevocable",{"_index":3651,"title":{},"body":{"license.html":{}}}],["is_public_key",{"_index":1825,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isabsolute",{"_index":398,"title":{},"body":{"modules/AppModule.html":{}}}],["isabsolute(folder",{"_index":493,"title":{},"body":{"modules/AppModule.html":{}}}],["isarray",{"_index":1178,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["isarray()@isoptional",{"_index":2069,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["isarray()@validatenested({each",{"_index":1671,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["isauthurlauth",{"_index":686,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isauthurlauth(config",{"_index":691,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isdebugmodeenabled",{"_index":1997,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isenabled",{"_index":134,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["isenum",{"_index":1904,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isenum(['credential_accepted",{"_index":2051,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum(['ec",{"_index":1900,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["isenum(responsetype",{"_index":2077,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isglobal",{"_index":445,"title":{},"body":{"modules/AppModule.html":{}}}],["ishttploggerenabled",{"_index":1998,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isin",{"_index":315,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin(['apikey",{"_index":329,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin(['none",{"_index":660,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isin([0",{"_index":3042,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnoneauth",{"_index":687,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isnoneauth(config",{"_index":694,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isnull",{"_index":2877,"title":{},"body":{"injectables/SessionService.html":{}}}],["isnumber",{"_index":3041,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber()@isin(['0",{"_index":3039,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isobject",{"_index":316,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isobject()@column('json",{"_index":1637,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["isobject()@isoptional",{"_index":2075,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/PresentationRequest.html":{}}}],["isobject()@isoptional()@validatenested()@type(undefined",{"_index":702,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{},"classes/IssuanceDto.html":{}}}],["isobject()@validatenested()@type(undefined",{"_index":1669,"title":{},"body":{"classes/IssuanceDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isoptional",{"_index":317,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizeQueries.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isoptional()@isstring",{"_index":786,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["ispresentationduringissuanceauth",{"_index":688,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["ispresentationduringissuanceauth(config",{"_index":696,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["ispublic",{"_index":1827,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["iss",{"_index":1421,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["issessionloggerenabled",{"_index":1999,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["issetup",{"_index":1081,"title":{},"body":{"injectables/ClientService.html":{}}}],["issetup(id",{"_index":1022,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["isstring",{"_index":307,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isstring()@isoptional",{"_index":1176,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/KeyImportDto.html":{},"classes/StatusUpdateDto.html":{}}}],["issuance",{"_index":644,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"injectables/WebhookService.html":{},"changelog.html":{},"coverage.html":{}}}],["issuance.service",{"_index":1662,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["issuance/credentials",{"_index":1222,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["issuance/dto/authentication",{"_index":840,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuance/entities/credential",{"_index":1169,"title":{},"body":{"entities/CredentialConfig.html":{},"modules/IssuerModule.html":{}}}],["issuance/entities/issuance",{"_index":1796,"title":{},"body":{"modules/IssuerModule.html":{}}}],["issuance/issuance",{"_index":1704,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuance/issuance.controller",{"_index":1800,"title":{},"body":{"modules/IssuerModule.html":{}}}],["issuance/issuance.service",{"_index":839,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig",{"_index":1273,"title":{"entities/IssuanceConfig.html":{}},"body":{"entities/CredentialIssuanceBinding.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"coverage.html":{}}}],["issuanceconfig.authenticationconfig.method",{"_index":2165,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuanceconfig.credentialissuancebindings",{"_index":1284,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["issuanceconfig.credentialissuancebindings.find",{"_index":1408,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuanceconfig.credentialissuancebindings.map",{"_index":2162,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuanceconfigid",{"_index":1098,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/IssuanceService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["issuanceconfigrepo",{"_index":1684,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuanceconfigservice",{"_index":1379,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuancecontroller",{"_index":1652,"title":{"controllers/IssuanceController.html":{}},"body":{"controllers/IssuanceController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuancecounter",{"_index":2891,"title":{},"body":{"injectables/SessionService.html":{}}}],["issuancedto",{"_index":1179,"title":{"classes/IssuanceDto.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"coverage.html":{}}}],["issuancedto.credentialconfigs",{"_index":1708,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuanceid",{"_index":946,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["issuanceservice",{"_index":809,"title":{"injectables/IssuanceService.html":{}},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"overview.html":{}}}],["issuance—and",{"_index":3464,"title":{},"body":{"index.html":{}}}],["issue",{"_index":2086,"title":{},"body":{"controllers/Oid4vciController.html":{},"license.html":{}}}],["issued",{"_index":1138,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/WellKnownService.html":{}}}],["issuer",{"_index":855,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["issuer.png",{"_index":1061,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["issuer/authorize/authorize.service",{"_index":3157,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["issuer/authorize/dto/authorize",{"_index":2656,"title":{},"body":{"entities/Session.html":{}}}],["issuer/issuer.module",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["issuer/oid4vci/dto/offer",{"_index":2284,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{}}}],["issuer/oid4vci/oid4vci.service",{"_index":1748,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/WellKnownService.html":{}}}],["issuer/status",{"_index":595,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["issuer_state",{"_index":781,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["issuer_validation_schema",{"_index":390,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["issuermanagementcontroller",{"_index":1731,"title":{"controllers/IssuerManagementController.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuermetadata",{"_index":1777,"title":{"interfaces/IssuerMetadata.html":{}},"body":{"interfaces/IssuerMetadata.html":{},"injectables/Oid4vciService.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["issuermetadata(session",{"_index":2123,"title":{},"body":{"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{}}}],["issuermetadata.authorizationservers",{"_index":2179,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermetadata.credentialissuer.credential_issuer",{"_index":2181,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermetadataresult",{"_index":2131,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermodule",{"_index":371,"title":{"modules/IssuerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules.html":{},"overview.html":{}}}],["issuing",{"_index":2822,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["isuance",{"_index":1726,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["isurl",{"_index":664,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isusingexternaloidc",{"_index":1614,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["isuuid",{"_index":1112,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["isverified",{"_index":3879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["it's",{"_index":3088,"title":{},"body":{"injectables/WebhookService.html":{}}}],["item.name",{"_index":203,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["iterate",{"_index":1232,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["january",{"_index":3546,"title":{},"body":{"license.html":{}}}],["job",{"_index":2867,"title":{},"body":{"injectables/SessionService.html":{}}}],["jobs",{"_index":3297,"title":{},"body":{"changelog.html":{}}}],["joi",{"_index":385,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"dependencies.html":{}}}],["joi.boolean().default(false",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.exist",{"_index":2553,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().default(24",{"_index":2836,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().default(60",{"_index":2833,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().when('db_type",{"_index":1498,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.object",{"_index":419,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.optional",{"_index":1495,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.required",{"_index":1496,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string",{"_index":425,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default('./tmp",{"_index":421,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('24h",{"_index":614,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default('assets/config",{"_index":437,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('eudiplo",{"_index":423,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().optional",{"_index":605,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().optional().default('eudiplo",{"_index":612,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":608,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().uri().when('km_type",{"_index":1950,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid('es256').default('es256",{"_index":3865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().valid('file",{"_index":1946,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid('sqlite",{"_index":1490,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when('db_type",{"_index":1493,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when('km_type",{"_index":1952,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when('registrar_url",{"_index":2552,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.when('oidc",{"_index":607,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":61,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{}}}],["join(__dirname",{"_index":495,"title":{},"body":{"modules/AppModule.html":{}}}],["join(configpath",{"_index":1235,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["join(folder",{"_index":494,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{}}}],["joining",{"_index":3434,"title":{},"body":{"index.html":{}}}],["jose",{"_index":1537,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"dependencies.html":{}}}],["joseheaderparameters",{"_index":1963,"title":{},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["json",{"_index":444,"title":{},"body":{"modules/AppModule.html":{},"entities/CredentialConfig.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"index.html":{}}}],["json.parse",{"_index":291,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["json.parse(readfilesync(file",{"_index":2980,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.parse(readfilesync(privateencryptionpath",{"_index":1572,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["json.parse(readfilesync(publicencryptionpath",{"_index":1576,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["json.stringify",{"_index":2659,"title":{},"body":{"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.stringify(await",{"_index":1568,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["json.stringify(config",{"_index":297,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["json.stringify(content",{"_index":2983,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.stringify(credentialissuer).replace",{"_index":2152,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["json.stringify(data",{"_index":2751,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["json.stringify(displayinfo",{"_index":1063,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["json.stringify(initialconfig",{"_index":289,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["json.stringify(values.dcql_query).replace",{"_index":2293,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["json.stringify(values.registrationcert).replace",{"_index":2296,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jsonwebkey",{"_index":1448,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["junction",{"_index":1270,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["jwe",{"_index":1551,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwk",{"_index":832,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"miscellaneous/variables.html":{}}}],["jwk_ec_public",{"_index":1525,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["jwks",{"_index":1538,"title":{},"body":{"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["jwks_uri",{"_index":860,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["jwksrequestsperminute",{"_index":1867,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksresponsedto",{"_index":1539,"title":{"classes/JwksResponseDto.html":{}},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["jwksuri",{"_index":1869,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt",{"_index":903,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.service",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["jwt.setaudience(options.audience",{"_index":1601,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.sign(secretkey",{"_index":1602,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.strategy",{"_index":592,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt/crypto",{"_index":1394,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":2938,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt/sd",{"_index":1397,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt/types",{"_index":1961,"title":{},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt_alg_values",{"_index":2315,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jwt_expires_in",{"_index":613,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["jwt_issuer",{"_index":611,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":610,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret=$(openssl",{"_index":3491,"title":{},"body":{"index.html":{}}}],["jwt_secret=your",{"_index":3498,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":587,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"coverage.html":{},"overview.html":{}}}],["jwtdecrypt",{"_index":1559,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtdecrypt(response",{"_index":1574,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtfromrequest",{"_index":1848,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtpayload",{"_index":1962,"title":{},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["jwtservice",{"_index":521,"title":{"injectables/JwtService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"overview.html":{}}}],["jwtstrategy",{"_index":588,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtstrategy.getexternaloidcconfig(configservice",{"_index":1862,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy.getintegratedoauth2config(configservice",{"_index":1863,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtverify",{"_index":1580,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{}}}],["jwtverify(`${data}.${signature",{"_index":2524,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["jwtverify(token",{"_index":1606,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwtwithstatuslistpayload",{"_index":2935,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["kb",{"_index":2314,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["kbverifier",{"_index":2443,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key",{"_index":22,"title":{"classes/Key.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/AuthResponse.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"interfaces/CryptoImplementation.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["key).then",{"_index":2525,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key.kid",{"_index":2621,"title":{},"body":{"injectables/ResolverService.html":{}}}],["key.service",{"_index":1920,"title":{},"body":{"controllers/KeyController.html":{},"modules/KeyModule.html":{}}}],["key.service.ts",{"_index":3325,"title":{},"body":{"coverage.html":{}}}],["key/entities/cert.entity",{"_index":1484,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key/key.controller",{"_index":1483,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key_validation_schema",{"_index":399,"title":{},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["keybinding",{"_index":2484,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindingnonce",{"_index":2471,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindings",{"_index":2483,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keycloak",{"_index":1877,"title":{},"body":{"injectables/JwtStrategy.html":{},"changelog.html":{}}}],["keycloak_client_id",{"_index":609,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["keycloak_internal_issuer_url",{"_index":606,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["keycontroller",{"_index":1480,"title":{"controllers/KeyController.html":{}},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{},"coverage.html":{}}}],["keyid",{"_index":225,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"injectables/WellKnownService.html":{}}}],["keyimportdto",{"_index":1906,"title":{"classes/KeyImportDto.html":{}},"body":{"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["keymodule",{"_index":372,"title":{"modules/KeyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"modules.html":{},"overview.html":{}}}],["keymodule.forroot",{"_index":488,"title":{},"body":{"modules/AppModule.html":{}}}],["keynotfound",{"_index":1712,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["keyobj",{"_index":1918,"title":{"classes/KeyObj.html":{}},"body":{"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["keypair",{"_index":1446,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["keypair.privatekey",{"_index":3871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keypair.publickey",{"_index":3870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keys",{"_index":1524,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["keyservice",{"_index":1919,"title":{"classes/KeyService.html":{}},"body":{"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["kid",{"_index":1895,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["kind",{"_index":3750,"title":{},"body":{"license.html":{}}}],["km_type",{"_index":1945,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["kmtype",{"_index":1955,"title":{},"body":{"modules/KeyModule.html":{}}}],["know",{"_index":248,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["known",{"_index":3105,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["known.controller",{"_index":389,"title":{},"body":{"modules/AppModule.html":{}}}],["known.controller.ts",{"_index":3103,"title":{},"body":{"controllers/WellKnownController.html":{},"coverage.html":{}}}],["known.controller.ts:47",{"_index":3118,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:59",{"_index":3108,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:71",{"_index":3112,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.service",{"_index":414,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["known.service.ts",{"_index":3137,"title":{},"body":{"injectables/WellKnownService.html":{},"coverage.html":{}}}],["known.service.ts:16",{"_index":3142,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:39",{"_index":3147,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:77",{"_index":3144,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:87",{"_index":3156,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known/dto/credential",{"_index":1298,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"coverage.html":{}}}],["known/dto/jwks",{"_index":1519,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"coverage.html":{}}}],["known/dto/oauth",{"_index":2054,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"coverage.html":{}}}],["known/jwks.json",{"_index":862,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["known/jwt",{"_index":2615,"title":{},"body":{"injectables/ResolverService.html":{}}}],["known/openid",{"_index":119,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["known/well",{"_index":388,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["kty",{"_index":1527,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["labelnames",{"_index":2838,"title":{},"body":{"modules/SessionModule.html":{}}}],["labs",{"_index":3188,"title":{},"body":{"changelog.html":{}}}],["labs.github.io/eudiplo/latest",{"_index":354,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["labs.github.io/eudiplo/latest/api",{"_index":3508,"title":{},"body":{"index.html":{}}}],["labs.github.io/eudiplo/main",{"_index":3518,"title":{},"body":{"index.html":{}}}],["labs/eudiplo.git",{"_index":3486,"title":{},"body":{"index.html":{},"properties.html":{}}}],["labs/eudiplo/issues",{"_index":3838,"title":{},"body":{"properties.html":{}}}],["labs/eudiplo:latest",{"_index":3504,"title":{},"body":{"index.html":{}}}],["language",{"_index":3827,"title":{},"body":{"license.html":{}}}],["last",{"_index":2988,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["later",{"_index":1031,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{}}}],["latest",{"_index":3513,"title":{},"body":{"index.html":{}}}],["law",{"_index":3746,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":3676,"title":{},"body":{"license.html":{}}}],["layer",{"_index":3424,"title":{},"body":{"index.html":{}}}],["legal",{"_index":3562,"title":{},"body":{"license.html":{}}}],["legend",{"_index":359,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["length",{"_index":2752,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["lessthan",{"_index":2878,"title":{},"body":{"injectables/SessionService.html":{}}}],["lessthan(new",{"_index":2913,"title":{},"body":{"injectables/SessionService.html":{}}}],["level",{"_index":458,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels",{"_index":2032,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels[level.tolowercase",{"_index":2035,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["liability",{"_index":3763,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3771,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":3441,"title":{},"body":{"index.html":{}}}],["licensable",{"_index":3665,"title":{},"body":{"license.html":{}}}],["license",{"_index":3542,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":3543,"title":{},"body":{"index.html":{},"license.html":{}}}],["licenses",{"_index":3681,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":3558,"title":{},"body":{"license.html":{}}}],["lifetime",{"_index":3168,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["lightweight",{"_index":3449,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":3752,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":3829,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3590,"title":{},"body":{"license.html":{}}}],["line",{"_index":170,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["link",{"_index":1152,"title":{},"body":{"entities/CredentialConfig.html":{},"license.html":{}}}],["links",{"_index":1642,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["list",{"_index":1312,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/PresentationsService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["list')@header('content",{"_index":2922,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller",{"_index":3009,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.controller.ts",{"_index":2917,"title":{},"body":{"controllers/StatusListController.html":{},"coverage.html":{}}}],["list.controller.ts:17",{"_index":2924,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.json",{"_index":2944,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["list.module",{"_index":597,"title":{},"body":{"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/SessionModule.html":{}}}],["list.module.ts",{"_index":3008,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.service",{"_index":991,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{}}}],["list.service.ts",{"_index":2931,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"coverage.html":{}}}],["list.service.ts:109",{"_index":3021,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:113",{"_index":3020,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:122",{"_index":3026,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:135",{"_index":3018,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:175",{"_index":3025,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:186",{"_index":3027,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:29",{"_index":3016,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:37",{"_index":3023,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:39",{"_index":3024,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:49",{"_index":3022,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:76",{"_index":3019,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list/dto/status",{"_index":2675,"title":{},"body":{"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["list/entities/status",{"_index":3028,"title":{},"body":{"entities/StatusMapping.html":{},"coverage.html":{}}}],["list/status",{"_index":596,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{}}}],["listen",{"_index":1047,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["lists",{"_index":3631,"title":{},"body":{"license.html":{}}}],["literal",{"_index":632,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/OfferRequestDto.html":{},"miscellaneous/typealiases.html":{}}}],["litigation",{"_index":3672,"title":{},"body":{"license.html":{}}}],["load",{"_index":278,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["loadclients",{"_index":1013,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["loadconfig",{"_index":2556,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["loadconfig(tenantid",{"_index":279,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["loadconfiguration",{"_index":2000,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loadtypemetadataformat",{"_index":1419,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["locale",{"_index":1057,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["lock",{"_index":3447,"title":{},"body":{"index.html":{}}}],["log",{"_index":2034,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_debug_mode",{"_index":440,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_enable_http_logger",{"_index":438,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_enable_session_logger",{"_index":439,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_format",{"_index":441,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_level",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["logauthorizationrequest",{"_index":2773,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logauthorizationrequest(context",{"_index":2786,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcontext",{"_index":2186,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WebhookService.html":{}}}],["logcredentialissuance",{"_index":2774,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialissuance(context",{"_index":2789,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification",{"_index":2775,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification(context",{"_index":2792,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete",{"_index":2776,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete(context",{"_index":2794,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror",{"_index":2777,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror(context",{"_index":2797,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart",{"_index":2778,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart(context",{"_index":2799,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logformat",{"_index":2026,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["logged",{"_index":2698,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["logger",{"_index":1193,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.decorator",{"_index":2095,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logger.decorator.ts",{"_index":3358,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.interceptor",{"_index":1799,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["logger.interceptor.ts",{"_index":2702,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{}}}],["logger.interceptor.ts:136",{"_index":2719,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:19",{"_index":2707,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:44",{"_index":2710,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.service",{"_index":1798,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{}}}],["logger.service.ts",{"_index":2770,"title":{},"body":{"injectables/SessionLoggerService.html":{},"coverage.html":{}}}],["logger.service.ts:102",{"_index":2791,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:12",{"_index":2785,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:124",{"_index":2793,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:146",{"_index":2788,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:163",{"_index":2808,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:180",{"_index":2802,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:202",{"_index":2804,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:221",{"_index":2806,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:30",{"_index":2809,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:37",{"_index":2800,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:56",{"_index":2795,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:75",{"_index":2798,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger/session",{"_index":3075,"title":{},"body":{"injectables/WebhookService.html":{}}}],["loggerconfigservice",{"_index":1992,"title":{"injectables/LoggerConfigService.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggerconfiguration",{"_index":2006,"title":{"interfaces/LoggerConfiguration.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggermodule",{"_index":411,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loggermodule.forrootasync",{"_index":447,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":452,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["logic",{"_index":3457,"title":{},"body":{"index.html":{}}}],["loglevel",{"_index":2009,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["lognotification",{"_index":2779,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["lognotification(context",{"_index":2801,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logo",{"_index":1059,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["logs",{"_index":2275,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"changelog.html":{}}}],["logsession",{"_index":2780,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsession(context",{"_index":2803,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror",{"_index":2781,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror(context",{"_index":2805,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange",{"_index":2782,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange(context",{"_index":2807,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["long",{"_index":3479,"title":{},"body":{"index.html":{}}}],["loss",{"_index":3778,"title":{},"body":{"license.html":{}}}],["losses",{"_index":3784,"title":{},"body":{"license.html":{}}}],["made",{"_index":2383,"title":{},"body":{"entities/PresentationConfig.html":{},"license.html":{}}}],["mailing",{"_index":3630,"title":{},"body":{"license.html":{}}}],["main",{"_index":3291,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["maintain",{"_index":629,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["major",{"_index":3517,"title":{},"body":{"index.html":{}}}],["make",{"_index":3267,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["makegaugeprovider",{"_index":602,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{}}}],["makes",{"_index":3166,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["making",{"_index":2454,"title":{},"body":{"injectables/PresentationsService.html":{},"license.html":{}}}],["malfunction",{"_index":3782,"title":{},"body":{"license.html":{}}}],["manage",{"_index":1127,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["managed",{"_index":3633,"title":{},"body":{"license.html":{}}}],["management",{"_index":1342,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{},"license.html":{}}}],["management.controller",{"_index":1794,"title":{},"body":{"modules/IssuerModule.html":{}}}],["management.controller.ts",{"_index":1734,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{}}}],["management.controller.ts:63",{"_index":1744,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management/credentials",{"_index":1326,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["management/issuance",{"_index":1654,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["management/issuer",{"_index":1733,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["managing",{"_index":65,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["many",{"_index":1271,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["manytoone",{"_index":1288,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["manytoone(undefined",{"_index":1280,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["map",{"_index":2352,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["map((_",{"_index":2962,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["mapping",{"_index":2992,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity",{"_index":2941,"title":{},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity.ts",{"_index":3029,"title":{},"body":{"entities/StatusMapping.html":{},"coverage.html":{}}}],["mapping.entity.ts:12",{"_index":3033,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:15",{"_index":3031,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:6",{"_index":3035,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:9",{"_index":3034,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mark",{"_index":3883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marked",{"_index":3638,"title":{},"body":{"license.html":{}}}],["marks",{"_index":2872,"title":{},"body":{"injectables/SessionService.html":{},"license.html":{}}}],["match",{"_index":2609,"title":{},"body":{"injectables/ResolverService.html":{}}}],["matching",{"_index":256,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(date.now",{"_index":2323,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["math.floor(new",{"_index":2325,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["math.random",{"_index":2965,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["math.round(new",{"_index":1423,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["maybe",{"_index":273,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["mean",{"_index":3555,"title":{},"body":{"license.html":{}}}],["means",{"_index":3569,"title":{},"body":{"license.html":{}}}],["mechanical",{"_index":3593,"title":{},"body":{"license.html":{}}}],["media",{"_index":3152,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["mediatype",{"_index":3114,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["mediatype.application_jwt",{"_index":3129,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["mediatype.application_jwt)@get('openid",{"_index":3117,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["medium",{"_index":3686,"title":{},"body":{"license.html":{}}}],["meet",{"_index":3687,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":3754,"title":{},"body":{"license.html":{}}}],["merely",{"_index":3616,"title":{},"body":{"license.html":{}}}],["message",{"_index":2757,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["metadata",{"_index":1145,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"interfaces/IssuerMetadata.html":{},"injectables/Oid4vciService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["metadata+jwt",{"_index":3162,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.'})@apiproduces(mediatype.application_json",{"_index":3116,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["metadata.controller",{"_index":1801,"title":{},"body":{"modules/IssuerModule.html":{}}}],["metadata.controller.ts",{"_index":1356,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"coverage.html":{}}}],["metadata.controller.ts:15",{"_index":1363,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.controller.ts:25",{"_index":1360,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.credential_issuer",{"_index":3164,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.dto",{"_index":2597,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["metadata.dto.ts",{"_index":1299,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["metadata.dto.ts:12",{"_index":1311,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:16",{"_index":1318,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:20",{"_index":1321,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:24",{"_index":1314,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:33",{"_index":1320,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:37",{"_index":1316,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:41",{"_index":1309,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:8",{"_index":1319,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata/credentials",{"_index":1355,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["metadata/dto/credential",{"_index":667,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["metadata/dto/schema",{"_index":1168,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["metadata/vct/${credentialconfig.id",{"_index":1432,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["method",{"_index":155,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":342,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["metric/metric.module",{"_index":416,"title":{},"body":{"modules/AppModule.html":{}}}],["metricmodule",{"_index":373,"title":{"modules/MetricModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetricModule.html":{},"modules.html":{},"overview.html":{}}}],["metrics",{"_index":1006,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/MetricModule.html":{},"injectables/SessionService.html":{}}}],["middleware",{"_index":3426,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mirko",{"_index":3822,"title":{},"body":{"license.html":{},"properties.html":{}}}],["miscellaneous",{"_index":3413,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misused",{"_index":173,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["mkdirsync",{"_index":986,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["mkdirsync(folder",{"_index":1052,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["mm",{"_index":468,"title":{},"body":{"modules/AppModule.html":{},"injectables/WellKnownService.html":{}}}],["modifications",{"_index":3589,"title":{},"body":{"license.html":{}}}],["modified",{"_index":3692,"title":{},"body":{"license.html":{}}}],["modify",{"_index":1766,"title":{},"body":{"controllers/IssuerManagementController.html":{},"license.html":{}}}],["modifying",{"_index":2762,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["module",{"_index":355,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":357,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["mollik",{"_index":3823,"title":{},"body":{"license.html":{},"properties.html":{}}}],["monitor",{"_index":3201,"title":{},"body":{"changelog.html":{}}}],["more",{"_index":350,"title":{},"body":{"controllers/AppController.html":{},"entities/Session.html":{},"changelog.html":{},"license.html":{}}}],["move",{"_index":2371,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["mso_mdoc",{"_index":2312,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["multi",{"_index":2650,"title":{},"body":{"entities/Session.html":{},"changelog.html":{}}}],["multiple",{"_index":2218,"title":{},"body":{"injectables/Oid4vciService.html":{},"index.html":{}}}],["mysql2",{"_index":3396,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":185,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["name)?.id",{"_index":204,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["namedcurve",{"_index":3868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nameing",{"_index":3283,"title":{},"body":{"changelog.html":{}}}],["names",{"_index":3736,"title":{},"body":{"license.html":{}}}],["necessarily",{"_index":3666,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":98,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["need",{"_index":210,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{}}}],["needed",{"_index":180,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{}}}],["needs",{"_index":940,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["negligence",{"_index":3766,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":3769,"title":{},"body":{"license.html":{}}}],["nestinterceptor",{"_index":2724,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["nestjs",{"_index":412,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":1805,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"modules/VerifierModule.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"modules/VerifierModule.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":35,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1823,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":3374,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":591,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":3378,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":406,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":346,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1627,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":599,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["new",{"_index":113,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":169,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["next.handle",{"_index":2730,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.handle().pipe",{"_index":2745,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["node:crypto",{"_index":739,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{}}}],["node:fs",{"_index":57,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["node:path",{"_index":62,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["nodejs",{"_index":1395,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["non",{"_index":3647,"title":{},"body":{"license.html":{}}}],["noncce",{"_index":2653,"title":{},"body":{"entities/Session.html":{}}}],["nonce",{"_index":2197,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["none",{"_index":651,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/WebhookService.html":{}}}],["normally",{"_index":3711,"title":{},"body":{"license.html":{}}}],["not(isnull",{"_index":2893,"title":{},"body":{"injectables/SessionService.html":{}}}],["notfoundexception",{"_index":2689,"title":{},"body":{"guards/SessionGuard.html":{}}}],["nothing",{"_index":3726,"title":{},"body":{"license.html":{}}}],["notice",{"_index":3601,"title":{},"body":{"license.html":{}}}],["notices",{"_index":3695,"title":{},"body":{"license.html":{}}}],["notification",{"_index":1184,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["notification.id",{"_index":2223,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notification_endpoint",{"_index":1308,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["notification_id",{"_index":2049,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["notificationevent",{"_index":2050,"title":{},"body":{"classes/NotificationRequestDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["notificationid",{"_index":2208,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notificationindex",{"_index":2228,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notificationrequestdto",{"_index":2047,"title":{"classes/NotificationRequestDto.html":{}},"body":{"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"coverage.html":{}}}],["notifications",{"_index":336,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["notifications(body",{"_index":2087,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["notifywebhook",{"_index":1185,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"entities/Session.html":{}}}],["notitification",{"_index":2122,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notwithstanding",{"_index":3724,"title":{},"body":{"license.html":{}}}],["now",{"_index":937,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["null",{"_index":260,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthenticationConfigHelper.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{}}}],["nullable",{"_index":1073,"title":{},"body":{"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["number",{"_index":165,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AuthModule.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/ParResponseDto.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{}}}],["oauth",{"_index":2328,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{},"index.html":{}}}],["oauth2",{"_index":76,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{}}}],["oauth2authorizationserver",{"_index":817,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oauth2authorizationserverresponse",{"_index":2053,"title":{"classes/Oauth2AuthorizationServerResponse.html":{}},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["oauth2client",{"_index":36,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oauth2resourceserver",{"_index":2129,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["object",{"_index":1317,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"interfaces/TokenPayload.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["object.entries(params",{"_index":2351,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["object.keys(res.vp_token",{"_index":2526,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["obligations",{"_index":3791,"title":{},"body":{"license.html":{}}}],["observable",{"_index":2716,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["obtain",{"_index":3825,"title":{},"body":{"license.html":{}}}],["offer",{"_index":945,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"license.html":{}}}],["offer.credentialoffer",{"_index":2171,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offer.credentialofferobject",{"_index":2170,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offered",{"_index":2232,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offerrequestdto",{"_index":1737,"title":{"classes/OfferRequestDto.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"coverage.html":{}}}],["offerresponse",{"_index":1740,"title":{"classes/OfferResponse.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["oid4vci",{"_index":657,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/SessionLogContext.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["oid4vci/dto/offer",{"_index":1749,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["oid4vci/oid4vci.controller",{"_index":1791,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.service",{"_index":1790,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/util",{"_index":837,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oid4vcicontroller",{"_index":1788,"title":{"controllers/Oid4vciController.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["oid4vciservice",{"_index":1747,"title":{"injectables/Oid4vciService.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"overview.html":{}}}],["oid4vp",{"_index":659,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/SessionLogContext.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["oid4vp.controller",{"_index":2267,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["oid4vp.service",{"_index":2252,"title":{},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vp/dto/presentation",{"_index":2408,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vp/oid4vp.module",{"_index":2438,"title":{},"body":{"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{}}}],["oid4vp/oid4vp.service",{"_index":2409,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vpcontroller",{"_index":2241,"title":{"controllers/Oid4vpController.html":{}},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"coverage.html":{}}}],["oid4vpmodule",{"_index":1783,"title":{"modules/Oid4vpModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["oid4vpservice",{"_index":808,"title":{"injectables/Oid4vpService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{},"overview.html":{}}}],["oidc",{"_index":78,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["oidcissuerurl",{"_index":105,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/.well",{"_index":118,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/protocol/openid",{"_index":115,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["older",{"_index":2875,"title":{},"body":{"injectables/SessionService.html":{}}}],["onapplicationbootstrap",{"_index":31,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{}}}],["once",{"_index":181,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["one",{"_index":206,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"changelog.html":{},"license.html":{}}}],["onetomany",{"_index":1167,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["onetomany(undefined",{"_index":1149,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["onmoduleinit",{"_index":32,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit",{"_index":1545,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit(tenantid",{"_index":147,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["open",{"_index":3425,"title":{},"body":{"index.html":{}}}],["openid",{"_index":2082,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["openid4vc",{"_index":643,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/typealiases.html":{}}}],["openid4vc/oauth2",{"_index":835,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"dependencies.html":{}}}],["openid4vc/openid4vci",{"_index":1166,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["openid4vc/openid4vp",{"_index":3386,"title":{},"body":{"dependencies.html":{}}}],["openid4vc/utils",{"_index":3387,"title":{},"body":{"dependencies.html":{}}}],["openid4vci",{"_index":711,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/WellKnownController.html":{}}}],["openid4vcidraftversion",{"_index":2132,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vcidraftversion.draft14",{"_index":2156,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vciissuer",{"_index":2127,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vp://?${(await",{"_index":928,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["openid4vp://?${values.uri",{"_index":2419,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["openidvci",{"_index":3161,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["openwallet",{"_index":3187,"title":{},"body":{"changelog.html":{}}}],["operation",{"_index":1203,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["operations",{"_index":94,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"controllers/Oid4vpController.html":{},"injectables/RegistrarService.html":{}}}],["optional",{"_index":16,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":463,"title":{},"body":{"modules/AppModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"changelog.html":{}}}],["options.audience",{"_index":1600,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.dto",{"_index":2286,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["options.dto.ts",{"_index":2427,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["options.expiresin",{"_index":1589,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["order",{"_index":2503,"title":{},"body":{"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["organizations",{"_index":3433,"title":{},"body":{"index.html":{}}}],["origin",{"_index":3741,"title":{},"body":{"license.html":{}}}],["original",{"_index":2763,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["originaldraftversion",{"_index":2155,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["otherwhise",{"_index":1753,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["otherwise",{"_index":133,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"injectables/RegistrarService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":380,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"license.html":{},"overview.html":{}}}],["outstanding",{"_index":3580,"title":{},"body":{"license.html":{}}}],["ov",{"_index":455,"title":{},"body":{"modules/AppModule.html":{}}}],["over",{"_index":1233,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"index.html":{}}}],["overview",{"_index":3432,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["overwrite",{"_index":1696,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["overwritten",{"_index":1139,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{}}}],["owner",{"_index":3560,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":3577,"title":{},"body":{"license.html":{}}}],["p",{"_index":1566,"title":{},"body":{"injectables/EncryptionService.html":{},"index.html":{}}}],["package",{"_index":3369,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":3293,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["pairs",{"_index":636,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["par",{"_index":716,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(@body",{"_index":761,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(body",{"_index":728,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["param",{"_index":88,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["param('id",{"_index":1351,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{}}}],["param('tenantid",{"_index":1368,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["parameter",{"_index":628,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["parameters",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":2347,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["parresponsedto",{"_index":747,"title":{"classes/ParResponseDto.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"coverage.html":{}}}],["parse",{"_index":2473,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseaccesstokenrequest",{"_index":885,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest",{"_index":802,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest(body",{"_index":818,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["parsed",{"_index":2474,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parsedaccesstokenauthorizationcoderequestgrant",{"_index":842,"title":{"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenpreauthorizedcoderequestgrant",{"_index":844,"title":{"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenrequest",{"_index":884,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.accesstokenrequest",{"_index":900,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.dpop?.jwt",{"_index":904,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant",{"_index":899,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.granttype",{"_index":896,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.preauthorizedcode",{"_index":906,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.txcode",{"_index":908,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedcredentialrequest",{"_index":2172,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.credentialconfigurationid",{"_index":2191,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.proofs.jwt",{"_index":2194,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.proofs?.jwt?.length",{"_index":2193,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest?.proofs?.jwt",{"_index":2175,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parseloglevel",{"_index":2001,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["parseloglevel(level",{"_index":2014,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["parseresponse",{"_index":2448,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseresponse(res",{"_index":2469,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["part",{"_index":2488,"title":{},"body":{"injectables/PresentationsService.html":{},"license.html":{}}}],["particular",{"_index":3756,"title":{},"body":{"license.html":{}}}],["parties",{"_index":70,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["party",{"_index":179,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["pass",{"_index":1765,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["passed",{"_index":1140,"title":{},"body":{"entities/CredentialConfig.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vciService.html":{}}}],["passport",{"_index":1857,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjwtsecret",{"_index":1858,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":590,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1854,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1841,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":1513,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["patch",{"_index":3439,"title":{},"body":{"index.html":{}}}],["patent",{"_index":3657,"title":{},"body":{"license.html":{}}}],["path",{"_index":213,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["payload",{"_index":572,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["payload.cnf",{"_index":2521,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["payload.id",{"_index":1241,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["payload.iss",{"_index":2598,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.iss}/.well",{"_index":2614,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.sub",{"_index":1598,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["payloads",{"_index":2586,"title":{},"body":{"injectables/ResolverService.html":{}}}],["pem",{"_index":23,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["percent",{"_index":3579,"title":{},"body":{"license.html":{}}}],["perform",{"_index":1621,"title":{},"body":{"controllers/HealthController.html":{},"license.html":{}}}],["periodically",{"_index":156,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["permission",{"_index":3734,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":3586,"title":{},"body":{"license.html":{}}}],["perpetual",{"_index":3645,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":3702,"title":{},"body":{"license.html":{}}}],["pg",{"_index":3400,"title":{},"body":{"dependencies.html":{}}}],["pid",{"_index":1762,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["pid,hostname",{"_index":472,"title":{},"body":{"modules/AppModule.html":{}}}],["pino",{"_index":413,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{}}}],["pino?tab=readme",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["pinohttp",{"_index":457,"title":{},"body":{"modules/AppModule.html":{}}}],["pinologger",{"_index":1194,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["pipeline",{"_index":3222,"title":{},"body":{"changelog.html":{}}}],["pkcecodechallengemethod",{"_index":833,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["pkcecodechallengemethod.s256",{"_index":870,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["placeholders",{"_index":2151,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["places",{"_index":3706,"title":{},"body":{"license.html":{}}}],["plaintoclass",{"_index":1216,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["plaintoclass(credentialconfig",{"_index":1247,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["plaintoclass(issuancedto",{"_index":1706,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["plaintoclass(presentationconfig",{"_index":2500,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["please",{"_index":1029,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["pluggable",{"_index":3474,"title":{},"body":{"index.html":{}}}],["plumbing",{"_index":3458,"title":{},"body":{"index.html":{}}}],["png",{"_index":1755,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["pnpm",{"_index":3286,"title":{},"body":{"changelog.html":{}}}],["port",{"_index":1509,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["possibility",{"_index":3786,"title":{},"body":{"license.html":{}}}],["post",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"index.html":{}}}],["post('challenge",{"_index":773,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('credential",{"_index":2099,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('credential')@sessionlogger('session",{"_index":2084,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification",{"_index":2102,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification')@sessionlogger('notification_id",{"_index":2088,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('oauth2/token",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('offer",{"_index":1764,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["post('par",{"_index":760,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('request",{"_index":2414,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["post('response/:session",{"_index":2259,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["post('response/:session')@sessionlogger('session",{"_index":2249,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["post('revoke",{"_index":2671,"title":{},"body":{"controllers/SessionController.html":{}}}],["post('token",{"_index":770,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["postgres",{"_index":1507,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres').default('sqlite",{"_index":1491,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["power",{"_index":3570,"title":{},"body":{"license.html":{}}}],["pre",{"_index":654,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["preauthorizedcode",{"_index":845,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["preauthorizedcodegrantidentifier",{"_index":834,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["predefined",{"_index":2466,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["preferred",{"_index":1310,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"license.html":{}}}],["prefix",{"_index":498,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["preheader",{"_index":2972,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["prepare",{"_index":3653,"title":{},"body":{"license.html":{}}}],["prepayload",{"_index":2971,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["presentation",{"_index":635,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["presentationconfig",{"_index":952,"title":{"entities/PresentationConfig.html":{}},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["presentationconfig.webhook",{"_index":2345,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationconfig?.presentation.webhook",{"_index":954,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["presentationduringissuance",{"_index":658,"title":{"classes/PresentationDuringIssuance.html":{}},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["presentationduringissuanceconfig",{"_index":647,"title":{"classes/PresentationDuringIssuanceConfig.html":{}},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["presentationexists",{"_index":2498,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["presentationmanagementcontroller",{"_index":2391,"title":{"controllers/PresentationManagementController.html":{}},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"coverage.html":{}}}],["presentationrequest",{"_index":2399,"title":{"classes/PresentationRequest.html":{}},"body":{"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"coverage.html":{}}}],["presentationrequestoptions",{"_index":2278,"title":{"interfaces/PresentationRequestOptions.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["presentations",{"_index":96,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["presentations.controller",{"_index":2436,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["presentations.service",{"_index":2406,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentations/dto/auth",{"_index":2283,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentations/presentations.module",{"_index":2268,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["presentations/presentations.service",{"_index":2282,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationsmodule",{"_index":2265,"title":{"modules/PresentationsModule.html":{}},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["presentationsservice",{"_index":52,"title":{"injectables/PresentationsService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"coverage.html":{},"overview.html":{}}}],["presented",{"_index":674,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["pretty",{"_index":443,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"dependencies.html":{}}}],["primary",{"_index":976,"title":{},"body":{"entities/CertEntity.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{},"entities/StatusMapping.html":{}}}],["primarycolumn",{"_index":1075,"title":{},"body":{"entities/ClientEntry.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/Session.html":{}}}],["primarycolumn('uuid",{"_index":2638,"title":{},"body":{"entities/Session.html":{}}}],["primarygeneratedcolumn",{"_index":1649,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1644,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["printed",{"_index":3819,"title":{},"body":{"license.html":{}}}],["privacy",{"_index":3476,"title":{},"body":{"index.html":{}}}],["private",{"_index":80,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}}}],["private_key",{"_index":2765,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["privateencryptionkey",{"_index":1571,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privateencryptionpath",{"_index":1560,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privatekey",{"_index":1456,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"miscellaneous/variables.html":{}}}],["privatekeyjwk",{"_index":1451,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["proceed",{"_index":2715,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["process",{"_index":645,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{}}}],["process.env.node_env",{"_index":431,"title":{},"body":{"modules/AppModule.html":{}}}],["process_presentation_response",{"_index":2359,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processes",{"_index":2281,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["product",{"_index":3737,"title":{},"body":{"license.html":{}}}],["production",{"_index":432,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["progress",{"_index":2701,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["prom",{"_index":998,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["prometheus",{"_index":604,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"dependencies.html":{}}}],["prometheus/dist/injector",{"_index":2881,"title":{},"body":{"injectables/SessionService.html":{}}}],["prometheusmodule",{"_index":2043,"title":{},"body":{"modules/MetricModule.html":{}}}],["prometheusmodule.register",{"_index":2045,"title":{},"body":{"modules/MetricModule.html":{}}}],["prominent",{"_index":3694,"title":{},"body":{"license.html":{}}}],["promise",{"_index":184,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["promise.all(att",{"_index":2534,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["promises",{"_index":174,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["proofcount",{"_index":2192,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["proofverified",{"_index":2207,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["properties",{"_index":13,"title":{"properties.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/CryptoImplementation.html":{},"classes/EC_Public.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"properties.html":{}}}],["property",{"_index":1255,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["proprietary",{"_index":3443,"title":{},"body":{"index.html":{}}}],["protect",{"_index":2044,"title":{},"body":{"modules/MetricModule.html":{}}}],["protected",{"_index":1745,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["protocol",{"_index":2177,"title":{},"body":{"injectables/Oid4vciService.html":{},"index.html":{}}}],["protocols",{"_index":3431,"title":{},"body":{"index.html":{}}}],["protocol}//${req.host}${req.url",{"_index":2180,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["provide",{"_index":1953,"title":{},"body":{"modules/KeyModule.html":{},"license.html":{}}}],["provided",{"_index":337,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"license.html":{}}}],["provider",{"_index":79,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{}}}],["providers",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["provides",{"_index":1677,"title":{},"body":{"injectables/IssuanceService.html":{},"modules/RegistrarModule.html":{},"license.html":{}}}],["providing",{"_index":1619,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["prs",{"_index":3528,"title":{},"body":{"index.html":{}}}],["public",{"_index":21,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('oauth2/token')@apibody({type",{"_index":501,"title":{},"body":{"controllers/AuthController.html":{}}}],["public.decorator",{"_index":525,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["public_url",{"_index":1806,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"miscellaneous/variables.html":{}}}],["public_url=https://example.com",{"_index":3497,"title":{},"body":{"index.html":{}}}],["publicencryptionpath",{"_index":1562,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["publicjwk",{"_index":917,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["publickey",{"_index":231,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["publickeyjwk",{"_index":1455,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["publicly",{"_index":3654,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":249,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["purposes",{"_index":3567,"title":{},"body":{"license.html":{}}}],["pushed",{"_index":730,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["pushed_authorization_request_endpoint",{"_index":867,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["pwd)/config:/app/config",{"_index":3502,"title":{},"body":{"index.html":{}}}],["qr",{"_index":1760,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["qrcode",{"_index":1752,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["qrcode.tobuffer(values.uri",{"_index":1772,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["qrcodebuffer",{"_index":1771,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["queries",{"_index":726,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["queries.request_uri",{"_index":875,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["query",{"_index":200,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{}}}],["querydeeppartialentity",{"_index":2851,"title":{},"body":{"injectables/SessionService.html":{}}}],["querystring",{"_index":2350,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["questions",{"_index":3537,"title":{},"body":{"index.html":{}}}],["quick",{"_index":3481,"title":{},"body":{"index.html":{}}}],["quickstart",{"_index":3510,"title":{},"body":{"index.html":{}}}],["r",{"_index":2616,"title":{},"body":{"injectables/ResolverService.html":{}}}],["r.data",{"_index":2617,"title":{},"body":{"injectables/ResolverService.html":{}}}],["rand",{"_index":3492,"title":{},"body":{"index.html":{}}}],["randomness",{"_index":2953,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["randomuuid",{"_index":738,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["ratelimit",{"_index":1866,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["re",{"_index":926,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["reach",{"_index":958,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["reachable",{"_index":2619,"title":{},"body":{"injectables/ResolverService.html":{}}}],["react",{"_index":1048,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["readable",{"_index":3704,"title":{},"body":{"license.html":{}}}],["readdirsync",{"_index":1217,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readdirsync(configpath",{"_index":1227,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readdirsync(path",{"_index":1238,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readfilesync",{"_index":55,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["readfilesync(filepath",{"_index":292,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["readfilesync(join(path",{"_index":1239,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readonly",{"_index":757,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["reason",{"_index":3805,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":3738,"title":{},"body":{"license.html":{}}}],["receive",{"_index":2251,"title":{},"body":{"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{}}}],["received",{"_index":3091,"title":{},"body":{"injectables/WebhookService.html":{},"license.html":{}}}],["recent",{"_index":3516,"title":{},"body":{"index.html":{}}}],["recipients",{"_index":3690,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":3818,"title":{},"body":{"license.html":{}}}],["recommended",{"_index":3515,"title":{},"body":{"index.html":{}}}],["record",{"_index":1133,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"classes/SchemaResponse.html":{},"injectables/WebhookService.html":{}}}],["recursive",{"_index":1053,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["redacted",{"_index":2769,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["redirect",{"_index":662,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["redirect_uri",{"_index":782,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["redirected",{"_index":669,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["redistributing",{"_index":3760,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":3684,"title":{},"body":{"license.html":{}}}],["reference",{"_index":1160,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"index.html":{}}}],["reflect",{"_index":3406,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1817,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["refresh",{"_index":140,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["refresh_token",{"_index":2766,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["refreshaccesstoken",{"_index":159,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["refreshes",{"_index":152,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["regarding",{"_index":3732,"title":{},"body":{"license.html":{}}}],["regcert",{"_index":2292,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["register",{"_index":2864,"title":{},"body":{"injectables/SessionService.html":{}}}],["registrar",{"_index":59,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar.json",{"_index":282,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrar.service",{"_index":2545,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar/generated",{"_index":2579,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrar/registrar.module",{"_index":394,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["registrar/registrar.service",{"_index":992,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{}}}],["registrar_oidc_client_id",{"_index":109,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_client_secret",{"_index":111,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_url",{"_index":2551,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["registrar_url",{"_index":2550,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["registrar_validation_schema",{"_index":393,"title":{},"body":{"modules/AppModule.html":{},"modules/RegistrarModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registrarconfig",{"_index":58,"title":{"classes/RegistrarConfig.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"coverage.html":{}}}],["registrarmodule",{"_index":374,"title":{"modules/RegistrarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["registrarservice",{"_index":63,"title":{"injectables/RegistrarService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"coverage.html":{},"overview.html":{}}}],["registration",{"_index":72,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["registrationcert",{"_index":2295,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{}}}],["registrationcertid",{"_index":2481,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["registrationcertificatecontrollerall",{"_index":42,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrollerregister",{"_index":43,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrationcertificatecreation",{"_index":2577,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrationcertificaterequest",{"_index":49,"title":{"classes/RegistrationCertificateRequest.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"coverage.html":{}}}],["related",{"_index":1948,"title":{},"body":{"modules/KeyModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["relations",{"_index":1716,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["relationship",{"_index":1272,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["release",{"_index":3221,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["relevant",{"_index":2105,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["reload",{"_index":2018,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["reloadconfiguration",{"_index":2002,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["rely",{"_index":3442,"title":{},"body":{"index.html":{}}}],["relying",{"_index":69,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerfindall",{"_index":44,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerregister",{"_index":45,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["remain",{"_index":3614,"title":{},"body":{"license.html":{}}}],["remove",{"_index":2532,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"changelog.html":{}}}],["rename",{"_index":3185,"title":{},"body":{"changelog.html":{}}}],["replace",{"_index":2150,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["replace('https",{"_index":230,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["replaced",{"_index":3812,"title":{},"body":{"license.html":{}}}],["repo",{"_index":3186,"title":{},"body":{"changelog.html":{}}}],["repository",{"_index":994,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"properties.html":{}}}],["represent",{"_index":3612,"title":{},"body":{"license.html":{}}}],["representatives",{"_index":3629,"title":{},"body":{"license.html":{}}}],["representing",{"_index":637,"title":{},"body":{"interfaces/AuthResponse.html":{},"interfaces/IssuerMetadata.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["represents",{"_index":1300,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/RegistrarConfig.html":{},"entities/Session.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["reproduce",{"_index":3652,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":3742,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":3551,"title":{},"body":{"license.html":{}}}],["repsonse",{"_index":8,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["req",{"_index":243,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["req+jwt",{"_index":2330,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["req.body",{"_index":266,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["req.headers['content",{"_index":484,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['user",{"_index":482,"title":{},"body":{"modules/AppModule.html":{}}}],["req.id",{"_index":262,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["req.method",{"_index":477,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["req.params?.session",{"_index":475,"title":{},"body":{"modules/AppModule.html":{}}}],["req.params?.tenantid",{"_index":485,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url",{"_index":478,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":11,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["request.'})@isenum(responsetype",{"_index":2073,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto",{"_index":51,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["request.dto.ts",{"_index":776,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["request.dto.ts:12",{"_index":788,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:15",{"_index":793,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:17",{"_index":2578,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:18",{"_index":795,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:20",{"_index":2074,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:21",{"_index":797,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:24",{"_index":789,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:26",{"_index":2070,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/PresentationRequest.html":{}}}],["request.dto.ts:27",{"_index":790,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:30",{"_index":791,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:33",{"_index":794,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/OfferRequestDto.html":{},"classes/PresentationRequest.html":{}}}],["request.dto.ts:36",{"_index":787,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:37",{"_index":2076,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:41",{"_index":2079,"title":{},"body":{"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["request.dto.ts:42",{"_index":2078,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:6",{"_index":792,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.dto.ts:9",{"_index":796,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.header",{"_index":2332,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.headers['accept",{"_index":3861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.headers['content",{"_index":2740,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers['user",{"_index":2739,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.method",{"_index":2735,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params.session",{"_index":2691,"title":{},"body":{"guards/SessionGuard.html":{}}}],["request.params?.tenantid",{"_index":2734,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params[sessionidparam",{"_index":2733,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.payload",{"_index":2336,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.session",{"_index":2693,"title":{},"body":{"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":2736,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.user",{"_index":3047,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["request/response",{"_index":2023,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["request_error",{"_index":2755,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_start",{"_index":2738,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_success",{"_index":2748,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_uri",{"_index":762,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["requested",{"_index":254,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["requestid",{"_index":250,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["requesting",{"_index":3462,"title":{},"body":{"index.html":{}}}],["requests",{"_index":85,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["require_pushed_authorization_requests",{"_index":866,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["required",{"_index":330,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["requiredclaimkeys",{"_index":2530,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requiredfields",{"_index":2470,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requires",{"_index":2065,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["res",{"_index":234,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["res.data",{"_index":220,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['crt",{"_index":240,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['id",{"_index":241,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['jwt",{"_index":277,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data?.filter",{"_index":258,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.error",{"_index":216,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.payload",{"_index":1575,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["res.redirect(`${values.redirect_uri}?code=${code",{"_index":882,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send",{"_index":968,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send(qrcodebuffer",{"_index":1775,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.send(values",{"_index":1776,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.setheader('content",{"_index":1773,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.state",{"_index":2356,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["res.status",{"_index":1028,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["res.status(400).send(response",{"_index":956,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.statuscode",{"_index":487,"title":{},"body":{"modules/AppModule.html":{}}}],["reset",{"_index":379,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["resolve",{"_index":2591,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolvepublickey",{"_index":2587,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolvepublickey(payload",{"_index":2589,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolver.service",{"_index":2584,"title":{},"body":{"modules/ResolverModule.html":{}}}],["resolver/resolver.module",{"_index":2437,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["resolver/resolver.service",{"_index":2491,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolvermodule",{"_index":2433,"title":{"modules/ResolverModule.html":{}},"body":{"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules.html":{},"overview.html":{}}}],["resolverservice",{"_index":2451,"title":{"injectables/ResolverService.html":{}},"body":{"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"overview.html":{}}}],["resolves",{"_index":1201,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/PresentationsService.html":{}}}],["resolving",{"_index":2455,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["resource",{"_index":783,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["resourceserver",{"_index":2110,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["response",{"_index":189,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["response.data!.find((item",{"_index":202,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.data!['id",{"_index":193,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.dto",{"_index":531,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["response.dto.ts",{"_index":624,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{},"coverage.html":{}}}],["response.dto.ts:11",{"_index":706,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{}}}],["response.dto.ts:13",{"_index":2056,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:15",{"_index":1530,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:17",{"_index":2062,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:19",{"_index":1534,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:2",{"_index":2627,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:21",{"_index":2058,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:23",{"_index":1536,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:25",{"_index":2060,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:29",{"_index":2063,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:3",{"_index":2629,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:33",{"_index":1811,"title":{},"body":{"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:37",{"_index":2055,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:4",{"_index":2628,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:5",{"_index":2061,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{}}}],["response.dto.ts:9",{"_index":2066,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["response.error",{"_index":190,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.jwks.keys.find((key",{"_index":2620,"title":{},"body":{"injectables/ResolverService.html":{}}}],["response.statuscode",{"_index":2749,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["response_mode",{"_index":2307,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_processing",{"_index":2358,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_type",{"_index":784,"title":{},"body":{"classes/AuthorizeQueries.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["response_types_supported",{"_index":2320,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_uri",{"_index":2305,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responses",{"_index":2704,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsesize",{"_index":2750,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsestatus",{"_index":3093,"title":{},"body":{"injectables/WebhookService.html":{}}}],["responsetype",{"_index":1750,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["responsetype.qrcode",{"_index":1761,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsetype.uri",{"_index":1763,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsibility",{"_index":3797,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":64,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/HealthController.html":{},"controllers/KeyController.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"license.html":{}}}],["result",{"_index":1202,"title":{},"body":{"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"license.html":{}}}],["result.payload",{"_index":2531,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resulting",{"_index":3592,"title":{},"body":{"license.html":{}}}],["results",{"_index":298,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retain",{"_index":3699,"title":{},"body":{"license.html":{}}}],["retrieval",{"_index":3138,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["retrieve",{"_index":765,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{}}}],["retrieves",{"_index":1206,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["retry",{"_index":1030,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["return",{"_index":103,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":223,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["returns",{"_index":130,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["reuse",{"_index":2373,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["review",{"_index":3165,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["revisions",{"_index":3609,"title":{},"body":{"license.html":{}}}],["revokeall",{"_index":2664,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(@body",{"_index":2682,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(value",{"_index":2669,"title":{},"body":{"controllers/SessionController.html":{}}}],["revoked",{"_index":17,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{}}}],["rights",{"_index":3793,"title":{},"body":{"license.html":{}}}],["risk",{"_index":3445,"title":{},"body":{"index.html":{}}}],["risks",{"_index":3761,"title":{},"body":{"license.html":{}}}],["root",{"_index":539,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionService.html":{},"changelog.html":{},"index.html":{}}}],["rootpath",{"_index":492,"title":{},"body":{"modules/AppModule.html":{}}}],["royalty",{"_index":3650,"title":{},"body":{"license.html":{}}}],["rp",{"_index":214,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["rp_name",{"_index":422,"title":{},"body":{"modules/AppModule.html":{}}}],["rs256",{"_index":1879,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["rsa",{"_index":1859,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["run",{"_index":2868,"title":{},"body":{"injectables/SessionService.html":{},"index.html":{}}}],["running",{"_index":349,"title":{},"body":{"controllers/AppController.html":{}}}],["runs",{"_index":3473,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2490,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":2727,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["saltgenerator",{"_index":1418,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["same",{"_index":924,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"license.html":{}}}],["sanitize",{"_index":2722,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody",{"_index":2706,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody(body",{"_index":2718,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized",{"_index":2723,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized[field",{"_index":2768,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizes",{"_index":2720,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["satisfies",{"_index":2157,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["save",{"_index":295,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/RegistrarService.html":{}}}],["saveconfig",{"_index":2557,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["saveconfig(config",{"_index":296,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["scalable",{"_index":3469,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":489,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":2846,"title":{},"body":{"injectables/SessionService.html":{}}}],["schema",{"_index":1131,"title":{},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"controllers/PresentationManagementController.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"miscellaneous/variables.html":{}}}],["schema(@param('id",{"_index":1370,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema(id",{"_index":1358,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema.org/draft/2020",{"_index":2625,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["schema_uri",{"_index":2388,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["schema_uri#integrity",{"_index":2389,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["schemaresponse",{"_index":1161,"title":{"classes/SchemaResponse.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["scope",{"_index":785,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["sd",{"_index":1157,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{},"index.html":{}}}],["sdjwt",{"_index":1410,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwt.issue",{"_index":1420,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwtinstance",{"_index":2444,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["sdjwtvcinstance",{"_index":1396,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["seconds",{"_index":581,"title":{},"body":{"controllers/AuthController.html":{},"classes/ParResponseDto.html":{}}}],["secret",{"_index":563,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"index.html":{}}}],["secretkey",{"_index":1591,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["secretorkey",{"_index":1883,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkeyprovider",{"_index":1847,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":3660,"title":{},"body":{"license.html":{}}}],["sections",{"_index":3524,"title":{},"body":{"index.html":{},"license.html":{}}}],["secure",{"_index":3468,"title":{},"body":{"index.html":{}}}],["see",{"_index":3534,"title":{},"body":{"index.html":{},"license.html":{}}}],["selected",{"_index":650,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["sell",{"_index":3661,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":3272,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":335,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["sendauthorizationcode",{"_index":803,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sendauthorizationcode(res",{"_index":821,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse",{"_index":804,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse(queries",{"_index":823,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sending",{"_index":962,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WebhookService.html":{}}}],["sends",{"_index":1044,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook",{"_index":3068,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhook(session",{"_index":3071,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhooknotification",{"_index":3069,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhooknotification(session",{"_index":3073,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sense",{"_index":3167,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["sensitive",{"_index":2721,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields",{"_index":2764,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields.foreach((field",{"_index":2767,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sent",{"_index":311,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"license.html":{}}}],["separable",{"_index":3615,"title":{},"body":{"license.html":{}}}],["separate",{"_index":3729,"title":{},"body":{"license.html":{}}}],["serializers",{"_index":476,"title":{},"body":{"modules/AppModule.html":{}}}],["server",{"_index":114,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["server's",{"_index":2057,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["servers",{"_index":1313,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["servestaticmodule",{"_index":395,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":490,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":127,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["service.db",{"_index":1517,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["services",{"_index":332,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["session",{"_index":719,"title":{"entities/Session.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["session.auth_queries",{"_index":879,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.authorization_code",{"_index":911,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.controller",{"_index":2831,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.credentialpayload",{"_index":3092,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.credentialpayload!.values",{"_index":3090,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.credentialpayload?.values?.[credentialconfigurationid",{"_index":1404,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["session.credentials",{"_index":938,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.id",{"_index":851,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{}}}],["session.issuanceid",{"_index":947,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["session.notifications",{"_index":2211,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications.findindex",{"_index":2222,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications.push",{"_index":2209,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications[index",{"_index":2236,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications[index].event",{"_index":2225,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifywebhook",{"_index":2234,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/WebhookService.html":{}}}],["session.requestid",{"_index":2288,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.service",{"_index":2673,"title":{},"body":{"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{}}}],["session.tenantid",{"_index":853,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["session.vp_nonce",{"_index":2363,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook",{"_index":2361,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook!.auth",{"_index":3076,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.webhook!.auth.config.value",{"_index":3079,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.webhook!.auth.type",{"_index":3077,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.webhook!.auth?.type",{"_index":3084,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.webhook!.url",{"_index":3082,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session/.well",{"_index":3104,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["session/authorize",{"_index":710,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["session/entities/session.entity",{"_index":751,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["session/session.decorator",{"_index":750,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["session/session.guard",{"_index":753,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["session/session.module",{"_index":404,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["session/session.service",{"_index":746,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WebhookService.html":{}}}],["session/vci",{"_index":2081,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_id",{"_index":2108,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_logger_key",{"_index":2728,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["session_tidy_up_interval",{"_index":2832,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["session_ttl",{"_index":2835,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["session_type",{"_index":2840,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session_validation_schema",{"_index":403,"title":{},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessioncontroller",{"_index":2660,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessionentity",{"_index":749,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionguard",{"_index":752,"title":{"guards/SessionGuard.html":{}},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"guards/SessionGuard.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["sessionid",{"_index":474,"title":{},"body":{"modules/AppModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["sessionidparam",{"_index":2731,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["sessionlogcontext",{"_index":2137,"title":{"interfaces/SessionLogContext.html":{}},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["sessionlogger",{"_index":2093,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionlogger('notification_id",{"_index":2103,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger('session",{"_index":2100,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["sessionloggerinterceptor",{"_index":1784,"title":{"injectables/SessionLoggerInterceptor.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["sessionloggerservice",{"_index":1785,"title":{"injectables/SessionLoggerService.html":{}},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"overview.html":{}}}],["sessionmodule",{"_index":375,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/SessionModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionrepository",{"_index":2849,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessions",{"_index":2658,"title":{},"body":{"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sessionscounter",{"_index":2847,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionservice",{"_index":745,"title":{"injectables/SessionService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"overview.html":{}}}],["sessionstatus",{"_index":2138,"title":{},"body":{"injectables/Oid4vciService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["sessiontype",{"_index":2901,"title":{},"body":{"injectables/SessionService.html":{}}}],["set",{"_index":100,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/EC_Public.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["set+json",{"_index":3133,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["set+json')@get('jwks.json",{"_index":3111,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["setauthcode",{"_index":805,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["setauthcode(issuer_state",{"_index":825,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["setentry",{"_index":3013,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setentry(id",{"_index":2995,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["setexpirationtime(expiresin",{"_index":1599,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setglobalconfig",{"_index":1802,"title":{},"body":{"modules/IssuerModule.html":{}}}],["setinterval(callback",{"_index":2888,"title":{},"body":{"injectables/SessionService.html":{}}}],["setissuedat",{"_index":1595,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setissuer(issuer",{"_index":1596,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setmetadata(is_public_key",{"_index":3881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(session_logger_key",{"_index":3882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprotectedheader",{"_index":1593,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setstate",{"_index":2843,"title":{},"body":{"injectables/SessionService.html":{}}}],["setstate(session",{"_index":2870,"title":{},"body":{"injectables/SessionService.html":{}}}],["setsubject(options.subject",{"_index":1597,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["settimeout",{"_index":166,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["setting",{"_index":1041,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["setup",{"_index":3194,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["setupclient",{"_index":1082,"title":{},"body":{"injectables/ClientService.html":{}}}],["setupclient(id",{"_index":1050,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["sha",{"_index":1416,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["shall",{"_index":3554,"title":{},"body":{"license.html":{}}}],["shares",{"_index":3581,"title":{},"body":{"license.html":{}}}],["shouldenableautologging",{"_index":2003,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["shouldlog",{"_index":2783,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["shuffel",{"_index":2959,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["shuffled",{"_index":2952,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["sign",{"_index":2059,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"miscellaneous/variables.html":{}}}],["signalg",{"_index":1413,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["signature",{"_index":1457,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["signature).catch((err",{"_index":2518,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["signaturebase64url",{"_index":3876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signed",{"_index":3153,"title":{},"body":{"injectables/WellKnownService.html":{},"changelog.html":{}}}],["signedjwt",{"_index":2334,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwt.length",{"_index":2340,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwtlength",{"_index":2339,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signer",{"_index":915,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["signer(tenantid",{"_index":1968,"title":{},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["signing",{"_index":980,"title":{},"body":{"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"miscellaneous/typealiases.html":{}}}],["signjwt",{"_index":1579,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["signjwt(payload",{"_index":1990,"title":{},"body":{"classes/KeyService.html":{}}}],["signl",{"_index":1032,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["simplicity",{"_index":2533,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["singleline",{"_index":465,"title":{},"body":{"modules/AppModule.html":{}}}],["size",{"_index":2956,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["skip",{"_index":1245,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["software",{"_index":3591,"title":{},"body":{"license.html":{}}}],["sole",{"_index":3796,"title":{},"body":{"license.html":{}}}],["solely",{"_index":3757,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":3444,"title":{},"body":{"index.html":{}}}],["solves",{"_index":3448,"title":{},"body":{"index.html":{}}}],["someone",{"_index":274,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["sort",{"_index":2963,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"index.html":{},"license.html":{}}}],["special",{"_index":3773,"title":{},"body":{"license.html":{}}}],["specific",{"_index":649,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["specified",{"_index":3148,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["specifies",{"_index":673,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["specifying",{"_index":1276,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["split",{"_index":3296,"title":{},"body":{"changelog.html":{}}}],["sqlite",{"_index":1494,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["sqlite3",{"_index":3409,"title":{},"body":{"dependencies.html":{}}}],["src/.../auth.module.ts",{"_index":3849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication",{"_index":3843,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../cert.entity.ts",{"_index":3844,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../client.entity.ts",{"_index":3845,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../crypto",{"_index":3847,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../crypto.module.ts",{"_index":3850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../crypto.service.ts",{"_index":3846,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../database.module.ts",{"_index":3851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ed25519.ts",{"_index":3852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../issuer.module.ts",{"_index":3854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../key.module.ts",{"_index":3855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":3420,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../media",{"_index":3415,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../presentation",{"_index":3417,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../public.decorator.ts",{"_index":3853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registrar.module.ts",{"_index":3856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session",{"_index":3857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.decorator.ts",{"_index":3859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.entity.ts",{"_index":3848,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../session.module.ts",{"_index":3858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../token.decorator.ts",{"_index":3860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../util.ts",{"_index":3421,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../webhook.dto.ts",{"_index":3842,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.module.ts",{"_index":381,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.controller.ts",{"_index":341,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:8",{"_index":344,"title":{},"body":{"controllers/AppController.html":{}}}],["src/auth/auth.controller.ts",{"_index":497,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:60",{"_index":509,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":1812,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:12",{"_index":1821,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:7",{"_index":1818,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":589,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/client.service.ts",{"_index":984,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"coverage.html":{}}}],["src/auth/client.service.ts:142",{"_index":1090,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:27",{"_index":1084,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:41",{"_index":1089,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:51",{"_index":1086,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:61",{"_index":1088,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:77",{"_index":1091,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:90",{"_index":1085,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:99",{"_index":1087,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/dto/client",{"_index":1068,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/dto/token",{"_index":3048,"title":{},"body":{"classes/TokenResponse.html":{},"coverage.html":{}}}],["src/auth/entitites/client.entity.ts",{"_index":1072,"title":{},"body":{"entities/ClientEntry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/entitites/client.entity.ts:11",{"_index":1079,"title":{},"body":{"entities/ClientEntry.html":{}}}],["src/auth/entitites/client.entity.ts:14",{"_index":1074,"title":{},"body":{"entities/ClientEntry.html":{}}}],["src/auth/entitites/client.entity.ts:8",{"_index":1076,"title":{},"body":{"entities/ClientEntry.html":{}}}],["src/auth/jwt.service.ts",{"_index":1578,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["src/auth/jwt.service.ts:13",{"_index":1834,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:19",{"_index":1837,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:56",{"_index":1839,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:82",{"_index":1835,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:93",{"_index":1838,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":1840,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:10",{"_index":1844,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:24",{"_index":1846,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:51",{"_index":1850,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:75",{"_index":1852,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/public.decorator.ts",{"_index":3312,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/token.decorator.ts",{"_index":3043,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/crypto.module.ts",{"_index":1479,"title":{},"body":{"modules/CryptoModule.html":{}}}],["src/crypto/crypto.service.ts",{"_index":3313,"title":{},"body":{"coverage.html":{}}}],["src/crypto/encryption/encryption.service.ts",{"_index":1540,"title":{},"body":{"injectables/EncryptionService.html":{},"coverage.html":{}}}],["src/crypto/encryption/encryption.service.ts:11",{"_index":1546,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:22",{"_index":1556,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:53",{"_index":1548,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:75",{"_index":1555,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/key/crypto/crypto",{"_index":1436,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/crypto/crypto.module.ts",{"_index":3319,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/crypto/crypto.service.ts",{"_index":1459,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:10",{"_index":1463,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:17",{"_index":1465,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:21",{"_index":1469,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["src/crypto/key/crypto/ed25519.ts",{"_index":3321,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/dto/key",{"_index":1892,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"coverage.html":{}}}],["src/crypto/key/entities/cert.entity.ts",{"_index":973,"title":{},"body":{"entities/CertEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/entities/cert.entity.ts:11",{"_index":978,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:14",{"_index":975,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:17",{"_index":981,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:8",{"_index":977,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/filesystem",{"_index":3324,"title":{},"body":{"coverage.html":{}}}],["src/crypto/key/key.controller.ts",{"_index":1907,"title":{},"body":{"controllers/KeyController.html":{},"coverage.html":{}}}],["src/crypto/key/key.controller.ts:36",{"_index":1917,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:48",{"_index":1913,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:63",{"_index":1915,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.module.ts",{"_index":1933,"title":{},"body":{"modules/KeyModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/key.module.ts:34",{"_index":1935,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.service.ts",{"_index":1957,"title":{},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["src/crypto/key/key.service.ts:105",{"_index":1980,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:16",{"_index":1959,"title":{},"body":{"classes/KeyObj.html":{}}}],["src/crypto/key/key.service.ts:20",{"_index":1960,"title":{},"body":{"classes/KeyObj.html":{}}}],["src/crypto/key/key.service.ts:24",{"_index":1958,"title":{},"body":{"classes/KeyObj.html":{}}}],["src/crypto/key/key.service.ts:30",{"_index":1978,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:41",{"_index":1988,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:48",{"_index":1979,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:55",{"_index":1987,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:61",{"_index":1989,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:67",{"_index":1982,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:69",{"_index":1981,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:75",{"_index":1984,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:80",{"_index":1985,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:85",{"_index":1986,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:92",{"_index":1991,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/vault",{"_index":3330,"title":{},"body":{"coverage.html":{}}}],["src/database/database.module.ts",{"_index":1486,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/health/health.controller.ts",{"_index":1617,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:25",{"_index":1624,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1632,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/issuer/authorize/authorize.controller.ts",{"_index":709,"title":{},"body":{"controllers/AuthorizeController.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.controller.ts:41",{"_index":724,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:55",{"_index":732,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:77",{"_index":735,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:94",{"_index":721,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.service.ts",{"_index":799,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.service.ts:104",{"_index":828,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:209",{"_index":819,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:227",{"_index":811,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:302",{"_index":822,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:309",{"_index":826,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:38",{"_index":810,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:49",{"_index":816,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:56",{"_index":813,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:79",{"_index":824,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/dto/authorize",{"_index":775,"title":{},"body":{"classes/AuthorizeQueries.html":{},"coverage.html":{}}}],["src/issuer/authorize/dto/par",{"_index":2376,"title":{},"body":{"classes/ParResponseDto.html":{},"coverage.html":{}}}],["src/issuer/credentials",{"_index":1354,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"classes/PresentationDuringIssuance.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["src/issuer/credentials/credential",{"_index":1187,"title":{},"body":{"injectables/CredentialConfigService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts",{"_index":1325,"title":{},"body":{"controllers/CredentialsController.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts:35",{"_index":1334,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:45",{"_index":1336,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:58",{"_index":1332,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.service.ts",{"_index":1372,"title":{},"body":{"injectables/CredentialsService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.service.ts:125",{"_index":1390,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:151",{"_index":1388,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:18",{"_index":1380,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:33",{"_index":1386,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:49",{"_index":1383,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts",{"_index":1126,"title":{},"body":{"entities/CredentialConfig.html":{},"coverage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:17",{"_index":1159,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:22",{"_index":1164,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:28",{"_index":1144,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:34",{"_index":1136,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:40",{"_index":1154,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:47",{"_index":1165,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:54",{"_index":1163,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:62",{"_index":1151,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/issuance/dto/authentication",{"_index":639,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/issuer/issuance/dto/credential",{"_index":1093,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts",{"_index":1174,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:14",{"_index":1175,"title":{},"body":{"classes/CredentialConfigMapping.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:17",{"_index":1177,"title":{},"body":{"classes/CredentialConfigMapping.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:28",{"_index":1674,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:36",{"_index":1673,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:45",{"_index":1670,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:54",{"_index":1675,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/entities/credential",{"_index":1268,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"coverage.html":{}}}],["src/issuer/issuance/entities/issuance",{"_index":1635,"title":{},"body":{"entities/IssuanceConfig.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts",{"_index":1653,"title":{},"body":{"controllers/IssuanceController.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts:28",{"_index":1659,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:38",{"_index":1661,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:54",{"_index":1657,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.service.ts",{"_index":1676,"title":{},"body":{"injectables/IssuanceService.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.service.ts:142",{"_index":1688,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:154",{"_index":1690,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:170",{"_index":1695,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:23",{"_index":1683,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:239",{"_index":1686,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:43",{"_index":1693,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:51",{"_index":1691,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuer",{"_index":1732,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{}}}],["src/issuer/issuer.module.ts",{"_index":1787,"title":{},"body":{"modules/IssuerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/issuer/oid4vci/dto/notification",{"_index":2048,"title":{},"body":{"classes/NotificationRequestDto.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/dto/offer",{"_index":2067,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts",{"_index":2080,"title":{},"body":{"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:38",{"_index":2085,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:52",{"_index":2089,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts",{"_index":2109,"title":{},"body":{"injectables/Oid4vciService.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:116",{"_index":2117,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:186",{"_index":2119,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:303",{"_index":2121,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:41",{"_index":2128,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:43",{"_index":2114,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:48",{"_index":2126,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:55",{"_index":2125,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:66",{"_index":2124,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/util.ts",{"_index":3348,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/issuer/status",{"_index":2916,"title":{},"body":{"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":3351,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/metric/metric.module.ts",{"_index":2042,"title":{},"body":{"modules/MetricModule.html":{}}}],["src/registrar/registrar",{"_index":2535,"title":{},"body":{"classes/RegistrarConfig.html":{},"coverage.html":{}}}],["src/registrar/registrar.module.ts",{"_index":2544,"title":{},"body":{"modules/RegistrarModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/registrar/registrar.service.ts",{"_index":6,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"coverage.html":{}}}],["src/registrar/registrar.service.ts:109",{"_index":2566,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:117",{"_index":2568,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:128",{"_index":2570,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:143",{"_index":2571,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:160",{"_index":2564,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:187",{"_index":2573,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:205",{"_index":2565,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:232",{"_index":2561,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:276",{"_index":2563,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:333",{"_index":2567,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:356",{"_index":2572,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:51",{"_index":2575,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:55",{"_index":2574,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:59",{"_index":2559,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:76",{"_index":2569,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/session/entities/session.entity.ts",{"_index":2630,"title":{},"body":{"entities/Session.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/session/entities/session.entity.ts:103",{"_index":2642,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:108",{"_index":2641,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:113",{"_index":2649,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:116",{"_index":2648,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:43",{"_index":2639,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:46",{"_index":2640,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:52",{"_index":2646,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:58",{"_index":2636,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:63",{"_index":2632,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:68",{"_index":2645,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:73",{"_index":2631,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:78",{"_index":2652,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:83",{"_index":2633,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:88",{"_index":2644,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:93",{"_index":2634,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:98",{"_index":2654,"title":{},"body":{"entities/Session.html":{}}}],["src/session/session.controller.ts",{"_index":2661,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{}}}],["src/session/session.controller.ts:23",{"_index":2665,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:32",{"_index":2668,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:42",{"_index":2672,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.decorator.ts",{"_index":3353,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/session/session.guard.ts",{"_index":2685,"title":{},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["src/session/session.guard.ts:10",{"_index":2687,"title":{},"body":{"guards/SessionGuard.html":{}}}],["src/session/session.guard.ts:13",{"_index":2688,"title":{},"body":{"guards/SessionGuard.html":{}}}],["src/session/session.module.ts",{"_index":2830,"title":{},"body":{"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/session/session.service.ts",{"_index":2841,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/session/session.service.ts:109",{"_index":2871,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:135",{"_index":2852,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:143",{"_index":2858,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:152",{"_index":2857,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:161",{"_index":2861,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:168",{"_index":2874,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:19",{"_index":2848,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:34",{"_index":2863,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:89",{"_index":2855,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/utils/logger/logger",{"_index":1993,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["src/utils/logger/session",{"_index":2694,"title":{},"body":{"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/mediatype/media",{"_index":3361,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/utils/webhook/webhook.dto.ts",{"_index":301,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/webhook/webhook.dto.ts:13",{"_index":309,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:19",{"_index":313,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:36",{"_index":3063,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:43",{"_index":3062,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:54",{"_index":3066,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:62",{"_index":3065,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.service.ts",{"_index":3067,"title":{},"body":{"injectables/WebhookService.html":{},"coverage.html":{}}}],["src/utils/webhook/webhook.service.ts:13",{"_index":3070,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:32",{"_index":3072,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:98",{"_index":3074,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/verifier/oid4vp/dto/authorization",{"_index":705,"title":{},"body":{"classes/AuthorizationResponse.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/dto/presentation",{"_index":2425,"title":{},"body":{"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts",{"_index":2242,"title":{},"body":{"controllers/Oid4vpController.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:42",{"_index":2247,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:53",{"_index":2250,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.module.ts",{"_index":2266,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts",{"_index":2269,"title":{},"body":{"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:20",{"_index":2272,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:202",{"_index":2279,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:252",{"_index":2280,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:41",{"_index":2274,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/presentations/dto/auth",{"_index":623,"title":{},"body":{"interfaces/AuthResponse.html":{},"coverage.html":{}}}],["src/verifier/presentations/dto/vp",{"_index":2576,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{},"coverage.html":{}}}],["src/verifier/presentations/entities/presentation",{"_index":2378,"title":{},"body":{"entities/PresentationConfig.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts",{"_index":2392,"title":{},"body":{"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts:111",{"_index":2396,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:121",{"_index":2404,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:137",{"_index":2398,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:79",{"_index":2402,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.module.ts",{"_index":2434,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["src/verifier/presentations/presentations.service.ts",{"_index":2440,"title":{},"body":{"injectables/PresentationsService.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.service.ts:126",{"_index":2464,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:139",{"_index":2478,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:150",{"_index":2458,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:160",{"_index":2462,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:181",{"_index":2480,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:194",{"_index":2487,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:217",{"_index":2485,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:232",{"_index":2482,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:249",{"_index":2472,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:28",{"_index":2453,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:48",{"_index":2468,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:60",{"_index":2465,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/resolver/dto/issuer",{"_index":1778,"title":{},"body":{"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.module.ts",{"_index":2583,"title":{},"body":{"modules/ResolverModule.html":{}}}],["src/verifier/resolver/resolver.service.ts",{"_index":2585,"title":{},"body":{"injectables/ResolverService.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.service.ts:12",{"_index":2588,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:21",{"_index":2590,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/verifier.module.ts",{"_index":3060,"title":{},"body":{"modules/VerifierModule.html":{}}}],["src/well",{"_index":1297,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["stable",{"_index":3514,"title":{},"body":{"index.html":{}}}],["stack",{"_index":2758,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{}}}],["stack—so",{"_index":3454,"title":{},"body":{"index.html":{}}}],["stage",{"_index":2188,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["standardized",{"_index":3430,"title":{},"body":{"index.html":{}}}],["start",{"_index":2276,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"index.html":{}}}],["started",{"_index":2813,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"injectables/SessionLoggerService.html":{}}}],["starting",{"_index":2742,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["starts",{"_index":139,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["startswith('http",{"_index":1809,"title":{},"body":{"modules/IssuerModule.html":{}}}],["starttime",{"_index":2743,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["state",{"_index":626,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"license.html":{}}}],["stated",{"_index":3659,"title":{},"body":{"license.html":{}}}],["statement",{"_index":3718,"title":{},"body":{"license.html":{}}}],["statements",{"_index":3300,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":2890,"title":{},"body":{"injectables/SessionService.html":{}}}],["static",{"_index":397,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationConfigHelper.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"changelog.html":{},"dependencies.html":{}}}],["stating",{"_index":3696,"title":{},"body":{"license.html":{}}}],["status",{"_index":541,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"dependencies.html":{},"index.html":{}}}],["status_list",{"_index":2994,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuscode",{"_index":486,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["statuslist",{"_index":2936,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslist(file.elements",{"_index":2969,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslist+jwt",{"_index":2973,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistcontroller",{"_index":2915,"title":{"controllers/StatusListController.html":{}},"body":{"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"coverage.html":{}}}],["statuslistfetcher",{"_index":2445,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["statuslistfile",{"_index":2930,"title":{"interfaces/StatusListFile.html":{}},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"coverage.html":{}}}],["statuslistjwtheaderparameters",{"_index":2937,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistmodule",{"_index":586,"title":{"modules/StatusListModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules.html":{},"overview.html":{}}}],["statuslistservice",{"_index":990,"title":{"injectables/StatusListService.html":{}},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{},"overview.html":{}}}],["statusmapping",{"_index":2939,"title":{"entities/StatusMapping.html":{}},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["statusmappingrepository",{"_index":2946,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statusupdatedto",{"_index":2670,"title":{"classes/StatusUpdateDto.html":{}},"body":{"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["statutslistservice",{"_index":1000,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["step",{"_index":766,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["still",{"_index":208,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["stoppage",{"_index":3780,"title":{},"body":{"license.html":{}}}],["storage",{"_index":3475,"title":{},"body":{"index.html":{}}}],["store",{"_index":237,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{}}}],["store(tenantid",{"_index":1212,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["storeconfig",{"_index":3014,"title":{},"body":{"injectables/StatusListService.html":{}}}],["storeconfig(content",{"_index":2981,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["storecredentialconfiguration",{"_index":1329,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["storecredentialconfiguration(config",{"_index":1335,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["stored",{"_index":1214,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["storeexistingrp",{"_index":2558,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["storeexistingrp(name",{"_index":199,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["storeissuanceconfiguration",{"_index":1656,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["storeissuanceconfiguration(config",{"_index":1660,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["storeissuanceconfiguration(tenantid",{"_index":1694,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["storepresentationconfig",{"_index":2394,"title":{},"body":{"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["storepresentationconfig(config",{"_index":2403,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["storepresentationconfig(tenantid",{"_index":2476,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid",{"_index":2449,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid(registrationcertid",{"_index":2479,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["stores",{"_index":194,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["strategy",{"_index":1856,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":18,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":949,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{}}}],["structured",{"_index":2772,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["sub",{"_index":573,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{}}}],["subfolder",{"_index":1221,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["subject",{"_index":253,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"license.html":{}}}],["sublicense",{"_index":3655,"title":{},"body":{"license.html":{}}}],["submission",{"_index":3720,"title":{},"body":{"license.html":{}}}],["submit",{"_index":3624,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":3622,"title":{},"body":{"license.html":{}}}],["subsequently",{"_index":3641,"title":{},"body":{"license.html":{}}}],["succeeded",{"_index":2824,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["success",{"_index":2903,"title":{},"body":{"injectables/SessionService.html":{}}}],["successful",{"_index":2873,"title":{},"body":{"injectables/SessionService.html":{}}}],["successfully",{"_index":2338,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{}}}],["such",{"_index":1532,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/Session.html":{},"license.html":{}}}],["summary",{"_index":536,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["super",{"_index":1826,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":1831,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["supersede",{"_index":3728,"title":{},"body":{"license.html":{}}}],["support",{"_index":550,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/Session.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{}}}],["supported",{"_index":328,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{}}}],["supportedauthenticationscheme",{"_index":2130,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["supportedauthenticationscheme.clientattestationjwt",{"_index":874,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["supportedauthenticationscheme.dpop",{"_index":2183,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["supports",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["svg",{"_index":3831,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":3127,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["switch",{"_index":1473,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["symmetric",{"_index":1885,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["synchronize",{"_index":1505,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["syntax",{"_index":3817,"title":{},"body":{"license.html":{}}}],["system",{"_index":1908,"title":{},"body":{"controllers/KeyController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["systems",{"_index":3632,"title":{},"body":{"license.html":{}}}],["t",{"_index":1549,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["table",{"_index":3368,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3367,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":2725,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["tap((data",{"_index":2746,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["target",{"_index":462,"title":{},"body":{"modules/AppModule.html":{}}}],["tell",{"_index":2367,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenancy",{"_index":2651,"title":{},"body":{"entities/Session.html":{}}}],["tenant",{"_index":144,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AuthModule.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/EncryptionService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"injectables/Oid4vciService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"changelog.html":{}}}],["tenant.isdirectory",{"_index":1230,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["tenant.name",{"_index":1236,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["tenant_client_total",{"_index":618,"title":{},"body":{"modules/AuthModule.html":{}}}],["tenant_id",{"_index":2839,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["tenantclienttotal",{"_index":1004,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["tenantfolders",{"_index":1226,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["tenantid",{"_index":146,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["tenantid)).uri",{"_index":930,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["tenantid/credentials",{"_index":1357,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["tenantid/status",{"_index":2918,"title":{},"body":{"controllers/StatusListController.html":{}}}],["term",{"_index":3480,"title":{},"body":{"index.html":{}}}],["terminate",{"_index":3682,"title":{},"body":{"license.html":{}}}],["terminusmodule",{"_index":1634,"title":{},"body":{"modules/HealthModule.html":{}}}],["terms",{"_index":3549,"title":{},"body":{"license.html":{}}}],["test",{"_index":1864,"title":{},"body":{"injectables/JwtStrategy.html":{},"changelog.html":{}}}],["text",{"_index":3703,"title":{},"body":{"license.html":{}}}],["textencoder().encode(data",{"_index":3874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textencoder().encode(secret",{"_index":1592,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["then((count",{"_index":1026,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["then((res",{"_index":215,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["then((response",{"_index":201,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["then((session",{"_index":878,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["then(async",{"_index":188,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{}}}],["theory",{"_index":3764,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":3618,"title":{},"body":{"license.html":{}}}],["third",{"_index":3710,"title":{},"body":{"license.html":{}}}],["this.accesstoken",{"_index":125,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.addaccesscertificate(config",{"_index":212,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.addrp(tenantid",{"_index":150,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.authorizeservice.authorizationchallengeendpoint",{"_index":774,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.authzmetadata",{"_index":3169,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.authorizeservice.sendauthorizationresponse(queries",{"_index":759,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.validatetokenrequest(body",{"_index":772,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authzmetadata(session",{"_index":894,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.authzservice.authzmetadata(session",{"_index":2143,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.certrepository",{"_index":1973,"title":{},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{}}}],["this.client",{"_index":120,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.client.setconfig",{"_index":121,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.clientrepository",{"_index":1024,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientrepository.countby",{"_index":1008,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientrepository.findonebyorfail",{"_index":1027,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientrepository.save",{"_index":1034,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientrepository.update",{"_index":1039,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clients",{"_index":1011,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientservice.issetup(payload.sub",{"_index":1891,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.clientservice.validateclient",{"_index":570,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config",{"_index":2028,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enabledebugmode",{"_index":2038,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablehttplogger",{"_index":2037,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablesessionlogger",{"_index":2036,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.level",{"_index":2039,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.logformat",{"_index":2040,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice",{"_index":228,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.get",{"_index":2031,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.configservice.get('config_import",{"_index":1225,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.configservice.get('config_import_force",{"_index":1224,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.configservice.get('log_level",{"_index":2030,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice.get('oidc",{"_index":1615,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["this.configservice.get('registrar_url",{"_index":135,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow",{"_index":108,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('auth_client_id",{"_index":1015,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.configservice.getorthrow('config_folder",{"_index":1220,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.configservice.getorthrow('folder",{"_index":281,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.configservice.getorthrow('jwt_expires_in",{"_index":1590,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('jwt_issuer",{"_index":1588,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('jwt_secret",{"_index":1587,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('public_url",{"_index":850,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.configservice.getorthrow('public_url')}${req.url",{"_index":883,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow('public_url')}/${session.id",{"_index":914,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow('public_url')}/${session.tenantid}/credentials/vct/${credentialconfigurationid",{"_index":1425,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow('public_url')}/oid4vp/request/${values.session",{"_index":2349,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.configservice.getorthrow('registrar_oidc_url",{"_index":106,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('registrar_url",{"_index":123,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('rp_name",{"_index":186,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('session_tidy_up_interval",{"_index":2886,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservice.getorthrow('session_ttl",{"_index":2911,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservie.get('crypto_alg",{"_index":1470,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["this.createlist(tenantid",{"_index":2966,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.credentialconfigrepo",{"_index":1402,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findby",{"_index":1398,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findonebyorfail",{"_index":1433,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepository.delete",{"_index":1267,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.find",{"_index":1264,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.findonebyorfail",{"_index":1265,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.save",{"_index":1266,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialissuancebindingrepo.save",{"_index":1727,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsconfigservice.getbyid",{"_index":1718,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsconfigservice.import",{"_index":1702,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsservice.delete(user.sub",{"_index":1352,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.get(user.sub",{"_index":1349,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.getcredential",{"_index":2202,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getcredentialconfigurationsupported",{"_index":2146,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getschema(id",{"_index":1371,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.getvct(id",{"_index":1369,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.store(user.sub",{"_index":1350,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.cryptoimplementationservice.getalg",{"_index":3163,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.cryptoservice.deletekey(token.sub",{"_index":1930,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.getcallbackcontext",{"_index":2140,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.cryptoservice.getcallbackcontext(tenantid",{"_index":848,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.cryptoservice.getcertchain",{"_index":1428,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.getcertchain('signing",{"_index":2974,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.cryptoservice.getjwks(tenantid).then((key",{"_index":3170,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.cryptoservice.hasentry",{"_index":1711,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.cryptoservice.importkey(tenantid",{"_index":1928,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.keyservice.getkid",{"_index":2333,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.keyservice.getkid(tenantid",{"_index":226,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.getpublickey",{"_index":232,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.signer",{"_index":1411,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.cryptoservice.ontenantinit(id",{"_index":1064,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.cryptoservice.signjwt",{"_index":2335,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.signjwt(header",{"_index":2975,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.cryptoservice.storeaccesscertificate",{"_index":239,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.db.pingcheck('database",{"_index":1631,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.encryptionservice.decryptjwe",{"_index":2354,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.getencryptionpublickey",{"_index":2310,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.ontenantinit(id",{"_index":1065,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.filename",{"_index":2954,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getaccesscertificateid(config",{"_index":151,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.getauthorizationserver",{"_index":852,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getauthorizationserver(tenantid).createaccesstokenresponse",{"_index":913,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getbyid",{"_index":1243,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.getclients().find((c",{"_index":1017,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.getconfig(session.tenantid",{"_index":2987,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getconfig(tenantid",{"_index":2968,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getconfig(tenantid).jwt",{"_index":2978,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getissuanceconfigurationbyid",{"_index":1705,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.getpresentationconfig",{"_index":2499,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.health.check",{"_index":1630,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpservice.get",{"_index":2613,"title":{},"body":{"injectables/ResolverService.html":{}}}],["this.httpservice.post",{"_index":3085,"title":{},"body":{"injectables/WebhookService.html":{}}}],["this.import",{"_index":1703,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.init(tenantid",{"_index":2947,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.isenabled",{"_index":102,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.ishttploggerenabled",{"_index":2041,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.ispresentationduringissuanceauth(config",{"_index":699,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["this.issuanceconfigrepo.delete",{"_index":1730,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.find",{"_index":1714,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.findoneorfail",{"_index":1715,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.save",{"_index":1725,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigservice.getissuanceconfigurationbyid",{"_index":1407,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.issuanceservice",{"_index":2158,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuanceservice.deleteissuanceconfiguration(user.sub",{"_index":1668,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfiguration(user.sub",{"_index":1665,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfigurationbyid",{"_index":948,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.issuanceservice.storeissuanceconfiguration",{"_index":1666,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuer",{"_index":2141,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.createcredentialissuermetadata",{"_index":2145,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.createcredentialresponse",{"_index":2215,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.parsecredentialrequest",{"_index":2173,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.verifycredentialrequestjwtproof",{"_index":2196,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuermetadata(session",{"_index":2168,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.isusingexternaloidc",{"_index":1585,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.jwtservice.generatetoken(payload",{"_index":575,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.isusingexternaloidc",{"_index":547,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.kbverifier.bind(this",{"_index":2496,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.keyservice.getkeys(tenantid",{"_index":1927,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.loadclients",{"_index":1012,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.loadconfig(tenantid",{"_index":148,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.loadconfig(tenantid).id",{"_index":251,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.loadconfiguration",{"_index":2027,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.logger.error",{"_index":1251,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.info",{"_index":1262,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.setcontext('sessionlogger",{"_index":2737,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.logger.setcontext('sessionloggerservice",{"_index":2810,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.oauth2client",{"_index":112,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.oauth2client.clientcredentials().then((token",{"_index":160,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.oid4vciservice.createoffer",{"_index":1768,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.oid4vciservice.getcredential(req",{"_index":2101,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.handlenotification(req",{"_index":2104,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.issuermetadata(session",{"_index":3160,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.oid4vpservice.createauthorizationrequest(session",{"_index":2258,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.oid4vpservice.createrequest",{"_index":2415,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.oid4vpservice.createrequest('pid",{"_index":929,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.oid4vpservice.getresponse(body",{"_index":2260,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.parsechallengerequest",{"_index":955,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.parseloglevel",{"_index":2029,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.presentationsservice.deletepresentationconfig(id",{"_index":2424,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.getpresentationconfig",{"_index":2291,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.getpresentationconfigs(user.sub",{"_index":2421,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.parseresponse",{"_index":2362,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.storepresentationconfig",{"_index":2422,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.storercid",{"_index":276,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.reflector.get",{"_index":2729,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.reflector.getallandoverride",{"_index":1828,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refreshaccesstoken",{"_index":143,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.registrarservice.addregistrationcertificate",{"_index":2297,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.isenabled",{"_index":2294,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.ontenantinit(id",{"_index":1067,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.resolverservice.resolvepublickey",{"_index":2515,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.resourceserver",{"_index":2142,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.resourceserver.verifyresourcerequest",{"_index":2178,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sanitizebody(request.body",{"_index":2741,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.saveconfig(config",{"_index":192,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.schedulerregistry.addinterval('tidyupsessions",{"_index":2889,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sdjwtinstance",{"_index":2494,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.sendauthorizationcode(res",{"_index":939,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionlogger.logauthorizationrequest(logcontext",{"_index":2299,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logcredentialissuance",{"_index":2204,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionlogger.logcredentialverification",{"_index":2364,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowcomplete(logcontext",{"_index":2212,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowerror(logcontext",{"_index":2221,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowstart(logcontext",{"_index":2190,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.lognotification(logcontext",{"_index":2227,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionlogger.logsession",{"_index":2337,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsession(logcontext",{"_index":3080,"title":{},"body":{"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsessionerror",{"_index":2240,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/WebhookService.html":{}}}],["this.sessionrepository.countby",{"_index":2892,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.delete",{"_index":2912,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.find",{"_index":2907,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail",{"_index":2908,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail(where",{"_index":2909,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.save(session",{"_index":2897,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.update",{"_index":2902,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.dec",{"_index":2906,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.inc",{"_index":2898,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.set",{"_index":2894,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice",{"_index":876,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(body.issuer_state",{"_index":767,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.sessionservice.add(issuer_state",{"_index":969,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(res.state",{"_index":2368,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(session.id",{"_index":2210,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{}}}],["this.sessionservice.add(values.session",{"_index":2346,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.create",{"_index":2166,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionservice.get(body.auth_session",{"_index":935,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(body.issuer_state",{"_index":943,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(id",{"_index":2681,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(sessionid",{"_index":2692,"title":{},"body":{"guards/SessionGuard.html":{}}}],["this.sessionservice.getall",{"_index":2679,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.getby",{"_index":888,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.setstate(session",{"_index":2239,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.setauthcode(issuer_state",{"_index":967,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setauthcode(values.issuer_state",{"_index":881,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setentry(entry.index",{"_index":3002,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.setupclient(id).catch(async",{"_index":1035,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.shouldlog",{"_index":2811,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.statuslistfetcher.bind(this",{"_index":2497,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.statuslistservice.createentry",{"_index":1426,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.statuslistservice.getlist(tenantid",{"_index":2929,"title":{},"body":{"controllers/StatusListController.html":{}}}],["this.statuslistservice.updatestatus(value",{"_index":2683,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.statusmappingrepository.findby",{"_index":2998,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.save",{"_index":2993,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.statutslistservice.ontenantinit(id",{"_index":1066,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.store(tenant.name",{"_index":1261,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.storeconfig(file",{"_index":2977,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.storeexistingrp(name",{"_index":191,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.storeissuanceconfiguration",{"_index":1713,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.storepresentationconfig(tenant.name",{"_index":2501,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.tenantclienttotal.set",{"_index":1009,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.tidyupsessions",{"_index":2884,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.verifier.bind(this",{"_index":2495,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository",{"_index":2508,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.delete",{"_index":2507,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.find",{"_index":2502,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.save(vprequest",{"_index":2506,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.update",{"_index":2510,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.webhookservice.sendwebhook",{"_index":2374,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.webhookservice.sendwebhooknotification",{"_index":2235,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.wellknownservice.getauthzmetadata(session",{"_index":3132,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getissuermetadata(session",{"_index":3131,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getjwks(session.tenantid",{"_index":3136,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["those",{"_index":3664,"title":{},"body":{"license.html":{}}}],["through",{"_index":3556,"title":{},"body":{"license.html":{}}}],["throw",{"_index":235,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{}}}],["tidy",{"_index":2865,"title":{},"body":{"injectables/SessionService.html":{}}}],["tidyupsessions",{"_index":2844,"title":{},"body":{"injectables/SessionService.html":{}}}],["time",{"_index":2230,"title":{},"body":{"injectables/Oid4vciService.html":{},"classes/ParResponseDto.html":{}}}],["times",{"_index":2219,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["timestamp",{"_index":1121,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["title",{"_index":3753,"title":{},"body":{"license.html":{}}}],["tmp",{"_index":3230,"title":{},"body":{"changelog.html":{}}}],["todo",{"_index":244,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"modules/MetricModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{}}}],["together",{"_index":3440,"title":{},"body":{"index.html":{}}}],["token",{"_index":83,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["token(body",{"_index":733,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["token.accesstoken",{"_index":161,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["token.decorator",{"_index":529,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["token.sub",{"_index":1926,"title":{},"body":{"controllers/KeyController.html":{}}}],["token_endpoint",{"_index":856,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_endpoint_auth_methods_supported",{"_index":873,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_exchange",{"_index":2825,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["token_type",{"_index":544,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{}}}],["tokenpayload",{"_index":528,"title":{"interfaces/TokenPayload.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenpayload.nonce",{"_index":2199,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["tokenpayload.sub",{"_index":2184,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["tokenresponse",{"_index":506,"title":{"classes/TokenResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{},"coverage.html":{}}}],["tokens",{"_index":1887,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["tort",{"_index":3765,"title":{},"body":{"license.html":{}}}],["tostring('ascii",{"_index":562,"title":{},"body":{"controllers/AuthController.html":{}}}],["total",{"_index":620,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["tough",{"_index":3437,"title":{},"body":{"index.html":{}}}],["tracking",{"_index":2428,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["trade",{"_index":3735,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":3700,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":3733,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":3662,"title":{},"body":{"license.html":{}}}],["transformation",{"_index":3594,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":314,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["translatetime",{"_index":466,"title":{},"body":{"modules/AppModule.html":{}}}],["translation",{"_index":3595,"title":{},"body":{"license.html":{}}}],["transport",{"_index":461,"title":{},"body":{"modules/AppModule.html":{}}}],["triggered",{"_index":2231,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["true",{"_index":131,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"guards/SessionGuard.html":{},"controllers/StatusListController.html":{},"entities/StatusMapping.html":{},"controllers/WellKnownController.html":{},"miscellaneous/variables.html":{}}}],["true})@isobject",{"_index":1135,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{}}}],["true})@isobject()@isoptional",{"_index":1162,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isstring",{"_index":2381,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@type(undefined",{"_index":1672,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["trust",{"_index":2602,"title":{},"body":{"injectables/ResolverService.html":{}}}],["try",{"_index":553,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["ts",{"_index":3243,"title":{},"body":{"changelog.html":{}}}],["ttl",{"_index":2910,"title":{},"body":{"injectables/SessionService.html":{}}}],["two",{"_index":3149,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["txcode",{"_index":846,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["typ",{"_index":2327,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["type",{"_index":19,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(undefined)@isobject",{"_index":3061,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["type(undefined)@isoptional()@isobject",{"_index":3064,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["type.decorator",{"_index":3123,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["type.decorator.ts",{"_index":3362,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":3124,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["type.enum.ts",{"_index":3416,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":3840,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":82,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["typeorm",{"_index":983,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{}}}],["typeorm/query",{"_index":2879,"title":{},"body":{"injectables/SessionService.html":{}}}],["typeorm/repository/repository",{"_index":995,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/KeyModule.html":{},"injectables/PresentationsService.html":{}}}],["typeormhealthindicator",{"_index":1626,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":598,"title":{},"body":{"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{}}}],["typeormmodule.forfeature",{"_index":1807,"title":{},"body":{"modules/IssuerModule.html":{}}}],["typeormmodule.forfeature([certentity",{"_index":1485,"title":{},"body":{"modules/CryptoModule.html":{},"modules/KeyModule.html":{}}}],["typeormmodule.forfeature([cliententry",{"_index":617,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([presentationconfig",{"_index":2439,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["typeormmodule.forfeature([session",{"_index":2837,"title":{},"body":{"modules/SessionModule.html":{}}}],["typeormmodule.forfeature([statusmapping",{"_index":3010,"title":{},"body":{"modules/StatusListModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1502,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":1487,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":2549,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/enumerations.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":171,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["typically",{"_index":960,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["typo",{"_index":3191,"title":{},"body":{"changelog.html":{}}}],["unauthorizedexception",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception('invalid",{"_index":571,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined",{"_index":652,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apiproduces('application/json",{"_index":1741,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["undefined})@apiresponse({status",{"_index":504,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@post('offer",{"_index":1743,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["undefined})@post('request",{"_index":2401,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["under",{"_index":3544,"title":{},"body":{"index.html":{},"license.html":{}}}],["unified",{"_index":3429,"title":{},"body":{"index.html":{}}}],["union",{"_index":676,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["unique",{"_index":25,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["university",{"_index":1100,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["unknown",{"_index":727,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/TokenPayload.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["unless",{"_index":3722,"title":{},"body":{"license.html":{}}}],["unsecure",{"_index":1808,"title":{},"body":{"modules/IssuerModule.html":{}}}],["unsigned",{"_index":3151,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["unsupported",{"_index":965,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["up",{"_index":348,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["update",{"_index":1038,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"changelog.html":{}}}],["update.dto",{"_index":2676,"title":{},"body":{"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["update.dto.ts",{"_index":3036,"title":{},"body":{"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["update.dto.ts:16",{"_index":3037,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:24",{"_index":3040,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:8",{"_index":3038,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["updatecredentialissuancebindingdto",{"_index":1118,"title":{"classes/UpdateCredentialIssuanceBindingDto.html":{}},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["updated",{"_index":2405,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["updatestatus",{"_index":3015,"title":{},"body":{"injectables/StatusListService.html":{}}}],["updatestatus(value",{"_index":2997,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["updating",{"_index":1117,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["upload",{"_index":3245,"title":{},"body":{"changelog.html":{}}}],["uri",{"_index":1060,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/enumerations.html":{}}}],["url",{"_index":334,"title":{},"body":{"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["url(payload.iss).hostname",{"_index":2607,"title":{},"body":{"injectables/ResolverService.html":{}}}],["urn:${randomuuid",{"_index":763,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["use",{"_index":101,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/EC_Public.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"changelog.html":{},"license.html":{}}}],["used",{"_index":196,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useexternaloidc",{"_index":1860,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":449,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["useful",{"_index":2700,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["useguards",{"_index":740,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{}}}],["useguards(jwtauthguard",{"_index":1343,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["useguards(sessionguard",{"_index":755,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["useguards(sessionguard)@post('challenge",{"_index":720,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["useguards(sessionguard)@post('token",{"_index":734,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["useinterceptors",{"_index":2090,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["useinterceptors(sessionloggerinterceptor",{"_index":2098,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["user",{"_index":480,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/CredentialsController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/SessionModule.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user.sub",{"_index":1667,"title":{},"body":{"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["username",{"_index":1511,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["users",{"_index":670,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["uses",{"_index":653,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/HealthController.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionLoggerService.html":{}}}],["using",{"_index":153,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{},"index.html":{},"license.html":{}}}],["utf",{"_index":293,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["utf8",{"_index":1240,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["util",{"_index":2133,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["utility",{"_index":682,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{},"miscellaneous/functions.html":{}}}],["utils/logger//session",{"_index":2094,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["utils/logger/session",{"_index":1797,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["utils/mediatype/media",{"_index":3122,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["utils/webhook/webhook.dto",{"_index":666,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{}}}],["utils/webhook/webhook.service",{"_index":1803,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["uuid",{"_index":2135,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"dependencies.html":{}}}],["v",{"_index":3501,"title":{},"body":{"index.html":{}}}],["v1",{"_index":3521,"title":{},"body":{"index.html":{}}}],["v2",{"_index":3522,"title":{},"body":{"index.html":{}}}],["v4",{"_index":2134,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["valid",{"_index":158,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{}}}],["valid('json",{"_index":442,"title":{},"body":{"modules/AppModule.html":{}}}],["valid('trace",{"_index":426,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":736,"title":{},"body":{"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["validate(config",{"_index":1249,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/PresentationsService.html":{}}}],["validate(issuancedto",{"_index":1707,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["validate(payload",{"_index":1851,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateclient",{"_index":1083,"title":{},"body":{"injectables/ClientService.html":{}}}],["validateclient(clientid",{"_index":1016,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["validated",{"_index":1853,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{}}}],["validatenested",{"_index":665,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["validatetokenrequest",{"_index":806,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["validatetokenrequest(body",{"_index":827,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["validation",{"_index":1172,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["validationerror",{"_index":1252,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors",{"_index":1248,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors.length",{"_index":1250,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors.map((error",{"_index":1254,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationschema",{"_index":418,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":318,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["value",{"_index":305,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"classes/SchemaResponse.html":{},"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.authenticationconfig",{"_index":1724,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.authenticationconfig.config",{"_index":1723,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.authenticationconfig.method",{"_index":1722,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.config",{"_index":1400,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.credentialconfigs",{"_index":1717,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.credentialconfigurationid",{"_index":3000,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.sessionid",{"_index":2999,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.status",{"_index":3003,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["values",{"_index":92,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/TokenPayload.html":{}}}],["values.session",{"_index":2343,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["values.uri",{"_index":2418,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["values.webhook",{"_index":2344,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["varchar",{"_index":3030,"title":{},"body":{"entities/StatusMapping.html":{}}}],["variable",{"_index":2869,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["variables",{"_index":2548,"title":{"miscellaneous/variables.html":{}},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":331,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["vault",{"_index":1941,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault').default('file",{"_index":1947,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault_token",{"_index":1951,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault_url",{"_index":1949,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vaultkeyservice",{"_index":1940,"title":{},"body":{"modules/KeyModule.html":{},"coverage.html":{}}}],["vc",{"_index":1158,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"dependencies.html":{},"index.html":{}}}],["vcs",{"_index":2442,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vct",{"_index":1132,"title":{"classes/VCT.html":{}},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["vct(@param('id",{"_index":1367,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["vct(id",{"_index":1361,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["vendor",{"_index":3446,"title":{},"body":{"index.html":{}}}],["verbal",{"_index":3626,"title":{},"body":{"license.html":{}}}],["verbose",{"_index":2033,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["verifiable",{"_index":1364,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["verification",{"_index":1604,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{}}}],["verificationcounter",{"_index":2895,"title":{},"body":{"injectables/SessionService.html":{}}}],["verificationresult",{"_index":2635,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verified",{"_index":2637,"title":{},"body":{"entities/Session.html":{}}}],["verifiedproof",{"_index":2195,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["verifiedproof.signer.publicjwk",{"_index":2200,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["verifier",{"_index":1454,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["verifier/oid4vp/dto/presentation",{"_index":1751,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["verifier/oid4vp/oid4vp.module",{"_index":1795,"title":{},"body":{"modules/IssuerModule.html":{}}}],["verifier/oid4vp/oid4vp.service",{"_index":838,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifier/presentations/dto/vp",{"_index":50,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["verifier/presentations/presentations.module",{"_index":2546,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["verifier/presentations/presentations.service",{"_index":53,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["verifier/verifier.module",{"_index":392,"title":{},"body":{"modules/AppModule.html":{}}}],["verifier_attestations",{"_index":2326,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["verifiermodule",{"_index":376,"title":{"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["verify",{"_index":865,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["verify(data",{"_index":2517,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verify(res.vp_token[att",{"_index":2529,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verifyauthorizationcodeaccesstokenrequest",{"_index":909,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifypreauthorizedcodeaccesstokenrequest",{"_index":898,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifytoken",{"_index":1833,"title":{},"body":{"injectables/JwtService.html":{}}}],["verifytoken(token",{"_index":1603,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["version",{"_index":3219,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["versions",{"_index":3520,"title":{},"body":{"index.html":{}}}],["via",{"_index":675,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["vitest",{"_index":3248,"title":{},"body":{"changelog.html":{}}}],["void",{"_index":1023,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["vp",{"_index":633,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"changelog.html":{}}}],["vp_formats",{"_index":2311,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vp_nonce",{"_index":2298,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["vp_token",{"_index":627,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["vprequest",{"_index":2477,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequest.tenantid",{"_index":2505,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequestrepository",{"_index":2452,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vps",{"_index":2441,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["wallet",{"_index":923,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"index.html":{},"properties.html":{}}}],["wallets",{"_index":3178,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["want",{"_index":1882,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["warn",{"_index":428,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["warranties",{"_index":3749,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3744,"title":{},"body":{"license.html":{}}}],["way",{"_index":3224,"title":{},"body":{"changelog.html":{}}}],["we'll",{"_index":961,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["web",{"_index":1520,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["webhook",{"_index":325,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"changelog.html":{}}}],["webhook.auth",{"_index":3097,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhook.auth.config.value",{"_index":3100,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhook.auth.type",{"_index":3098,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhook.auth?.type",{"_index":3102,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhook.url",{"_index":3101,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhookauthconfig",{"_index":326,"title":{"classes/WebHookAuthConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookconfig",{"_index":333,"title":{"classes/WebhookConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookresponse",{"_index":3086,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhookresponse.data",{"_index":3089,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhookresponse.status",{"_index":3094,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhooks",{"_index":303,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"miscellaneous/typealiases.html":{}}}],["webhooksent",{"_index":2375,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookservice",{"_index":1786,"title":{"injectables/WebhookService.html":{}},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"overview.html":{}}}],["webhookurl",{"_index":3081,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webook",{"_index":2370,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["welcome",{"_index":3527,"title":{},"body":{"index.html":{}}}],["well",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["wellknowncontroller",{"_index":382,"title":{"controllers/WellKnownController.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["wellknownservice",{"_index":377,"title":{"injectables/WellKnownService.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"overview.html":{}}}],["wherever",{"_index":3709,"title":{},"body":{"license.html":{}}}],["whether",{"_index":2064,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"license.html":{}}}],["whole",{"_index":3613,"title":{},"body":{"license.html":{}}}],["willsoto/nestjs",{"_index":603,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["withfiletypes",{"_index":1228,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["within",{"_index":3643,"title":{},"body":{"license.html":{}}}],["without",{"_index":1610,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"license.html":{}}}],["work",{"_index":3598,"title":{},"body":{"license.html":{}}}],["worker",{"_index":3262,"title":{},"body":{"changelog.html":{}}}],["working",{"_index":684,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["works",{"_index":3606,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":3646,"title":{},"body":{"license.html":{}}}],["write",{"_index":268,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["writefilesync",{"_index":56,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["writefilesync(file",{"_index":2982,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["writefilesync(filepath",{"_index":288,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["writing",{"_index":270,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["written",{"_index":3627,"title":{},"body":{"license.html":{}}}],["x",{"_index":1528,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"index.html":{}}}],["x509_san_dns",{"_index":2304,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509_san_dns:${hostname",{"_index":2348,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509certificate",{"_index":2595,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x509certificate(buffer.from(cert",{"_index":2604,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x5c",{"_index":1427,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["y",{"_index":1529,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["yes",{"_index":820,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/KeyService.html":{},"injectables/SessionLoggerService.html":{}}}],["your_api_key_here",{"_index":321,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["yyyy",{"_index":467,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":378,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccessCertificateResponse.html":{"url":"interfaces/AccessCertificateResponse.html","title":"interface - AccessCertificateResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccessCertificateResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Repsonse of access certificate request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            crt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        crt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        crt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The public key in PEM format.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier of the access certificate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if the access certificate is revoked.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { OAuth2Client } from '@badgateway/oauth2-client';\nimport { client } from './generated/client.gen';\nimport {\n    accessCertificateControllerFindOne,\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from './generated';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { RegistrationCertificateRequest } from '../verifier/presentations/dto/vp-request.dto';\nimport { PresentationsService } from '../verifier/presentations/presentations.service';\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs';\nimport { RegistrarConfig } from './registrar-config';\nimport { join } from 'node:path';\n\n/**\n * Repsonse of access certificate request.\n */\ninterface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow('REGISTRAR_OIDC_URL');\n        const clientId = this.configService.getOrThrow(\n            'REGISTRAR_OIDC_CLIENT_ID',\n        );\n        const clientSecret = this.configService.getOrThrow(\n            'REGISTRAR_OIDC_CLIENT_SECRET',\n        );\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow('REGISTRAR_URL'),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get('REGISTRAR_URL');\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get('REGISTRAR_URL')) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        const config = this.loadConfig(tenantId);\n        if (!config.id) {\n            config.id = await this.addRp(tenantId);\n        }\n        await this.getAccessCertificateId(config, tenantId);\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(tenantId: string): Promise {\n        const name = this.configService.getOrThrow('RP_NAME');\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            const config = this.loadConfig(tenantId);\n            if (response.error) {\n                config.id = await this.storeExistingRp(name);\n                this.saveConfig(config, tenantId);\n                return config.id!;\n            } else {\n                config.id = response.data!['id'];\n                this.saveConfig(config, tenantId);\n                return response.data!['id'];\n            }\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private storeExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id;\n        });\n    }\n\n    /**\n     * Get the access certificate ID from the registrar.\n     * If there is no access certificate ID in the config, it will add a new one.\n     * If there is one, it will check if it is still valid.\n     * If it is revoked, it will add a new one.\n     * @param config\n     */\n    async getAccessCertificateId(config: RegistrarConfig, tenantId: string) {\n        // if there is no access certificate ID in the config, we need to add it\n        if (!config.accessCertificateId) {\n            await this.addAccessCertificate(config, tenantId);\n        }\n        // if there is one, check if it is still valid\n        await accessCertificateControllerFindOne({\n            client: this.client,\n            path: { rp: config.id, id: config.accessCertificateId! },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error finding access certificate:', res.error);\n            }\n            const data = res.data as AccessCertificateResponse;\n            if (data.revoked) {\n                console.warn('Access certificate is revoked, adding a new one');\n                return this.addAccessCertificate(config, tenantId);\n            }\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        config: RegistrarConfig,\n        tenantId: string,\n    ): Promise {\n        const keyId = await this.cryptoService.keyService.getKid(tenantId);\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    'pem',\n                    tenantId,\n                    keyId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: config.id,\n            },\n        }).then(async (res) => {\n            if (res.error) {\n                console.error('Error adding access certificate:', res.error);\n                throw new Error('Error adding access certificate');\n            }\n            //store the cert\n            await this.cryptoService.storeAccessCertificate(\n                res.data!['crt'],\n                tenantId,\n                keyId,\n            );\n            config.accessCertificateId = res.data!['id'];\n            this.saveConfig(config, tenantId);\n            return res.data!['id'];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const rp = this.loadConfig(tenantId).id;\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    'Error adding registration certificate:',\n                    res.error,\n                );\n                throw new Error('Error adding registration certificate');\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data!['id'],\n                requestId,\n                tenantId,\n            );\n            return res.data!['jwt'];\n        });\n    }\n\n    /**\n     * Load the registrar configuration from the config file.\n     * @returns\n     */\n    private loadConfig(tenantId: string): RegistrarConfig {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n\n        if (!existsSync(filePath)) {\n            // If the config file does not exist, create an empty config\n            const initialConfig: RegistrarConfig = {};\n            writeFileSync(filePath, JSON.stringify(initialConfig, null, 2));\n            return initialConfig;\n        }\n        const config = JSON.parse(\n            readFileSync(filePath, 'utf-8'),\n        ) as RegistrarConfig;\n        return config;\n    }\n\n    /**\n     * Save the registrar configuration to the config file.\n     * @param config\n     */\n    private saveConfig(config: RegistrarConfig, tenantId: string) {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n        writeFileSync(filePath, JSON.stringify(config, null, 2));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiKeyConfig.html":{"url":"classes/ApiKeyConfig.html","title":"class - ApiKeyConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for API key authentication in webhooks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                headerName\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:13\n                        \n                    \n\n            \n                \n                    The name of the header where the API key will be sent.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:19\n                        \n                    \n\n            \n                \n                    The value of the API key to be sent in the header.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiExcludeController } from '@nestjs/swagger';\n\n@ApiExcludeController()\n@Controller()\nexport class AppController {\n    @Get()\n    getHello(): string {\n        return 'EUDIPLO is up and running, more information at https://openwallet-foundation-labs.github.io/eudiplo/latest/';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WellKnownService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WellKnownController\n                        \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CryptoModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            KeyModule\n                        \n                        \n                            MetricModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            VerifierModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as Joi from 'joi';\nimport { CryptoModule } from './crypto/crypto.module';\nimport { WellKnownController } from './well-known/well-known.controller';\nimport { ISSUER_VALIDATION_SCHEMA, IssuerModule } from './issuer/issuer.module';\nimport { VerifierModule } from './verifier/verifier.module';\nimport {\n    REGISTRAR_VALIDATION_SCHEMA,\n    RegistrarModule,\n} from './registrar/registrar.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join, isAbsolute } from 'path';\nimport { KEY_VALIDATION_SCHEMA, KeyModule } from './crypto/key/key.module';\nimport { CRYPTO_VALIDATION_SCHEMA } from './crypto/key/crypto/crypto.module';\nimport {\n    SESSION_VALIDATION_SCHEMA,\n    SessionModule,\n} from './session/session.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { DatabaseModule } from './database/database.module';\nimport { HealthModule } from './health/health.module';\nimport { AUTH_VALIDATION_SCHEMA, AuthModule } from './auth/auth.module';\nimport { LoggerModule } from 'nestjs-pino';\nimport { WellKnownService } from './well-known/well-known.service';\nimport { AppController } from './app/app.controller';\nimport { MetricModule } from './metric/metric.module';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            validationSchema: Joi.object({\n                FOLDER: Joi.string().default('./tmp'),\n                RP_NAME: Joi.string().default('EUDIPLO'),\n                LOG_LEVEL: Joi.string()\n                    .valid('trace', 'debug', 'info', 'warn', 'error', 'fatal')\n                    .default(\n                        process.env.NODE_ENV === 'production'\n                            ? 'warn'\n                            : 'debug',\n                    ),\n                CONFIG_IMPORT: Joi.boolean().default(false),\n                CONFIG_IMPORT_FORCE: Joi.boolean().default(false),\n                CONFIG_FOLDER: Joi.string().default('assets/config'),\n                ...AUTH_VALIDATION_SCHEMA,\n                ...REGISTRAR_VALIDATION_SCHEMA,\n                ...KEY_VALIDATION_SCHEMA,\n                ...CRYPTO_VALIDATION_SCHEMA,\n                ...ISSUER_VALIDATION_SCHEMA,\n                ...SESSION_VALIDATION_SCHEMA,\n                LOG_ENABLE_HTTP_LOGGER: Joi.boolean().default(false),\n                LOG_ENABLE_SESSION_LOGGER: Joi.boolean().default(false),\n                LOG_DEBUG_MODE: Joi.boolean().default(false),\n                LOG_FORMAT: Joi.string()\n                    .valid('json', 'pretty')\n                    .default(\n                        process.env.NODE_ENV === 'production'\n                            ? 'json'\n                            : 'pretty',\n                    ),\n            }),\n            isGlobal: true,\n            expandVariables: true,\n        }),\n        LoggerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const enableHttpLogger = configService.get(\n                    'LOG_ENABLE_HTTP_LOGGER',\n                    false,\n                );\n                //TODO: check if logging to file is needed: https://github.com/iamolegga/nestjs-pino?tab=readme-ov-file#asynchronous-logging\n                return {\n                    pinoHttp: {\n                        level: configService.get('LOG_LEVEL', 'info'),\n                        autoLogging: enableHttpLogger,\n                        transport: {\n                            target: 'pino-pretty',\n                            options: {\n                                colorize: true,\n                                singleLine: false,\n                                translateTime: 'yyyy-mm-dd HH:MM:ss',\n                                ignore: 'pid,hostname',\n                            },\n                        },\n                        customProps: (req: any) => ({\n                            sessionId: req.params?.session,\n                        }),\n                        serializers: {\n                            req: (req: any) => ({\n                                method: req.method,\n                                url: req.url,\n                                headers: {\n                                    'user-agent': req.headers['user-agent'],\n                                    'content-type': req.headers['content-type'],\n                                },\n                                sessionId: req.params?.session,\n                                tenantId: req.params?.tenantId,\n                            }),\n                            res: (res: any) => ({\n                                statusCode: res.statusCode,\n                            }),\n                        },\n                    },\n                };\n            },\n        }),\n        KeyModule.forRoot(),\n        CryptoModule,\n        IssuerModule,\n        VerifierModule,\n        RegistrarModule,\n        ScheduleModule.forRoot(),\n        ServeStaticModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const folder = configService.getOrThrow('FOLDER');\n                const rootPath = isAbsolute(folder)\n                    ? join(folder, 'public')\n                    : join(__dirname, '../', folder, 'public');\n                return [\n                    {\n                        rootPath,\n                    },\n                ];\n            },\n        }),\n        DatabaseModule,\n        SessionModule,\n        DatabaseModule,\n        HealthModule,\n        AuthModule,\n        MetricModule,\n    ],\n    controllers: [WellKnownController, AppController],\n    providers: [WellKnownService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOAuth2Token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOAuth2Token\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOAuth2Token(body: any, headers: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('oauth2/token')@ApiBody({type: ClientCredentialsDto, examples: undefined})@ApiResponse({status: 200, description: 'OAuth2 token response', type: TokenResponse, example: undefined})@ApiResponse({status: 401, description: 'Invalid client credentials'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:60\n                        \n                    \n\n\n            \n                \n                        OAuth2 Token endpoint - supports client credentials flow only\nAccepts client credentials either in Authorization header (Basic auth) or request body\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Post,\n    Body,\n    UnauthorizedException,\n    Headers,\n} from '@nestjs/common';\nimport { ApiTags, ApiResponse, ApiBody } from '@nestjs/swagger';\nimport { JwtService } from './jwt.service';\nimport { ClientService } from './client.service';\nimport { Public } from './public.decorator';\nimport { ClientCredentialsDto } from './dto/client-credentials.dto';\nimport { TokenPayload } from './token.decorator';\nimport { TokenResponse } from './dto/token-response.dto';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        private jwtService: JwtService,\n        private clientService: ClientService,\n    ) {}\n\n    /**\n     * OAuth2 Token endpoint - supports client credentials flow only\n     * Accepts client credentials either in Authorization header (Basic auth) or request body\n     * @param body\n     * @param headers\n     * @returns\n     */\n    @Public()\n    @Post('oauth2/token')\n    @ApiBody({\n        type: ClientCredentialsDto,\n        examples: {\n            client_credentials: {\n                summary: 'Client Credentials Flow',\n                value: {\n                    grant_type: 'client_credentials',\n                    client_id: 'root',\n                    client_secret: 'root',\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'OAuth2 token response',\n        type: TokenResponse,\n        example: {\n            access_token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n            token_type: 'Bearer',\n            expires_in: 86400,\n        },\n    })\n    @ApiResponse({\n        status: 401,\n        description: 'Invalid client credentials',\n    })\n    async getOAuth2Token(\n        @Body() body: any,\n        @Headers() headers: any,\n    ): Promise {\n        if (this.jwtService.isUsingExternalOIDC()) {\n            throw new UnauthorizedException(\n                'OAuth2 token endpoint is not available when using external OIDC provider. Use your external OIDC provider for authentication.',\n            );\n        }\n\n        // Only support client credentials flow\n        if (body.grant_type !== 'client_credentials') {\n            throw new UnauthorizedException(\n                'Only client_credentials grant type is supported',\n            );\n        }\n\n        let clientId: string;\n        let clientSecret: string;\n\n        // Try to extract credentials from Authorization header (Basic auth)\n        const authHeader = headers.authorization;\n        if (authHeader && authHeader.startsWith('Basic ')) {\n            try {\n                const base64Credentials = authHeader.substring(6);\n                const credentials = Buffer.from(\n                    base64Credentials,\n                    'base64',\n                ).toString('ascii');\n                const [id, secret] = credentials.split(':');\n                clientId = id;\n                clientSecret = secret;\n            } catch {\n                throw new UnauthorizedException(\n                    'Invalid Authorization header format',\n                );\n            }\n        } else {\n            // Fall back to request body\n            clientId = body.client_id;\n            clientSecret = body.client_secret;\n        }\n\n        if (!clientId || !clientSecret) {\n            throw new UnauthorizedException(\n                'Client credentials must be provided either in Authorization header (Basic auth) or request body',\n            );\n        }\n\n        const client = this.clientService.validateClient(\n            clientId,\n            clientSecret,\n        );\n        if (!client) {\n            throw new UnauthorizedException('Invalid client credentials');\n        }\n\n        const payload: TokenPayload = {\n            sub: client.id,\n        };\n\n        const token = await this.jwtService.generateToken(payload, {\n            expiresIn: '24h',\n            audience: 'eudiplo-service',\n        });\n\n        return {\n            access_token: token,\n            token_type: 'Bearer',\n            expires_in: 86400, // 24 hours in seconds\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCryptoModule->AuthModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAuthModule -->\n\nRegistrarModule->AuthModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nAuthModule -->\n\nStatusListModule->AuthModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClientService\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './jwt.strategy';\nimport { JwtAuthGuard } from './auth.guard';\nimport { JwtService } from './jwt.service';\nimport { AuthController } from './auth.controller';\nimport { ClientService } from './client.service';\nimport * as Joi from 'joi';\nimport { ConfigModule } from '@nestjs/config';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport { StatusListModule } from '../issuer/status-list/status-list.module';\nimport { RegistrarModule } from '../registrar/registrar.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ClientEntry } from './entitites/client.entity';\nimport { makeGaugeProvider } from '@willsoto/nestjs-prometheus';\n\nexport const AUTH_VALIDATION_SCHEMA = {\n    OIDC: Joi.string().optional(),\n    KEYCLOAK_INTERNAL_ISSUER_URL: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    KEYCLOAK_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    JWT_ISSUER: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default('eudiplo-service'),\n    }),\n    JWT_EXPIRES_IN: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default('24h'),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    AUTH_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n};\n\n@Module({\n    imports: [\n        PassportModule,\n        ConfigModule,\n        CryptoModule,\n        StatusListModule,\n        RegistrarModule,\n        TypeOrmModule.forFeature([ClientEntry]),\n    ],\n    providers: [\n        JwtStrategy,\n        JwtAuthGuard,\n        JwtService,\n        ClientService,\n        makeGaugeProvider({\n            name: 'tenant_client_total',\n            help: 'Total number of tenant clients',\n        }),\n    ],\n    controllers: [AuthController],\n    exports: [PassportModule, JwtStrategy, JwtAuthGuard, JwtService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponse.html":{"url":"interfaces/AuthResponse.html","title":"interface - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/auth-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResponse DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                        \n                                            vp_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state parameter to maintain state between the request and callback.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vp_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        vp_token:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The VP token containing the presentation data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthResponse {\n    /**\n     * The VP token containing the presentation data.\n     */\n    vp_token: {\n        /**\n         * Key-value pairs representing the VP token data.\n         */\n        [key: string]: string;\n    };\n    /**\n     * The state parameter to maintain state between the request and callback.\n     */\n    state: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationConfigDto.html":{"url":"classes/AuthenticationConfigDto.html","title":"class - AuthenticationConfigDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationConfigDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Base class for authentication configurations\nDetermines which OpenID4VC flow to use for the issuance process\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                config\n                            \n                            \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationUrlConfig | PresentationDuringIssuanceConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:69\n                        \n                    \n\n            \n                \n                    Configuration specific to the selected authentication method\n\nFor 'none': no config needed (undefined) - uses pre-authorized code flow\nFor 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\nFor 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"none\" | \"auth\" | \"presentationDuringIssuance\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:60\n                        \n                    \n\n            \n                \n                    The authentication method to use:\n\n'none': Pre-authorized code flow (no user authentication)\n'auth': OID4VCI authorized code flow (user redirect for authentication)\n'presentationDuringIssuance': OID4VP flow (credential presentation required)\n\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsObject,\n    IsOptional,\n    IsUrl,\n    IsIn,\n    ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { PresentationDuringIssuance } from '../../credentials-metadata/dto/credential-config.dto';\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    authUrl: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Presentation configuration that specifies what credentials need to be presented via OID4VP\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuance)\n    presentation: PresentationDuringIssuance;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n    method: 'none' | 'auth' | 'presentationDuringIssuance';\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: 'none' } // Pre-authorized code flow\n    | { method: 'auth'; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: 'presentationDuringIssuance'; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationConfigHelper.html":{"url":"classes/AuthenticationConfigHelper.html","title":"class - AuthenticationConfigHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationConfigHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.helper.ts\n        \n\n\n            \n                Description\n            \n            \n                Utility functions for working with OpenID4VC authentication configurations\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getPresentationConfig\n                            \n                            \n                                    Static\n                                isAuthUrlAuth\n                            \n                            \n                                    Static\n                                isNoneAuth\n                            \n                            \n                                    Static\n                                isPresentationDuringIssuanceAuth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresentationConfig(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:44\n                        \n                    \n\n\n            \n                \n                        Get the presentation configuration if the method is 'presentationDuringIssuance'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PresentationDuringIssuanceConfig | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isAuthUrlAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthUrlAuth(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:23\n                        \n                    \n\n\n            \n                \n                        Type guard to check if the config uses OID4VCI authorized code flow\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isNoneAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isNoneAuth(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:14\n                        \n                    \n\n\n            \n                \n                        Type guard to check if the config uses pre-authorized code flow\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isPresentationDuringIssuanceAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isPresentationDuringIssuanceAuth(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:32\n                        \n                    \n\n\n            \n                \n                        Type guard to check if the config uses OID4VP flow\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    AuthenticationConfig,\n    AuthenticationUrlConfig,\n    PresentationDuringIssuanceConfig,\n} from './authentication-config.dto';\n\n/**\n * Utility functions for working with OpenID4VC authentication configurations\n */\nexport class AuthenticationConfigHelper {\n    /**\n     * Type guard to check if the config uses pre-authorized code flow\n     */\n    static isNoneAuth(\n        config: AuthenticationConfig,\n    ): config is { method: 'none' } {\n        return config.method === 'none';\n    }\n\n    /**\n     * Type guard to check if the config uses OID4VCI authorized code flow\n     */\n    static isAuthUrlAuth(\n        config: AuthenticationConfig,\n    ): config is { method: 'auth'; config: AuthenticationUrlConfig } {\n        return config.method === 'auth';\n    }\n\n    /**\n     * Type guard to check if the config uses OID4VP flow\n     */\n    static isPresentationDuringIssuanceAuth(\n        config: AuthenticationConfig,\n    ): config is {\n        method: 'presentationDuringIssuance';\n        config: PresentationDuringIssuanceConfig;\n    } {\n        return config.method === 'presentationDuringIssuance';\n    }\n\n    /**\n     * Get the presentation configuration if the method is 'presentationDuringIssuance'\n     */\n    static getPresentationConfig(\n        config: AuthenticationConfig,\n    ): PresentationDuringIssuanceConfig | null {\n        if (this.isPresentationDuringIssuanceAuth(config)) {\n            return config.config;\n        }\n        return null;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationUrlConfig.html":{"url":"classes/AuthenticationUrlConfig.html","title":"class - AuthenticationUrlConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationUrlConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'auth'\nUsed for OID4VCI authorized code flow where the user will be redirected for authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:22\n                        \n                    \n\n            \n                \n                    The URL used in the OID4VCI authorized code flow.\nThis URL is where users will be redirected for authentication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:31\n                        \n                    \n\n            \n                \n                    Optional webhook configuration for authentication callbacks\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsObject,\n    IsOptional,\n    IsUrl,\n    IsIn,\n    ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { PresentationDuringIssuance } from '../../credentials-metadata/dto/credential-config.dto';\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    authUrl: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Presentation configuration that specifies what credentials need to be presented via OID4VP\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuance)\n    presentation: PresentationDuringIssuance;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n    method: 'none' | 'auth' | 'presentationDuringIssuance';\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: 'none' } // Pre-authorized code flow\n    | { method: 'auth'; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: 'presentationDuringIssuance'; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationResponse.html":{"url":"classes/AuthorizationResponse.html","title":"class - AuthorizationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/authorization-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the authorization response containing the VP token.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                response\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The response string containing the authorization details.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\n/**\n * DTO for the authorization response containing the VP token.\n */\nexport class AuthorizationResponse {\n    /**\n     * The response string containing the authorization details.\n     */\n    @IsString()\n    response: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorizeController.html":{"url":"controllers/AuthorizeController.html","title":"controller - AuthorizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/authorize\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI authorization endpoints.\nThis controller handles the authorization requests, token requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                authorizationChallengeEndpoint\n                            \n                            \n                                    \n                                    Async\n                                authorize\n                            \n                            \n                                    \n                                    \n                                    Async\n                                par\n                            \n                            \n                                    \n                                    \n                                    Async\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response, body: AuthorizeQueries, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Post('challenge')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Endpoint for the authorization challenge.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        authorize\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorize(queries: AuthorizeQueries, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:41\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Authorization Request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        par\n                        \n                    \n                \n            \n            \n                \n                        \n                    par(body: AuthorizeQueries)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'Pushed Authorization Request', type: AuthorizeQueries})@Post('par')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:55\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Pushed Authorization Request (PAR).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        token\n                        \n                    \n                \n            \n            \n                \n                        \n                    token(body: any, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Endpoint to validate the token request.\nThis endpoint is used to exchange the authorization code for an access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport {\n    Body,\n    Controller,\n    Get,\n    Post,\n    Query,\n    Req,\n    Res,\n    UseGuards,\n} from '@nestjs/common';\nimport type { Request, Response } from 'express';\nimport { AuthorizeService } from './authorize.service';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { SessionService } from '../../session/session.service';\nimport { ParResponseDto } from './dto/par-response.dto';\nimport { ApiBody, ApiExcludeController } from '@nestjs/swagger';\nimport { SessionEntity } from '../../session/session.decorator';\nimport { Session } from '../../session/entities/session.entity';\nimport { SessionGuard } from '../../session/session.guard';\n\n/**\n * Controller for the OpenID4VCI authorization endpoints.\n * This controller handles the authorization requests, token requests.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== 'true')\n@UseGuards(SessionGuard)\n@Controller(':session/authorize')\nexport class AuthorizeController {\n    constructor(\n        private readonly authorizeService: AuthorizeService,\n        private sessionService: SessionService,\n    ) {}\n\n    /**\n     * Endpoint to handle the Authorization Request.\n     * @param queries\n     * @param res\n     */\n    @Get()\n    async authorize(@Query() queries: AuthorizeQueries, @Res() res: Response) {\n        return this.authorizeService.sendAuthorizationResponse(queries, res);\n    }\n\n    /**\n     * Endpoint to handle the Pushed Authorization Request (PAR).\n     * @param body\n     * @returns\n     */\n    @ApiBody({\n        description: 'Pushed Authorization Request',\n        type: AuthorizeQueries,\n    })\n    @Post('par')\n    async par(@Body() body: AuthorizeQueries): Promise {\n        const request_uri = `urn:${randomUUID()}`;\n        // save both so we can retrieve the session also via the request_uri in the authorize step.\n        await this.sessionService.add(body.issuer_state!, {\n            request_uri,\n            auth_queries: body,\n        });\n        return {\n            expires_in: 500,\n            request_uri,\n        };\n    }\n\n    /**\n     * Endpoint to validate the token request.\n     * This endpoint is used to exchange the authorization code for an access token.\n     * @param body\n     * @param req\n     * @returns\n     */\n    @UseGuards(SessionGuard)\n    @Post('token')\n    async token(\n        @Body() body: any,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        //TODO: define body\n        return this.authorizeService.validateTokenRequest(body, req, session);\n    }\n\n    /**\n     * Endpoint for the authorization challenge.\n     * @param res\n     * @param body\n     * @returns\n     */\n    @UseGuards(SessionGuard)\n    @Post('challenge')\n    authorizationChallengeEndpoint(\n        @Res() res: Response,\n        @Body() body: AuthorizeQueries,\n        @SessionEntity() session: Session,\n    ) {\n        return this.authorizeService.authorizationChallengeEndpoint(\n            res,\n            body,\n            session,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizeQueries.html":{"url":"classes/AuthorizeQueries.html","title":"class - AuthorizeQueries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizeQueries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/authorize-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                auth_session\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                client_id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge_method\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dpop_jkt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                issuer_state\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                redirect_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resource\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        auth_session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge_method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dpop_jkt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        issuer_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        redirect_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\n\nexport class AuthorizeQueries {\n    @IsOptional()\n    @IsString()\n    issuer_state?: string;\n    @IsOptional()\n    @IsString()\n    response_type?: string;\n    @IsOptional()\n    @IsString()\n    client_id?: string;\n    @IsOptional()\n    @IsString()\n    redirect_uri?: string;\n    @IsOptional()\n    @IsString()\n    resource?: string;\n    @IsOptional()\n    @IsString()\n    scope?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge_method?: string;\n    @IsOptional()\n    @IsString()\n    dpop_jkt?: string;\n    @IsOptional()\n    @IsString()\n    request_uri?: string;\n    @IsOptional()\n    @IsString()\n    auth_session?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizeService.html":{"url":"injectables/AuthorizeService.html","title":"injectable - AuthorizeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authorizationChallengeEndpoint\n                            \n                            \n                                authzMetadata\n                            \n                            \n                                getAuthorizationServer\n                            \n                            \n                                    Async\n                                parseChallengeRequest\n                            \n                            \n                                    Private\n                                    Async\n                                sendAuthorizationCode\n                            \n                            \n                                    Async\n                                sendAuthorizationResponse\n                            \n                            \n                                    Async\n                                setAuthCode\n                            \n                            \n                                    Async\n                                validateTokenRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, oid4vpService: Oid4vpService, sessionService: SessionService, issuanceService: IssuanceService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/authorize/authorize.service.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vpService\n                                                  \n                                                        \n                                                                        Oid4vpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response>, body: AuthorizeQueries, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:227\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \nauthzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     AuthorizationServerMetadata\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthorizationServer\n                        \n                    \n                \n            \n            \n                \ngetAuthorizationServer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Oauth2AuthorizationServer\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        parseChallengeRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseChallengeRequest(body: AuthorizeQueries, tenantId: string, webhook?: WebhookConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                webhook\n                                            \n                                                            WebhookConfig\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        sendAuthorizationCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationCode(res: Response, issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:302\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendAuthorizationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationResponse(queries: AuthorizeQueries, res: Response>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setAuthCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAuthCode(issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:309\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateTokenRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateTokenRequest(body: any, req: Request, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    authorizationCodeGrantIdentifier,\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { SessionService } from '../../session/session.service';\nimport { WebhookConfig } from '../../utils/webhook/webhook.dto';\nimport { IssuanceService } from '../issuance/issuance.service';\nimport { AuthenticationConfigHelper } from '../issuance/dto/authentication-config.helper';\nimport { Session } from '../../session/entities/session.entity';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        /*         const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        } */\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${session.id}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            cNonce,\n            cNonceExpiresIn: 100,\n            clientId: 'wallet', // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    'Session does not have valid credentials for issuance',\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const config = await this.issuanceService.getIssuanceConfigurationById(\n            issuanceId,\n            session.tenantId,\n        );\n\n        // Use the new authentication configuration structure\n        const authConfig = config.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                'No authentication configuration found for issuance config',\n            );\n        }\n\n        if (\n            AuthenticationConfigHelper.isPresentationDuringIssuanceAuth(\n                authConfig,\n            )\n        ) {\n            // OID4VP flow - credential presentation required\n            const presentationConfig =\n                AuthenticationConfigHelper.getPresentationConfig(authConfig);\n            const webhook = presentationConfig?.presentation.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                session.tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else if (AuthenticationConfigHelper.isAuthUrlAuth(authConfig)) {\n            // OID4VCI authorized code flow - should not reach here typically in challenge endpoint\n            // But we'll handle it by sending authorization code\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else if (AuthenticationConfigHelper.isNoneAuth(authConfig)) {\n            // Pre-authorized code flow (method: 'none') - send authorization code directly\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else {\n            throw new Error(\n                `Unsupported authentication method: ${(authConfig as any).method}`,\n            );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CertEntity.html":{"url":"entities/CertEntity.html","title":"entity - CertEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CertEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/cert.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                crt\n                            \n                            \n                                    \n                                keyId\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        keyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CertificateType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'signing', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\n\nexport type CertificateType = 'access' | 'signing';\n\n@Entity()\nexport class CertEntity {\n    @Column('varchar', { primary: true })\n    keyId: string;\n\n    @Column('varchar', { primary: true })\n    tenantId: string;\n\n    @Column('varchar')\n    crt: string;\n\n    @Column('varchar', { default: 'signing', primary: true })\n    type: CertificateType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Client.html":{"url":"interfaces/Client.html","title":"interface - Client","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Client\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    BadRequestException,\n    Injectable,\n    OnApplicationBootstrap,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { EncryptionService } from '../crypto/encryption/encryption.service';\nimport { StatusListService } from '../issuer/status-list/status-list.service';\nimport { RegistrarService } from '../registrar/registrar.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ClientEntry } from './entitites/client.entity';\nimport { Repository } from 'typeorm/repository/Repository';\nimport { InjectMetric } from '@willsoto/nestjs-prometheus';\nimport { Gauge } from 'prom-client';\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statutsListService: StatusListService,\n        private registrarService: RegistrarService,\n        @InjectRepository(ClientEntry)\n        private clientRepository: Repository,\n        @InjectMetric('tenant_client_total')\n        private tenantClientTotal: Gauge,\n    ) {}\n\n    async onApplicationBootstrap() {\n        // Initialize the client metrics\n        const count = await this.clientRepository.countBy({ status: 'set up' });\n        this.tenantClientTotal.set({}, count);\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow('AUTH_CLIENT_ID'),\n                secret: this.configService.getOrThrow(\n                    'AUTH_CLIENT_SECRET',\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Check if the client is set up, if not, set it up.\n     * @param id\n     * @returns\n     */\n    async isSetUp(id: string) {\n        void this.clientRepository\n            .countBy({ status: 'set up' })\n            .then((count) => {\n                this.tenantClientTotal.set({}, count);\n            });\n\n        await this.clientRepository.findOneByOrFail({ id }).then(\n            (res) => {\n                if (res.status === 'set up') {\n                    return true;\n                }\n                throw new BadRequestException(\n                    `Client ${id} is not set up. Please retry later.`,\n                );\n            },\n            async () => {\n                // create it to signl that the client getting set up\n                await this.clientRepository.save({ id });\n                await this.setUpClient(id).catch(async (err) => {\n                    console.error(err);\n                    // if there is an error, update the client status\"\n                    await this.clientRepository.update(\n                        { id },\n                        { status: 'error', error: err.message },\n                    );\n                    throw new BadRequestException(\n                        `Error setting up client ${id}. Please retry later.`,\n                    );\n                });\n                // if everything is fine, update the client status\n                return this.clientRepository.update(\n                    { id },\n                    { status: 'set up' },\n                );\n            },\n        );\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    async setUpClient(id: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            id,\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n\n        const displayInfo = [\n            {\n                name: 'EUDI Wallet dev',\n                locale: 'de-DE',\n                logo: {\n                    uri: '/issuer.png',\n                    url: '/issuer.png',\n                },\n            },\n        ];\n        writeFileSync(\n            join(folder, 'display.json'),\n            JSON.stringify(displayInfo, null, 2),\n        );\n        await this.cryptoService.onTenantInit(id);\n        await this.encryptionService.onTenantInit(id);\n        await this.statutsListService.onTenantInit(id);\n        await this.registrarService.onTenantInit(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientCredentialsDto.html":{"url":"classes/ClientCredentialsDto.html","title":"class - ClientCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                client_id\n                            \n                            \n                                    \n                                client_secret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class ClientCredentialsDto {\n    @IsString()\n    client_id: string;\n    @IsString()\n    client_secret: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ClientEntry.html":{"url":"entities/ClientEntry.html","title":"entity - ClientEntry","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ClientEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entitites/client.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                error\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entitites/client.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entitites/client.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClientStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'init'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entitites/client.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryColumn } from 'typeorm';\n\nexport type ClientStatus = 'init' | 'set up' | 'error';\n\n@Entity()\nexport class ClientEntry {\n    @PrimaryColumn()\n    id: string;\n\n    @Column('varchar', { default: 'init' })\n    status: ClientStatus;\n\n    @Column('varchar', { nullable: true })\n    error?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clients\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findClientById\n                            \n                            \n                                    Private\n                                getClients\n                            \n                            \n                                    Async\n                                isSetUp\n                            \n                            \n                                    Private\n                                loadClients\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                setUpClient\n                            \n                            \n                                validateClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, encryptionService: EncryptionService, statutsListService: StatusListService, registrarService: RegistrarService, clientRepository: Repository, tenantClientTotal: Gauge)\n                    \n                \n                        \n                            \n                                Defined in src/auth/client.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statutsListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clientRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantClientTotal\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findClientById\n                        \n                    \n                \n            \n            \n                \nfindClientById(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Find client by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Get clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isSetUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    isSetUp(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Check if the client is set up, if not, set it up.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Load clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setUpClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUpClient(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:142\n                        \n                    \n\n\n            \n                \n                        Sends an event to set up a client, allowing all other services to listen and react accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateClient\n                        \n                    \n                \n            \n            \n                \nvalidateClient(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Validate client credentials (OAuth2 Client Credentials flow)\nThis is the primary authentication method for service integration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Client[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/auth/client.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    Injectable,\n    OnApplicationBootstrap,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { EncryptionService } from '../crypto/encryption/encryption.service';\nimport { StatusListService } from '../issuer/status-list/status-list.service';\nimport { RegistrarService } from '../registrar/registrar.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ClientEntry } from './entitites/client.entity';\nimport { Repository } from 'typeorm/repository/Repository';\nimport { InjectMetric } from '@willsoto/nestjs-prometheus';\nimport { Gauge } from 'prom-client';\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statutsListService: StatusListService,\n        private registrarService: RegistrarService,\n        @InjectRepository(ClientEntry)\n        private clientRepository: Repository,\n        @InjectMetric('tenant_client_total')\n        private tenantClientTotal: Gauge,\n    ) {}\n\n    async onApplicationBootstrap() {\n        // Initialize the client metrics\n        const count = await this.clientRepository.countBy({ status: 'set up' });\n        this.tenantClientTotal.set({}, count);\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow('AUTH_CLIENT_ID'),\n                secret: this.configService.getOrThrow(\n                    'AUTH_CLIENT_SECRET',\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Check if the client is set up, if not, set it up.\n     * @param id\n     * @returns\n     */\n    async isSetUp(id: string) {\n        void this.clientRepository\n            .countBy({ status: 'set up' })\n            .then((count) => {\n                this.tenantClientTotal.set({}, count);\n            });\n\n        await this.clientRepository.findOneByOrFail({ id }).then(\n            (res) => {\n                if (res.status === 'set up') {\n                    return true;\n                }\n                throw new BadRequestException(\n                    `Client ${id} is not set up. Please retry later.`,\n                );\n            },\n            async () => {\n                // create it to signl that the client getting set up\n                await this.clientRepository.save({ id });\n                await this.setUpClient(id).catch(async (err) => {\n                    console.error(err);\n                    // if there is an error, update the client status\"\n                    await this.clientRepository.update(\n                        { id },\n                        { status: 'error', error: err.message },\n                    );\n                    throw new BadRequestException(\n                        `Error setting up client ${id}. Please retry later.`,\n                    );\n                });\n                // if everything is fine, update the client status\n                return this.clientRepository.update(\n                    { id },\n                    { status: 'set up' },\n                );\n            },\n        );\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    async setUpClient(id: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            id,\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n\n        const displayInfo = [\n            {\n                name: 'EUDI Wallet dev',\n                locale: 'de-DE',\n                logo: {\n                    uri: '/issuer.png',\n                    url: '/issuer.png',\n                },\n            },\n        ];\n        writeFileSync(\n            join(folder, 'display.json'),\n            JSON.stringify(displayInfo, null, 2),\n        );\n        await this.cryptoService.onTenantInit(id);\n        await this.encryptionService.onTenantInit(id);\n        await this.statutsListService.onTenantInit(id);\n        await this.registrarService.onTenantInit(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCredentialIssuanceBindingDto.html":{"url":"classes/CreateCredentialIssuanceBindingDto.html","title":"class - CreateCredentialIssuanceBindingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCredentialIssuanceBindingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new credential-issuance binding.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credentialConfigId\n                            \n                            \n                                    \n                                    \n                                issuanceConfigId\n                            \n                            \n                                    \n                                    \n                                keyID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credentialConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the credential configuration', example: 'university-degree'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        issuanceConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the issuance configuration', example: '123e4567-e89b-12d3-a456-426614174000'})@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        keyID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The key ID to use for signing this credential in this issuance config', example: 'signing-key-2024-01'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for creating a new credential-issuance binding.\n */\nexport class CreateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: 'The ID of the credential configuration',\n        example: 'university-degree',\n    })\n    @IsString()\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: 'The ID of the issuance configuration',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    @IsUUID()\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description:\n            'The key ID to use for signing this credential in this issuance config',\n        example: 'signing-key-2024-01',\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for updating the key ID of an existing binding.\n */\nexport class UpdateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: 'The new key ID to use for signing this credential',\n        example: 'signing-key-2024-02',\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for the response of a credential-issuance binding.\n */\nexport class CredentialIssuanceBindingResponseDto {\n    @ApiProperty({\n        description: 'The unique identifier of the binding',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    id: string;\n\n    @ApiProperty({\n        description: 'The ID of the credential configuration',\n        example: 'university-degree',\n    })\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: 'The ID of the issuance configuration',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description: 'The key ID used for signing this credential',\n        example: 'signing-key-2024-01',\n    })\n    keyID: string;\n\n    @ApiProperty({\n        description: 'The timestamp when the binding was created',\n        example: '2024-08-03T10:30:00Z',\n    })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CredentialConfig.html":{"url":"entities/CredentialConfig.html","title":"entity - CredentialConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CredentialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage a credential configuration\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                claims\n                            \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                credentialIssuanceBindings\n                            \n                            \n                                    \n                                    \n                                disclosureFrame\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:34\n                        \n                    \n\n            \n                \n                    Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfigurationSupported\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:28\n                        \n                    \n\n            \n                \n                    OID4VCI issuer metadata crddential configuration element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialIssuanceBindings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialIssuanceBinding[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, binding => binding.credentialConfig)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:62\n                        \n                    \n\n            \n                \n                    Link to all the issuance config bindings that are using this credential.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        disclosureFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:40\n                        \n                    \n\n            \n                \n                    Disclosure frame for the sd jwt vc.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:17\n                        \n                    \n\n            \n                \n                    Unique identifier for the configuration to reference it.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SchemaResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:22\n                        \n                    \n\n            \n                \n                    Tenant ID for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VCT\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:47\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { CredentialConfigurationSupported } from '@openid4vc/openid4vci';\nimport { IsObject, IsOptional } from 'class-validator';\nimport { Column, Entity, OneToMany } from 'typeorm';\nimport { VCT } from '../../credentials-metadata/dto/credential-config.dto';\nimport { SchemaResponse } from '../../credentials-metadata/dto/schema-response.dto';\nimport { CredentialIssuanceBinding } from '../../issuance/entities/credential-issuance-binding.entity';\n\n/**\n * Entity to manage a credential configuration\n */\n@Entity()\nexport class CredentialConfig {\n    /**\n     * Unique identifier for the configuration to reference it.\n     */\n    @Column('varchar', { primary: true })\n    id: string;\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @Column('varchar', { primary: true })\n    tenantId: string;\n    /**\n     * OID4VCI issuer metadata crddential configuration element.\n     */\n    @Column('json')\n    @IsObject()\n    config: CredentialConfigurationSupported;\n    /**\n     * Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.\n     */\n    @Column('json', { nullable: true })\n    @IsObject()\n    claims: Record;\n    /**\n     * Disclosure frame for the sd jwt vc.\n     */\n    @Column('json', { nullable: true })\n    @IsObject()\n    disclosureFrame: Record;\n    @Column('json', { nullable: true })\n    /**\n     * VCT values that are hosted by this service.\n     */\n    @IsObject()\n    @IsOptional()\n    vct?: VCT;\n    @Column('json', { nullable: true })\n    /**\n     * json schema that is used during issuance for the validation of the claims.\n     */\n    @IsObject()\n    @IsOptional()\n    schema?: SchemaResponse;\n    /**\n     * Link to all the issuance config bindings that are using this credential.\n     */\n    @OneToMany(\n        () => CredentialIssuanceBinding,\n        (binding) => binding.credentialConfig,\n    )\n    credentialIssuanceBindings: CredentialIssuanceBinding[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialConfigMapping.html":{"url":"classes/CredentialConfigMapping.html","title":"class - CredentialConfigMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialConfigMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                keyId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        keyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsArray,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { AuthenticationConfigDto } from './authentication-config.dto';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\nexport class CredentialConfigMapping {\n    @IsString()\n    id: string;\n    @IsString()\n    @IsOptional()\n    keyId?: string;\n}\n\n/**\n * DTO for Issuance Configuration.\n */\nexport class IssuanceDto {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @IsString()\n    id: string;\n\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialConfigMapping)\n    credentialConfigs: CredentialConfigMapping[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     * This includes details like the authentication method and any required parameters.\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationConfigDto)\n    authenticationConfig: AuthenticationConfigDto;\n\n    /**\n     * Optional webhook configuration to send the results of the notification response.\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    notifyWebhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialConfigService.html":{"url":"injectables/CredentialConfigService.html","title":"injectable - CredentialConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credential-config/credential-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credential configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                import\n                            \n                            \n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(credentialConfigRepository: Repository, configService: ConfigService, logger: PinoLogger)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credential-config/credential-config.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialConfigService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        credentialConfigRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for CredentialConfig entity.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the CredentialConfig entity to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the result of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:97\n                        \n                    \n\n\n            \n                \n                        Retrieves all credential configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CredentialConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Retrieves a credential configuration by its ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Imports the configs\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore(tenantId: string, config: CredentialConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:123\n                        \n                    \n\n\n            \n                \n                        Stores a credential configuration for a given tenant.\nIf the configuration already exists, it will be overwritten.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                config\n                                            \n                                                            CredentialConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CredentialConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored CredentialConfig entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CredentialConfig } from '../entities/credential.entity';\nimport { ConfigService } from '@nestjs/config';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\nimport { readdirSync, readFileSync } from 'fs';\nimport { join } from 'path';\nimport { PinoLogger } from 'nestjs-pino';\n\n/**\n * Service for managing credential configurations.\n */\n@Injectable()\nexport class CredentialConfigService {\n    /**\n     * Constructor for CredentialConfigService.\n     * @param credentialConfigRepository - Repository for CredentialConfig entity.\n     */\n    constructor(\n        @InjectRepository(CredentialConfig)\n        private readonly credentialConfigRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n    ) {}\n\n    /**\n     * Imports the configs\n     */\n    public async import() {\n        const configPath = this.configService.getOrThrow('CONFIG_FOLDER');\n        const subfolder = 'issuance/credentials';\n        const force = this.configService.get('CONFIG_IMPORT_FORCE');\n        if (this.configService.get('CONFIG_IMPORT')) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            let counter = 0;\n            for (const tenant of tenantFolders) {\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), 'utf8'),\n                    );\n\n                    payload.id = file.replace('.json', '');\n                    const exists = await this.getById(\n                        tenant.name,\n                        payload.id,\n                    ).catch(() => false);\n                    if (exists && !force) {\n                        continue; // Skip if config already exists and force is not set\n                    }\n\n                    // Validate the payload against CredentialConfig\n                    const config = plainToClass(CredentialConfig, payload);\n                    const validationErrors = await validate(config);\n\n                    if (validationErrors.length > 0) {\n                        this.logger.error(\n                            {\n                                event: 'ValidationError',\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for credentials config ${file} in tenant ${tenant.name}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n\n                    await this.store(tenant.name, config);\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: 'Import',\n                    },\n                    `${counter} issuance configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Retrieves all credential configurations for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @returns A promise that resolves to an array of CredentialConfig entities.\n     */\n    get(tenantId: string) {\n        return this.credentialConfigRepository.find({\n            where: { tenantId },\n        });\n    }\n\n    /**\n     * Retrieves a credential configuration by its ID for a given tenant.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    getById(tenantId: string, id: string) {\n        return this.credentialConfigRepository.findOneByOrFail({\n            id,\n            tenantId,\n        });\n    }\n\n    /**\n     * Stores a credential configuration for a given tenant.\n     * If the configuration already exists, it will be overwritten.\n     * @param tenantId - The ID of the tenant.\n     * @param config - The CredentialConfig entity to store.\n     * @returns A promise that resolves to the stored CredentialConfig entity.\n     */\n    store(tenantId: string, config: CredentialConfig) {\n        return this.credentialConfigRepository.save({\n            ...config,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a credential configuration for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @param id - The ID of the CredentialConfig entity to delete.\n     * @returns A promise that resolves to the result of the delete operation.\n     */\n    delete(tenantId: string, id: string) {\n        return this.credentialConfigRepository.delete({\n            id,\n            tenantId,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CredentialIssuanceBinding.html":{"url":"entities/CredentialIssuanceBinding.html","title":"entity - CredentialIssuanceBinding","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CredentialIssuanceBinding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/entities/credential-issuance-binding.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Junction entity for the many-to-many relationship between CredentialConfig and IssuanceConfig\nwith additional keyID attribute for specifying which key should be used for signing.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                createdAt\n                            \n                            \n                                    \n                                credentialConfig\n                            \n                            \n                                    \n                                credentialConfigId\n                            \n                            \n                                    \n                                issuanceConfig\n                            \n                            \n                                    \n                                issuanceConfigId\n                            \n                            \n                                    \n                                keyID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:45\n                        \n                    \n\n            \n                \n                    The timestamp when the binding was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, credentialConfig => credentialConfig.credentialIssuanceBindings)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:24\n                        \n                    \n\n            \n                \n                    Reference to the credential configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IssuanceConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, issuanceConfig => issuanceConfig.credentialIssuanceBindings)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:33\n                        \n                    \n\n            \n                \n                    Reference to the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        keyID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:39\n                        \n                    \n\n            \n                \n                    Key ID that should be used for signing this specific credential in this issuance config.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryColumn } from 'typeorm';\nimport { CredentialConfig } from '../../credentials/entities/credential.entity';\nimport { IssuanceConfig } from './issuance-config.entity';\n\n/**\n * Junction entity for the many-to-many relationship between CredentialConfig and IssuanceConfig\n * with additional keyID attribute for specifying which key should be used for signing.\n */\n@Entity()\nexport class CredentialIssuanceBinding {\n    @PrimaryColumn()\n    credentialConfigId: string;\n\n    @PrimaryColumn()\n    issuanceConfigId: string;\n\n    /**\n     * Reference to the credential configuration.\n     */\n    @ManyToOne(\n        () => CredentialConfig,\n        (credentialConfig) => credentialConfig.credentialIssuanceBindings,\n    )\n    credentialConfig: CredentialConfig;\n\n    /**\n     * Reference to the issuance configuration.\n     */\n    @ManyToOne(\n        () => IssuanceConfig,\n        (issuanceConfig) => issuanceConfig.credentialIssuanceBindings,\n    )\n    issuanceConfig: IssuanceConfig;\n\n    /**\n     * Key ID that should be used for signing this specific credential in this issuance config.\n     */\n    @Column('varchar', { nullable: true })\n    keyID: string;\n\n    /**\n     * The timestamp when the binding was created.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuanceBindingResponseDto.html":{"url":"classes/CredentialIssuanceBindingResponseDto.html","title":"class - CredentialIssuanceBindingResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuanceBindingResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the response of a credential-issuance binding.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                credentialConfigId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                issuanceConfigId\n                            \n                            \n                                    \n                                keyID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The timestamp when the binding was created', example: '2024-08-03T10:30:00Z'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the credential configuration', example: 'university-degree'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The unique identifier of the binding', example: '123e4567-e89b-12d3-a456-426614174000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the issuance configuration', example: '123e4567-e89b-12d3-a456-426614174000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        keyID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The key ID used for signing this credential', example: 'signing-key-2024-01'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:69\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for creating a new credential-issuance binding.\n */\nexport class CreateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: 'The ID of the credential configuration',\n        example: 'university-degree',\n    })\n    @IsString()\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: 'The ID of the issuance configuration',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    @IsUUID()\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description:\n            'The key ID to use for signing this credential in this issuance config',\n        example: 'signing-key-2024-01',\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for updating the key ID of an existing binding.\n */\nexport class UpdateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: 'The new key ID to use for signing this credential',\n        example: 'signing-key-2024-02',\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for the response of a credential-issuance binding.\n */\nexport class CredentialIssuanceBindingResponseDto {\n    @ApiProperty({\n        description: 'The unique identifier of the binding',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    id: string;\n\n    @ApiProperty({\n        description: 'The ID of the credential configuration',\n        example: 'university-degree',\n    })\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: 'The ID of the issuance configuration',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description: 'The key ID used for signing this credential',\n        example: 'signing-key-2024-01',\n    })\n    keyID: string;\n\n    @ApiProperty({\n        description: 'The timestamp when the binding was created',\n        example: '2024-08-03T10:30:00Z',\n    })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuerMetadataDto.html":{"url":"classes/CredentialIssuerMetadataDto.html","title":"class - CredentialIssuerMetadataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuerMetadataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/credential-issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the metadata for a credential issuer.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_server\n                            \n                            \n                                authorization_servers\n                            \n                            \n                                batch_credential_issuance\n                            \n                            \n                                credential_configurations_supported\n                            \n                            \n                                credential_endpoint\n                            \n                            \n                                credential_issuer\n                            \n                            \n                                display\n                            \n                            \n                                notification_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:41\n                        \n                    \n\n            \n                \n                    The URL of the preferred authorization server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_servers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:12\n                        \n                    \n\n            \n                \n                    List of authorization servers that support the credential issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        batch_credential_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:24\n                        \n                    \n\n            \n                \n                    Information about batch credential issuance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_configurations_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:37\n                        \n                    \n\n            \n                \n                    Object of credentials configurations supported by the issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:16\n                        \n                    \n\n            \n                \n                    The URL of the credential issuance endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:8\n                        \n                    \n\n            \n                \n                    The issuer identifier, typically a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:33\n                        \n                    \n\n            \n                \n                    Display information for the credentials that are getting issued.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notification_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:20\n                        \n                    \n\n            \n                \n                    The URL of the notification endpoint for credential issuance.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CredentialIssuerMetadataDto {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    credential_issuer: string;\n    /**\n     * List of authorization servers that support the credential issuer.\n     */\n    authorization_servers: string[];\n    /**\n     * The URL of the credential issuance endpoint.\n     */\n    credential_endpoint: string;\n    /**\n     * The URL of the notification endpoint for credential issuance.\n     */\n    notification_endpoint: string;\n    /**\n     * Information about batch credential issuance.\n     */\n    batch_credential_issuance: {\n        /**\n         * Amount of elements in a batch.\n         */\n        batch_size: number;\n    };\n    /**\n     * Display information for the credentials that are getting issued.\n     */\n    display: Array;\n    /**\n     * Object of credentials configurations supported by the issuer.\n     */\n    credential_configurations_supported: any;\n    /**\n     * The URL of the preferred authorization server.\n     */\n    authorization_server: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsController.html":{"url":"controllers/CredentialsController.html","title":"controller - CredentialsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/credentials\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing credential configurations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getConfigs\n                            \n                            \n                                    \n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Deletes an credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getConfigs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfigs(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Returns the credential configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(config: CredentialConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Stores the credential configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            CredentialConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Body,\n    UseGuards,\n} from '@nestjs/common';\nimport { ApiSecurity, ApiTags } from '@nestjs/swagger';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { CredentialConfigService } from './credential-config/credential-config.service';\nimport { CredentialConfig } from './entities/credential.entity';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\n\n/**\n * Controller for managing credential configurations.\n */\n@ApiTags('Issuer management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('issuer-management/credentials')\nexport class CredentialsController {\n    /**\n     * Initializes the CredentialsController with the CredentialConfigService.\n     * @param credentialsService\n     */\n    constructor(private readonly credentialsService: CredentialConfigService) {}\n\n    /**\n     * Returns the credential configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getConfigs(@Token() user: TokenPayload) {\n        return this.credentialsService.get(user.sub);\n    }\n\n    /**\n     * Stores the credential configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeCredentialConfiguration(\n        @Body() config: CredentialConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.store(user.sub, config);\n    }\n\n    /**\n     * Deletes an credential configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteIssuanceConfiguration(\n        @Param('id') id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.delete(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsMetadataController.html":{"url":"controllers/CredentialsMetadataController.html","title":"controller - CredentialsMetadataController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsMetadataController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/credentials-metadata.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/credentials-metadata\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n            \n                \n                        \n                    schema(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('schema/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n            \n                \n                        \n                    vct(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('vct/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:15\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the credential configuration.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { CredentialsService } from '../credentials/credentials.service';\nimport { ApiExcludeController } from '@nestjs/swagger';\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== 'true')\n@Controller(':tenantId/credentials-metadata')\nexport class CredentialsMetadataController {\n    constructor(private readonly credentialsService: CredentialsService) {}\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n     * @param id - The identifier of the credential configuration.\n     */\n    @Get('vct/:id')\n    vct(@Param('id') id: string, @Param('tenantId') tenantId: string) {\n        return this.credentialsService.getVCT(id, tenantId);\n    }\n\n    /**\n     * Retrieves the schema for a specific credential\n     * @param id\n     * @returns\n     */\n    @Get('schema/:id')\n    schema(@Param('id') id: string, @Param('tenantId') tenantId: string) {\n        return this.credentialsService.getSchema(id, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialsService.html":{"url":"injectables/CredentialsService.html","title":"injectable - CredentialsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                getCredentialConfigurationSupported\n                            \n                            \n                                    Async\n                                getSchema\n                            \n                            \n                                    Async\n                                getVCT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, configService: ConfigService, statusListService: StatusListService, credentialConfigRepo: Repository, issuanceConfigService: IssuanceService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credentials.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceConfigService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(credentialConfigurationId: string, cnf: Jwk, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cnf\n                                            \n                                                        Jwk\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredentialConfigurationSupported\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredentialConfigurationSupported(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration that is required for oid4vci\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSchema(credentialConfigurationId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:151\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVCT\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVCT(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:125\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport type { Jwk } from '@openid4vc/oauth2';\nimport { digest, generateSalt } from '@sd-jwt/crypto-nodejs';\nimport { SDJwtVcInstance } from '@sd-jwt/sd-jwt-vc';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { StatusListService } from '../status-list/status-list.service';\nimport { CredentialConfigurationSupported } from '@openid4vc/openid4vci';\nimport { Session } from '../../session/entities/session.entity';\nimport { SchemaResponse } from '../credentials-metadata/dto/schema-response.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CredentialConfig } from './entities/credential.entity';\nimport { VCT } from '../credentials-metadata/dto/credential-config.dto';\nimport { IssuanceService } from '../issuance/issuance.service';\n\n@Injectable()\nexport class CredentialsService {\n    constructor(\n        private cryptoService: CryptoService,\n        private configService: ConfigService,\n        private statusListService: StatusListService,\n        @InjectRepository(CredentialConfig)\n        private credentialConfigRepo: Repository,\n        private issuanceConfigService: IssuanceService,\n    ) {}\n\n    /**\n     * Returns the credential configuration that is required for oid4vci\n     * @param tenantId\n     * @returns\n     */\n    async getCredentialConfigurationSupported(\n        tenantId: string,\n    ): Promise> {\n        const credential_configurations_supported: Record = {};\n\n        const configs = await this.credentialConfigRepo.findBy({ tenantId });\n\n        for (const value of configs) {\n            credential_configurations_supported[value.id] = value.config;\n        }\n        return credential_configurations_supported;\n    }\n\n    async getCredential(\n        credentialConfigurationId: string,\n        cnf: Jwk,\n        session: Session,\n    ) {\n        const credentialConfiguration = await this.credentialConfigRepo\n            .findOneByOrFail({\n                id: credentialConfigurationId,\n                tenantId: session.tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialConfigurationId} not found`,\n                );\n            });\n\n        const claims =\n            session.credentialPayload?.values?.[credentialConfigurationId] ??\n            credentialConfiguration.claims;\n        const disclosureFrame = credentialConfiguration.disclosureFrame;\n\n        const issuanceConfig =\n            await this.issuanceConfigService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n        const binding = issuanceConfig.credentialIssuanceBindings.find(\n            (binding) =>\n                binding.credentialConfigId === credentialConfigurationId,\n        );\n\n        const sdjwt = new SDJwtVcInstance({\n            signer: await this.cryptoService.keyService.signer(\n                session.tenantId,\n                binding?.keyID,\n            ),\n            signAlg: 'ES256',\n            hasher: digest,\n            hashAlg: 'sha-256',\n            saltGenerator: generateSalt,\n            loadTypeMetadataFormat: true,\n        });\n\n        return sdjwt.issue(\n            {\n                iss: this.configService.getOrThrow('PUBLIC_URL'),\n                iat: Math.round(new Date().getTime() / 1000),\n                vct: `${this.configService.getOrThrow('PUBLIC_URL')}/${session.tenantId}/credentials/vct/${credentialConfigurationId}`,\n                cnf: {\n                    jwk: cnf,\n                },\n                ...(await this.statusListService.createEntry(\n                    session,\n                    credentialConfigurationId,\n                )),\n                ...claims,\n            },\n            disclosureFrame,\n            {\n                header: {\n                    x5c: await this.cryptoService.getCertChain(\n                        'signing',\n                        session.tenantId,\n                    ),\n                    alg: 'ES256',\n                },\n            },\n        );\n    }\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n     * @param credentialId\n     * @param tenantId\n     * @returns\n     */\n    async getVCT(credentialId: string, tenantId: string): Promise {\n        const credentialConfig = await this.credentialConfigRepo\n            .findOneByOrFail({\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialId} not found`,\n                );\n            });\n        if (!credentialConfig.vct) {\n            throw new ConflictException(\n                `VCT for credential configuration with id ${credentialId} not found`,\n            );\n        }\n        const host = this.configService.getOrThrow('PUBLIC_URL');\n        credentialConfig.vct.vct = `${host}/${tenantId}/credentials-metadata/vct/${credentialConfig.id}`;\n        return credentialConfig.vct;\n    }\n\n    /**\n     * Retrieves the schema for a specific credential configuration.\n     * @param id\n     * @param tenantId\n     * @returns\n     */\n    async getSchema(\n        credentialConfigurationId: string,\n        tenantId: string,\n    ): Promise {\n        const credentialConfig =\n            await this.credentialConfigRepo.findOneByOrFail({\n                tenantId,\n            });\n        if (!credentialConfig) {\n            throw new ConflictException(\n                `Credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        if (!credentialConfig.schema) {\n            throw new ConflictException(\n                `Schema for credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        return credentialConfig.schema;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoImplementation.html":{"url":"interfaces/CryptoImplementation.html","title":"interface - CryptoImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto/crypto-implementation.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface to imeplement different algorithms.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alg\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        generateKeyPair\n                                    \n                                \n                                \n                                    \n                                        getSigner\n                                    \n                                \n                                \n                                    \n                                        getVerifier\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyPair\n                        \n                    \n                \n            \n            \n                \ngenerateKeyPair()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a new keypair\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSigner\n                        \n                    \n                \n            \n            \n                \ngetSigner(privateKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:24\n                        \n                    \n\n\n            \n                \n                        creates a signer based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVerifier\n                        \n                    \n                \n            \n            \n                \ngetVerifier(publicKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:29\n                        \n                    \n\n\n            \n                \n                        creates a verifier based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                publicKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type KeyPair = {\n    publicKey: JsonWebKey;\n    privateKey: JsonWebKey;\n};\n\ntype Signer = (data: string) => Promise;\n\ntype Verifier = (data: string, signature: string) => Promise;\n\n/**\n * Generic interface to imeplement different algorithms.\n */\nexport interface CryptoImplementation {\n    //name of the algorithm\n    alg: string;\n    /**\n     * Generates a new keypair\n     */\n    generateKeyPair(): Promise;\n    /**\n     * creates a signer based on the passed key.\n     * @param privateKeyJWK\n     */\n    getSigner(privateKeyJWK: JsonWebKey): Promise;\n    /**\n     * creates a verifier based on the passed key.\n     * @param publicKeyJWK\n     */\n    getVerifier(publicKeyJWK: JsonWebKey): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoImplementationService.html":{"url":"injectables/CryptoImplementationService.html","title":"injectable - CryptoImplementationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoImplementationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto/crypto.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlg\n                            \n                            \n                                getCrypto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configServie: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/crypto/crypto.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configServie\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAlg\n                        \n                    \n                \n            \n            \n                \ngetAlg()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Return the algorithm that is used for the crypto operations like signing.\n\n\n                        \n                            Returns :         CryptoType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCrypto\n                        \n                    \n                \n            \n            \n                \ngetCrypto(alg)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                alg\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.configServie.get('CRYPTO_ALG')\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CryptoImplementation\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { ES256 } from '@sd-jwt/crypto-nodejs';\nimport { ED25519 } from './ed25519';\nimport { CryptoImplementation } from './crypto-implementation';\nimport { Injectable } from '@nestjs/common';\n\nexport type CryptoType = 'ES256' | 'Ed25519';\n\n@Injectable()\nexport class CryptoImplementationService {\n    constructor(private configServie: ConfigService) {}\n\n    /**\n     * Return the algorithm that is used for the crypto operations like signing.\n     * @returns\n     */\n    getAlg(): CryptoType {\n        return this.configServie.get('CRYPTO_ALG') as CryptoType;\n    }\n\n    getCrypto(\n        alg = this.configServie.get('CRYPTO_ALG'),\n    ): CryptoImplementation {\n        switch (alg) {\n            case 'Ed25519':\n                return ED25519;\n            case 'ES256':\n                return ES256;\n            default:\n                throw new Error(`Unsupported algorithm ${alg}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoModule.html":{"url":"modules/CryptoModule.html","title":"module - CryptoModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_CryptoModule_exports\n\n\n\n\nCryptoService \n\nCryptoService \n\n\n\nEncryptionService \n\nEncryptionService \n\n\n\nCryptoModule\n\nCryptoModule\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/crypto.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            KeyController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CryptoService } from './crypto.service';\nimport { EncryptionService } from './encryption/encryption.service';\nimport { KeyController } from './key/key.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CertEntity } from './key/entities/cert.entity';\n\n@Module({\n    imports: [TypeOrmModule.forFeature([CertEntity])],\n    controllers: [KeyController],\n    providers: [CryptoService, EncryptionService],\n    exports: [CryptoService, EncryptionService],\n})\nexport class CryptoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { join } from 'path';\nimport * as Joi from 'joi';\n\nexport const DB_VALIDATION_SCHEMA = {\n    DB_TYPE: Joi.string().valid('sqlite', 'postgres').default('sqlite'),\n    DB_HOST: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n};\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (\n                configService: ConfigService,\n            ): TypeOrmModuleOptions => {\n                const dbType = configService.get(\n                    'DB_TYPE',\n                );\n\n                const commonOptions = {\n                    synchronize: true,\n                    autoLoadEntities: true,\n                };\n\n                if (dbType === 'postgres') {\n                    return {\n                        type: 'postgres',\n                        host: configService.getOrThrow('DB_HOST'),\n                        port: configService.getOrThrow('DB_PORT'),\n                        username:\n                            configService.getOrThrow('DB_USERNAME'),\n                        password:\n                            configService.getOrThrow('DB_PASSWORD'),\n                        database:\n                            configService.getOrThrow('DB_DATABASE'),\n                        ...commonOptions,\n                    };\n                }\n\n                return {\n                    type: 'sqlite',\n                    database: join(\n                        configService.getOrThrow('FOLDER'),\n                        'service.db',\n                    ),\n                    ...commonOptions,\n                };\n            },\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EC_Public.html":{"url":"classes/EC_Public.html","title":"class - EC_Public","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EC_Public\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\nThis class is used to define the structure of EC public keys in JWK format.\n\n            \n\n\n            \n                Implements\n            \n            \n                            JWK_EC_Public\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crv\n                            \n                            \n                                kty\n                            \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The algorithm intended for use with the key, such as 'ES256'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        kty\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The key type, which is always 'EC' for Elliptic Curve keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:19\n                        \n                    \n\n            \n                \n                    The x coordinate of the EC public key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    The y coordinate of the EC public key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from 'jose';\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: 'EC';\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/encryption/encryption.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling encryption and decryption operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decryptJwe\n                            \n                            \n                                getEncryptionPublicKey\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/encryption/encryption.service.ts:11\n                            \n                        \n\n                \n                    \n                            Constructor for the EncryptionService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decryptJwe\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptJwe(response: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:53\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Encrypts a response using JWE (JSON Web Encryption).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe response to encrypt.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to encrypt the response.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The encrypted response as a JWE string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEncryptionPublicKey\n                        \n                    \n                \n            \n            \n                \ngetEncryptionPublicKey(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Retrieves the public encryption key for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the public key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     JWK\n\n                        \n                            \n                                The public encryption key as a JWK.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:22\n                        \n                    \n\n\n            \n                \n                        Initializes the encryption keys for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to initialize the keys.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport { importJWK, exportJWK, generateKeyPair, jwtDecrypt, JWK } from 'jose';\nimport { join } from 'path';\n\n/**\n * Service for handling encryption and decryption operations.\n */\n@Injectable()\nexport class EncryptionService {\n    /**\n     * Constructor for the EncryptionService.\n     * @param configService\n     */\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Initializes the encryption keys for a given tenant.\n     * @param tenantId - The ID of the tenant for which to initialize the keys.\n     */\n    async onTenantInit(tenantId: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'keys',\n        );\n        const privateEncryptionPath = join(folder, 'private-encryption.json');\n        const publicEncryptionPath = join(folder, 'public-encryption.json');\n        if (!existsSync(privateEncryptionPath)) {\n            await generateKeyPair('ECDH-ES', {\n                crv: 'P-256',\n                extractable: true,\n            }).then(async (secret) => {\n                writeFileSync(\n                    privateEncryptionPath,\n                    JSON.stringify(await exportJWK(secret.privateKey), null, 2),\n                );\n                writeFileSync(\n                    publicEncryptionPath,\n                    JSON.stringify(await exportJWK(secret.publicKey), null, 2),\n                );\n            });\n        }\n    }\n\n    /**\n     * Encrypts a response using JWE (JSON Web Encryption).\n     * @param response - The response to encrypt.\n     * @param tenantId - The ID of the tenant for which to encrypt the response.\n     * @returns The encrypted response as a JWE string.\n     */\n    async decryptJwe(response: string, tenantId: string): Promise {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'keys',\n        );\n        const privateEncryptionPath = join(folder, 'private-encryption.json');\n\n        const privateEncryptionKey = await importJWK(\n            JSON.parse(readFileSync(privateEncryptionPath, 'utf-8')),\n            'ECDH-ES',\n        );\n\n        const res = await jwtDecrypt(response, privateEncryptionKey);\n        return res.payload;\n    }\n\n    /**\n     * Retrieves the public encryption key for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve the public key.\n     * @returns The public encryption key as a JWK.\n     */\n    getEncryptionPublicKey(tenantId: string): JWK {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'keys',\n        );\n        const publicEncryptionPath = join(folder, 'public-encryption.json');\n        return JSON.parse(readFileSync(publicEncryptionPath, 'utf-8')) as JWK;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GenerateTokenOptions.html":{"url":"interfaces/GenerateTokenOptions.html","title":"interface - GenerateTokenOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GenerateTokenOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            audience\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SignJWT, jwtVerify, decodeJwt } from 'jose';\nimport { TokenPayload } from './token.decorator';\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow('JWT_EXPIRES_IN');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: 'HS256' })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token verification is handled by external OIDC provider.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: ['HS256'],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get('OIDC') !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                HealthController is responsible for providing health check endpoints.\nIt uses the HealthCheckService to perform checks on the database connection.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Endpoint to check the health of the service.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n    HealthCheck,\n    HealthCheckService,\n    TypeOrmHealthIndicator,\n} from '@nestjs/terminus';\n\n/**\n * HealthController is responsible for providing health check endpoints.\n * It uses the HealthCheckService to perform checks on the database connection.\n */\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private db: TypeOrmHealthIndicator,\n    ) {}\n\n    /**\n     * Endpoint to check the health of the service.\n     * @returns\n     */\n    @Get()\n    @HealthCheck()\n    check() {\n        return this.health.check([() => this.db.pingCheck('database')]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HealthController } from './health.controller';\nimport { TerminusModule } from '@nestjs/terminus';\n\n@Module({\n    imports: [TerminusModule],\n    controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/IssuanceConfig.html":{"url":"entities/IssuanceConfig.html","title":"entity - IssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  IssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/entities/issuance-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage issuance configs\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                authenticationConfig\n                            \n                            \n                                    \n                                    Optional\n                                createdAt\n                            \n                            \n                                    \n                                credentialIssuanceBindings\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                notifyWebhook\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        authenticationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:44\n                        \n                    \n\n            \n                \n                    Authentication configuration for the issuance process.\nThis determines which OpenID4VC flow to use:\n\n'none': Pre-authorized code flow (no user authentication required)\n'auth': OID4VCI authorized code flow (user will be redirected for authentication)\n'presentationDuringIssuance': OID4VP request is sent (credential presentation required)\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:50\n                        \n                    \n\n            \n                \n                    The timestamp when the issuance configuration was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialIssuanceBindings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialIssuanceBinding[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, binding => binding.issuanceConfig)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:33\n                        \n                    \n\n            \n                \n                    Links to all credential config bindings that are included in this issuance config.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:17\n                        \n                    \n\n            \n                \n                    Unique identifier for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:56\n                        \n                    \n\n            \n                \n                    Webhook to send the result of the notification response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:24\n                        \n                    \n\n            \n                \n                    Tenant ID for the issuance configuration.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsObject } from 'class-validator';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { ApiHideProperty } from '@nestjs/swagger';\nimport type { AuthenticationConfig } from '../dto/authentication-config.dto';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { CredentialIssuanceBinding } from './credential-issuance-binding.entity';\n\n/**\n * Entity to manage issuance configs\n */\n@Entity()\nexport class IssuanceConfig {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @PrimaryGeneratedColumn('uuid')\n    id: string;\n\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @ApiHideProperty()\n    @Column('varchar')\n    tenantId: string;\n\n    /**\n     * Links to all credential config bindings that are included in this issuance config.\n     */\n    @OneToMany(\n        () => CredentialIssuanceBinding,\n        (binding) => binding.issuanceConfig,\n    )\n    credentialIssuanceBindings: CredentialIssuanceBinding[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     * This determines which OpenID4VC flow to use:\n     * - 'none': Pre-authorized code flow (no user authentication required)\n     * - 'auth': OID4VCI authorized code flow (user will be redirected for authentication)\n     * - 'presentationDuringIssuance': OID4VP request is sent (credential presentation required)\n     */\n    @IsObject()\n    @Column('json')\n    authenticationConfig: AuthenticationConfig;\n\n    /**\n     * The timestamp when the issuance configuration was created.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt?: Date;\n\n    /**\n     * Webhook to send the result of the notification response\n     */\n    @Column('json', { nullable: true })\n    notifyWebhook: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuanceController.html":{"url":"controllers/IssuanceController.html","title":"controller - IssuanceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuanceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/issuance\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getIssuanceConfigurations\n                            \n                            \n                                    \n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Deletes an issuance configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getIssuanceConfigurations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfigurations(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(config: IssuanceDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Stores the issuance configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n    Body,\n} from '@nestjs/common';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { ApiTags, ApiSecurity } from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { IssuanceService } from './issuance.service';\nimport { IssuanceDto } from './dto/issuance.dto';\n\n@ApiTags('Issuer management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('issuer-management/issuance')\nexport class IssuanceController {\n    constructor(private readonly issuanceService: IssuanceService) {}\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getIssuanceConfigurations(@Token() user: TokenPayload) {\n        return this.issuanceService.getIssuanceConfiguration(user.sub);\n    }\n\n    /**\n     * Stores the issuance configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeIssuanceConfiguration(\n        @Body() config: IssuanceDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.storeIssuanceConfiguration(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes an issuance configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteIssuanceConfiguration(\n        @Param('id') id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.deleteIssuanceConfiguration(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IssuanceDto.html":{"url":"classes/IssuanceDto.html","title":"class - IssuanceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IssuanceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for Issuance Configuration.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authenticationConfig\n                            \n                            \n                                    \n                                    \n                                    \n                                credentialConfigs\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authenticationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationConfigDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:45\n                        \n                    \n\n            \n                \n                    Authentication configuration for the issuance process.\nThis includes details like the authentication method and any required parameters.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        credentialConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfigMapping[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:36\n                        \n                    \n\n            \n                \n                    Ids of the credential configurations associated with this issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:28\n                        \n                    \n\n            \n                \n                    Unique identifier for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:54\n                        \n                    \n\n            \n                \n                    Optional webhook configuration to send the results of the notification response.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsArray,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { AuthenticationConfigDto } from './authentication-config.dto';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\nexport class CredentialConfigMapping {\n    @IsString()\n    id: string;\n    @IsString()\n    @IsOptional()\n    keyId?: string;\n}\n\n/**\n * DTO for Issuance Configuration.\n */\nexport class IssuanceDto {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @IsString()\n    id: string;\n\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialConfigMapping)\n    credentialConfigs: CredentialConfigMapping[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     * This includes details like the authentication method and any required parameters.\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationConfigDto)\n    authenticationConfig: AuthenticationConfigDto;\n\n    /**\n     * Optional webhook configuration to send the results of the notification response.\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    notifyWebhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssuanceService.html":{"url":"injectables/IssuanceService.html","title":"injectable - IssuanceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IssuanceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing issuance configurations.\nIt provides methods to get, store, and delete issuance configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    Public\n                                    Async\n                                getIssuanceConfiguration\n                            \n                            \n                                    Async\n                                getIssuanceConfigurationById\n                            \n                            \n                                    Private\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(issuanceConfigRepo: Repository, credentialIssuanceBindingRepo: Repository, credentialsConfigService: CredentialConfigService, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/issuance/issuance.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for IssuanceService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        issuanceConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialIssuanceBindingRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsConfigService\n                                                  \n                                                        \n                                                                        CredentialConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \ndeleteIssuanceConfiguration(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:239\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:142\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIssuanceConfigurationById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfigurationById(issuanceConfigId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:154\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configuration by ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuanceConfigId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations and the credential configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(tenantId: string, value: IssuanceDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:170\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { IssuanceConfig } from './entities/issuance-config.entity';\nimport { CredentialConfigService } from '../credentials/credential-config/credential-config.service';\nimport { IssuanceDto } from './dto/issuance.dto';\nimport { AuthenticationConfig } from './dto/authentication-config.dto';\nimport { ConfigService } from '@nestjs/config';\nimport { join } from 'path';\nimport { readdirSync, readFileSync } from 'fs';\nimport { PinoLogger } from 'nestjs-pino';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\nimport { CredentialIssuanceBinding } from './entities/credential-issuance-binding.entity';\nimport { CredentialConfig } from '../credentials/entities/credential.entity';\nimport { CryptoService } from '../../crypto/crypto.service';\n\n/**\n * Service for managing issuance configurations.\n * It provides methods to get, store, and delete issuance configurations.\n */\n@Injectable()\nexport class IssuanceService implements OnModuleInit {\n    /**\n     * Constructor for IssuanceService.\n     * @param issuanceConfigRepo\n     * @param credentialsConfigService\n     */\n    constructor(\n        @InjectRepository(IssuanceConfig)\n        private issuanceConfigRepo: Repository,\n        @InjectRepository(CredentialIssuanceBinding)\n        private credentialIssuanceBindingRepo: Repository,\n        private credentialsConfigService: CredentialConfigService,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Import issuance configurations and the credential configurations from the configured folder.\n     */\n    async onModuleInit() {\n        await this.credentialsConfigService.import();\n        await this.import();\n    }\n\n    /**\n     * Import issuance configurations from the configured folder.\n     */\n    private async import() {\n        const configPath = this.configService.getOrThrow('CONFIG_FOLDER');\n        const subfolder = 'issuance/issuance';\n        const force = this.configService.get('CONFIG_IMPORT_FORCE');\n        if (this.configService.get('CONFIG_IMPORT')) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            let counter = 0;\n            for (const tenant of tenantFolders) {\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), 'utf8'),\n                    );\n\n                    payload.id = file.replace('.json', '');\n                    const exists = await this.getIssuanceConfigurationById(\n                        payload.id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (exists && !force) {\n                        continue; // Skip if config already exists and force is not set\n                    }\n\n                    // Validate the payload against IssuanceDto\n                    const issuanceDto = plainToClass(IssuanceDto, payload);\n                    const validationErrors = await validate(issuanceDto);\n\n                    if (validationErrors.length > 0) {\n                        this.logger.error(\n                            {\n                                event: 'ValidationError',\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for issuance config ${file} in tenant ${tenant.name}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n\n                    // check that the key exists\n                    for (const credentialConfigId of issuanceDto.credentialConfigs) {\n                        if (credentialConfigId.keyId) {\n                            const hasEntry = await this.cryptoService.hasEntry(\n                                tenant.name,\n                                credentialConfigId.keyId,\n                            );\n                            if (!hasEntry) {\n                                this.logger.error(\n                                    {\n                                        event: 'KeyNotFound',\n                                        file,\n                                        tenant: tenant.name,\n                                        keyId: credentialConfigId.keyId,\n                                    },\n                                    `Key with ID ${credentialConfigId.keyId} not found for issuance config ${file} in tenant ${tenant.name}`,\n                                );\n                                continue; // Skip this config if key is not found\n                            }\n                        }\n\n                        await this.storeIssuanceConfiguration(\n                            tenant.name,\n                            issuanceDto,\n                        );\n                        counter++;\n                    }\n                    this.logger.info(\n                        {\n                            event: 'Import',\n                        },\n                        `${counter} issuance configs imported for ${tenant.name}`,\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @param tenantId\n     * @returns\n     */\n    public async getIssuanceConfiguration(tenantId: string) {\n        return this.issuanceConfigRepo.find({\n            where: { tenantId },\n        });\n    }\n\n    /**\n     * Returns the issuance configuration by ID for a given tenant.\n     * @param issuanceConfigId\n     * @param tenantId\n     * @returns\n     */\n    async getIssuanceConfigurationById(\n        issuanceConfigId: string,\n        tenantId: string,\n    ): Promise {\n        return this.issuanceConfigRepo.findOneOrFail({\n            where: { id: issuanceConfigId, tenantId },\n            relations: ['credentialIssuanceBindings'],\n        });\n    }\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeIssuanceConfiguration(tenantId: string, value: IssuanceDto) {\n        const credentials: { config: CredentialConfig; keyId?: string }[] = [];\n        //check if all credential configs exist\n        for (const credentialConfigId of value.credentialConfigs) {\n            const credential = await this.credentialsConfigService.getById(\n                tenantId,\n                credentialConfigId.id,\n            );\n            credentials.push({\n                config: credential,\n                keyId: credentialConfigId.keyId,\n            });\n        }\n\n        // Convert AuthenticationConfigDto to AuthenticationConfig union type\n        let authenticationConfig: AuthenticationConfig;\n        if (value.authenticationConfig.method === 'none') {\n            authenticationConfig = { method: 'none' };\n        } else if (value.authenticationConfig.method === 'auth') {\n            if (!value.authenticationConfig.config) {\n                throw new Error(\n                    'AuthenticationConfig is required for auth method',\n                );\n            }\n            authenticationConfig = {\n                method: 'auth',\n                config: value.authenticationConfig.config as any,\n            };\n        } else if (\n            value.authenticationConfig.method === 'presentationDuringIssuance'\n        ) {\n            if (!value.authenticationConfig.config) {\n                throw new Error(\n                    'AuthenticationConfig is required for presentationDuringIssuance method',\n                );\n            }\n            authenticationConfig = {\n                method: 'presentationDuringIssuance',\n                config: value.authenticationConfig.config as any,\n            };\n        } else {\n            throw new Error(\n                `Invalid authentication method: ${(value.authenticationConfig as any).method}`,\n            );\n        }\n\n        const issuanceConfig = await this.issuanceConfigRepo.save({\n            ...value,\n            tenantId,\n            authenticationConfig,\n        });\n\n        //store the binding between credential and isuance\n        for (const credentialConfig of credentials) {\n            await this.credentialIssuanceBindingRepo.save({\n                credentialConfig: credentialConfig.config,\n                issuanceConfig,\n                keyID: credentialConfig.keyId,\n            });\n        }\n        return issuanceConfig;\n    }\n\n    /**\n     * Deletes a credential configuration.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    deleteIssuanceConfiguration(tenantId: string, id: string) {\n        return this.issuanceConfigRepo.delete({ tenantId, id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuerManagementController.html":{"url":"controllers/IssuerManagementController.html","title":"controller - IssuerManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuerManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuer-management/issuer-management.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: OfferRequestDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@ApiBody({type: OfferRequestDto, examples: undefined})@Post('offer')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:63\n                        \n                    \n\n\n            \n                \n                        Create an offer for a credential. This endpoint may be protected\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            OfferRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Res, UseGuards } from '@nestjs/common';\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { Oid4vciService } from '../../issuer/oid4vci/oid4vci.service';\nimport {\n    OfferResponse,\n    OfferRequestDto,\n} from '../oid4vci/dto/offer-request.dto';\nimport { ResponseType } from '../../verifier/oid4vp/dto/presentation-request.dto';\nimport * as QRCode from 'qrcode';\nimport { Response } from 'express';\n\n@ApiTags('Issuer management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('issuer-management')\nexport class IssuerManagementController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Create an offer for a credential. This endpoint may be protected\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: 'JSON response',\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            'application/json': { schema: { type: 'object' } },\n            'image/png': { schema: { type: 'string', format: 'binary' } },\n        },\n    })\n    @ApiProduces('application/json', 'image/png')\n    @ApiBody({\n        type: OfferRequestDto,\n        examples: {\n            qrcode: {\n                summary: 'QR-Code Example',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: 'pid',\n                } as OfferRequestDto,\n            },\n            uri: {\n                summary: 'URI',\n                value: {\n                    response_type: ResponseType.URI,\n                    issuanceId: 'pid',\n                } as OfferRequestDto,\n            },\n        },\n    })\n    @Post('offer')\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: OfferRequestDto,\n        @Token() user: TokenPayload,\n    ) {\n        // For now, we'll just pass the body to the service as before\n        // You can modify the service later to accept user information if needed\n        const values = await this.oid4vciService.createOffer(\n            body,\n            user,\n            user.sub,\n        );\n\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader('Content-Type', 'image/png');\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IssuerMetadata.html":{"url":"interfaces/IssuerMetadata.html","title":"interface - IssuerMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IssuerMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/dto/issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the issuer metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            jwks\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The issuer identifier, typically a URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { JWK } from 'jose';\n\n/**\n * Interface representing the issuer metadata.\n */\nexport interface IssuerMetadata {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    issuer: string;\n    /**\n     * The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n     */\n    jwks: {\n        /**\n         * List of keys in the JWKS.\n         */\n        keys: JWK[];\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssuerModule.html":{"url":"modules/IssuerModule.html","title":"module - IssuerModule","body":"\n                   \n\n\n\n\n    Modules\n    IssuerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_IssuerModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/issuer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialConfigService\n                        \n                        \n                            CredentialsService\n                        \n                        \n                            IssuanceService\n                        \n                        \n                            Oid4vciService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vciController\n                        \n                        \n                            AuthorizeController\n                        \n                        \n                            CredentialsController\n                        \n                        \n                            IssuerManagementController\n                        \n                        \n                            IssuanceController\n                        \n                        \n                            CredentialsMetadataController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            Oid4vciService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthorizeService } from './authorize/authorize.service';\nimport { CredentialsService } from './credentials/credentials.service';\nimport { Oid4vciService } from './oid4vci/oid4vci.service';\nimport { Oid4vciController } from './oid4vci/oid4vci.controller';\nimport { AuthorizeController } from './authorize/authorize.controller';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport { StatusListModule } from './status-list/status-list.module';\nimport { CredentialsController } from './credentials/credentials.controller';\nimport * as Joi from 'joi';\nimport { SessionModule } from '../session/session.module';\nimport { IssuerManagementController } from './issuer-management/issuer-management.controller';\nimport { Oid4vpModule } from '../verifier/oid4vp/oid4vp.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { IssuanceConfig } from './issuance/entities/issuance-config.entity';\nimport { SessionLoggerService } from '../utils/logger/session-logger.service';\nimport { SessionLoggerInterceptor } from '../utils/logger/session-logger.interceptor';\nimport { CredentialConfig } from './credentials/entities/credential.entity';\nimport { IssuanceController } from './issuance/issuance.controller';\nimport { CredentialsMetadataController } from './credentials-metadata/credentials-metadata.controller';\nimport { IssuanceService } from './issuance/issuance.service';\nimport { CredentialConfigService } from './credentials/credential-config/credential-config.service';\nimport { setGlobalConfig } from '@openid4vc/openid4vci';\nimport { ConfigService } from '@nestjs/config';\nimport { WebhookService } from '../utils/webhook/webhook.service';\nimport { HttpModule } from '@nestjs/axios';\nimport { CredentialIssuanceBinding } from './issuance/entities/credential-issuance-binding.entity';\n\nexport const ISSUER_VALIDATION_SCHEMA = {\n    PUBLIC_URL: Joi.string(),\n};\n\n@Module({\n    imports: [\n        CryptoModule,\n        StatusListModule,\n        Oid4vpModule,\n        SessionModule,\n        HttpModule,\n        TypeOrmModule.forFeature([\n            IssuanceConfig,\n            CredentialConfig,\n            CredentialIssuanceBinding,\n        ]),\n    ],\n    controllers: [\n        Oid4vciController,\n        AuthorizeController,\n        CredentialsController,\n        IssuerManagementController,\n        IssuanceController,\n        CredentialsMetadataController,\n    ],\n    providers: [\n        AuthorizeService,\n        CredentialsService,\n        Oid4vciService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        IssuanceService,\n        CredentialConfigService,\n        WebhookService,\n    ],\n    exports: [AuthorizeService, Oid4vciService],\n})\nexport class IssuerModule {\n    constructor(configService: ConfigService) {\n        const unsecure = configService\n            .getOrThrow('PUBLIC_URL')\n            .startsWith('http://');\n        setGlobalConfig({ allowInsecureUrls: unsecure });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwksResponseDto.html":{"url":"classes/JwksResponseDto.html","title":"class - JwksResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwksResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    An array of EC public keys in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from 'jose';\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: 'EC';\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            IS_PUBLIC_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) {\n            return true;\n        }\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtService.html":{"url":"injectables/JwtService.html","title":"injectable - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decodeToken\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                isUsingExternalOIDC\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        decodeToken\n                        \n                    \n                \n            \n            \n                \ndecodeToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Decode token without verification (for debugging)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TokenPayload | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(payload: TokenPayload, options: GenerateTokenOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:19\n                        \n                    \n\n\n            \n                \n                        Generate a JWT token for integrated OAuth2 server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            GenerateTokenOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsingExternalOIDC\n                        \n                    \n                \n            \n            \n                \nisUsingExternalOIDC()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:93\n                        \n                    \n\n\n            \n                \n                        Check if the service is using external OIDC provider\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Verify a JWT token (for additional validation if needed)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SignJWT, jwtVerify, decodeJwt } from 'jose';\nimport { TokenPayload } from './token.decorator';\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow('JWT_EXPIRES_IN');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: 'HS256' })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token verification is handled by external OIDC provider.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: ['HS256'],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get('OIDC') !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                getExternalOIDCConfig\n                            \n                            \n                                    Private\n                                    Static\n                                getIntegratedOAuth2Config\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getExternalOIDCConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExternalOIDCConfig(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { secretOrKeyProvider: any; jwtFromRequest: any; algorithms: {}; issuer: any; audience: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getIntegratedOAuth2Config\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntegratedOAuth2Config(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:75\n                        \n                    \n\n\n            \n                \n                        Validate the JWT payload. It will also check if the client is set up.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The JWT payload\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise<>\n\n                        \n                            \n                                The validated payload or an error\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { passportJwtSecret } from 'jwks-rsa';\nimport { ConfigService } from '@nestjs/config';\nimport { TokenPayload } from './token.decorator';\nimport { ClientService } from './client.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n    constructor(\n        private configService: ConfigService,\n        private clientService: ClientService,\n    ) {\n        const useExternalOIDC = configService.get('OIDC');\n\n        super(\n            useExternalOIDC\n                ? JwtStrategy.getExternalOIDCConfig(configService)\n                : JwtStrategy.getIntegratedOAuth2Config(configService),\n        );\n    }\n\n    private static getExternalOIDCConfig(configService: ConfigService) {\n        //TODO: test it\n        return {\n            secretOrKeyProvider: passportJwtSecret({\n                cache: true,\n                rateLimit: true,\n                jwksRequestsPerMinute: 5,\n                jwksUri: `${configService.get('KEYCLOAK_INTERNAL_ISSUER_URL')}/protocol/openid-connect/certs`,\n                handleSigningKeyError: (err, cb) => {\n                    console.log('Keycloak JWKS error:', err);\n                    if (err instanceof Error) {\n                        return cb(err);\n                    }\n                    return cb(\n                        new Error(\n                            'Could not get the signing key from Keycloak',\n                        ),\n                    );\n                },\n            }),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: ['RS256'],\n            issuer: configService.get('KEYCLOAK_INTERNAL_ISSUER_URL'),\n            audience: configService.get('KEYCLOAK_CLIENT_ID'), // You may want to add this to validation schema\n        };\n    }\n\n    private static getIntegratedOAuth2Config(\n        configService: ConfigService,\n    ): any {\n        const config = {\n            secretOrKey: configService.get('JWT_SECRET'),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: ['HS256'], // Using symmetric key for integrated OAuth2\n            ignoreExpiration: false, // Ensure tokens expire\n        };\n\n        // Add issuer validation only if JWT_ISSUER is configured\n        const issuer = configService.get('JWT_ISSUER');\n        if (issuer) {\n            (config as any).issuer = issuer;\n        }\n\n        return config;\n    }\n\n    /**\n     * Validate the JWT payload. It will also check if the client is set up.\n     * @param payload The JWT payload\n     * @returns The validated payload or an error\n     */\n    async validate(payload: TokenPayload): Promise {\n        const useExternalOIDC =\n            this.configService.get('OIDC') !== undefined;\n        await this.clientService.isSetUp(payload.sub);\n\n        if (useExternalOIDC) {\n            // External OIDC: Extract user info from external provider token\n            return payload;\n        } else {\n            // Integrated OAuth2: Use integrated server token validation\n            return payload;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Key.html":{"url":"classes/Key.html","title":"class - Key","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Key\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        JWK\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                alg\n                            \n                            \n                                    \n                                crv\n                            \n                            \n                                    \n                                d\n                            \n                            \n                                    \n                                kid\n                            \n                            \n                                    \n                                kty\n                            \n                            \n                                    \n                                x\n                            \n                            \n                                    \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        alg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        d\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['EC'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsObject, IsOptional, IsString } from 'class-validator';\nimport { JWK } from 'jose';\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum(['EC'])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @IsObject()\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/KeyController.html":{"url":"controllers/KeyController.html","title":"controller - KeyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  KeyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                key\n            \n\n\n            \n                Description\n            \n            \n                KeyController is responsible for managing keys in the system.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addKey\n                            \n                            \n                                    \n                                deleteKey\n                            \n                            \n                                    \n                                getKeys\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    addKey(token: TokenPayload, body: KeyImportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:48\n                        \n                    \n\n\n            \n                \n                        Add a new key to the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteKey(token: TokenPayload, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:63\n                        \n                    \n\n\n            \n                \n                        Delete a key from the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeys(token: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Get all keys for the tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Inject,\n    Param,\n    Post,\n    UseGuards,\n} from '@nestjs/common';\nimport { ApiSecurity } from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { KeyObj, KeyService } from './key.service';\nimport { KeyImportDto } from './dto/key-import.dto';\nimport { CryptoService } from '../crypto.service';\n\n/**\n * KeyController is responsible for managing keys in the system.\n */\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('key')\nexport class KeyController {\n    constructor(\n        @Inject('KeyService') public readonly keyService: KeyService,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Get all keys for the tenant.\n     * @param token\n     * @returns\n     */\n    @Get()\n    getKeys(@Token() token: TokenPayload): Promise {\n        const tenantId = token.sub;\n        return this.keyService.getKeys(tenantId);\n    }\n\n    /**\n     * Add a new key to the key service.\n     * @param token\n     * @param body\n     * @returns\n     */\n    @Post()\n    async addKey(\n        @Token() token: TokenPayload,\n        @Body() body: KeyImportDto,\n    ): Promise {\n        const tenantId = token.sub;\n        const id = await this.cryptoService.importKey(tenantId, body);\n        return { id };\n    }\n\n    /**\n     * Delete a key from the key service.\n     * @param token\n     * @param id\n     */\n    @Delete(':id')\n    deleteKey(@Token() token: TokenPayload, @Param('id') id: string) {\n        return this.cryptoService.deleteKey(token.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyImportDto.html":{"url":"classes/KeyImportDto.html","title":"class - KeyImportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyImportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for importing a key.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                crt\n                            \n                            \n                                    \n                                privateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:36\n                        \n                    \n\n            \n                \n                    Optional certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Key\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:29\n                        \n                    \n\n            \n                \n                    The private key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsObject, IsOptional, IsString } from 'class-validator';\nimport { JWK } from 'jose';\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum(['EC'])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @IsObject()\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeyModule.html":{"url":"modules/KeyModule.html","title":"module - KeyModule","body":"\n                   \n\n\n\n\n    Modules\n    KeyModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/key.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.module.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Global, Module } from '@nestjs/common';\nimport { FileSystemKeyService } from './filesystem-key.service';\nimport { VaultKeyService } from './vault-key.service';\nimport { CryptoModule } from './crypto/crypto.module';\nimport { CryptoImplementationService } from './crypto/crypto.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { HttpModule, HttpService } from '@nestjs/axios';\nimport * as Joi from 'joi';\nimport { CertEntity } from './entities/cert.entity';\nimport { Repository } from 'typeorm/repository/Repository';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { PinoLogger } from 'nestjs-pino';\n\nexport const KEY_VALIDATION_SCHEMA = {\n    KM_TYPE: Joi.string().valid('file', 'vault').default('file'),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n};\n\n@Global()\n@Module({})\nexport class KeyModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: KeyModule,\n            imports: [\n                HttpModule,\n                ConfigModule,\n                CryptoModule,\n                TypeOrmModule.forFeature([CertEntity]),\n            ],\n            providers: [\n                {\n                    provide: 'KeyService',\n                    useFactory: (\n                        configService: ConfigService,\n                        httpService: HttpService,\n                        cryptoService: CryptoImplementationService,\n                        certRepository: Repository,\n                        logger: PinoLogger,\n                    ) => {\n                        const kmType = configService.get(\n                            'KM_TYPE',\n                        );\n                        if (kmType === 'vault') {\n                            return new VaultKeyService(\n                                httpService,\n                                configService,\n                                cryptoService,\n                                certRepository,\n                            );\n                        }\n\n                        return new FileSystemKeyService(\n                            configService,\n                            cryptoService,\n                            certRepository,\n                            logger,\n                        );\n                    },\n                    inject: [\n                        ConfigService,\n                        HttpService,\n                        CryptoImplementationService,\n                        getRepositoryToken(CertEntity),\n                        PinoLogger,\n                    ],\n                },\n            ],\n            exports: ['KeyService'],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyObj.html":{"url":"classes/KeyObj.html","title":"class - KeyObj","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyObj\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a key entity with its unique identifier, public key, and certificate.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crt\n                            \n                            \n                                id\n                            \n                            \n                                publicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/key.service.ts:24\n                        \n                    \n\n            \n                \n                    Certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/key.service.ts:16\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publicKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JWK\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/key.service.ts:20\n                        \n                    \n\n            \n                \n                    Public key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Signer } from '@sd-jwt/types';\nimport { JWK, JWTPayload, JoseHeaderParameters } from 'jose';\nimport { KeyImportDto } from './dto/key-import.dto';\nimport { ConfigService } from '@nestjs/config';\nimport { Repository } from 'typeorm';\nimport { CertEntity, CertificateType } from './entities/cert.entity';\nimport { ConflictException } from '@nestjs/common';\n\n/**\n * Represents a key entity with its unique identifier, public key, and certificate.\n */\nexport class KeyObj {\n    /**\n     * Unique identifier for the key.\n     */\n    id: string;\n    /**\n     * Public key in JWK format.\n     */\n    publicKey: JWK;\n    /**\n     * Certificate in PEM format.\n     */\n    crt: string;\n}\n\n/**\n * Generic interface for a key service\n */\nexport abstract class KeyService {\n    constructor(\n        protected configService: ConfigService,\n        protected certRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the key service\n     * @param tenantId\n     * @returns key id of the initialized key.\n     */\n    abstract init(tenantId): Promise;\n\n    /**\n     * Creates a new keypair\n     * @param tenantId\n     * @return key id of the generated key.\n     */\n    abstract create(tenantId): Promise;\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     */\n    abstract import(tenantId: string, body: KeyImportDto): Promise;\n\n    /**\n     * Get the callback for the signer function\n     * @param tenantId\n     */\n    abstract signer(tenantId: string, keyId?: string): Promise;\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    abstract getKid(tenantId: string, type?: CertificateType): Promise;\n\n    abstract getKeys(tenantId: string): Promise;\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    abstract getPublicKey(\n        type: 'jwk',\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: 'pem',\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: 'pem' | 'jwk',\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    //TODO: this can be handled via the signer callback\n    abstract signJWT(\n        payload: JWTPayload,\n        header: JoseHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    /**\n     * Get the certificate for the given key id.\n     * @param tenantId\n     * @param keyId\n     * @returns\n     */\n    protected getCertificate(tenantId: string, keyId: string): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                keyId,\n            })\n            .then(\n                (cert) => cert.crt,\n                () => {\n                    throw new ConflictException('Certificate not found');\n                },\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyService.html":{"url":"classes/KeyService.html","title":"class - KeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface for a key service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                create\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                            \n                                    Abstract\n                                getKeys\n                            \n                            \n                                    Abstract\n                                getKid\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                import\n                            \n                            \n                                    Abstract\n                                init\n                            \n                            \n                                    Abstract\n                                signer\n                            \n                            \n                                    Abstract\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, certRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/key.service.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the generated key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:105\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeys(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKid(tenantId: string, type?: CertificateType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                            CertificateType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Import a key into the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Initialize the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the initialized key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Get the callback for the signer function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JoseHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JoseHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Signer } from '@sd-jwt/types';\nimport { JWK, JWTPayload, JoseHeaderParameters } from 'jose';\nimport { KeyImportDto } from './dto/key-import.dto';\nimport { ConfigService } from '@nestjs/config';\nimport { Repository } from 'typeorm';\nimport { CertEntity, CertificateType } from './entities/cert.entity';\nimport { ConflictException } from '@nestjs/common';\n\n/**\n * Represents a key entity with its unique identifier, public key, and certificate.\n */\nexport class KeyObj {\n    /**\n     * Unique identifier for the key.\n     */\n    id: string;\n    /**\n     * Public key in JWK format.\n     */\n    publicKey: JWK;\n    /**\n     * Certificate in PEM format.\n     */\n    crt: string;\n}\n\n/**\n * Generic interface for a key service\n */\nexport abstract class KeyService {\n    constructor(\n        protected configService: ConfigService,\n        protected certRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the key service\n     * @param tenantId\n     * @returns key id of the initialized key.\n     */\n    abstract init(tenantId): Promise;\n\n    /**\n     * Creates a new keypair\n     * @param tenantId\n     * @return key id of the generated key.\n     */\n    abstract create(tenantId): Promise;\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     */\n    abstract import(tenantId: string, body: KeyImportDto): Promise;\n\n    /**\n     * Get the callback for the signer function\n     * @param tenantId\n     */\n    abstract signer(tenantId: string, keyId?: string): Promise;\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    abstract getKid(tenantId: string, type?: CertificateType): Promise;\n\n    abstract getKeys(tenantId: string): Promise;\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    abstract getPublicKey(\n        type: 'jwk',\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: 'pem',\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: 'pem' | 'jwk',\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    //TODO: this can be handled via the signer callback\n    abstract signJWT(\n        payload: JWTPayload,\n        header: JoseHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    /**\n     * Get the certificate for the given key id.\n     * @param tenantId\n     * @param keyId\n     * @returns\n     */\n    protected getCertificate(tenantId: string, keyId: string): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                keyId,\n            })\n            .then(\n                (cert) => cert.crt,\n                () => {\n                    throw new ConflictException('Certificate not found');\n                },\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerConfigService.html":{"url":"injectables/LoggerConfigService.html","title":"injectable - LoggerConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing logger configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConfiguration\n                            \n                            \n                                getLogFormat\n                            \n                            \n                                getLogLevel\n                            \n                            \n                                isDebugModeEnabled\n                            \n                            \n                                isHttpLoggerEnabled\n                            \n                            \n                                isSessionLoggerEnabled\n                            \n                            \n                                    Private\n                                loadConfiguration\n                            \n                            \n                                    Private\n                                parseLogLevel\n                            \n                            \n                                reloadConfiguration\n                            \n                            \n                                shouldEnableAutoLogging\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConfiguration\n                        \n                    \n                \n            \n            \n                \ngetConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         LoggerConfiguration\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogFormat\n                        \n                    \n                \n            \n            \n                \ngetLogFormat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     \"json\" | \"pretty\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogLevel\n                        \n                    \n                \n            \n            \n                \ngetLogLevel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     LogLevel\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDebugModeEnabled\n                        \n                    \n                \n            \n            \n                \nisDebugModeEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHttpLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisHttpLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSessionLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisSessionLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseLogLevel\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLogLevel(level: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                level\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     LogLevel\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reloadConfiguration\n                        \n                    \n                \n            \n            \n                \nreloadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Hot reload configuration from environment\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shouldEnableAutoLogging\n                        \n                    \n                \n            \n            \n                \nshouldEnableAutoLogging()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Check if automatic HTTP request/response logging should be enabled\nThis is used by the LoggerModule configuration\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoggerConfiguration\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LogLevel } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: 'json' | 'pretty';\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get('LOG_LEVEL', 'info'),\n            ),\n            enableSessionLogger: this.configService.get(\n                'LOG_ENABLE_SESSION_LOGGER',\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                'LOG_ENABLE_HTTP_LOGGER',\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                'LOG_DEBUG_MODE',\n                false,\n            ),\n            logFormat: this.configService.get(\n                'LOG_FORMAT',\n                'pretty',\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: 'verbose',\n            debug: 'debug',\n            log: 'log',\n            warn: 'warn',\n            error: 'error',\n            fatal: 'fatal',\n        };\n        return levels[level.toLowerCase()] || 'log';\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): 'json' | 'pretty' {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerConfiguration.html":{"url":"interfaces/LoggerConfiguration.html","title":"interface - LoggerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoggerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            enableDebugMode\n                                        \n                                \n                                \n                                        \n                                            enableHttpLogger\n                                        \n                                \n                                \n                                        \n                                            enableSessionLogger\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            logFormat\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableDebugMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDebugMode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableHttpLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableHttpLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableSessionLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableSessionLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:     LogLevel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     LogLevel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logFormat:     \"json\" | \"pretty\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"json\" | \"pretty\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, LogLevel } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: 'json' | 'pretty';\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get('LOG_LEVEL', 'info'),\n            ),\n            enableSessionLogger: this.configService.get(\n                'LOG_ENABLE_SESSION_LOGGER',\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                'LOG_ENABLE_HTTP_LOGGER',\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                'LOG_DEBUG_MODE',\n                false,\n            ),\n            logFormat: this.configService.get(\n                'LOG_FORMAT',\n                'pretty',\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: 'verbose',\n            debug: 'debug',\n            log: 'log',\n            warn: 'warn',\n            error: 'error',\n            fatal: 'fatal',\n        };\n        return levels[level.toLowerCase()] || 'log';\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): 'json' | 'pretty' {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetricModule.html":{"url":"modules/MetricModule.html","title":"module - MetricModule","body":"\n                   \n\n\n\n\n    Modules\n    MetricModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/metric/metric.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrometheusModule } from '@willsoto/nestjs-prometheus';\n\n@Module({\n    imports: [\n        //TODO: add a guard to protect the metrics endpoint\n        PrometheusModule.register({\n            defaultMetrics: {\n                enabled: false,\n            },\n        }),\n    ],\n})\nexport class MetricModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationRequestDto.html":{"url":"classes/NotificationRequestDto.html","title":"class - NotificationRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/notification-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                event\n                            \n                            \n                                    \n                                notification_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEvent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['credential_accepted', 'credential_revoked'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notification_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotificationEvent } from '@openid4vc/openid4vci';\nimport { IsEnum, IsString } from 'class-validator';\n\nexport class NotificationRequestDto {\n    @IsString()\n    notification_id: string;\n\n    @IsEnum(['credential_accepted', 'credential_revoked'])\n    event: NotificationEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Oauth2AuthorizationServerResponse.html":{"url":"classes/Oauth2AuthorizationServerResponse.html","title":"class - Oauth2AuthorizationServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Oauth2AuthorizationServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/oauth-authorization-server-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response from an OAuth2 authorization server.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_challenge_endpoint\n                            \n                            \n                                authorization_endpoint\n                            \n                            \n                                code_challenge_methods_supported\n                            \n                            \n                                dpop_signing_alg_values_supported\n                            \n                            \n                                issuer\n                            \n                            \n                                jwks_uri\n                            \n                            \n                                pushed_authorization_request_endpoint\n                            \n                            \n                                require_pushed_authorization_requests\n                            \n                            \n                                token_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_challenge_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:37\n                        \n                    \n\n            \n                \n                    The URL of the authorization challenge endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's authorization endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code_challenge_methods_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    List of supported algorithms to sign the challenge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dpop_signing_alg_values_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    List of supported algorithms for DPoP signing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwks_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:17\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushed_authorization_request_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The URL of the pushed authorization request endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require_pushed_authorization_requests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:29\n                        \n                    \n\n            \n                \n                    Indicates whether the server requires pushed authorization requests.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's token endpoint.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Oauth2AuthorizationServerResponse {\n    issuer: string;\n    /**\n     * The URL of the OAuth2 authorization server's token endpoint.\n     */\n    token_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's authorization endpoint.\n     */\n    authorization_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n     */\n    jwks_uri: string;\n    /**\n     * List of supported algorithms to sign the challenge\n     */\n    code_challenge_methods_supported: string[];\n    /**\n     * List of supported algorithms for DPoP signing.\n     */\n    dpop_signing_alg_values_supported: string[];\n    /**\n     * Indicates whether the server requires pushed authorization requests.\n     */\n    require_pushed_authorization_requests: boolean;\n    /**\n     * The URL of the pushed authorization request endpoint.\n     */\n    pushed_authorization_request_endpoint: string;\n    /**\n     * The URL of the authorization challenge endpoint.\n     */\n    authorization_challenge_endpoint: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferRequestDto.html":{"url":"classes/OfferRequestDto.html","title":"class - OfferRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationIds\n                            \n                            \n                                    \n                                issuanceId\n                            \n                            \n                                    \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:33\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'qrcode', description: 'The type of response expected for the offer request.'})@IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:20\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n} from 'class-validator';\nimport { ResponseType } from '../../../verifier/oid4vp/dto/presentation-request.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class OfferRequestDto {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: 'qrcode',\n        description: 'The type of response expected for the offer request.',\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * @example \"pid\"\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * @example [\"pid\"]\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    @IsObject()\n    @IsOptional()\n    values?: { [key: string]: Record };\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferResponse.html":{"url":"classes/OfferResponse.html","title":"class - OfferResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                session\n                            \n                            \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n} from 'class-validator';\nimport { ResponseType } from '../../../verifier/oid4vp/dto/presentation-request.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class OfferRequestDto {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: 'qrcode',\n        description: 'The type of response expected for the offer request.',\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * @example \"pid\"\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * @example [\"pid\"]\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    @IsObject()\n    @IsOptional()\n    values?: { [key: string]: Record };\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vciController.html":{"url":"controllers/Oid4vciController.html","title":"controller - Oid4vciController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vciController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/vci\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credential\n                            \n                            \n                                    \n                                    \n                                notifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credential\n                        \n                    \n                \n            \n            \n                \n                        \n                    credential(req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('credential')@SessionLogger('session', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Endpoint to issue credentials\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        notifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    notifications(body: NotificationRequestDto, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('notification')@SessionLogger('notification_id', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:52\n                        \n                    \n\n\n            \n                \n                        Notification endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Post,\n    Req,\n    UseGuards,\n    UseInterceptors,\n} from '@nestjs/common';\nimport type { CredentialResponse } from '@openid4vc/openid4vci';\nimport type { Request } from 'express';\nimport { Oid4vciService } from '../../issuer/oid4vci/oid4vci.service';\nimport { NotificationRequestDto } from './dto/notification-request.dto';\nimport { SessionLogger } from '../../utils/logger//session-logger.decorator';\nimport { SessionLoggerInterceptor } from '../../utils/logger/session-logger.interceptor';\nimport { SessionGuard } from '../../session/session.guard';\nimport { SessionEntity } from '../../session/session.decorator';\nimport { Session } from '../../session/entities/session.entity';\nimport { ApiExcludeController, ApiParam } from '@nestjs/swagger';\n\n/**\n * Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n */\n@ApiParam({ name: 'session', required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== 'true')\n@UseGuards(SessionGuard)\n@Controller(':session/vci')\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vciController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Endpoint to issue credentials\n     * @param req\n     * @returns\n     */\n    @Post('credential')\n    @SessionLogger('session', 'OID4VCI')\n    credential(\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        return this.oid4vciService.getCredential(req, session);\n    }\n\n    /**\n     * Notification endpoint\n     * @param body\n     * @returns\n     */\n    @Post('notification')\n    @SessionLogger('notification_id', 'OID4VCI')\n    notifications(\n        @Body() body: NotificationRequestDto,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vciService.handleNotification(req, body, session);\n    }\n\n    //TODO: this endpoint may be relevant for the wallet attestation.\n    /* @Get('session')\n  session() {\n    console.log('Session requested');\n    //TODO store session and created at\n    const session = randomUUID();\n    return {\n      session_id: session,\n    };\n  } */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vciService.html":{"url":"injectables/Oid4vciService.html","title":"injectable - Oid4vciService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vciService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                credentialsService\n                            \n                            \n                                    Private\n                                issuer\n                            \n                            \n                                resourceServer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOffer\n                            \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                handleNotification\n                            \n                            \n                                    Async\n                                issuerMetadata\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authzService: AuthorizeService, cryptoService: CryptoService, credentialsService: CredentialsService, configService: ConfigService, sessionService: SessionService, sessionLogger: SessionLoggerService, issuanceService: IssuanceService, webhookService: WebhookService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authzService\n                                                  \n                                                        \n                                                                        AuthorizeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsService\n                                                  \n                                                        \n                                                                        CredentialsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webhookService\n                                                  \n                                                        \n                                                                        WebhookService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOffer(body: OfferRequestDto, user: TokenPayload, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            OfferRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(req: Request, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:186\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNotification(req: Request, body: NotificationRequestDto, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:303\n                        \n                    \n\n\n            \n                \n                        Store the notification in the session based on the notitification id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        credentialsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialsService\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Openid4vciIssuer\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resourceServer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Oauth2ResourceServer\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:43\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    ConflictException,\n    Injectable,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type HttpMethod,\n    Oauth2ResourceServer,\n    SupportedAuthenticationScheme,\n    authorizationCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport {\n    type CredentialResponse,\n    type IssuerMetadataResult,\n    Openid4vciDraftVersion,\n    Openid4vciIssuer,\n} from '@openid4vc/openid4vci';\nimport type { Request } from 'express';\nimport { CredentialsService } from '../credentials/credentials.service';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { AuthorizeService } from '../authorize/authorize.service';\nimport { getHeadersFromRequest } from './util';\nimport { readFileSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { SessionService } from '../../session/session.service';\nimport { v4 } from 'uuid';\nimport { OfferRequestDto, OfferResponse } from './dto/offer-request.dto';\nimport { NotificationRequestDto } from './dto/notification-request.dto';\nimport { SessionLoggerService } from '../../utils/logger/session-logger.service';\nimport { SessionLogContext } from '../../utils/logger/session-logger-context';\nimport { TokenPayload } from '../../auth/token.decorator';\nimport { IssuanceService } from '../issuance/issuance.service';\nimport { WebhookService } from '../../utils/webhook/webhook.service';\nimport { Session, SessionStatus } from '../../session/entities/session.entity';\n\n@Injectable()\nexport class Oid4vciService implements OnModuleInit {\n    private issuer: Openid4vciIssuer;\n\n    resourceServer: Oauth2ResourceServer;\n\n    constructor(\n        private readonly authzService: AuthorizeService,\n        private readonly cryptoService: CryptoService,\n        public readonly credentialsService: CredentialsService,\n        private readonly configService: ConfigService,\n        private readonly sessionService: SessionService,\n        private readonly sessionLogger: SessionLoggerService,\n        private readonly issuanceService: IssuanceService,\n        private readonly webhookService: WebhookService,\n    ) {}\n    onModuleInit() {\n        //TODO: align for tenant\n        const callbacks = this.cryptoService.getCallbackContext('');\n        this.issuer = new Openid4vciIssuer({\n            callbacks,\n        });\n        this.resourceServer = new Oauth2ResourceServer({\n            callbacks,\n        });\n    }\n\n    async issuerMetadata(session: Session): Promise {\n        const credential_issuer = `${this.configService.getOrThrow(\n            'PUBLIC_URL',\n        )}/${session.id}`;\n\n        const display = JSON.parse(\n            readFileSync(\n                join(\n                    this.configService.getOrThrow('FOLDER'),\n                    session.tenantId,\n                    'display.json',\n                ),\n                'utf-8',\n            ),\n        );\n\n        const authorizationServerMetadata =\n            this.authzService.authzMetadata(session);\n\n        let credentialIssuer = this.issuer.createCredentialIssuerMetadata({\n            credential_issuer,\n            credential_configurations_supported:\n                await this.credentialsService.getCredentialConfigurationSupported(\n                    session.tenantId,\n                ),\n            credential_endpoint: `${credential_issuer}/vci/credential`,\n            authorization_servers: [authorizationServerMetadata.issuer],\n            authorization_server: authorizationServerMetadata.issuer,\n            notification_endpoint: `${credential_issuer}/vci/notification`,\n            batch_credential_issuance: {\n                batch_size: 1,\n            },\n            display,\n        });\n\n        //replace placeholders in the issuer metadata\n        credentialIssuer = JSON.parse(\n            JSON.stringify(credentialIssuer).replace(\n                //g,\n                this.configService.getOrThrow('PUBLIC_URL'),\n            ),\n        );\n\n        return {\n            credentialIssuer,\n            authorizationServers: [authorizationServerMetadata],\n            originalDraftVersion: Openid4vciDraftVersion.Draft14,\n        } as const satisfies IssuerMetadataResult;\n    }\n\n    async createOffer(\n        body: OfferRequestDto,\n        user: TokenPayload,\n        tenantId: string,\n    ): Promise {\n        const issuanceConfig = await this.issuanceService\n            .getIssuanceConfigurationById(body.issuanceId, tenantId)\n            .catch(() => {\n                throw new BadRequestException(\n                    `Issuance configuration with ID ${body.issuanceId} not found`,\n                );\n            });\n        const credentialConfigurationIds =\n            body.credentialConfigurationIds ||\n            issuanceConfig.credentialIssuanceBindings.map(\n                (config) => config.credentialConfigId,\n            );\n\n        let authorization_code: string | undefined;\n        let grants: any;\n        const issuer_state = v4();\n        if (issuanceConfig.authenticationConfig.method === 'none') {\n            authorization_code = v4();\n            grants = {\n                [preAuthorizedCodeGrantIdentifier]: {\n                    'pre-authorized_code': authorization_code,\n                },\n            };\n        } else {\n            grants = {\n                [authorizationCodeGrantIdentifier]: {\n                    issuer_state,\n                },\n            };\n        }\n\n        const session = await this.sessionService.create({\n            id: issuer_state,\n            credentialPayload: body,\n            tenantId: user.sub,\n            issuanceId: body.issuanceId,\n            authorization_code,\n        });\n\n        const issuerMetadata = await this.issuerMetadata(session);\n\n        return this.issuer\n            .createCredentialOffer({\n                credentialConfigurationIds,\n                grants,\n                issuerMetadata,\n            })\n            .then(\n                async (offer) => {\n                    await this.sessionService.add(issuer_state, {\n                        offer: offer.credentialOfferObject as any,\n                    });\n                    return {\n                        session: issuer_state,\n                        uri: offer.credentialOffer,\n                    } as OfferResponse;\n                },\n                () => {\n                    throw new ConflictException(\n                        `Invalid credential configuration ID`,\n                    );\n                },\n            );\n    }\n\n    async getCredential(\n        req: Request,\n        session: Session,\n    ): Promise {\n        const issuerMetadata = await this.issuerMetadata(session);\n        const parsedCredentialRequest = this.issuer.parseCredentialRequest({\n            issuerMetadata,\n            credentialRequest: req.body as Record,\n        });\n\n        if (parsedCredentialRequest?.proofs?.jwt === undefined) {\n            throw new Error('Invalid credential request');\n        }\n\n        const protocol = new URL(\n            this.configService.getOrThrow('PUBLIC_URL'),\n        ).protocol;\n\n        const headers = getHeadersFromRequest(req);\n        const { tokenPayload } =\n            await this.resourceServer.verifyResourceRequest({\n                authorizationServers: issuerMetadata.authorizationServers,\n                request: {\n                    url: `${protocol}//${req.host}${req.url}`,\n                    method: req.method as HttpMethod,\n                    headers,\n                },\n                resourceServer:\n                    issuerMetadata.credentialIssuer.credential_issuer,\n                allowedAuthenticationSchemes: [\n                    SupportedAuthenticationScheme.DPoP,\n                ],\n            });\n\n        if (tokenPayload.sub !== session.id) {\n            throw new BadRequestException('Session not found');\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId: session.tenantId,\n            flowType: 'OID4VCI',\n            stage: 'credential_request',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            credentialConfigurationId:\n                parsedCredentialRequest.credentialConfigurationId,\n            proofCount: parsedCredentialRequest.proofs?.jwt?.length || 0,\n        });\n\n        try {\n            const credentials: string[] = [];\n            for (const jwt of parsedCredentialRequest.proofs.jwt) {\n                const verifiedProof =\n                    await this.issuer.verifyCredentialRequestJwtProof({\n                        //check if this is correct or if the passed nonce is validated.\n                        expectedNonce: tokenPayload.nonce as string,\n                        issuerMetadata: await this.issuerMetadata(session),\n                        jwt,\n                    });\n                const cnf = verifiedProof.signer.publicJwk;\n                const cred = await this.credentialsService.getCredential(\n                    parsedCredentialRequest.credentialConfigurationId as string,\n                    cnf as any,\n                    session,\n                );\n                credentials.push(cred);\n\n                this.sessionLogger.logCredentialIssuance(\n                    logContext,\n                    parsedCredentialRequest.credentialConfigurationId as string,\n                    {\n                        credentialSize: cred.length,\n                        proofVerified: true,\n                    },\n                );\n            }\n\n            const notificationId = v4();\n            session.notifications.push({\n                id: notificationId,\n                credentialConfigurationId:\n                    parsedCredentialRequest.credentialConfigurationId as string,\n            });\n            await this.sessionService.add(session.id, {\n                notifications: session.notifications,\n            });\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialsIssued: credentials.length,\n                notificationId,\n            });\n\n            return this.issuer.createCredentialResponse({\n                credentials,\n                credentialRequest: parsedCredentialRequest,\n                cNonce: tokenPayload.nonce as string,\n                cNonceExpiresInSeconds: 3600,\n                //this should be stored in the session in case this endpoint is requested multiple times, but the response is differnt.\n                notificationId,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                credentialConfigurationId:\n                    parsedCredentialRequest.credentialConfigurationId,\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Store the notification in the session based on the notitification id.\n     * @param req\n     * @param body\n     */\n    async handleNotification(\n        req: Request,\n        body: NotificationRequestDto,\n        session: Session,\n    ) {\n        const issuerMetadata = await this.issuerMetadata(session);\n        const headers = getHeadersFromRequest(req);\n        const protocol = new URL(\n            this.configService.getOrThrow('PUBLIC_URL'),\n        ).protocol;\n        const { tokenPayload } =\n            await this.resourceServer.verifyResourceRequest({\n                authorizationServers: issuerMetadata.authorizationServers,\n                request: {\n                    url: `${protocol}//${req.host}${req.url}`,\n                    method: req.method as HttpMethod,\n                    headers,\n                },\n                resourceServer:\n                    issuerMetadata.credentialIssuer.credential_issuer,\n                allowedAuthenticationSchemes: [\n                    SupportedAuthenticationScheme.DPoP,\n                ],\n            });\n\n        if (session.id !== tokenPayload.sub) {\n            throw new BadRequestException('Session not found');\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId: session.tenantId,\n            flowType: 'OID4VCI',\n            stage: 'notification',\n        };\n\n        try {\n            const index = session.notifications.findIndex(\n                (notification) => notification.id === body.notification_id,\n            );\n            if (index === -1) {\n                throw new BadRequestException(\n                    'No notifications found in session',\n                );\n            }\n\n            session.notifications[index].event = body.event;\n            await this.sessionService.add(session.id, {\n                notifications: session.notifications,\n            });\n\n            this.sessionLogger.logNotification(logContext, body.event || '', {\n                notificationId: body.notification_id,\n                notificationIndex: index,\n            });\n\n            //check for the webhook and send it.\n            //TODO: in case multiple batches are included, check if each time the notification endpoint is triggered. Also when multiple credentials got offered in the request, try to bundle them maybe?\n            if (session.notifyWebhook) {\n                await this.webhookService.sendWebhookNotification(\n                    session,\n                    logContext,\n                    session.notifications[index],\n                );\n            }\n            const state: SessionStatus =\n                body.event === 'credential_accepted' ? 'completed' : 'failed';\n            await this.sessionService.setState(session, state);\n        } catch (error) {\n            this.sessionLogger.logSessionError(\n                logContext,\n                error as Error,\n                'Failed to handle notification',\n                {\n                    notificationId: body.notification_id,\n                },\n            );\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vpController.html":{"url":"controllers/Oid4vpController.html","title":"controller - Oid4vpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                oid4vp\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getRequestWithSession\n                            \n                            \n                                    \n                                    \n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getRequestWithSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRequestWithSession(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('request/:session')@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        Returns the authorization request for a given requestId and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('response/:session')@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Endpoint to receive the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Post,\n    UseGuards,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { Oid4vpService } from './oid4vp.service';\nimport { AuthorizationResponse } from './dto/authorization-response.dto';\nimport { SessionLogger } from '../../utils/logger/session-logger.decorator';\nimport { SessionLoggerInterceptor } from '../../utils/logger/session-logger.interceptor';\nimport { SessionEntity } from '../../session/session.decorator';\nimport { Session } from '../../session/entities/session.entity';\nimport { SessionGuard } from '../../session/session.guard';\nimport { ApiExcludeController, ApiParam } from '@nestjs/swagger';\n\n/**\n * Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n */\n@Controller('oid4vp')\n@UseGuards(SessionGuard)\n@UseInterceptors(SessionLoggerInterceptor)\n@ApiParam({ name: 'session', required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== 'true')\nexport class Oid4vpController {\n    /**\n     * Constructor for the Oid4vpController.\n     * @param oid4vpService - Instance of Oid4vpService for handling OID4VP operations.\n     */\n    constructor(private readonly oid4vpService: Oid4vpService) {}\n\n    /**\n     * Returns the authorization request for a given requestId and session.\n     * @param requestId\n     * @param session\n     * @returns\n     */\n    //TODO: we just need the session that will include the requestId.\n    @Get('request/:session')\n    @SessionLogger('session', 'OID4VP')\n    getRequestWithSession(@SessionEntity() session: Session) {\n        return this.oid4vpService.createAuthorizationRequest(session);\n    }\n\n    /**\n     * Endpoint to receive the response from the wallet.\n     * @param body\n     * @returns\n     */\n    @Post('response/:session')\n    @SessionLogger('session', 'OID4VP')\n    getResponse(\n        @Body() body: AuthorizationResponse,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vpService.getResponse(body, session);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/Oid4vpModule.html":{"url":"modules/Oid4vpModule.html","title":"module - Oid4vpModule","body":"\n                   \n\n\n\n\n    Modules\n    Oid4vpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nOid4vpModule -->\n\nPresentationsModule->Oid4vpModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nOid4vpModule -->\n\nRegistrarModule->Oid4vpModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Oid4vpService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Oid4vpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { Oid4vpService } from './oid4vp.service';\nimport { Oid4vpController } from './oid4vp.controller';\nimport { CryptoModule } from '../../crypto/crypto.module';\nimport { RegistrarModule } from '../../registrar/registrar.module';\nimport { PresentationsModule } from '../presentations/presentations.module';\nimport { SessionModule } from '../../session/session.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { SessionLoggerInterceptor } from '../../utils/logger/session-logger.interceptor';\nimport { SessionLoggerService } from '../../utils/logger/session-logger.service';\nimport { WebhookService } from '../../utils/webhook/webhook.service';\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        PresentationsModule,\n        SessionModule,\n        HttpModule,\n    ],\n    controllers: [Oid4vpController],\n    providers: [\n        Oid4vpService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        WebhookService,\n    ],\n    exports: [Oid4vpService],\n})\nexport class Oid4vpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vpService.html":{"url":"injectables/Oid4vpService.html","title":"injectable - Oid4vpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuthorizationRequest\n                            \n                            \n                                    Async\n                                createRequest\n                            \n                            \n                                    Async\n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, encryptionService: EncryptionService, configService: ConfigService, registrarService: RegistrarService, presentationsService: PresentationsService, sessionService: SessionService, sessionLogger: SessionLoggerService, webhookService: WebhookService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/oid4vp/oid4vp.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webhookService\n                                                  \n                                                        \n                                                                        WebhookService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAuthorizationRequest(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Creates an authorization request for the OID4VP flow.\nThis method generates a JWT that includes the necessary parameters for the authorization request.\nIt initializes the session logging context and logs the start of the flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRequest(requestId: string, values: PresentationRequestOptions, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Creates a request for the OID4VP flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            PresentationRequestOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:252\n                        \n                    \n\n\n            \n                \n                        Processes the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { randomUUID } from 'node:crypto';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { AuthorizationResponse } from './dto/authorization-response.dto';\nimport { RegistrarService } from '../../registrar/registrar.service';\nimport { PresentationsService } from '../presentations/presentations.service';\nimport { AuthResponse } from '../presentations/dto/auth-response.dto';\nimport { EncryptionService } from '../../crypto/encryption/encryption.service';\nimport { v4 } from 'uuid';\nimport { SessionService } from '../../session/session.service';\nimport { OfferResponse } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport { PresentationRequestOptions } from './dto/presentation-request-options.dto';\nimport { WebhookService } from '../../utils/webhook/webhook.service';\nimport { SessionLoggerService } from '../../utils/logger/session-logger.service';\nimport { SessionLogContext } from '../../utils/logger/session-logger-context';\nimport { Session } from '../../session/entities/session.entity';\n\n@Injectable()\nexport class Oid4vpService {\n    constructor(\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private configService: ConfigService,\n        private registrarService: RegistrarService,\n        private presentationsService: PresentationsService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n        private webhookService: WebhookService,\n    ) {}\n\n    /**\n     * Creates an authorization request for the OID4VP flow.\n     * This method generates a JWT that includes the necessary parameters for the authorization request.\n     * It initializes the session logging context and logs the start of the flow.\n     * @param requestId\n     * @param tenantId\n     * @param auth_session\n     * @returns\n     */\n    async createAuthorizationRequest(session: Session): Promise {\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId: session.tenantId,\n            flowType: 'OID4VP',\n            stage: 'authorization_request',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            requestId: session.requestId,\n            action: 'create_authorization_request',\n        });\n\n        try {\n            const host = this.configService.getOrThrow('PUBLIC_URL');\n\n            const values =\n                await this.presentationsService.getPresentationConfig(\n                    session.requestId!,\n                    session.tenantId,\n                );\n            let regCert: string | undefined = undefined;\n\n            const dcql_query = JSON.parse(\n                JSON.stringify(values.dcql_query).replace(\n                    //g,\n                    host,\n                ),\n            );\n\n            if (this.registrarService.isEnabled()) {\n                const registrationCert = JSON.parse(\n                    JSON.stringify(values.registrationCert).replace(\n                        //g,\n                        host,\n                    ),\n                );\n                regCert =\n                    await this.registrarService.addRegistrationCertificate(\n                        registrationCert,\n                        dcql_query,\n                        session.requestId!,\n                        session.tenantId,\n                    );\n            }\n            const nonce = randomUUID();\n            await this.sessionService.add(session.id, {\n                vp_nonce: nonce,\n            });\n\n            this.sessionLogger.logAuthorizationRequest(logContext, {\n                requestId: session.requestId,\n                nonce,\n                regCert,\n                dcqlQueryCount: Array.isArray(dcql_query)\n                    ? dcql_query.length\n                    : 1,\n            });\n\n            const hostname = new URL(\n                this.configService.getOrThrow('PUBLIC_URL'),\n            ).hostname;\n\n            const request = {\n                payload: {\n                    response_type: 'vp_token',\n                    client_id: 'x509_san_dns:' + hostname,\n                    response_uri: `${host}/oid4vp/response/${session.id}`,\n                    response_mode: 'direct_post.jwt',\n                    nonce,\n                    dcql_query,\n                    client_metadata: {\n                        jwks: {\n                            keys: [\n                                this.encryptionService.getEncryptionPublicKey(\n                                    session.tenantId,\n                                ),\n                            ],\n                        },\n                        vp_formats: {\n                            mso_mdoc: {\n                                alg: ['ES256'],\n                            },\n                            'dc+sd-jwt': {\n                                'kb-jwt_alg_values': ['ES256'],\n                                'sd-jwt_alg_values': ['ES256'],\n                            },\n                        },\n                        authorization_encrypted_response_alg: 'ECDH-ES',\n                        authorization_encrypted_response_enc: 'A128GCM',\n                        client_name:\n                            this.configService.getOrThrow('RP_NAME'),\n                        response_types_supported: ['vp_token'],\n                    },\n                    state: session.id,\n                    aud: host,\n                    exp: Math.floor(Date.now() / 1000) + 60 * 5,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    verifier_attestations: regCert\n                        ? [\n                              {\n                                  format: 'jwt',\n                                  data: regCert,\n                              },\n                          ]\n                        : undefined,\n                },\n                header: {\n                    typ: 'oauth-authz-req+jwt',\n                },\n            };\n\n            const accessCert = await this.cryptoService.getCertChain(\n                'access',\n                session.tenantId,\n            );\n\n            const header = {\n                ...request.header,\n                alg: 'ES256',\n                x5c: accessCert,\n            };\n\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                'access',\n            );\n            const signedJwt = await this.cryptoService.signJwt(\n                header,\n                request.payload,\n                session.tenantId,\n                keyId,\n            );\n\n            this.sessionLogger.logSession(\n                logContext,\n                'Authorization request created successfully',\n                {\n                    signedJwtLength: signedJwt.length,\n                    certificateChainLength: accessCert?.length || 0,\n                },\n            );\n\n            return signedJwt;\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                requestId: session.requestId,\n                action: 'create_authorization_request',\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Creates a request for the OID4VP flow.\n     * @param requestId\n     * @param values\n     * @param tenantId\n     * @returns\n     */\n    async createRequest(\n        requestId: string,\n        values: PresentationRequestOptions,\n        tenantId: string,\n    ): Promise {\n        const presentationConfig =\n            await this.presentationsService.getPresentationConfig(\n                requestId,\n                tenantId,\n            );\n\n        if (!values.session) {\n            values.session = v4();\n            await this.sessionService.create({\n                id: values.session,\n                webhook: values.webhook ?? presentationConfig.webhook,\n                tenantId,\n                requestId,\n            });\n        } else {\n            await this.sessionService.add(values.session, {\n                webhook: values.webhook ?? presentationConfig.webhook,\n            });\n        }\n\n        const hostname = new URL(\n            this.configService.getOrThrow('PUBLIC_URL'),\n        ).hostname;\n        const params = {\n            client_id: `x509_san_dns:${hostname}`,\n            request_uri: `${this.configService.getOrThrow('PUBLIC_URL')}/oid4vp/request/${values.session}`,\n        };\n        const queryString = Object.entries(params)\n            .map(\n                ([key, value]) =>\n                    `${encodeURIComponent(key)}=${encodeURIComponent(value)}`,\n            )\n            .join('&');\n\n        return {\n            uri: queryString,\n            session: values.session,\n        };\n    }\n\n    /**\n     * Processes the response from the wallet.\n     * @param body\n     * @param tenantId\n     */\n    async getResponse(body: AuthorizationResponse, session: Session) {\n        const res = await this.encryptionService.decryptJwe(\n            body.response,\n            session.tenantId,\n        );\n        if (!res.state) {\n            throw new ConflictException('No state found in the response');\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: res.state,\n            tenantId: session.tenantId,\n            flowType: 'OID4VP',\n            stage: 'response_processing',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            action: 'process_presentation_response',\n            hasWebhook: !!session.webhook,\n        });\n\n        try {\n            //TODO: load required fields from the config\n            const credentials = await this.presentationsService.parseResponse(\n                res,\n                [],\n                session.vp_nonce as string,\n            );\n\n            this.sessionLogger.logCredentialVerification(\n                logContext,\n                !!credentials && credentials.length > 0,\n                {\n                    credentialCount: credentials?.length || 0,\n                    nonce: session.vp_nonce,\n                },\n            );\n\n            //tell the auth server the result of the session.\n            await this.sessionService.add(res.state, {\n                //TODO: not clear why it has to be any\n                credentials: credentials as any,\n            });\n            // if there a a webook URL, send the response there\n            //TODO: move to dedicated service to reuse it also in the oid4vci flow.\n            if (session.webhook) {\n                await this.webhookService.sendWebhook(\n                    session,\n                    logContext,\n                    credentials,\n                );\n            }\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialCount: credentials?.length || 0,\n                webhookSent: !!session.webhook,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                action: 'process_presentation_response',\n            });\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParResponseDto.html":{"url":"classes/ParResponseDto.html","title":"class - ParResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/par-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expires_in\n                            \n                            \n                                request_uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The expiration time for the request URI in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:5\n                        \n                    \n\n            \n                \n                    The request URI for the Pushed Authorization Request.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParResponseDto {\n    /**\n     * The request URI for the Pushed Authorization Request.\n     */\n    request_uri: string;\n    /**\n     * The expiration time for the request URI in seconds.\n     */\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html","title":"interface - ParsedAccessTokenAuthorizationCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenAuthorizationCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            grantType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     AuthorizationCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AuthorizationCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    authorizationCodeGrantIdentifier,\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { SessionService } from '../../session/session.service';\nimport { WebhookConfig } from '../../utils/webhook/webhook.dto';\nimport { IssuanceService } from '../issuance/issuance.service';\nimport { AuthenticationConfigHelper } from '../issuance/dto/authentication-config.helper';\nimport { Session } from '../../session/entities/session.entity';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        /*         const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        } */\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${session.id}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            cNonce,\n            cNonceExpiresIn: 100,\n            clientId: 'wallet', // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    'Session does not have valid credentials for issuance',\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const config = await this.issuanceService.getIssuanceConfigurationById(\n            issuanceId,\n            session.tenantId,\n        );\n\n        // Use the new authentication configuration structure\n        const authConfig = config.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                'No authentication configuration found for issuance config',\n            );\n        }\n\n        if (\n            AuthenticationConfigHelper.isPresentationDuringIssuanceAuth(\n                authConfig,\n            )\n        ) {\n            // OID4VP flow - credential presentation required\n            const presentationConfig =\n                AuthenticationConfigHelper.getPresentationConfig(authConfig);\n            const webhook = presentationConfig?.presentation.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                session.tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else if (AuthenticationConfigHelper.isAuthUrlAuth(authConfig)) {\n            // OID4VCI authorized code flow - should not reach here typically in challenge endpoint\n            // But we'll handle it by sending authorization code\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else if (AuthenticationConfigHelper.isNoneAuth(authConfig)) {\n            // Pre-authorized code flow (method: 'none') - send authorization code directly\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else {\n            throw new Error(\n                `Unsupported authentication method: ${(authConfig as any).method}`,\n            );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html","title":"interface - ParsedAccessTokenPreAuthorizedCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenPreAuthorizedCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            grantType\n                                        \n                                \n                                \n                                        \n                                            preAuthorizedCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            txCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     PreAuthorizedCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PreAuthorizedCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        preAuthorizedCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        preAuthorizedCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        txCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        txCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    authorizationCodeGrantIdentifier,\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { SessionService } from '../../session/session.service';\nimport { WebhookConfig } from '../../utils/webhook/webhook.dto';\nimport { IssuanceService } from '../issuance/issuance.service';\nimport { AuthenticationConfigHelper } from '../issuance/dto/authentication-config.helper';\nimport { Session } from '../../session/entities/session.entity';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        /*         const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        } */\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${session.id}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            cNonce,\n            cNonceExpiresIn: 100,\n            clientId: 'wallet', // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    'Session does not have valid credentials for issuance',\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const config = await this.issuanceService.getIssuanceConfigurationById(\n            issuanceId,\n            session.tenantId,\n        );\n\n        // Use the new authentication configuration structure\n        const authConfig = config.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                'No authentication configuration found for issuance config',\n            );\n        }\n\n        if (\n            AuthenticationConfigHelper.isPresentationDuringIssuanceAuth(\n                authConfig,\n            )\n        ) {\n            // OID4VP flow - credential presentation required\n            const presentationConfig =\n                AuthenticationConfigHelper.getPresentationConfig(authConfig);\n            const webhook = presentationConfig?.presentation.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                session.tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else if (AuthenticationConfigHelper.isAuthUrlAuth(authConfig)) {\n            // OID4VCI authorized code flow - should not reach here typically in challenge endpoint\n            // But we'll handle it by sending authorization code\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else if (AuthenticationConfigHelper.isNoneAuth(authConfig)) {\n            // Pre-authorized code flow (method: 'none') - send authorization code directly\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else {\n            throw new Error(\n                `Unsupported authentication method: ${(authConfig as any).method}`,\n            );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PresentationConfig.html":{"url":"entities/PresentationConfig.html","title":"entity - PresentationConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PresentationConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a configuration for a Verifiable Presentation (VP) request.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                dcql_query\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                registrationCert\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:50\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        dcql_query\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:32\n                        \n                    \n\n            \n                \n                    The DCQL query to be used for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:17\n                        \n                    \n\n            \n                \n                    Unique identifier for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        registrationCert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:38\n                        \n                    \n\n            \n                \n                    The registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:24\n                        \n                    \n\n            \n                \n                    The tenant ID for which the VP request is made.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:44\n                        \n                    \n\n            \n                \n                    Optional webhook URL to receive the response.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsString, IsObject } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { RegistrationCertificateRequest } from '../dto/vp-request.dto';\nimport { Column, Entity } from 'typeorm';\nimport { ApiHideProperty } from '@nestjs/swagger';\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column('varchar', { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column('varchar', { primary: true })\n    tenantId: string;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column('json')\n    @IsObject()\n    //TODO: define the structure of the DCQL query\n    dcql_query: any;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    @Column('json')\n    registrationCert: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column('json', { nullable: true })\n    @IsObject()\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuance.html":{"url":"classes/PresentationDuringIssuance.html","title":"class - PresentationDuringIssuance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\nexport class VCT {\n    @IsString()\n    vct: string;\n    @IsString()\n    name?: string;\n    @IsString()\n    description?: string;\n    @IsString()\n    extends?: string;\n    @IsString()\n    'extends#integrity'?: string;\n    @IsString()\n    schema_uri?: string;\n    @IsString()\n    'schema_uri#integrity'?: string;\n}\n\nexport class PresentationDuringIssuance {\n    @IsString()\n    type: string;\n    @IsObject()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuanceConfig.html":{"url":"classes/PresentationDuringIssuanceConfig.html","title":"class - PresentationDuringIssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'presentationDuringIssuance'\nUsed for OID4VP flow where a credential presentation request is sent\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                presentation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        presentation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationDuringIssuance\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:45\n                        \n                    \n\n            \n                \n                    Presentation configuration that specifies what credentials need to be presented via OID4VP\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsObject,\n    IsOptional,\n    IsUrl,\n    IsIn,\n    ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { PresentationDuringIssuance } from '../../credentials-metadata/dto/credential-config.dto';\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    authUrl: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Presentation configuration that specifies what credentials need to be presented via OID4VP\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuance)\n    presentation: PresentationDuringIssuance;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n    method: 'none' | 'auth' | 'presentationDuringIssuance';\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: 'none' } // Pre-authorized code flow\n    | { method: 'auth'; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: 'presentationDuringIssuance'; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PresentationManagementController.html":{"url":"controllers/PresentationManagementController.html","title":"controller - PresentationManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PresentationManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                presentation-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storePresentationConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Returns the presentation request configurations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:137\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation request configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: PresentationRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@UseGuards(JwtAuthGuard)@ApiSecurity('oauth2')@ApiBody({type: PresentationRequest, examples: undefined})@Post('request')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:79\n                        \n                    \n\n\n            \n                \n                        Create an presentation request that can be sent to the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PresentationRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storePresentationConfig(config: PresentationConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:121\n                        \n                    \n\n\n            \n                \n                        Store a presentation request configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Res,\n    UseGuards,\n} from '@nestjs/common';\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from '@nestjs/swagger';\nimport { PresentationsService } from './presentations.service';\nimport { PresentationConfig } from './entities/presentation-config.entity';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { OfferResponse } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport {\n    PresentationRequest,\n    ResponseType,\n} from '../oid4vp/dto/presentation-request.dto';\nimport { Oid4vpService } from '../oid4vp/oid4vp.service';\nimport * as QRCode from 'qrcode';\nimport { Response } from 'express';\n\n@ApiTags('Presentation management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2', ['api:read', 'api:write'])\n@Controller('presentation-management')\nexport class PresentationManagementController {\n    constructor(\n        private readonly presentationsService: PresentationsService,\n        private readonly oid4vpService: Oid4vpService,\n    ) {}\n\n    /**\n     * Create an presentation request that can be sent to the user\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: 'JSON response',\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            'application/json': { schema: { type: 'object' } },\n            'image/png': { schema: { type: 'string', format: 'binary' } },\n        },\n    })\n    @ApiProduces('application/json', 'image/png')\n    @UseGuards(JwtAuthGuard)\n    @ApiSecurity('oauth2')\n    @ApiBody({\n        type: PresentationRequest,\n        examples: {\n            qrcode: {\n                summary: 'QR-Code Example',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    requestId: 'pid',\n                },\n            },\n            uri: {\n                summary: 'URI',\n                value: {\n                    response_type: ResponseType.URI,\n                    requestId: 'pid',\n                },\n            },\n        },\n    })\n    @Post('request')\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: PresentationRequest,\n        @Token() user: TokenPayload,\n    ) {\n        const values = await this.oid4vpService.createRequest(\n            body.requestId,\n            {\n                webhook: body.webhook,\n            },\n            user.sub,\n        );\n        values.uri = `openid4vp://?${values.uri}`;\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader('Content-Type', 'image/png');\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the presentation request configurations.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.presentationsService.getPresentationConfigs(user.sub);\n    }\n\n    /**\n     * Store a presentation request configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storePresentationConfig(\n        @Body() config: PresentationConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.presentationsService.storePresentationConfig(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes a presentation request configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteConfiguration(@Param('id') id: string, @Token() user: TokenPayload) {\n        return this.presentationsService.deletePresentationConfig(id, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationRequest.html":{"url":"classes/PresentationRequest.html","title":"class - PresentationRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the presentation request containing the response type and request ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                requestId\n                            \n                            \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:33\n                        \n                    \n\n            \n                \n                    Identifier of the presentation configuration\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:41\n                        \n                    \n\n            \n                \n                    Webhook configuration to receive the response.\nIf not provided, the configured webhook from the configuration will be used.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsObject, IsOptional, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\n/**\n * Enum for the type of response expected from the presentation request.\n */\nexport enum ResponseType {\n    /**\n     * Response type indicating a QR code will be returned.\n     */\n    QRCode = 'qrcode',\n    /**\n     * Response type indicating a URI will be returned.\n     */\n    URI = 'uri',\n}\n\n/**\n * DTO for the presentation request containing the response type and request ID.\n */\nexport class PresentationRequest {\n    /**\n     * @example qrcode\n     */\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Identifier of the presentation configuration\n     * @example pid\n     */\n    @IsString()\n    requestId: string;\n\n    /**\n     * Webhook configuration to receive the response.\n     * If not provided, the configured webhook from the configuration will be used.\n     */\n    @IsObject()\n    @IsOptional()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentationRequestOptions.html":{"url":"interfaces/PresentationRequestOptions.html","title":"interface - PresentationRequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentationRequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PresentationRequestOptions DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            session\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webhook\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional session identifier for tracking the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webhook\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webhook:         WebhookConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WebhookConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional webhook configuration to receive the response.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\n/**\n * PresentationRequestOptions DTO\n */\nexport interface PresentationRequestOptions {\n    /**\n     * Optional session identifier for tracking the request.\n     */\n    session?: string;\n    /**\n     * Optional webhook configuration to receive the response.\n     */\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PresentationsModule.html":{"url":"modules/PresentationsModule.html","title":"module - PresentationsModule","body":"\n                   \n\n\n\n\n    Modules\n    PresentationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_imports\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/presentations/presentations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PresentationManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ResolverModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { PresentationManagementController } from './presentations.controller';\nimport { PresentationsService } from './presentations.service';\nimport { ResolverModule } from '../resolver/resolver.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { Oid4vpModule } from '../oid4vp/oid4vp.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PresentationConfig } from './entities/presentation-config.entity';\n\n@Module({\n    imports: [\n        ResolverModule,\n        HttpModule,\n        forwardRef(() => Oid4vpModule),\n        TypeOrmModule.forFeature([PresentationConfig]),\n    ],\n    controllers: [PresentationManagementController],\n    providers: [PresentationsService],\n    exports: [PresentationsService],\n})\nexport class PresentationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PresentationsService.html":{"url":"injectables/PresentationsService.html","title":"injectable - PresentationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PresentationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kbVerifier\n                            \n                            \n                                sdjwtInstance\n                            \n                            \n                                    Private\n                                statusListFetcher\n                            \n                            \n                                verifier\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deletePresentationConfig\n                            \n                            \n                                    Async\n                                getPresentationConfig\n                            \n                            \n                                getPresentationConfigs\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                parseResponse\n                            \n                            \n                                storePresentationConfig\n                            \n                            \n                                    Public\n                                storeRCID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, resolverService: ResolverService, vpRequestRepository: Repository, configService: ConfigService, logger: PinoLogger)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/presentations/presentations.service.ts:28\n                            \n                        \n\n                \n                    \n                            Constructor for the PresentationsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of HttpService for making HTTP requests.\n\n\n                                                        \n                                                \n                                                \n                                                        resolverService\n                                                  \n                                                        \n                                                                        ResolverService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ResolverService for resolving DID documents.\n\n\n                                                        \n                                                \n                                                \n                                                        vpRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for managing VP request configurations.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deletePresentationConfig\n                        \n                    \n                \n            \n            \n                \ndeletePresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:150\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to delete.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the deletion is complete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:160\n                        \n                    \n\n\n            \n                \n                        Retrieves a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the requested PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfigs\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfigs(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:126\n                        \n                    \n\n\n            \n                \n                        Retrieves all presentation configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve configurations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of PresentationConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Imports presentation configurations from a predefined directory structure.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Initializes the SDJwtVcInstance with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseResponse\n                        \n                    \n                \n            \n            \n                \nparseResponse(res: AuthResponse, requiredFields: string[], keyBindingNonce: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:249\n                        \n                    \n\n\n            \n                \n                        Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            AuthResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requiredFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyBindingNonce\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \nstorePresentationConfig(tenantId: string, vprequest: PresentationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:139\n                        \n                    \n\n\n            \n                \n                        Stores a new presentation configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the configuration.\n\n\n                                            \n                                        \n                                        \n                                                vprequest\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe PresentationConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        storeRCID\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRCID(registrationCertId: string, id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:181\n                        \n                    \n\n\n            \n                \n                        Stores the new registration certificate.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registrationCertId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the registration certificate to store.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to update.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the registration certificate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kbVerifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KbVerifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:232\n                        \n                    \n\n            \n                \n                    Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                            \n                                            \n                                                    signature\n                                            \n                                            \n                                                    payload\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sdjwtInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SDJwtVcInstance\n\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:28\n                        \n                    \n\n            \n                \n                    Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statusListFetcher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:217\n                        \n                    \n\n            \n                \n                    Fetch the status list from the uri.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    uri\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Verifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:194\n                        \n                    \n\n            \n                \n                    Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                                    \n                                                            \nThe data part of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                            \n                                                    signature\n                                                    \n                                                            \nThe signature of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { digest, ES256 } from '@sd-jwt/crypto-nodejs';\nimport { SDJwtVcInstance } from '@sd-jwt/sd-jwt-vc';\nimport { KbVerifier, Verifier } from '@sd-jwt/types';\nimport { importJWK, JWK, JWTPayload, jwtVerify } from 'jose';\nimport { firstValueFrom } from 'rxjs';\nimport { ResolverService } from '../resolver/resolver.service';\nimport { PresentationConfig } from './entities/presentation-config.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm/repository/Repository';\nimport { AuthResponse } from './dto/auth-response.dto';\nimport { ConfigService } from '@nestjs/config';\nimport { readdirSync, readFileSync } from 'fs';\nimport { join } from 'path';\nimport { PinoLogger } from 'nestjs-pino';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n/**\n * Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n */\n@Injectable()\nexport class PresentationsService implements OnModuleInit {\n    /**\n     * Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n     */\n    sdjwtInstance: SDJwtVcInstance;\n\n    /**\n     * Constructor for the PresentationsService.\n     * @param httpService - Instance of HttpService for making HTTP requests.\n     * @param resolverService - Instance of ResolverService for resolving DID documents.\n     * @param vpRequestRepository - Repository for managing VP request configurations.\n     */\n    constructor(\n        private httpService: HttpService,\n        private resolverService: ResolverService,\n        @InjectRepository(PresentationConfig)\n        private vpRequestRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n    ) {}\n\n    /**\n     * Initializes the SDJwtVcInstance with the necessary configurations.\n     */\n    onModuleInit() {\n        this.sdjwtInstance = new SDJwtVcInstance({\n            hasher: digest,\n            verifier: this.verifier.bind(this),\n            kbVerifier: this.kbVerifier.bind(this),\n            statusListFetcher: this.statusListFetcher.bind(this),\n        });\n    }\n\n    /**\n     * Imports presentation configurations from a predefined directory structure.\n     */\n    async onApplicationBootstrap() {\n        const configPath = this.configService.getOrThrow('CONFIG_FOLDER');\n        const subfolder = 'presentation';\n        const force = this.configService.get('CONFIG_IMPORT_FORCE');\n        if (this.configService.get('CONFIG_IMPORT')) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            let counter = 0;\n            for (const tenant of tenantFolders) {\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), 'utf8'),\n                    );\n\n                    payload.id = file.replace('.json', '');\n                    const presentationExists = await this.getPresentationConfig(\n                        payload.id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (presentationExists && !force) {\n                        continue; // Skip if config already exists and force is not set\n                    }\n\n                    // Validate the payload against PresentationConfig\n                    const config = plainToClass(PresentationConfig, payload);\n                    const validationErrors = await validate(config);\n\n                    if (validationErrors.length > 0) {\n                        this.logger.error(\n                            {\n                                event: 'ValidationError',\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for issuance config ${file} in tenant ${tenant.name}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n\n                    await this.storePresentationConfig(tenant.name, config);\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: 'Import',\n                    },\n                    `${counter} presentation configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Retrieves all presentation configurations for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve configurations.\n     * @returns A promise that resolves to an array of PresentationConfig entities.\n     */\n    getPresentationConfigs(tenantId: string): Promise {\n        return this.vpRequestRepository.find({\n            where: { tenantId },\n            order: { createdAt: 'DESC' },\n        });\n    }\n\n    /**\n     * Stores a new presentation configuration.\n     * @param tenantId - The ID of the tenant for which to store the configuration.\n     * @param vprequest - The PresentationConfig entity to store.\n     * @returns A promise that resolves to the stored PresentationConfig entity.\n     */\n    storePresentationConfig(tenantId: string, vprequest: PresentationConfig) {\n        vprequest.tenantId = tenantId;\n        return this.vpRequestRepository.save(vprequest);\n    }\n\n    /**\n     * Deletes a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to delete.\n     * @param tenantId - The ID of the tenant for which to delete the configuration.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    deletePresentationConfig(id: string, tenantId: string) {\n        return this.vpRequestRepository.delete({ id, tenantId });\n    }\n\n    /**\n     * Retrieves a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to retrieve.\n     * @param tenantId - The ID of the tenant for which to retrieve the configuration.\n     * @returns A promise that resolves to the requested PresentationConfig entity.\n     */\n    async getPresentationConfig(\n        id: string,\n        tenantId: string,\n    ): Promise {\n        return this.vpRequestRepository\n            .findOneByOrFail({\n                id,\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(`Request ID ${id} not found`);\n            });\n    }\n\n    /**\n     * Stores the new registration certificate.\n     * @param registrationCertId - The ID of the registration certificate to store.\n     * @param id - The ID of the presentation configuration to update.\n     * @param tenantId - The ID of the tenant for which to store the registration certificate.\n     * @returns\n     */\n    public storeRCID(registrationCertId: string, id: string, tenantId: string) {\n        return this.vpRequestRepository.update(\n            { id, tenantId },\n            { registrationCert: { id: registrationCertId } },\n        );\n    }\n\n    /**\n     * Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n     * @param data - The data part of the SD-JWT-VC.\n     * @param signature - The signature of the SD-JWT-VC.\n     * @returns\n     */\n    verifier: Verifier = async (data, signature) => {\n        const instance = new SDJwtVcInstance({\n            hasher: digest,\n        });\n        const decodedVC = await instance.decode(`${data}.${signature}`);\n        const payload = decodedVC.jwt?.payload as JWTPayload;\n        const header = decodedVC.jwt?.header as JWK;\n        const publicKey = await this.resolverService.resolvePublicKey(\n            payload,\n            header,\n        );\n        const verify = await ES256.getVerifier(publicKey);\n        return verify(data, signature).catch((err) => {\n            console.log(err);\n            return false;\n        });\n    };\n\n    /**\n     * Fetch the status list from the uri.\n     * @param uri\n     * @returns\n     */\n    private statusListFetcher: (uri: string) => Promise = async (\n        uri: string,\n    ) => {\n        return firstValueFrom(this.httpService.get(uri)).then(\n            (res) => res.data,\n        );\n    };\n\n    /**\n     * Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n     * @param data\n     * @param signature\n     * @param payload\n     * @returns\n     */\n    private kbVerifier: KbVerifier = async (data, signature, payload) => {\n        if (!payload.cnf) {\n            throw new Error('No cnf found in the payload');\n        }\n        const key = await importJWK(payload.cnf.jwk as JWK, 'ES256');\n        return jwtVerify(`${data}.${signature}`, key).then(\n            () => true,\n            () => false,\n        );\n    };\n\n    /**\n     * Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n     * @param res\n     * @param requiredFields\n     * @returns\n     */\n    parseResponse(\n        res: AuthResponse,\n        requiredFields: string[],\n        keyBindingNonce: string,\n    ) {\n        const attestations = Object.keys(res.vp_token);\n        const att = attestations.map((att) =>\n            this.sdjwtInstance\n                .verify(res.vp_token[att], {\n                    requiredClaimKeys: requiredFields,\n                    keyBindingNonce,\n                })\n                .then(\n                    (result) => {\n                        return {\n                            id: att,\n                            values: {\n                                ...result.payload,\n                                cnf: undefined, // remove cnf for simplicity\n                                status: undefined, // remove status for simplicity\n                            },\n                        };\n                    },\n                    /* (err) => {\n                        throw new Error\n                        //(console.log(err);\n                        return {\n                            id: att,\n                            error: err.message,\n                        };\n                    }, */\n                ),\n        );\n        return Promise.all(att);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrarConfig.html":{"url":"classes/RegistrarConfig.html","title":"class - RegistrarConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrarConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar-config.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarConfig class represents the configuration for the registrar service.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accessCertificateId\n                            \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accessCertificateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar-config.ts:12\n                        \n                    \n\n            \n                \n                    ID of the access certificate.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar-config.ts:8\n                        \n                    \n\n            \n                \n                    ID of the relying party.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RegistrarConfig {\n    /**\n     * ID of the relying party.\n     */\n    id?: string;\n    /**\n     * ID of the access certificate.\n     */\n    accessCertificateId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RegistrarModule.html":{"url":"modules/RegistrarModule.html","title":"module - RegistrarModule","body":"\n                   \n\n\n\n\n    Modules\n    RegistrarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/registrar/registrar.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            RegistrarModule is responsible for managing the registrar service.\nIt provides the RegistrarService and imports necessary modules.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RegistrarService } from './registrar.service';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport * as Joi from 'joi';\nimport { PresentationsModule } from '../verifier/presentations/presentations.module';\n\n/**\n * Validation schema for the registrar module.\n * Defines the required environment variables and their types.\n */\nexport const REGISTRAR_VALIDATION_SCHEMA = {\n    REGISTRAR_URL: Joi.string(),\n    REGISTRAR_OIDC_URL: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_ID: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_SECRET: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n};\n\n/**\n * RegistrarModule is responsible for managing the registrar service.\n * It provides the RegistrarService and imports necessary modules.\n */\n@Module({\n    imports: [CryptoModule, PresentationsModule],\n    providers: [RegistrarService],\n    exports: [RegistrarService],\n})\nexport class RegistrarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegistrarService.html":{"url":"injectables/RegistrarService.html","title":"injectable - RegistrarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegistrarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarService is responsible for managing the interaction with the registrar,\nincluding adding relying parties, access certificates, and registration certificates.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessToken\n                            \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                oauth2Client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addAccessCertificate\n                            \n                            \n                                    Async\n                                addRegistrationCertificate\n                            \n                            \n                                addRp\n                            \n                            \n                                    Async\n                                getAccessCertificateId\n                            \n                            \n                                isEnabled\n                            \n                            \n                                    Private\n                                loadConfig\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                            \n                                    Private\n                                saveConfig\n                            \n                            \n                                    Private\n                                storeExistingRp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, presentationsService: PresentationsService)\n                    \n                \n                        \n                            \n                                Defined in src/registrar/registrar.service.ts:59\n                            \n                        \n\n                \n                    \n                            Constructor for the RegistrarService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ConfigService for accessing configuration values.\n\n\n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of CryptoService for cryptographic operations.\n\n\n                                                        \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of PresentationsService for handling presentations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        addAccessCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addAccessCertificate(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:232\n                        \n                    \n\n\n            \n                \n                        Add a new access certificate to the registrar.\nThis is only needed once, when the access certificate is created.\nIf the access certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addRegistrationCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRegistrationCertificate(req: RegistrationCertificateRequest, dcql_query: any, requestId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:276\n                        \n                    \n\n\n            \n                \n                        Add a new registration certificate to the registrar.\nThis is only needed once, when the registration certificate is created.\nIf the registration certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RegistrationCertificateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dcql_query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addRp\n                        \n                    \n                \n            \n            \n                \naddRp(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:160\n                        \n                    \n\n\n            \n                \n                        Adds a new relying party to the registrar.\nThis is only needed once, when the relying party is created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAccessCertificateId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccessCertificateId(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:205\n                        \n                    \n\n\n            \n                \n                        Get the access certificate ID from the registrar.\nIf there is no access certificate ID in the config, it will add a new one.\nIf there is one, it will check if it is still valid.\nIf it is revoked, it will add a new one.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnabled\n                        \n                    \n                \n            \n            \n                \nisEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Checks if the registrar service is enabled based on the configuration.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the registrar service is enabled, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfig(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:333\n                        \n                    \n\n\n            \n                \n                        Load the registrar configuration from the config file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RegistrarConfig\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:117\n                        \n                    \n\n\n            \n                \n                        This function is called when the application starts.\nIt will refresh the access token for the registrar.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:76\n                        \n                    \n\n\n            \n                \n                        Initializes the OAuth2 client and registrar client with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:128\n                        \n                    \n\n\n            \n                \n                        This function is called when a tenant is initialized.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshAccessToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:143\n                        \n                    \n\n\n            \n                \n                        Refreshes the access token for the registrar using client credentials.\nThis method is called periodically to ensure the access token is valid.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saveConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveConfig(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:356\n                        \n                    \n\n\n            \n                \n                        Save the registrar configuration to the config file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storeExistingRp\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeExistingRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:187\n                        \n                    \n\n\n            \n                \n                        Stores the existing relying party ID based on the name.\nThis is used when the relying party already exists in the registrar.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the relying party.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The ID of the existing relying party.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:59\n                        \n                    \n\n            \n                \n                    Access token for authenticating requests to the registrar.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:55\n                        \n                    \n\n            \n                \n                    Client for interacting with the registrar API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauth2Client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:51\n                        \n                    \n\n            \n                \n                    OAuth2 client for interacting with the OIDC provider.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { OAuth2Client } from '@badgateway/oauth2-client';\nimport { client } from './generated/client.gen';\nimport {\n    accessCertificateControllerFindOne,\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from './generated';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { RegistrationCertificateRequest } from '../verifier/presentations/dto/vp-request.dto';\nimport { PresentationsService } from '../verifier/presentations/presentations.service';\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs';\nimport { RegistrarConfig } from './registrar-config';\nimport { join } from 'node:path';\n\n/**\n * Repsonse of access certificate request.\n */\ninterface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow('REGISTRAR_OIDC_URL');\n        const clientId = this.configService.getOrThrow(\n            'REGISTRAR_OIDC_CLIENT_ID',\n        );\n        const clientSecret = this.configService.getOrThrow(\n            'REGISTRAR_OIDC_CLIENT_SECRET',\n        );\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow('REGISTRAR_URL'),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get('REGISTRAR_URL');\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get('REGISTRAR_URL')) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        const config = this.loadConfig(tenantId);\n        if (!config.id) {\n            config.id = await this.addRp(tenantId);\n        }\n        await this.getAccessCertificateId(config, tenantId);\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(tenantId: string): Promise {\n        const name = this.configService.getOrThrow('RP_NAME');\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            const config = this.loadConfig(tenantId);\n            if (response.error) {\n                config.id = await this.storeExistingRp(name);\n                this.saveConfig(config, tenantId);\n                return config.id!;\n            } else {\n                config.id = response.data!['id'];\n                this.saveConfig(config, tenantId);\n                return response.data!['id'];\n            }\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private storeExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id;\n        });\n    }\n\n    /**\n     * Get the access certificate ID from the registrar.\n     * If there is no access certificate ID in the config, it will add a new one.\n     * If there is one, it will check if it is still valid.\n     * If it is revoked, it will add a new one.\n     * @param config\n     */\n    async getAccessCertificateId(config: RegistrarConfig, tenantId: string) {\n        // if there is no access certificate ID in the config, we need to add it\n        if (!config.accessCertificateId) {\n            await this.addAccessCertificate(config, tenantId);\n        }\n        // if there is one, check if it is still valid\n        await accessCertificateControllerFindOne({\n            client: this.client,\n            path: { rp: config.id, id: config.accessCertificateId! },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error finding access certificate:', res.error);\n            }\n            const data = res.data as AccessCertificateResponse;\n            if (data.revoked) {\n                console.warn('Access certificate is revoked, adding a new one');\n                return this.addAccessCertificate(config, tenantId);\n            }\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        config: RegistrarConfig,\n        tenantId: string,\n    ): Promise {\n        const keyId = await this.cryptoService.keyService.getKid(tenantId);\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    'pem',\n                    tenantId,\n                    keyId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: config.id,\n            },\n        }).then(async (res) => {\n            if (res.error) {\n                console.error('Error adding access certificate:', res.error);\n                throw new Error('Error adding access certificate');\n            }\n            //store the cert\n            await this.cryptoService.storeAccessCertificate(\n                res.data!['crt'],\n                tenantId,\n                keyId,\n            );\n            config.accessCertificateId = res.data!['id'];\n            this.saveConfig(config, tenantId);\n            return res.data!['id'];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const rp = this.loadConfig(tenantId).id;\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    'Error adding registration certificate:',\n                    res.error,\n                );\n                throw new Error('Error adding registration certificate');\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data!['id'],\n                requestId,\n                tenantId,\n            );\n            return res.data!['jwt'];\n        });\n    }\n\n    /**\n     * Load the registrar configuration from the config file.\n     * @returns\n     */\n    private loadConfig(tenantId: string): RegistrarConfig {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n\n        if (!existsSync(filePath)) {\n            // If the config file does not exist, create an empty config\n            const initialConfig: RegistrarConfig = {};\n            writeFileSync(filePath, JSON.stringify(initialConfig, null, 2));\n            return initialConfig;\n        }\n        const config = JSON.parse(\n            readFileSync(filePath, 'utf-8'),\n        ) as RegistrarConfig;\n        return config;\n    }\n\n    /**\n     * Save the registrar configuration to the config file.\n     * @param config\n     */\n    private saveConfig(config: RegistrarConfig, tenantId: string) {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n        writeFileSync(filePath, JSON.stringify(config, null, 2));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrationCertificateRequest.html":{"url":"classes/RegistrationCertificateRequest.html","title":"class - RegistrationCertificateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrationCertificateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/vp-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrationCertificateRequest DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RegistrationCertificateCreation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:17\n                        \n                    \n\n            \n                \n                    The body of the registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:12\n                        \n                    \n\n            \n                \n                    Identifier of the registration certificate that got issued.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { RegistrationCertificateCreation } from '../../../registrar/generated';\n\n/**\n * RegistrationCertificateRequest DTO\n */\nexport class RegistrationCertificateRequest {\n    /**\n     * Identifier of the registration certificate that got issued.\n     */\n    @IsString()\n    id?: string;\n    /**\n     * The body of the registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    body: RegistrationCertificateCreation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResolverModule.html":{"url":"modules/ResolverModule.html","title":"module - ResolverModule","body":"\n                   \n\n\n\n\n    Modules\n    ResolverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\n\nResolverService \n\nResolverService \n\n\n\nResolverModule\n\nResolverModule\n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/resolver/resolver.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ResolverService } from './resolver.service';\nimport { HttpModule } from '@nestjs/axios';\n\n@Module({\n    imports: [HttpModule],\n    providers: [ResolverService],\n    exports: [ResolverService],\n})\nexport class ResolverModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolverService.html":{"url":"injectables/ResolverService.html","title":"injectable - ResolverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/resolver.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for resolving public keys from JWT payloads and headers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resolvePublicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/resolver/resolver.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resolvePublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolvePublicKey(payload: JWTPayload, header: JWK)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/resolver/resolver.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWK\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { JWK, JWTPayload } from 'jose';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { X509Certificate } from 'node:crypto';\nimport { IssuerMetadata } from './dto/issuer-metadata.dto';\n\n/**\n * Service for resolving public keys from JWT payloads and headers.\n */\n@Injectable()\nexport class ResolverService {\n    constructor(private httpService: HttpService) {}\n\n    /**\n     * Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n     * @param payload\n     * @param header\n     * @returns\n     */\n    async resolvePublicKey(payload: JWTPayload, header: JWK): Promise {\n        if (!payload.iss) {\n            throw new Error('Issuer not found');\n        }\n\n        if (header.x5c) {\n            //TODO: validate the certificate and the chain of trust!\n            const certs = header.x5c.map(\n                (cert) => new X509Certificate(Buffer.from(cert, 'base64')),\n            );\n            const cert = certs[0];\n            if (!cert.subjectAltName?.includes(new URL(payload.iss).hostname)) {\n                throw new Error('Subject and issuer do not match');\n            }\n            return cert.publicKey.export({ format: 'jwk' }) as JWK;\n        }\n        //checl if the key is in the header as jwk\n        if (header['jwk']) {\n            return header['jwk'] as JWK;\n        }\n\n        const response = await firstValueFrom(\n            this.httpService.get(\n                `${payload.iss}/.well-known/jwt-vc-issuer`,\n            ),\n        ).then(\n            (r) => r.data,\n            () => {\n                throw new ConflictException('Issuer not reachable');\n            },\n        );\n        const key = response.jwks.keys.find((key) => key.kid === header.kid);\n        if (!key) {\n            throw new Error('Key not found');\n        }\n        return key;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SchemaResponse.html":{"url":"classes/SchemaResponse.html","title":"class - SchemaResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/schema-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                $schema\n                            \n                            \n                                properties\n                            \n                            \n                                required\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        $schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'https://json-schema.org/draft/2020-12/schema'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'object'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class SchemaResponse {\n    '$schema' = 'https://json-schema.org/draft/2020-12/schema';\n    type = 'object';\n    properties: Record;\n    required: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user session in the application.\nIt includes various properties such as credentials, authorization code,\nrequest URI, authorization queries, and more.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                auth_queries\n                            \n                            \n                                    \n                                    Optional\n                                authorization_code\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                credentialPayload\n                            \n                            \n                                    \n                                    Optional\n                                credentials\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                issuanceId\n                            \n                            \n                                    \n                                notifications\n                            \n                            \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                    Optional\n                                offer\n                            \n                            \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    Optional\n                                requestId\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    Optional\n                                vp_nonce\n                            \n                            \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        auth_queries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthorizeQueries\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:73\n                        \n                    \n\n            \n                \n                    Authorization queries associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        authorization_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:63\n                        \n                    \n\n            \n                \n                    Authorization code for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:83\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentialPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OfferRequestDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:93\n                        \n                    \n\n            \n                \n                    Credential payload containing the offer request details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VerificationResult[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:58\n                        \n                    \n\n            \n                \n                    Verified credentials from the verification process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:43\n                        \n                    \n\n            \n                \n                    Unique identifier for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:108\n                        \n                    \n\n            \n                \n                    Notifications associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:103\n                        \n                    \n\n            \n                \n                    Webhook configuration to send the result of the notification response.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CredentialOfferObject\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:88\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:68\n                        \n                    \n\n            \n                \n                    Request URI from the authorization request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:52\n                        \n                    \n\n            \n                \n                    The ID of the presentation configuration associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SessionStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true, default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:113\n                        \n                    \n\n            \n                \n                    Tenant ID for multi-tenancy support.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        vp_nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:78\n                        \n                    \n\n            \n                \n                    Noncce from the Verifiable Presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:98\n                        \n                    \n\n            \n                \n                    Webhook configuration to send result and may receive further information.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    CredentialOfferObject,\n    NotificationEvent,\n} from '@openid4vc/openid4vci';\nimport { VerificationResult } from '@sd-jwt/sd-jwt-vc';\nimport { AuthorizeQueries } from '../../issuer/authorize/dto/authorize-request.dto';\nimport { OfferRequestDto } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport { Column, Entity, PrimaryColumn } from 'typeorm';\nimport { WebhookConfig } from '../../utils/webhook/webhook.dto';\n\nexport type SessionStatus = 'active' | 'completed' | 'expired' | 'failed';\n\n/**\n * Represents a session entity for managing user sessions in the application.\n */\nexport type Notification = {\n    /**\n     * Unique identifier for the notification.\n     */\n    id: string;\n    /**\n     * The type of notification.\n     */\n    event?: NotificationEvent;\n\n    /**\n     * The credential ID associated with the notification.\n     */\n    credentialConfigurationId: string;\n};\n\n/**\n * Entity representing a user session in the application.\n * It includes various properties such as credentials, authorization code,\n * request URI, authorization queries, and more.\n */\n@Entity()\nexport class Session {\n    /**\n     * Unique identifier for the session.\n     */\n    @PrimaryColumn('uuid')\n    id: string;\n\n    @Column('varchar', { nullable: true })\n    issuanceId?: string;\n\n    /**\n     * The ID of the presentation configuration associated with the session.\n     */\n    @Column('varchar', { nullable: true })\n    requestId?: string;\n\n    /**\n     * Verified credentials from the verification process.\n     */\n    @Column('json', { nullable: true })\n    credentials?: VerificationResult[];\n    /**\n     * Authorization code for the session.\n     */\n    @Column('varchar', { nullable: true })\n    authorization_code?: string;\n    /**\n     * Request URI from the authorization request.\n     */\n    @Column('varchar', { nullable: true })\n    request_uri?: string;\n    /**\n     * Authorization queries associated with the session.\n     */\n    @Column('json', { nullable: true })\n    auth_queries?: AuthorizeQueries;\n    /**\n     * Noncce from the Verifiable Presentation request.\n     */\n    @Column('varchar', { nullable: true })\n    vp_nonce?: string;\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column('json', { nullable: true })\n    offer?: CredentialOfferObject;\n    /**\n     * Credential payload containing the offer request details.\n     */\n    @Column('json', { nullable: true })\n    credentialPayload?: OfferRequestDto;\n    /**\n     * Webhook configuration to send result and may receive further information.\n     */\n    @Column('json', { nullable: true })\n    webhook?: WebhookConfig;\n    /**\n     * Webhook configuration to send the result of the notification response.\n     */\n    @Column('json', { nullable: true })\n    notifyWebhook?: WebhookConfig;\n    /**\n     * Notifications associated with the session.\n     */\n    @Column('json', { default: JSON.stringify([]) })\n    notifications: Notification[];\n    /**\n     * Tenant ID for multi-tenancy support.\n     */\n    @Column('varchar')\n    tenantId: string;\n\n    @Column('varchar', { nullable: true, default: 'active' })\n    status: SessionStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getAllSessions\n                            \n                            \n                                    \n                                getSession\n                            \n                            \n                                    \n                                revokeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllSessions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:23\n                        \n                    \n\n\n            \n                \n                        Retrieves all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Retrieves the session information for a given session ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the session.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revokeAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeAll(value: StatusUpdateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('revoke')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        Update the status of the credentials of a specific session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post, UseGuards, Body } from '@nestjs/common';\nimport { ApiSecurity, ApiTags } from '@nestjs/swagger';\nimport { SessionService } from './session.service';\nimport { Session } from './entities/session.entity';\nimport { JwtAuthGuard } from '../auth/auth.guard';\nimport { Token, TokenPayload } from '../auth/token.decorator';\nimport { StatusUpdateDto } from '../issuer/status-list/dto/status-update.dto';\nimport { StatusListService } from '../issuer/status-list/status-list.service';\n\n@ApiTags('Session management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('session')\nexport class SessionController {\n    constructor(\n        private readonly sessionService: SessionService,\n        private readonly statusListService: StatusListService,\n    ) {}\n\n    /**\n     * Retrieves all sessions.\n     */ @Get()\n    getAllSessions(): Promise {\n        return this.sessionService.getAll();\n    }\n\n    /**\n     * Retrieves the session information for a given session ID.\n     * @param id - The identifier of the session.\n     */\n    @Get(':id')\n    getSession(@Param('id') id: string): Promise {\n        return this.sessionService.get(id);\n    }\n\n    /**\n     * Update the status of the credentials of a specific session.\n     * @param value\n     * @returns\n     */\n    @Post('revoke')\n    revokeAll(@Body() value: StatusUpdateDto, @Token() user: TokenPayload) {\n        return this.statusListService.updateStatus(value, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/SessionGuard.html":{"url":"guards/SessionGuard.html","title":"guard - SessionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    SessionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/session/session.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.guard.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    NotFoundException,\n} from '@nestjs/common';\nimport { SessionService } from './session.service';\n\n@Injectable()\nexport class SessionGuard implements CanActivate {\n    constructor(private readonly sessionService: SessionService) {}\n\n    async canActivate(context: ExecutionContext): Promise {\n        const request = context.switchToHttp().getRequest();\n        const sessionId = request.params.session;\n        if (!sessionId) {\n            throw new NotFoundException(\n                'Session ID not found in request parameters',\n            );\n        }\n        const session = await this.sessionService.get(sessionId);\n        if (!session) {\n            throw new NotFoundException(\n                `Session with ID ${sessionId} not found`,\n            );\n        }\n        request.session = session;\n        return true;\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionLogContext.html":{"url":"interfaces/SessionLogContext.html","title":"interface - SessionLogContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionLogContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Context for session logging, including session ID, tenant ID, flow type, and optional stage.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flowType\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stage\n                                        \n                                \n                                \n                                        \n                                            tenantId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger-context.ts:21\n                            \n                        \n                \n                    \n                        Additional context information for the session.\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flowType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flowType:     \"OID4VCI\" | \"OID4VP\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"OID4VCI\" | \"OID4VP\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of flow being logged (e.g., OID4VCI, OID4VP).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for the session.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional stage of the flow, useful for tracking progress.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenantId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tenantId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier for the tenant associated with the session.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SessionLogContext {\n    /**\n     * Unique identifier for the session.\n     */\n    sessionId: string;\n    /**\n     * Identifier for the tenant associated with the session.\n     */\n    tenantId: string;\n    /**\n     * Type of flow being logged (e.g., OID4VCI, OID4VP).\n     */\n    flowType: 'OID4VCI' | 'OID4VP';\n    /**\n     * Optional stage of the flow, useful for tracking progress.\n     */\n    stage?: string;\n    /**\n     * Additional context information for the session.\n     */\n    [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerInterceptor.html":{"url":"injectables/SessionLoggerInterceptor.html","title":"injectable - SessionLoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for logging session-related requests and responses.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerInterceptor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReflector instance for accessing metadata.\n\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:44\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and logs session-related information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCall handler to proceed with the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits the response data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:136\n                        \n                    \n\n\n            \n                \n                        Sanitizes the request body to remove sensitive information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request body to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Sanitized body.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ConfigService } from '@nestjs/config';\nimport { Observable } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { PinoLogger } from 'nestjs-pino';\nimport { SESSION_LOGGER_KEY } from './session-logger.decorator';\n\n/**\n * Interceptor for logging session-related requests and responses.\n */\n@Injectable()\nexport class SessionLoggerInterceptor implements NestInterceptor {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerInterceptor.\n     * @param reflector - Reflector instance for accessing metadata.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing configuration.\n     */\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.isEnabled = this.configService.get(\n            'LOG_ENABLE_SESSION_LOGGER',\n            false,\n        );\n    }\n\n    /**\n     * Intercepts the request and logs session-related information.\n     * @param context - Execution context of the request.\n     * @param next - Call handler to proceed with the request.\n     * @returns An observable that emits the response data.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const metadata = this.reflector.get(\n            SESSION_LOGGER_KEY,\n            context.getHandler(),\n        );\n\n        if (!metadata || !this.isEnabled) {\n            return next.handle();\n        }\n\n        const { sessionIdParam, flowType } = metadata;\n        const request = context.switchToHttp().getRequest();\n        const response = context.switchToHttp().getResponse();\n\n        const sessionId = request.params[sessionIdParam];\n\n        const tenantId = request.params?.tenantId;\n        const method = request.method;\n        const url = request.url;\n\n        // Set context for this logger instance\n        this.logger.setContext('SessionLogger');\n\n        // Create log context\n        const logContext = {\n            sessionId,\n            tenantId,\n            flowType,\n            endpoint: `${method} ${url}`,\n        };\n\n        // Log the start of the request\n        this.logger.info(\n            {\n                ...logContext,\n                event: 'request_start',\n                method,\n                url,\n                headers: {\n                    'user-agent': request.headers['user-agent'],\n                    'content-type': request.headers['content-type'],\n                },\n                body: this.sanitizeBody(request.body),\n            },\n            `[${flowType}] Starting ${method} ${url} for session ${sessionId}`,\n        );\n\n        const startTime = Date.now();\n\n        return next.handle().pipe(\n            tap((data) => {\n                const duration = Date.now() - startTime;\n                this.logger.info(\n                    {\n                        ...logContext,\n                        event: 'request_success',\n                        method,\n                        url,\n                        statusCode: response.statusCode,\n                        duration,\n                        responseSize: JSON.stringify(data || {}).length,\n                    },\n                    `[${flowType}] Completed ${method} ${url} for session ${sessionId} in ${duration}ms`,\n                );\n            }),\n            catchError((error) => {\n                const duration = Date.now() - startTime;\n                this.logger.error(\n                    {\n                        ...logContext,\n                        event: 'request_error',\n                        method,\n                        url,\n                        error: {\n                            name: error.name,\n                            message: error.message,\n                            stack: error.stack,\n                        },\n                        duration,\n                    },\n                    `[${flowType}] Error in ${method} ${url} for session ${sessionId}: ${error.message}`,\n                );\n                throw error;\n            }),\n        );\n    }\n\n    /**\n     * Sanitizes the request body to remove sensitive information.\n     * @param body - The request body to sanitize.\n     * @returns Sanitized body.\n     */\n    private sanitizeBody(body: any): any {\n        if (!body) return body;\n\n        // Create a copy to avoid modifying the original\n        const sanitized = { ...body };\n\n        // Remove sensitive fields\n        const sensitiveFields = [\n            'password',\n            'token',\n            'secret',\n            'key',\n            'private_key',\n            'access_token',\n            'refresh_token',\n        ];\n\n        sensitiveFields.forEach((field) => {\n            if (sanitized[field]) {\n                sanitized[field] = '[REDACTED]';\n            }\n        });\n\n        return sanitized;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerService.html":{"url":"injectables/SessionLoggerService.html","title":"injectable - SessionLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for logging session-related events and errors.\nUses PinoLogger for structured logging.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logAuthorizationRequest\n                            \n                            \n                                logCredentialIssuance\n                            \n                            \n                                logCredentialVerification\n                            \n                            \n                                logFlowComplete\n                            \n                            \n                                logFlowError\n                            \n                            \n                                logFlowStart\n                            \n                            \n                                logNotification\n                            \n                            \n                                logSession\n                            \n                            \n                                logSessionError\n                            \n                            \n                                logTokenExchange\n                            \n                            \n                                    Private\n                                shouldLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing environment configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \nlogAuthorizationRequest(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Log authorization request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialIssuance\n                        \n                    \n                \n            \n            \n                \nlogCredentialIssuance(context: SessionLogContext, credentialType: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Log credential issuance step\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialVerification\n                        \n                    \n                \n            \n            \n                \nlogCredentialVerification(context: SessionLogContext, verificationResult: boolean, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Log credential presentation verification\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                verificationResult\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowComplete\n                        \n                    \n                \n            \n            \n                \nlogFlowComplete(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Log session flow completion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowError\n                        \n                    \n                \n            \n            \n                \nlogFlowError(context: SessionLogContext, error: Error, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Log session flow error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowStart\n                        \n                    \n                \n            \n            \n                \nlogFlowStart(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Log session flow start\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logNotification\n                        \n                    \n                \n            \n            \n                \nlogNotification(context: SessionLogContext, notificationEvent: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Log notification events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notificationEvent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSession\n                        \n                    \n                \n            \n            \n                \nlogSession(context: SessionLogContext, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Generic session log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSessionError\n                        \n                    \n                \n            \n            \n                \nlogSessionError(context: SessionLogContext, error: Error, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Generic session error log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logTokenExchange\n                        \n                    \n                \n            \n            \n                \nlogTokenExchange(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Log token exchange\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    shouldLog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PinoLogger } from 'nestjs-pino';\nimport { ConfigService } from '@nestjs/config';\nimport { SessionLogContext } from './session-logger-context';\n\n/**\n * Service for logging session-related events and errors.\n * Uses PinoLogger for structured logging.\n */\n@Injectable()\nexport class SessionLoggerService {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerService.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing environment configuration.\n     */\n    constructor(\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.logger.setContext('SessionLoggerService');\n        this.isEnabled = this.configService.get(\n            'LOG_ENABLE_SESSION_LOGGER',\n            false,\n        );\n    }\n\n    private shouldLog(): boolean {\n        return this.isEnabled;\n    }\n\n    /**\n     * Log session flow start\n     */\n    logFlowStart(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow started for session ${context.sessionId} in tenant ${context.tenantId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'flow_start',\n                stage: 'initialization',\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow completion\n     */\n    logFlowComplete(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow completed for session ${context.sessionId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'flow_complete',\n                stage: 'completion',\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow error\n     */\n    logFlowError(\n        context: SessionLogContext,\n        error: Error,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow error for session ${context.sessionId}: ${error.message}`;\n\n        this.logger.error(\n            {\n                ...context,\n                event: 'flow_error',\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log credential issuance step\n     */\n    logCredentialIssuance(\n        context: SessionLogContext,\n        credentialType: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'credential_issuance',\n                stage: 'credential_creation',\n                credentialType,\n                ...additionalData,\n            },\n            `[${context.flowType}] Issuing credential of type ${credentialType} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log credential presentation verification\n     */\n    logCredentialVerification(\n        context: SessionLogContext,\n        verificationResult: boolean,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'credential_verification',\n                stage: 'verification',\n                verificationResult,\n                ...additionalData,\n            },\n            `[${context.flowType}] Credential verification ${verificationResult ? 'succeeded' : 'failed'} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log authorization request\n     */\n    logAuthorizationRequest(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'authorization_request',\n                stage: 'authorization',\n                ...additionalData,\n            },\n            `[${context.flowType}] Authorization request created for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log token exchange\n     */\n    logTokenExchange(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'token_exchange',\n                stage: 'token_exchange',\n                ...additionalData,\n            },\n            `[${context.flowType}] Token exchange for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log notification events\n     */\n    logNotification(\n        context: SessionLogContext,\n        notificationEvent: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'notification',\n                stage: 'notification',\n                notificationEvent,\n                ...additionalData,\n            },\n            `[${context.flowType}] Notification ${notificationEvent} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Generic session log method\n     */\n    logSession(\n        context: SessionLogContext,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}`,\n        );\n    }\n\n    /**\n     * Generic session error log method\n     */\n    logSessionError(\n        context: SessionLogContext,\n        error: Error,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.error(\n            {\n                ...context,\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}: ${error.message}`,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_SessionModule_imports\n\n\n\ncluster_SessionModule_exports\n\n\n\n\nStatusListModule\n\nStatusListModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            SessionModule is responsible for managing user sessions.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SessionService } from './session.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Session } from './entities/session.entity';\nimport { SessionController } from './session.controller';\nimport * as Joi from 'joi';\nimport { StatusListModule } from '../issuer/status-list/status-list.module';\nimport { makeGaugeProvider } from '@willsoto/nestjs-prometheus';\n\n/**\n * Module for managing user sessions.\n */\nexport const SESSION_VALIDATION_SCHEMA = {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n};\n\n/**\n * SessionModule is responsible for managing user sessions.\n */\n@Module({\n    imports: [TypeOrmModule.forFeature([Session]), StatusListModule],\n    providers: [\n        SessionService,\n        makeGaugeProvider({\n            name: 'sessions',\n            help: 'Total number of sessions by status',\n            labelNames: ['tenant_id', 'session_type', 'status'],\n        }),\n    ],\n    exports: [SessionService],\n    controllers: [SessionController],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                get\n                            \n                            \n                                getAll\n                            \n                            \n                                getBy\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                setState\n                            \n                            \n                                tidyUpSessions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionRepository: Repository, configService: ConfigService, schedulerRegistry: SchedulerRegistry, sessionsCounter: Gauge)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionsCounter\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(issuer_state: string, values: QueryDeepPartialEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:135\n                        \n                    \n\n\n            \n                \n                        Update an existing session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            QueryDeepPartialEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(session: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Create a new session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:152\n                        \n                    \n\n\n            \n                \n                        Get a session by its state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:143\n                        \n                    \n\n\n            \n                \n                        Get all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBy\n                        \n                    \n                \n            \n            \n                \ngetBy(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:161\n                        \n                    \n\n\n            \n                \n                        Get a session by a specific condition.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Register the tidy up cron job on application bootstrap.\nThis will run every hour by default, but can be configured via the SESSION_TIDY_UP_INTERVAL config variable.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setState\n                        \n                    \n                \n            \n            \n                \n                        \n                    setState(session: Session, status: SessionStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Marks the session as successful or failed.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            SessionStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tidyUpSessions\n                        \n                    \n                \n            \n            \n                \ntidyUpSessions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:168\n                        \n                    \n\n\n            \n                \n                        Tidy up sessions that are older than 1 day.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { Session, SessionStatus } from './entities/session.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport {\n    DeepPartial,\n    FindOptionsWhere,\n    IsNull,\n    LessThan,\n    Not,\n    Repository,\n} from 'typeorm';\nimport { QueryDeepPartialEntity } from 'typeorm/query-builder/QueryPartialEntity';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport { ConfigService } from '@nestjs/config';\nimport { Gauge } from 'prom-client';\nimport { InjectMetric } from '@willsoto/nestjs-prometheus/dist/injector';\n\n@Injectable()\nexport class SessionService implements OnApplicationBootstrap {\n    constructor(\n        @InjectRepository(Session)\n        private sessionRepository: Repository,\n        private readonly configService: ConfigService,\n        private readonly schedulerRegistry: SchedulerRegistry,\n        @InjectMetric('sessions')\n        private sessionsCounter: Gauge,\n    ) {}\n\n    /**\n     * Register the tidy up cron job on application bootstrap.\n     * This will run every hour by default, but can be configured via the `SESSION_TIDY_UP_INTERVAL` config variable.\n     * @returns\n     */\n    async onApplicationBootstrap() {\n        const callback = () => {\n            void this.tidyUpSessions();\n        };\n        const intervalTime =\n            this.configService.getOrThrow('SESSION_TIDY_UP_INTERVAL') *\n            1000;\n        const interval = setInterval(callback, intervalTime);\n        this.schedulerRegistry.addInterval('tidyUpSessions', interval);\n\n        //set default values for session metrics\n        const tenantId = 'root';\n        const states: SessionStatus[] = [\n            'active',\n            'completed',\n            'expired',\n            'failed',\n        ];\n        for (const state of states) {\n            const issuanceCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: Not(IsNull()),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: 'issuance',\n                    status: state,\n                },\n                issuanceCounter,\n            );\n            const verificationCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: IsNull(),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: 'verification',\n                    status: state,\n                },\n                verificationCounter,\n            );\n        }\n\n        return this.tidyUpSessions();\n    }\n\n    /**\n     * Create a new session.\n     * @param session\n     * @returns\n     */\n    async create(session: DeepPartial) {\n        const createdSession = await this.sessionRepository.save(session);\n\n        // Count total sessions created\n        this.sessionsCounter.inc({\n            tenant_id: createdSession.tenantId,\n            session_type: createdSession.issuanceId\n                ? 'issuance'\n                : 'verification',\n            status: 'active',\n        });\n\n        return createdSession;\n    }\n\n    /**\n     * Marks the session as successful or failed.\n     * @param session\n     * @param status\n     */\n    async setState(session: Session, status: SessionStatus) {\n        const sessionType = session.issuanceId ? 'issuance' : 'verification';\n\n        await this.sessionRepository.update({ id: session.id }, { status });\n\n        // Count completed sessions (success or failure)\n        this.sessionsCounter.inc({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status,\n        });\n\n        // Decrease active sessions count\n        this.sessionsCounter.dec({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status: 'active',\n        });\n    }\n\n    /**\n     * Update an existing session.\n     * @param issuer_state\n     * @param values\n     * @returns\n     */\n    add(issuer_state: string, values: QueryDeepPartialEntity) {\n        return this.sessionRepository.update({ id: issuer_state }, values);\n    }\n\n    /**\n     * Get all sessions.\n     * @returns\n     */\n    getAll(): Promise {\n        return this.sessionRepository.find();\n    }\n\n    /**\n     * Get a session by its state.\n     * @param state\n     * @returns\n     */\n    get(state: string) {\n        return this.sessionRepository.findOneByOrFail({ id: state });\n    }\n\n    /**\n     * Get a session by a specific condition.\n     * @param where\n     * @returns\n     */\n    getBy(where: FindOptionsWhere) {\n        return this.sessionRepository.findOneByOrFail(where);\n    }\n\n    /**\n     * Tidy up sessions that are older than 1 day.\n     */\n    tidyUpSessions() {\n        const ttl = this.configService.getOrThrow('SESSION_TTL') * 1000;\n        return this.sessionRepository.delete({\n            createdAt: LessThan(new Date(Date.now() - ttl)),\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatusListController.html":{"url":"controllers/StatusListController.html","title":"controller - StatusListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatusListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/status-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status-list')@Header('Content-Type', 'application/statuslist+jwt')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.controller.ts:17\n                        \n                    \n\n\n            \n                \n                        Get the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from '@nestjs/common';\nimport { StatusListService } from './status-list.service';\nimport { ApiExcludeController, ApiTags } from '@nestjs/swagger';\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== 'true')\n@ApiTags('Status management')\n@Controller(':tenantId/status-management')\nexport class StatusListController {\n    constructor(private statusListService: StatusListService) {}\n\n    /**\n     * Get the status list\n     * @returns\n     */\n    @Get('status-list')\n    @Header('Content-Type', 'application/statuslist+jwt')\n    getList(@Param('tenantId') tenantId: string) {\n        return this.statusListService.getList(tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StatusListFile.html":{"url":"interfaces/StatusListFile.html","title":"interface - StatusListFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StatusListFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bits\n                                        \n                                \n                                \n                                        \n                                            elements\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            jwt\n                                        \n                                \n                                \n                                        \n                                            stack\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bits:     BitsPerStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BitsPerStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elements\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elements:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stack\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stack:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { join } from 'path';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport {\n    BitsPerStatus,\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from '@sd-jwt/jwt-status-list';\nimport { JwtPayload } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\nimport { Repository } from 'typeorm';\nimport { StatusUpdateDto } from './dto/status-update.dto';\nimport { Session } from '../../session/entities/session.entity';\n\ninterface StatusListFile {\n    elements: number[];\n    stack: number[];\n    bits: BitsPerStatus;\n    jwt?: string;\n}\n\n@Injectable()\nexport class StatusListService implements OnModuleInit {\n    private fileName: string = 'status-list.json';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n    ) {}\n    onModuleInit() {}\n\n    onTenantInit(tenantId: string) {\n        return this.init(tenantId);\n    }\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    private async init(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        if (!existsSync(file)) {\n            const size = 10000;\n            // create an empty array with the size of 1000\n            const elements = new Array(size).fill(0).map(() => 0);\n            // create a list of 1000 indexes and shuffel them\n            const stack = new Array(size)\n                .fill(0)\n                .map((_, i) => i)\n                .sort(() => 0.5 - Math.random());\n\n            writeFileSync(\n                file,\n                JSON.stringify({ elements, stack, bits: 1 } as StatusListFile),\n            );\n            await this.createList(tenantId);\n        }\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(tenantId: string) {\n        const file = this.getConfig(tenantId);\n        const list = new StatusList(file.elements, file.bits);\n        const iss = `${this.configService.getOrThrow('PUBLIC_URL')}`;\n\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            tenantId,\n            'status-management',\n            'status-list',\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: 'ES256',\n            typ: 'statuslist+jwt',\n            x5c: await this.cryptoService.getCertChain('signing', tenantId),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(header, payload, tenantId);\n        file.jwt = jwt;\n        this.storeConfig(file, tenantId);\n    }\n\n    getList(tenantId: string) {\n        return this.getConfig(tenantId).jwt;\n    }\n\n    private getConfig(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        return JSON.parse(readFileSync(file, 'utf-8')) as StatusListFile;\n    }\n\n    private storeConfig(content: StatusListFile, tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        writeFileSync(file, JSON.stringify(content));\n    }\n\n    /**\n     * Get the next free entry in the status list\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = this.getConfig(session.tenantId);\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error('Stack for status list is empty!!!');\n        }\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            session.tenantId,\n            'status-management',\n            'status-list',\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n        this.storeConfig(file, session.tenantId);\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private setEntry(id: number, value: number, tenantId: string) {\n        const file = this.getConfig(tenantId);\n        file.elements[id] = value;\n        this.storeConfig(file, tenantId);\n        return this.createList(tenantId);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatusListModule.html":{"url":"modules/StatusListModule.html","title":"module - StatusListModule","body":"\n                   \n\n\n\n\n    Modules\n    StatusListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_imports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/status-list/status-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatusListController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StatusListController } from './status-list.controller';\nimport { StatusListService } from './status-list.service';\nimport { CryptoModule } from '../../crypto/crypto.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\n\n@Module({\n    imports: [CryptoModule, TypeOrmModule.forFeature([StatusMapping])],\n    controllers: [StatusListController],\n    providers: [StatusListService],\n    exports: [StatusListService],\n})\nexport class StatusListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatusListService.html":{"url":"injectables/StatusListService.html","title":"injectable - StatusListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatusListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fileName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntry\n                            \n                            \n                                    Async\n                                createList\n                            \n                            \n                                    Private\n                                getConfig\n                            \n                            \n                                getList\n                            \n                            \n                                    Private\n                                    Async\n                                init\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                onTenantInit\n                            \n                            \n                                    Private\n                                setEntry\n                            \n                            \n                                    Private\n                                storeConfig\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, statusMappingRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/status-list/status-list.service.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusMappingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEntry(session: Session, credentialConfigurationId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:135\n                        \n                    \n\n\n            \n                \n                        Get the next free entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                        \n                    createList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:76\n                        \n                    \n\n\n            \n                \n                        Create a new status list and stored it in the file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfig(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         StatusListFile\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getList\n                        \n                    \n                \n            \n            \n                \ngetList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Initialize the status list service by checking if the status list file exists.\nIf it does not exist, create a new status list with 10,000 entries and a stack\nof 10,000 indexes. The stack is shuffled to ensure randomness in the order of\nentries. The status list is stored in the file system as a JSON file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \nonTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    setEntry(id: number, value: number, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Update the value of an entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storeConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeConfig(content: StatusListFile, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                content\n                                            \n                                                            StatusListFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(value: StatusUpdateDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:186\n                        \n                    \n\n\n            \n                \n                        Update the status of a session and its credential configuration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'status-list.json'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/status-list.service.ts:29\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { join } from 'path';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport {\n    BitsPerStatus,\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from '@sd-jwt/jwt-status-list';\nimport { JwtPayload } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\nimport { Repository } from 'typeorm';\nimport { StatusUpdateDto } from './dto/status-update.dto';\nimport { Session } from '../../session/entities/session.entity';\n\ninterface StatusListFile {\n    elements: number[];\n    stack: number[];\n    bits: BitsPerStatus;\n    jwt?: string;\n}\n\n@Injectable()\nexport class StatusListService implements OnModuleInit {\n    private fileName: string = 'status-list.json';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n    ) {}\n    onModuleInit() {}\n\n    onTenantInit(tenantId: string) {\n        return this.init(tenantId);\n    }\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    private async init(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        if (!existsSync(file)) {\n            const size = 10000;\n            // create an empty array with the size of 1000\n            const elements = new Array(size).fill(0).map(() => 0);\n            // create a list of 1000 indexes and shuffel them\n            const stack = new Array(size)\n                .fill(0)\n                .map((_, i) => i)\n                .sort(() => 0.5 - Math.random());\n\n            writeFileSync(\n                file,\n                JSON.stringify({ elements, stack, bits: 1 } as StatusListFile),\n            );\n            await this.createList(tenantId);\n        }\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(tenantId: string) {\n        const file = this.getConfig(tenantId);\n        const list = new StatusList(file.elements, file.bits);\n        const iss = `${this.configService.getOrThrow('PUBLIC_URL')}`;\n\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            tenantId,\n            'status-management',\n            'status-list',\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: 'ES256',\n            typ: 'statuslist+jwt',\n            x5c: await this.cryptoService.getCertChain('signing', tenantId),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(header, payload, tenantId);\n        file.jwt = jwt;\n        this.storeConfig(file, tenantId);\n    }\n\n    getList(tenantId: string) {\n        return this.getConfig(tenantId).jwt;\n    }\n\n    private getConfig(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        return JSON.parse(readFileSync(file, 'utf-8')) as StatusListFile;\n    }\n\n    private storeConfig(content: StatusListFile, tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        writeFileSync(file, JSON.stringify(content));\n    }\n\n    /**\n     * Get the next free entry in the status list\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = this.getConfig(session.tenantId);\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error('Stack for status list is empty!!!');\n        }\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            session.tenantId,\n            'status-management',\n            'status-list',\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n        this.storeConfig(file, session.tenantId);\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private setEntry(id: number, value: number, tenantId: string) {\n        const file = this.getConfig(tenantId);\n        file.elements[id] = value;\n        this.storeConfig(file, tenantId);\n        return this.createList(tenantId);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusMapping.html":{"url":"entities/StatusMapping.html","title":"entity - StatusMapping","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-mapping.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigurationId\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                list\n                            \n                            \n                                    \n                                sessionId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\n\n@Entity()\nexport class StatusMapping {\n    @Column({ type: 'varchar', primary: true })\n    sessionId: string;\n\n    @Column({ type: 'varchar', primary: true })\n    list: string;\n\n    @Column({ type: 'int', primary: true })\n    index: number;\n\n    @Column({ type: 'varchar', primary: true })\n    credentialConfigurationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusUpdateDto.html":{"url":"classes/StatusUpdateDto.html","title":"class - StatusUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/dto/status-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationId\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:16\n                        \n                    \n\n            \n                \n                    The ID of the credential configuration\nThis is optional, if not provided, all credentials will be revoked of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:8\n                        \n                    \n\n            \n                \n                    The session ID of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsIn(['0', '1'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:24\n                        \n                    \n\n            \n                \n                    The status of the credential\n0 = valid, 1 = revoked\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class StatusUpdateDto {\n    /**\n     * The session ID of the user\n     */\n    @IsString()\n    sessionId: string;\n\n    /**\n     * The ID of the credential configuration\n     * This is optional, if not provided, all credentials will be revoked of the session.\n     */\n    @IsString()\n    @IsOptional()\n    credentialConfigurationId?: string;\n\n    /**\n     * The status of the credential\n     * 0 = valid, 1 = revoked\n     */\n    @IsNumber()\n    @IsIn([0, 1])\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Values of the user token\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\nexport const Token = createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n);\n\n/**\n * Values of the user token\n */\nexport interface TokenPayload {\n    sub: string; // Subject (client_id for client credentials)\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponse.html":{"url":"classes/TokenResponse.html","title":"class - TokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                expires_in\n                            \n                            \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenResponse {\n    access_token: string;\n    token_type: 'Bearer';\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCredentialIssuanceBindingDto.html":{"url":"classes/UpdateCredentialIssuanceBindingDto.html","title":"class - UpdateCredentialIssuanceBindingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCredentialIssuanceBindingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating the key ID of an existing binding.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                keyID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        keyID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new key ID to use for signing this credential', example: 'signing-key-2024-02'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for creating a new credential-issuance binding.\n */\nexport class CreateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: 'The ID of the credential configuration',\n        example: 'university-degree',\n    })\n    @IsString()\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: 'The ID of the issuance configuration',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    @IsUUID()\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description:\n            'The key ID to use for signing this credential in this issuance config',\n        example: 'signing-key-2024-01',\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for updating the key ID of an existing binding.\n */\nexport class UpdateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: 'The new key ID to use for signing this credential',\n        example: 'signing-key-2024-02',\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for the response of a credential-issuance binding.\n */\nexport class CredentialIssuanceBindingResponseDto {\n    @ApiProperty({\n        description: 'The unique identifier of the binding',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    id: string;\n\n    @ApiProperty({\n        description: 'The ID of the credential configuration',\n        example: 'university-degree',\n    })\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: 'The ID of the issuance configuration',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description: 'The key ID used for signing this credential',\n        example: 'signing-key-2024-01',\n    })\n    keyID: string;\n\n    @ApiProperty({\n        description: 'The timestamp when the binding was created',\n        example: '2024-08-03T10:30:00Z',\n    })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VCT.html":{"url":"classes/VCT.html","title":"class - VCT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VCT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                extends\n                            \n                            \n                                    \n                                    Optional\n                                extends#integrity\n                            \n                            \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri#integrity\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\nexport class VCT {\n    @IsString()\n    vct: string;\n    @IsString()\n    name?: string;\n    @IsString()\n    description?: string;\n    @IsString()\n    extends?: string;\n    @IsString()\n    'extends#integrity'?: string;\n    @IsString()\n    schema_uri?: string;\n    @IsString()\n    'schema_uri#integrity'?: string;\n}\n\nexport class PresentationDuringIssuance {\n    @IsString()\n    type: string;\n    @IsObject()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VerifierModule.html":{"url":"modules/VerifierModule.html","title":"module - VerifierModule","body":"\n                   \n\n\n\n\n    Modules\n    VerifierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VerifierModule\n\n\n\ncluster_VerifierModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/verifier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport { RegistrarModule } from '../registrar/registrar.module';\nimport { SessionModule } from '../session/session.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { PresentationsModule } from './presentations/presentations.module';\nimport { Oid4vpModule } from './oid4vp/oid4vp.module';\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        SessionModule,\n        HttpModule,\n        PresentationsModule,\n        Oid4vpModule,\n    ],\n})\nexport class VerifierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfig.html":{"url":"classes/WebHookAuthConfig.html","title":"class - WebHookAuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhook authentication.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApiKeyConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:43\n                        \n                    \n\n            \n                \n                    Configuration for API key authentication.\nThis is required if the type is 'apiKey'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['apiKey'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:36\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\nCurrently, only 'apiKey' is supported.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookConfig.html":{"url":"classes/WebhookConfig.html","title":"class - WebhookConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhooks used in various services.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                auth\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebHookAuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:62\n                        \n                    \n\n            \n                \n                    Optional authentication configuration for the webhook.\nIf not provided, no authentication will be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:54\n                        \n                    \n\n            \n                \n                    The URL to which the webhook will send notifications.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebhookService.html":{"url":"injectables/WebhookService.html","title":"injectable - WebhookService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WebhookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling webhooks in the application.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendWebhook\n                            \n                            \n                                    Async\n                                sendWebhookNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, sessionService: SessionService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor for WebhookService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendWebhook\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWebhook(session: Session, logContext: SessionLogContext, credentials: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Sends a webhook with the provided credentials, also return the response data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentials\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendWebhookNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWebhookNotification(session: Session, logContext: SessionLogContext, notification: Notification)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Sends a webhook notification for a session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notification\n                                            \n                                                            Notification\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Injectable } from '@nestjs/common';\nimport { firstValueFrom } from 'rxjs';\nimport { SessionService } from '../../session/session.service';\nimport { SessionLoggerService } from '../logger/session-logger.service';\nimport { Notification, Session } from '../../session/entities/session.entity';\nimport { SessionLogContext } from '../logger/session-logger-context';\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the provided credentials, also return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     */\n    async sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials: any[],\n    ) {\n        const headers: Record = {};\n        if (session.webhook!.auth && session.webhook!.auth.type === 'apiKey') {\n            headers[session.webhook!.auth.config.headerName] =\n                session.webhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, 'Sending webhook', {\n            webhookUrl: session.webhook!.url,\n            authType: session.webhook!.auth?.type || 'none',\n        });\n\n        await firstValueFrom(\n            this.httpService.post(\n                session.webhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.values = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    'Webhook sent successfully',\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    'Error sending webhook',\n                    {\n                        webhookUrl: session.webhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === 'apiKey') {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            'Sending webhook notification',\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || 'none',\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.values = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    'Webhook notification sent successfully',\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    'Error sending webhook',\n                    {\n                        webhookUrl: session.webhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WellKnownController.html":{"url":"controllers/WellKnownController.html","title":"controller - WellKnownController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WellKnownController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/.well-known\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI well-known endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authzMetadata\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getJwks\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                issuerMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    authzMetadata(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('oauth-authorization-server')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:59\n                        \n                    \n\n\n            \n                \n                        Authorization Server Metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJwks(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Header('Content-Type', 'application/jwk-set+json')@Get('jwks.json')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:71\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for the authorization server.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get OpenID4VCI issuer metadata', description: 'Returns the OpenID4VCI issuer metadata.'})@ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)@Get('openid-credential-issuer')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:47\n                        \n                    \n\n\n            \n                \n                        Retrieves the OpenID4VCI issuer metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, UseGuards } from '@nestjs/common';\nimport { WellKnownService } from './well-known.service';\nimport { JwksResponseDto } from './dto/jwks-response.dto';\nimport { Oauth2AuthorizationServerResponse } from './dto/oauth-authorization-server-response.dto';\nimport {\n    ApiExcludeController,\n    ApiOperation,\n    ApiParam,\n    ApiProduces,\n} from '@nestjs/swagger';\nimport { ContentType } from '../utils/mediaType/media-type.decorator';\nimport { MediaType } from '../utils/mediaType/media-type.enum';\nimport { SessionGuard } from '../session/session.guard';\nimport { SessionEntity } from '../session/session.decorator';\nimport { Session } from '../session/entities/session.entity';\n\n/**\n * Controller for the OpenID4VCI well-known endpoints.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== 'true')\n@UseGuards(SessionGuard)\n@ApiParam({\n    name: 'session',\n    required: true,\n})\n@Controller(':session/.well-known')\nexport class WellKnownController {\n    /**\n     * Constructor for WellKnownController.\n     * @param wellKnownService\n     */\n    constructor(private readonly wellKnownService: WellKnownService) {}\n\n    /**\n     * Retrieves the OpenID4VCI issuer metadata for a given tenant.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    @ApiOperation({\n        summary: 'Get OpenID4VCI issuer metadata',\n        description: 'Returns the OpenID4VCI issuer metadata.',\n    })\n    //we can not set the accept in the apiheader via swagger.\n    @ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)\n    @Get('openid-credential-issuer')\n    async issuerMetadata(\n        @SessionEntity() session: Session,\n        @ContentType() contentType: MediaType,\n    ) {\n        return this.wellKnownService.getIssuerMetadata(session, contentType);\n    }\n\n    /**\n     * Authorization Server Metadata\n     * @returns\n     */\n    @Get('oauth-authorization-server')\n    authzMetadata(\n        @SessionEntity() session: Session,\n    ): Oauth2AuthorizationServerResponse {\n        return this.wellKnownService.getAuthzMetadata(session);\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for the authorization server.\n     * @returns\n     */\n    @Header('Content-Type', 'application/jwk-set+json')\n    @Get('jwks.json')\n    async getJwks(@SessionEntity() session: Session): Promise {\n        return this.wellKnownService.getJwks(session.tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WellKnownService.html":{"url":"injectables/WellKnownService.html","title":"injectable - WellKnownService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WellKnownService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle well-known endpoints and metadata retrieval.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAuthzMetadata\n                            \n                            \n                                    Async\n                                getIssuerMetadata\n                            \n                            \n                                    Async\n                                getJwks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(oid4vciService: Oid4vciService, cryptoService: CryptoService, authorizeService: AuthorizeService, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/well-known/well-known.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor for WellKnownService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        oid4vciService\n                                                  \n                                                        \n                                                                        Oid4vciService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authorizeService\n                                                  \n                                                        \n                                                                        AuthorizeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthzMetadata\n                        \n                    \n                \n            \n            \n                \ngetAuthzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIssuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Retrieves the issuer metadata for a given tenant for the specified content type.\nThe metadata can be returned in two formats:\n\nan unsigned JSON document using the media type application/json, or\na signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJwks(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { Oid4vciService } from '../issuer/oid4vci/oid4vci.service';\nimport { AuthorizeService } from '../issuer/authorize/authorize.service';\nimport { CredentialIssuerMetadataDto } from './dto/credential-issuer-metadata.dto';\nimport { Oauth2AuthorizationServerResponse } from './dto/oauth-authorization-server-response.dto';\nimport { JwksResponseDto } from './dto/jwks-response.dto';\nimport { MediaType } from '../utils/mediaType/media-type.enum';\nimport { Session } from '../session/entities/session.entity';\nimport { CryptoImplementationService } from '../crypto/key/crypto/crypto.service';\n\n/**\n * Service to handle well-known endpoints and metadata retrieval.\n */\n@Injectable()\nexport class WellKnownService {\n    /**\n     * Constructor for WellKnownService.\n     * @param oid4vciService\n     * @param cryptoService\n     * @param authorizeService\n     */\n    constructor(\n        private readonly oid4vciService: Oid4vciService,\n        private readonly cryptoService: CryptoService,\n        private readonly authorizeService: AuthorizeService,\n        private readonly cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Retrieves the issuer metadata for a given tenant for the specified content type.\n     * The metadata can be returned in two formats:\n     * - an unsigned JSON document using the media type application/json, or\n     * - a signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    async getIssuerMetadata(session: Session, contentType: MediaType) {\n        const metadata = (await this.oid4vciService.issuerMetadata(session))\n            .credentialIssuer as unknown as CredentialIssuerMetadataDto;\n\n        if (contentType === MediaType.APPLICATION_JWT) {\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                'access',\n            );\n            return this.cryptoService.signJwt(\n                {\n                    typ: 'openidvci-issuer-metadata+jwt',\n                    alg: this.cryptoImplementationService.getAlg(),\n                    x5c: await this.cryptoService.getCertChain(\n                        'access',\n                        session.tenantId,\n                    ),\n                },\n                {\n                    ...metadata,\n                    iss: metadata.credential_issuer,\n                    sub: metadata.credential_issuer,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    // [Review]: should we add `exp` value here?\n                    //MM: the value makes sense when we cache the issuer metadata so it must not be signed on every request. Like when it is issued every hour, its lifetime is 1 hour and the jwt is in the cache.\n                },\n                session.tenantId,\n                keyId,\n            );\n        }\n\n        return metadata;\n    }\n\n    /**\n     * Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n     * @returns\n     */\n    getAuthzMetadata(session: Session): Oauth2AuthorizationServerResponse {\n        return this.authorizeService.authzMetadata(\n            session,\n        ) as Oauth2AuthorizationServerResponse;\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for a given tenant.\n     * @returns\n     */\n    async getJwks(tenantId: string): Promise {\n        return this.cryptoService.getJwks(tenantId).then((key) => ({\n            keys: [key],\n        }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n1.4.0 (2025-08-05)\nBug Fixes\n\nadd list of compatible wallets (#22) (a946a08)\nconfig folder (39b17b8)\nimprove issuance config return (#18) (e17bb4a)\nrename repo user to openwallet-foundation-labs (#15) (7337c24)\ntypo (#25) (36492f7)\nupdate tenant setup (#28) (88fbb1f)\n\nFeatures\n\nadd signed metadata feature for issuer (#19) (0bd3568)\nmonitor (#29) (8dc4986)\n\n1.3.0 (2025-07-28)\nBug Fixes\n\nadd documentation\n(1912bb8)\nadd more granular logging\n(53804b0)\nuse oidc for all flows\n(#12)\n(f15f6ab)\n\nFeatures\n\nimprove issuance config\n(#13)\n(b99786b)\n\n1.2.3 (2025-07-20)\nBug Fixes\n\nci deploy with version generation\n(259ab39)\nrelease pipeline\n(7a6a69c)\nset correct way for deployment\n(2aa727a)\nuse oidc url instead of keycloak one\n(2913417)\n\n1.2.2 (2025-07-19)\nBug Fixes\n\nadd tmp logger\n(6bb4aa9)\nset correct url for vp\n(295428b)\n\n1.2.1 (2025-07-18)\nBug Fixes\n\nci\n(8f9498a)\nci\n(905e17c)\n\n1.2.1 (2025-07-18)\nBug Fixes\n\nci\n(905e17c)\n\n1.2.0 (2025-07-18)\nBug Fixes\n\nadd codecov\n(#2)\n(9104df3)\nadd test for presentation\n(#6)\n(e3e5971)\nremove console logs\n(32fbd8e)\nremove ts file from root\n(b989c6c)\nupload test results\n(#3)\n(f75298f)\nvitest config\n(beef4d2)\n\nFeatures\n\nadd multi tenant support\n(#7)\n(46c9ce6)\n\n1.1.0 (2025-07-11)\nBug Fixes\n\nset correct version\n(91b5499)\nupdate db env\n(35f4d1e)\n\nFeatures\n\nadd deployment options\n(937603a)\n\n1.0.1 (2025-07-10)\nBug Fixes\n\nadd auth to webhook\n(c3b1b48)\nadd cloudflare worker example\n(6d31de0)\ngeneral improvements\n(f7e7505)\nmake key folder static\n(6a6cdb6)\nwebhook handling\n(df29d1e)\n\n1.0.0 (2025-07-09)\nBug Fixes\n\nadd semantic release\n(c805439)\nadjust release pipeline\n(3ac47ec)\nci\n(892b30e)\nci\n(40ccd32)\nci\n(12395c8)\nci\n(45f3f7f)\nci\n(4be0171)\nci\n(2f07af2)\nci\n(2a71850)\nci nameing\n(33ac2c7)\nci, install pnpm\n(ac4ee24)\nci, remove version\n(54e8a4e)\ndocker deploy\n(98303c1)\nmain\n(d6205da)\npage build\n(b3abd57)\nsplit jobs\n(2742ec4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            AUTH_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/client.service.ts\n            \n            injectable\n            ClientService\n            \n                60 %\n                (6/10)\n            \n        \n        \n            \n                \n                src/auth/client.service.ts\n            \n            interface\n            Client\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/client-credentials.dto.ts\n            \n            class\n            ClientCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/token-response.dto.ts\n            \n            class\n            TokenResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/entitites/client.entity.ts\n            \n            entity\n            ClientEntry\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/entitites/client.entity.ts\n            \n            type alias\n            ClientStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            injectable\n            JwtService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            interface\n            GenerateTokenOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/token.decorator.ts\n            \n            interface\n            TokenPayload\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/auth/token.decorator.ts\n            \n            variable\n            Token\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/crypto.service.ts\n            \n            injectable\n            CryptoService\n            \n                61 %\n                (11/18)\n            \n        \n        \n            \n                \n                src/crypto/encryption/encryption.service.ts\n            \n            injectable\n            EncryptionService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto/crypto-implementation.ts\n            \n            interface\n            CryptoImplementation\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto/crypto-implementation.ts\n            \n            type alias\n            KeyPair\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto/crypto-implementation.ts\n            \n            type alias\n            Signer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto/crypto-implementation.ts\n            \n            type alias\n            Verifier\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto/crypto.module.ts\n            \n            variable\n            CRYPTO_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto/crypto.service.ts\n            \n            injectable\n            CryptoImplementationService\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto/crypto.service.ts\n            \n            type alias\n            CryptoType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto/ed25519.ts\n            \n            variable\n            ED25519\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            Key\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            KeyImportDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/crypto/key/entities/cert.entity.ts\n            \n            entity\n            CertEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/cert.entity.ts\n            \n            type alias\n            CertificateType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/filesystem-key.service.ts\n            \n            injectable\n            FileSystemKeyService\n            \n                64 %\n                (11/17)\n            \n        \n        \n            \n                \n                src/crypto/key/key.controller.ts\n            \n            controller\n            KeyController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/crypto/key/key.module.ts\n            \n            variable\n            KEY_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/key.service.ts\n            \n            class\n            KeyObj\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/crypto/key/key.service.ts\n            \n            class\n            KeyService\n            \n                61 %\n                (8/13)\n            \n        \n        \n            \n                \n                src/crypto/key/vault-key.service.ts\n            \n            injectable\n            VaultKeyService\n            \n                47 %\n                (9/19)\n            \n        \n        \n            \n                \n                        src/database/database.module.ts\n            \n            variable\n            DB_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.controller.ts\n            \n            controller\n            AuthorizeController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            injectable\n            AuthorizeService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenAuthorizationCodeRequestGrant\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenPreAuthorizedCodeRequestGrant\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/authorize-request.dto.ts\n            \n            class\n            AuthorizeQueries\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/par-response.dto.ts\n            \n            class\n            ParResponseDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/credentials-metadata.controller.ts\n            \n            controller\n            CredentialsMetadataController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/credential-config.dto.ts\n            \n            class\n            PresentationDuringIssuance\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/credential-config.dto.ts\n            \n            class\n            VCT\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/schema-response.dto.ts\n            \n            class\n            SchemaResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credential-config/credential-config.service.ts\n            \n            injectable\n            CredentialConfigService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.controller.ts\n            \n            controller\n            CredentialsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.service.ts\n            \n            injectable\n            CredentialsService\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            entity\n            CredentialConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationConfigDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationUrlConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            PresentationDuringIssuanceConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            type alias\n            AuthenticationConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.helper.ts\n            \n            class\n            AuthenticationConfigHelper\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n            \n            class\n            CreateCredentialIssuanceBindingDto\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n            \n            class\n            CredentialIssuanceBindingResponseDto\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n            \n            class\n            UpdateCredentialIssuanceBindingDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            CredentialConfigMapping\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            IssuanceDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/issuer/issuance/entities/credential-issuance-binding.entity.ts\n            \n            entity\n            CredentialIssuanceBinding\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/entities/issuance-config.entity.ts\n            \n            entity\n            IssuanceConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.controller.ts\n            \n            controller\n            IssuanceController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.service.ts\n            \n            injectable\n            IssuanceService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/issuer/issuer-management/issuer-management.controller.ts\n            \n            controller\n            IssuerManagementController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuer.module.ts\n            \n            variable\n            ISSUER_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/notification-request.dto.ts\n            \n            class\n            NotificationRequestDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferRequestDto\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.controller.ts\n            \n            controller\n            Oid4vciController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.service.ts\n            \n            injectable\n            Oid4vciService\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/util.ts\n            \n            function\n            getHeadersFromRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/dto/status-update.dto.ts\n            \n            class\n            StatusUpdateDto\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/status-list/entities/status-mapping.entity.ts\n            \n            entity\n            StatusMapping\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.controller.ts\n            \n            controller\n            StatusListController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.service.ts\n            \n            injectable\n            StatusListService\n            \n                38 %\n                (5/13)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.service.ts\n            \n            interface\n            StatusListFile\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/registrar/registrar-config.ts\n            \n            class\n            RegistrarConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/registrar/registrar.module.ts\n            \n            variable\n            REGISTRAR_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/registrar/registrar.service.ts\n            \n            injectable\n            RegistrarService\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                src/registrar/registrar.service.ts\n            \n            interface\n            AccessCertificateResponse\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/session/entities/session.entity.ts\n            \n            entity\n            Session\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/session/entities/session.entity.ts\n            \n            type alias\n            Notification\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/session/entities/session.entity.ts\n            \n            type alias\n            SessionStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/session/session.controller.ts\n            \n            controller\n            SessionController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                        src/session/session.decorator.ts\n            \n            variable\n            SessionEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/session/session.guard.ts\n            \n            guard\n            SessionGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/session/session.module.ts\n            \n            variable\n            SESSION_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/session/session.service.ts\n            \n            injectable\n            SessionService\n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            injectable\n            LoggerConfigService\n            \n                23 %\n                (3/13)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            interface\n            LoggerConfiguration\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger-context.ts\n            \n            interface\n            SessionLogContext\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SESSION_LOGGER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SessionLogger\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.interceptor.ts\n            \n            injectable\n            SessionLoggerInterceptor\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.service.ts\n            \n            injectable\n            SessionLoggerService\n            \n                85 %\n                (12/14)\n            \n        \n        \n            \n                \n                        src/utils/mediaType/media-type.decorator.ts\n            \n            variable\n            ContentType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            ApiKeyConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebhookConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/utils/webhook/webhook.dto.ts\n            \n            type alias\n            AuthConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.service.ts\n            \n            injectable\n            WebhookService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/authorization-response.dto.ts\n            \n            class\n            AuthorizationResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n            \n            interface\n            PresentationRequestOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request.dto.ts\n            \n            class\n            PresentationRequest\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.controller.ts\n            \n            controller\n            Oid4vpController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.service.ts\n            \n            injectable\n            Oid4vpService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/auth-response.dto.ts\n            \n            interface\n            AuthResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/vp-request.dto.ts\n            \n            class\n            RegistrationCertificateRequest\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            entity\n            PresentationConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.controller.ts\n            \n            controller\n            PresentationManagementController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.service.ts\n            \n            injectable\n            PresentationsService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/verifier/resolver/dto/issuer-metadata.dto.ts\n            \n            interface\n            IssuerMetadata\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/resolver/resolver.service.ts\n            \n            injectable\n            ResolverService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/well-known/dto/credential-issuer-metadata.dto.ts\n            \n            class\n            CredentialIssuerMetadataDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            EC_Public\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            JwksResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/well-known/dto/oauth-authorization-server-response.dto.ts\n            \n            class\n            Oauth2AuthorizationServerResponse\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/well-known/well-known.controller.ts\n            \n            controller\n            WellKnownController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/well-known/well-known.service.ts\n            \n            injectable\n            WellKnownService\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @badgateway/oauth2-client : ^3.2.0\n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/common : ^11.1.3\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.3\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.3\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/serve-static : ^5.0.3\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @openid4vc/oauth2 : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/openid4vci : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/openid4vp : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/utils : ^0.3.0-alpha-20250602121005\n        \n            @sd-jwt/crypto-nodejs : ^0.14.0\n        \n            @sd-jwt/jwt-status-list : ^0.14.0\n        \n            @sd-jwt/sd-jwt-vc : ^0.14.0\n        \n            @sd-jwt/types : ^0.14.0\n        \n            @willsoto/nestjs-prometheus : ^6.0.2\n        \n            axios : ^1.10.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            joi : ^17.13.3\n        \n            jose : ^6.0.11\n        \n            jwks-rsa : ^3.2.0\n        \n            mysql2 : ^3.14.1\n        \n            nestjs-pino : ^4.4.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.16.3\n        \n            pino-http : ^10.5.0\n        \n            pino-pretty : ^13.0.0\n        \n            prom-client : ^15.1.3\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            sqlite3 : ^5.1.7\n        \n            typeorm : ^0.3.25\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MediaType   (src/.../media-type.enum.ts)\n                        \n                        \n                            ResponseType   (src/.../presentation-request.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/mediaType/media-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        MediaType\n                    \n                \n                    \n                        \n                            Represents the media types used in the application.\n\n                        \n                    \n                        \n                            \n                                 APPLICATION_JSON\n                            \n                        \n                        \n                            \n                                Value : application/json\n                            \n                        \n                        \n                            \n                                 APPLICATION_JWT\n                            \n                        \n                        \n                            \n                                Value : application/jwt\n                            \n                        \n            \n        \n\n    src/verifier/oid4vp/dto/presentation-request.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ResponseType\n                    \n                \n                    \n                        \n                            Enum for the type of response expected from the presentation request.\n\n                        \n                    \n                        \n                            \n                                 QRCode\n                            \n                        \n                        \n                            \n                                Value : qrcode\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n                        \n                            \n                                Value : uri\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getHeadersFromRequest   (src/.../util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function to initialize the NestJS application.\n\n\n                \n            \n        \n    \n    src/issuer/oid4vci/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to extract headers from an Express request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\n\n\nYour Diplomatic Layer for EUDI Wallet Integration\nEUDIPLO is an open-source middleware that bridges your backend and EUDI Wallets\nusing a unified API and standardized protocols.\n\n🧭 Overview\nOrganizations joining the EUDI Wallet ecosystem face a tough choice: patch\ntogether protocol libraries that may not exist for their stack, or rely on\nproprietary solutions that risk vendor lock-in.\nEUDIPLO solves this by providing a lightweight, source-available, protocol\nabstraction layer. It communicates over HTTP and integrates easily with your\nexisting backend stack—so you can focus on your business logic, not\ncryptographic plumbing.\nIt supports all core flows of electronic attribute attestations—issuing,\nrequesting, and even requesting during issuance—and is already\ncompatible with multiple\nwallets.\nWhile still in early development, EUDIPLO is built for production: secure key\nmanagement, scalable database support, and clean API boundaries.\n\n🧩 Features\n\n✅ Supports OID4VCI, OID4VP, SD-JWT VC, and OAuth Token Status\nList\n✅ JSON-based credential configuration\n✅ Client credentials authentication for easy service integration\n✅ Runs via Docker with .env config\n✅ HTTP-based integration with any backend\n✅ Secure key management & pluggable storage\n✅ Privacy-friendly: no external calls, no long-term storage\n\n\n🚀 Quick Start\nExample :# Clone and configure\ngit clone https://github.com/openwallet-foundation-labs/eudiplo.git\ncd eudiplo\ncp .env.example .env\n\n# Configure authentication\necho \"JWT_SECRET=$(openssl rand -base64 32)\" >> .env\necho \"AUTH_CLIENT_SECRET=$(openssl rand -base64 24)\" >> .env\n\n# Start with Docker\ndocker run -p 3000:3000 \\\n  -e PUBLIC_URL=https://example.com \\\n  -e JWT_SECRET=your-32-character-secret \\\n  -e AUTH_CLIENT_SECRET=your-issuer-secret \\\n  -v $(pwd)/config:/app/config \\\n  ghcr.io/openwallet-foundation-labs/eudiplo:latest\n\n# Get a token and start using the API\ncurl -X POST http://localhost:3000/auth/oauth2/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"client_id\": \"root\",\n    \"client_secret\": \"root\"\n  }'📚 API:\nhttps://openwallet-foundation-labs.github.io/eudiplo/latest/api/📦\nFull setup:\nQuickstart Guide\n\n📚 Documentation\nChoose your documentation version:\n\n🚀 Latest Stable (recommended):\nhttps://openwallet-foundation-labs.github.io/eudiplo/latest/ -\nDocumentation for the most recent major release\n🔬 Development:\nhttps://openwallet-foundation-labs.github.io/eudiplo/main/ -\nLatest features from the main branch\n📚 Specific Major Versions:\nv1,\nv2, etc.\n\nKey sections:\n\nArchitecture\nSupported Protocols\nAPI Reference\nCode Documentation\n\n\n🤝 Contributing\nWe welcome PRs from wallet developers, institutions, and contributors interested\nin advancing the EUDI Wallet ecosystem.\nSee CONTRIBUTING.md for guidelines.\n💬 Have questions? Join our\nDiscord community to ask questions, get help,\nand connect with other developers.\n\n📝 License\nLicensed under the Apache 2.0 License\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nExample :                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\n\n\n   END OF TERMS AND CONDITIONS\n   APPENDIX: How to apply the Apache License to your work.\nExample :  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.   Copyright [2025] [Mirko Mollik]\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\nExample :   http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssuerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeyModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetricModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        Oid4vpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PresentationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegistrarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResolverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatusListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VerifierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAuthModule -->\n\nCryptoModule->AuthModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nCryptoService \n\nCryptoService \n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nCryptoImplementationService \n\nCryptoImplementationService \n\nCryptoImplementationService  -->\n\nCryptoModule->CryptoImplementationService \n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\nAuthModule -->\n\nRegistrarModule->AuthModule\n\n\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\nOid4vpModule -->\n\nRegistrarModule->Oid4vpModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\nAuthModule -->\n\nStatusListModule->AuthModule\n\n\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\n\n\nCryptoImplementationService\n\nCryptoImplementationService\n\nCryptoModule -->\n\nCryptoImplementationService->CryptoModule\n\n\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\nOid4vpModule -->\n\nPresentationsModule->Oid4vpModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nResolverModule\n\nResolverModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nResolverService \n\nResolverService \n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        16 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    15 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    25 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    35 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    13 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : a middleware to interact with the EUDI Wallet\n        \n            Bugs : https://github.com/openwallet-foundation-labs/eudiplo/issues\n        \n            License : Apache-2.0\n        \n            Repository : https://github.com/openwallet-foundation-labs/eudiplo.git\n        \n            Author : Mirko Mollik \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthConfig   (src/.../webhook.dto.ts)\n                        \n                        \n                            AuthenticationConfig   (src/.../authentication-config.dto.ts)\n                        \n                        \n                            CertificateType   (src/.../cert.entity.ts)\n                        \n                        \n                            ClientStatus   (src/.../client.entity.ts)\n                        \n                        \n                            CryptoType   (src/.../crypto.service.ts)\n                        \n                        \n                            KeyPair   (src/.../crypto-implementation.ts)\n                        \n                        \n                            Notification   (src/.../session.entity.ts)\n                        \n                        \n                            SessionStatus   (src/.../session.entity.ts)\n                        \n                        \n                            Signer   (src/.../crypto-implementation.ts)\n                        \n                        \n                            Verifier   (src/.../crypto-implementation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/webhook/webhook.dto.ts\n    \n    \n        \n            \n                \n                    \n                    AuthConfig\n                \n            \n            \n                \n                    Enum for the type of authentication used in webhooks.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/issuer/issuance/dto/authentication-config.dto.ts\n    \n    \n        \n            \n                \n                    \n                    AuthenticationConfig\n                \n            \n            \n                \n                    Union type for authentication configurations\nEach method corresponds to a specific OpenID4VC flow\n\n                \n            \n            \n                \n                        literal type | literal type | literal type\n\n                \n            \n        \n    \n    src/crypto/key/entities/cert.entity.ts\n    \n    \n        \n            \n                \n                    \n                    CertificateType\n                \n            \n            \n                \n                        \"access\" | \"signing\"\n\n                \n            \n        \n    \n    src/auth/entitites/client.entity.ts\n    \n    \n        \n            \n                \n                    \n                    ClientStatus\n                \n            \n            \n                \n                        \"init\" | \"set up\" | \"error\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto/crypto.service.ts\n    \n    \n        \n            \n                \n                    \n                    CryptoType\n                \n            \n            \n                \n                        \"ES256\" | \"Ed25519\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto/crypto-implementation.ts\n    \n    \n        \n            \n                \n                    \n                    KeyPair\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Signer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Verifier\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/session/entities/session.entity.ts\n    \n    \n        \n            \n                \n                    \n                    Notification\n                \n            \n            \n                \n                    Represents a session entity for managing user sessions in the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SessionStatus\n                \n            \n            \n                \n                        \"active\" | \"completed\" | \"expired\" | \"failed\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_VALIDATION_SCHEMA   (src/.../auth.module.ts)\n                        \n                        \n                            ContentType   (src/.../media-type.decorator.ts)\n                        \n                        \n                            CRYPTO_VALIDATION_SCHEMA   (src/.../crypto.module.ts)\n                        \n                        \n                            DB_VALIDATION_SCHEMA   (src/.../database.module.ts)\n                        \n                        \n                            ED25519   (src/.../ed25519.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            ISSUER_VALIDATION_SCHEMA   (src/.../issuer.module.ts)\n                        \n                        \n                            KEY_VALIDATION_SCHEMA   (src/.../key.module.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            REGISTRAR_VALIDATION_SCHEMA   (src/.../registrar.module.ts)\n                        \n                        \n                            SESSION_LOGGER_KEY   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            SESSION_VALIDATION_SCHEMA   (src/.../session.module.ts)\n                        \n                        \n                            SessionEntity   (src/.../session.decorator.ts)\n                        \n                        \n                            SessionLogger   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            Token   (src/.../token.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    OIDC: Joi.string().optional(),\n    KEYCLOAK_INTERNAL_ISSUER_URL: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    KEYCLOAK_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    JWT_ISSUER: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default('eudiplo-service'),\n    }),\n    JWT_EXPIRES_IN: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default('24h'),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    AUTH_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mediaType/media-type.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ContentType\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.headers['accept'] as string | undefined;\n    },\n)\n                    \n                \n\n            \n                \n                    Decorator to extract the content type from the request headers.\nThis decorator can be used to determine the media type of the request.\n\n                \n            \n\n        \n    \n\n    src/crypto/key/crypto/crypto.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CRYPTO_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    CRYPTO_ALG: Joi.string().valid('ES256').default('ES256'),\n}\n                    \n                \n\n\n        \n    \n\n    src/database/database.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DB_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    DB_TYPE: Joi.string().valid('sqlite', 'postgres').default('sqlite'),\n    DB_HOST: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/crypto/ed25519.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ED25519\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                \n                    \n                        Default value : {\n    alg: 'EdDSA',\n    async generateKeyPair() {\n        const keyPair = await crypto.webcrypto.subtle.generateKey(\n            {\n                name: 'EdDSA',\n                namedCurve: 'Ed25519',\n            },\n            true,\n            ['sign', 'verify'],\n        );\n\n        const publicKey = await crypto.webcrypto.subtle.exportKey(\n            'jwk',\n            keyPair.publicKey,\n        );\n        const privateKey = await crypto.webcrypto.subtle.exportKey(\n            'jwk',\n            keyPair.privateKey,\n        );\n\n        return { publicKey, privateKey };\n    },\n    async getSigner(privateKeyJWK: object) {\n        const privateKey = await crypto.webcrypto.subtle.importKey(\n            'jwk',\n            privateKeyJWK,\n            {\n                name: 'EdDSA',\n                namedCurve: 'Ed25519',\n            },\n            false,\n            ['sign'],\n        );\n\n        return async (data: string) => {\n            const signature = await crypto.webcrypto.subtle.sign(\n                'EdDSA',\n                privateKey,\n                new TextEncoder().encode(data),\n            );\n\n            return Buffer.from(signature).toString('base64url');\n        };\n    },\n    async getVerifier(publicKeyJWK: object) {\n        const publicKey = await crypto.webcrypto.subtle.importKey(\n            'jwk',\n            publicKeyJWK,\n            {\n                name: 'EdDSA',\n                namedCurve: 'Ed25519',\n            },\n            false,\n            ['verify'],\n        );\n\n        return async (data: string, signatureBase64url: string) => {\n            const signature = Buffer.from(signatureBase64url, 'base64url');\n            const isVerified = await crypto.webcrypto.subtle.verify(\n                'EdDSA',\n                publicKey,\n                signature,\n                new TextEncoder().encode(data),\n            );\n\n            return isVerified;\n        };\n    },\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/issuer/issuer.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ISSUER_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    PUBLIC_URL: Joi.string(),\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/key.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        KEY_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    KM_TYPE: Joi.string().valid('file', 'vault').default('file'),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/registrar/registrar.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REGISTRAR_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    REGISTRAR_URL: Joi.string(),\n    REGISTRAR_OIDC_URL: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_ID: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_SECRET: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n}\n                    \n                \n\n            \n                \n                    Validation schema for the registrar module.\nDefines the required environment variables and their types.\n\n                \n            \n\n        \n    \n\n    src/utils/logger/session-logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_LOGGER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'session-logger'\n                    \n                \n\n            \n                \n                    Key for session logger metadata.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SessionLogger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n    sessionIdParam: string,\n    flowType: 'OID4VCI' | 'OID4VP',\n) => SetMetadata(SESSION_LOGGER_KEY, { sessionIdParam, flowType })\n                    \n                \n\n            \n                \n                    Decorator to mark methods that should have session-based logging\n\n                \n            \n\n        \n    \n\n    src/session/session.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n}\n                    \n                \n\n            \n                \n                    Module for managing user sessions.\n\n                \n            \n\n        \n    \n\n    src/session/session.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SessionEntity\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.session as Session;\n    },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/token.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Token\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
