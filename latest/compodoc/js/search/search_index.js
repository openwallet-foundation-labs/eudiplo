var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccessCertificateResponse.html",[0,0.606,1,3.656]],["body/interfaces/AccessCertificateResponse.html",[0,0.335,1,4.015,2,0.753,3,0.043,4,0.034,5,0.077,6,2.21,7,0.459,8,3.522,9,5.511,10,5.32,11,0.887,12,0.103,13,0.449,14,4.579,15,1.959,16,0.484,17,5.803,18,0.55,19,0.195,20,0.009,21,1.684,22,1.052,23,3.511,24,1.949,25,2.539,26,1.949,27,2.043,28,3.221,29,0.417,30,0.748,31,3.511,32,3.025,33,0.412,34,2.039,35,0.787,36,5.007,37,2.022,38,3.154,39,2.21,40,3.522,41,3.522,42,3.522,43,3.522,44,3.522,45,3.522,46,2.022,47,2.545,48,1.223,49,2.816,50,2.21,51,1.186,52,3.768,53,2.21,54,1.461,55,1.523,56,1.404,57,1.768,58,5.199,59,6.287,60,2.031,61,2.429,62,1.768,63,1.674,64,1.404,65,1.461,66,1.523,67,1.674,68,1.461,69,3.324,70,1.593,71,1.353,72,2.21,73,1.88,74,5.826,75,5.589,76,2.21,77,3.522,78,4.887,79,0.043,80,0.002,81,1.223,82,2.327,83,3.522,84,1.523,85,1.674,86,2.335,87,1.186,88,1.263,89,2.004,90,2.21,91,1.353,92,2.022,93,1.052,94,2.129,95,2.688,96,1.88,97,1.5,98,0.929,99,2.022,100,1.88,101,1.674,102,1.88,103,1.768,104,1.461,105,1.263,106,1.223,107,1.675,108,2.996,109,1.218,110,1.555,111,2.21,112,2.21,113,2.327,114,2.21,115,2.816,116,2.21,117,2.21,118,2.173,119,1.223,120,2.21,121,2.21,122,2.21,123,2.21,124,2.21,125,6.112,126,2.21,127,1.461,128,2.21,129,0.844,130,3.522,131,1.88,132,1.313,133,2.996,134,2.667,135,1.32,136,1.099,137,1.086,138,1.674,139,1.88,140,3.522,141,1.731,142,3.324,143,1.461,144,2.21,145,2.21,146,2.177,147,2.388,148,3.522,149,1.086,150,2.21,151,2.469,152,1.88,153,1.674,154,3.522,155,5.328,156,2.21,157,2.21,158,2.21,159,1.118,160,0.844,161,0.929,162,2.21,163,1.307,164,3.165,165,2.21,166,2.21,167,2.21,168,2.082,169,2.21,170,2.21,171,1.263,172,2.21,173,2.022,174,2.022,175,1.404,176,2.022,177,2.022,178,2.022,179,2.21,180,2.21,181,2.21,182,2.21,183,1.523,184,2.21,185,4.956,186,3.025,187,4.39,188,2.901,189,2.21,190,1.008,191,1.159,192,1.88,193,1.6,194,2.996,195,0.646,196,2.21,197,2.21,198,3.522,199,3.522,200,1.674,201,2.996,202,1.002,203,3.165,204,3.025,205,2.21,206,1.118,207,2.21,208,2.21,209,2.21,210,2.21,211,3.026,212,4.956,213,2.771,214,3.221,215,2.21,216,3.025,217,4.39,218,3.522,219,2.394,220,5.468,221,4.015,222,5.826,223,3.221,224,2.21,225,1.029,226,2.022,227,2.21,228,2.21,229,2.327,230,2.21,231,2.816,232,2.21,233,2.022,234,2.21,235,1.674,236,1.768,237,2.21,238,1.6,239,3.522,240,1.307,241,2.667,242,2.21,243,2.21,244,4.39,245,2.21,246,1.223,247,2.043,248,2.996,249,2.21,250,1.255,251,2.21,252,2.022,253,2.667,254,2.21,255,2.21,256,1.404,257,1.768,258,1.307,259,0.004,260,2.022,261,2.21,262,2.21,263,1.99,264,2.21,265,2.21,266,2.21,267,1.593,268,2.21,269,2.022,270,1.086,271,2.21,272,2.21,273,3.221,274,2.022,275,2.21,276,1.593,277,2.022,278,2.21,279,1.88,280,2.21,281,2.21,282,1.768,283,2.21,284,3.221,285,2.238,286,3.522,287,2.21,288,1.523,289,1.263,290,1.88,291,3.522,292,3.522,293,2.21,294,2.238,295,1.768,296,2.21,297,1.523,298,1.523,299,2.022,300,2.21,301,2.21,302,0.004]],["title/classes/ApiKeyConfig.html",[80,0.004,303,3.401]],["body/classes/ApiKeyConfig.html",[3,0.092,4,0.072,5,0.072,7,0.974,12,0.219,13,0.776,16,0.645,18,0.551,19,0.354,20,0.008,22,2.308,29,0.359,60,1.314,79,0.14,80,0.007,87,4.144,97,2.081,129,1.79,191,1.21,202,3.239,259,0.006,302,0.006,303,6.079,304,1.709,305,4.288,306,3.959,307,6.079,308,6.176,309,2.212,310,1.741,311,3.95,312,0.736,313,5.298,314,3.002,315,4.224,316,3.72,317,5.298,318,3.231,319,3.38,320,3.515,321,3.596,322,2.071,323,2.125,324,3.551,325,4.288,326,3.75,327,4.607,328,4.868,329,3.078,330,5.745,331,4.288,332,2.772,333,4.288,334,2.441,335,3.75,336,3.75,337,2.371,338,2.072,339,2.68,340,3.551,341,2.595]],["title/controllers/AppController.html",[342,1.526,343,3.656]],["body/controllers/AppController.html",[3,0.118,4,0.092,5,0.092,12,0.281,18,0.528,20,0.008,29,0.418,33,1.12,79,0.118,80,0.006,109,1.001,135,1.452,259,0.007,302,0.007,310,1.722,312,0.728,342,2.71,343,6.492,344,2.591,345,6.797,346,1.788,347,8.814,348,6.797,349,8.021,350,3.227,351,5.502,352,4.811,353,6.797,354,4.555,355,4.145,356,6.016]],["title/modules/AppModule.html",[357,1.491,358,3.401]],["body/modules/AppModule.html",[3,0.114,4,0.054,5,0.054,15,1.429,19,0.221,20,0.009,21,2.386,29,0.475,33,0.653,34,2.669,35,1.249,61,1.94,64,2.228,79,0.069,80,0.003,109,0.831,110,1.234,136,1.813,137,2.453,151,1.7,161,1.473,219,1.676,246,3.216,250,1.249,259,0.005,270,2.453,302,0.005,338,1.194,343,5.315,344,2.15,357,2.167,358,6.941,359,1.773,360,1.94,361,2.073,362,2.073,363,1.94,364,2.853,365,2.004,366,3.507,367,3.507,368,5.562,369,4.258,370,5.952,371,5.562,372,5.562,373,5.351,374,5.014,375,4.793,376,5.562,377,2.95,378,2.073,379,1.94,380,3.962,381,5.315,382,3.504,383,4.944,384,3.44,385,2.528,386,3.207,387,3.507,388,3.962,389,4.992,390,3.962,391,3.962,392,4.992,393,3.207,394,3.962,395,3.507,396,2.655,397,3.962,398,4.992,399,3.962,400,5.639,401,3.962,402,3.962,403,4.992,404,2.983,405,3.962,406,3.207,407,3.962,408,3.962,409,4.992,410,3.962,411,3.962,412,3.962,413,3.962,414,3.207,415,2.804,416,4.246,417,3.962,418,3.962,419,3.962,420,4.005,421,3.962,422,3.962,423,3.962,424,3.962,425,4.565,426,3.962,427,4.565,428,4.565,429,3.207,430,1.739,431,6.566,432,5.812,433,4.565,434,6.566,435,2.804,436,3.207,437,3.207,438,3.962,439,4.944,440,1.589,441,3.962,442,3.962,443,3.962,444,4.246,445,4.565,446,4.565,447,3.207,448,3.962,449,3.207,450,3.962,451,3.962,452,3.962,453,1.861,454,3.962,455,2.004,456,3.962,457,3.962,458,3.962,459,3.962,460,3.962,461,3.962,462,3.962,463,3.962,464,3.962,465,3.962,466,3.298,467,5.639,468,2.046,469,5.639,470,3.962,471,5.639,472,1.881,473,3.962,474,1.825,475,3.962,476,2.004,477,3.962,478,2.804,479,3.962,480,1.549,481,1.632,482,4.992,483,3.962,484,1.94,485,3.962,486,3.507,487,3.962,488,3.962,489,3.962,490,3.962,491,3.507,492,5.639,493,3.962,494,2.655,495,3.962,496,3.962]],["title/interfaces/Auth.html",[0,0.606,129,1.526]],["body/interfaces/Auth.html",[0,0.735,2,1.651,3,0.095,4,0.074,5,0.074,11,1.566,12,0.226,13,0.792,16,1.053,18,0.539,19,0.353,20,0.008,79,0.134,88,2.771,89,2.896,107,2.372,109,1.204,110,1.32,129,3.009,141,2.382,146,1.727,147,1.727,190,1.779,191,1.523,206,3.783,259,0.006,302,0.006,309,1.857,314,3.27,323,2.817,324,5.666,328,4.946,339,3.552,430,2.52,453,1.808,497,5.477,498,8.176,499,5.836,500,5.684,501,5.287,502,7.482,503,4.728,504,6.274,505,4.124,506,5.486,507,5.477,508,7.022,509,5.477]],["title/controllers/AuthController.html",[342,1.526,510,3.656]],["body/controllers/AuthController.html",[3,0.072,4,0.057,5,0.057,7,1.345,11,1.63,12,0.172,15,1.479,16,0.506,18,0.385,19,0.302,20,0.008,21,2.471,24,2.038,29,0.437,33,0.686,38,3.352,79,0.072,80,0.004,82,4.504,84,3.561,85,3.913,86,1.8,89,2.904,93,1.1,94,1.8,107,1.406,109,0.613,110,1.541,113,4.504,115,5.451,118,2.126,129,2.602,132,1.373,135,1.247,146,2.127,147,1.312,159,1.862,160,2.97,190,1.479,191,0.733,193,2.744,195,1.511,238,2.484,259,0.005,302,0.005,306,1.862,309,1.1,310,1.054,312,0.446,314,2.864,316,2.69,323,3.09,324,3.913,332,2.177,341,2.038,342,1.406,344,1.586,346,1.302,350,1.976,351,3.368,472,3.472,480,3.122,502,6.472,510,4.726,511,4.161,512,1.976,513,6.745,514,4.161,515,4.161,516,5.46,517,4.132,518,5.838,519,4.726,520,5.46,521,4.726,522,5.078,523,4.161,524,3.304,525,5.168,526,5.838,527,1.01,528,2.038,529,7.701,530,2.655,531,5.46,532,4.396,533,4.521,534,3.683,535,4.521,536,3.683,537,3.683,538,4.161,539,4.161,540,3.054,541,3.133,542,4.161,543,2.434,544,4.161,545,4.161,546,4.161,547,7.313,548,3.133,549,4.161,550,2.789,551,4.726,552,3.368,553,2.69,554,4.726,555,4.161,556,5.168,557,4.396,558,5.838,559,4.161,560,2.655,561,3.561,562,2.655,563,4.161,564,2.945,565,3.725,566,2.789,567,5.838,568,4.161,569,4.161,570,5.838,571,4.161,572,4.161,573,3.133,574,4.161,575,3.561,576,4.161,577,2.177,578,4.161,579,4.161,580,4.161,581,4.161,582,4.161,583,4.161,584,1.862,585,3.133,586,4.161,587,4.161,588,3.368,589,4.161,590,2.655,591,3.133,592,3.683,593,3.683]],["title/modules/AuthModule.html",[357,1.491,368,3.197]],["body/modules/AuthModule.html",[3,0.092,4,0.072,5,0.072,20,0.008,29,0.467,33,0.878,35,1.68,79,0.12,80,0.005,84,3.25,110,1.001,132,1.759,138,5.857,259,0.006,302,0.006,344,2.63,357,2.525,359,2.384,360,2.61,361,2.787,362,2.787,363,2.61,364,3.87,365,3.87,368,6.558,377,3.609,378,2.787,379,2.61,382,2.61,383,5.194,384,4.208,409,4.716,510,6.193,533,6.129,534,4.716,535,5.755,536,4.716,594,4.716,595,4.716,596,4.716,597,5.349,598,6.886,599,5.328,600,7.65,601,4.012,602,5.328,603,5.328,604,5.328,605,8.857,606,5.328,607,8.739,608,8.381,609,5.328,610,5.328,611,4.716,612,5.328,613,5.328,614,5.328,615,4.313,616,5.328]],["title/interfaces/AuthResponse.html",[0,0.606,617,3.401]],["body/interfaces/AuthResponse.html",[0,0.857,2,1.926,3,0.111,4,0.087,5,0.087,7,1.175,11,1.723,12,0.264,13,0.872,18,0.583,19,0.339,20,0.008,22,2.044,79,0.111,89,2.944,225,3.423,259,0.007,302,0.007,309,1.689,501,5.82,506,5.471,617,6.257,618,6.389,619,3.896,620,4.522,621,5.853,622,6.99,623,7.729,624,7.729,625,4.714,626,5.882,627,4.189,628,3.362,629,6.389,630,4.81]],["title/classes/AuthenticationConfigDto.html",[80,0.004,631,3.027]],["body/classes/AuthenticationConfigDto.html",[3,0.075,4,0.058,5,0.058,7,0.792,11,0.96,12,0.178,13,0.675,16,0.836,18,0.284,19,0.325,20,0.008,29,0.387,60,2.053,79,0.129,80,0.007,97,1.959,105,3.475,107,2.507,129,2.932,160,2.02,161,3.313,186,3.647,202,2.756,216,2.626,259,0.005,302,0.005,304,1.389,306,4.055,310,1.515,312,0.64,315,2.252,318,2.626,319,2.747,320,3.165,321,3.883,322,1.683,329,2.279,334,2.755,337,3.074,338,1.802,453,1.973,472,4.379,474,3.814,476,4.187,481,3.212,628,3.392,631,4.007,632,5.172,633,3.047,634,3.815,635,4.502,636,4.862,637,2.839,638,3.815,639,5.713,640,5.713,641,4.305,642,3.863,643,4.84,644,4.486,645,4.007,646,4.226,647,5.173,648,4.199,649,5.212,650,4.84,651,4.305,652,4.84,653,2.433,654,4.84,655,5.172,656,2.178,657,2.747,658,2.518,659,4.502,660,3.485,661,3.485,662,2.747,663,3.485,664,3.047,665,2.747,666,3.047,667,2.747,668,3.485,669,2.747]],["title/classes/AuthenticationConfigHelper.html",[80,0.004,670,3.197]],["body/classes/AuthenticationConfigHelper.html",[3,0.085,4,0.067,5,0.067,7,0.901,12,0.203,16,0.953,19,0.357,20,0.008,29,0.256,60,2.305,79,0.085,80,0.004,97,1.585,105,3.303,109,1.201,129,2.206,135,1.673,161,3.033,191,1.379,213,4.109,259,0.006,263,2.946,302,0.006,304,1.581,306,3.286,312,0.839,346,1.456,396,6.054,472,3.983,474,3.008,476,3.303,527,1.901,625,4.479,628,2.84,632,6.142,636,4.622,639,4.622,640,5.543,644,3.539,645,5.623,646,3.539,647,4.581,648,3.718,649,4.581,658,2.866,669,5.797,670,4.622,671,4.9,672,5.78,673,5.285,674,6.53,675,6.5,676,7.344,677,7.344,678,7.344,679,4.9,680,4.9,681,4.9,682,4.9,683,8.389,684,4.9,685,4.9,686,4.9,687,4.9,688,7.344,689,4.9,690,4.9]],["title/classes/AuthenticationUrlConfig.html",[80,0.004,639,3.197]],["body/classes/AuthenticationUrlConfig.html",[3,0.078,4,0.061,5,0.061,7,0.829,11,1.005,12,0.186,13,0.696,16,0.921,18,0.407,19,0.329,20,0.008,29,0.395,60,1.877,79,0.131,80,0.007,97,2.034,105,3.122,107,2.085,129,2.832,160,2.085,161,3.256,186,2.75,202,3.181,216,2.75,259,0.005,302,0.005,304,1.454,306,4.061,310,1.564,312,0.661,315,2.359,318,2.75,319,2.877,320,3.243,321,3.682,322,1.763,329,3.022,334,2.077,337,3.387,338,2.282,453,1.488,472,4.328,474,3.862,476,4.01,481,3.118,628,3.293,631,3.022,632,5.299,633,3.191,634,2.877,635,3.395,636,4.369,637,2.141,638,2.877,639,5.611,640,5.357,642,3.471,643,3.649,644,4.102,645,3.022,646,3.814,647,5.122,648,4.158,649,5.064,650,3.649,652,3.649,653,2.186,654,5.697,655,5.299,656,2.281,657,2.877,658,2.637,659,5.699,660,4.996,661,5.697,662,3.938,663,3.649,664,3.191,665,2.877,666,3.191,667,2.877,668,3.649,669,2.877,691,4.509,692,4.509,693,4.509]],["title/classes/AuthorizationResponse.html",[80,0.004,694,3.401]],["body/classes/AuthorizationResponse.html",[3,0.114,4,0.09,5,0.09,7,1.212,12,0.273,13,0.889,18,0.575,19,0.259,20,0.008,29,0.344,79,0.114,80,0.007,89,2.79,195,2.368,259,0.007,302,0.007,304,2.126,310,1.67,311,3.881,312,0.706,322,2.577,323,3.501,619,4.021,620,5.575,626,5.575,627,4.729,694,5.931,695,7.877,696,5.835,697,5.931]],["title/controllers/AuthorizeController.html",[342,1.526,698,3.656]],["body/controllers/AuthorizeController.html",[3,0.071,4,0.055,5,0.055,7,1.06,9,3.676,11,1.954,12,0.169,16,0.883,18,0.577,19,0.32,20,0.008,29,0.435,33,0.673,51,1.939,79,0.071,80,0.004,86,1.776,89,3,91,3.93,93,1.08,94,2.568,109,1.068,110,0.767,135,1.743,146,2.67,147,1.288,151,2.712,190,1.837,191,1.277,193,2.916,195,2.111,202,2.312,206,2.578,246,3.995,247,1.682,259,0.005,270,3.812,299,3.305,302,0.005,310,1.837,312,0.777,323,3.569,342,2.584,344,1.557,346,1.284,350,1.939,468,1.482,512,1.939,524,4.205,527,1.76,528,2,532,4.338,543,2.388,557,3.074,648,2.736,665,2.605,698,4.664,699,4.083,700,4.083,701,5.1,702,4.664,703,5.762,704,5.027,705,7.252,706,7.648,707,3.614,708,5.539,709,5.762,710,4.083,711,4.078,712,4.083,713,4.083,714,4.242,715,5.133,716,1.557,717,4.083,718,4.083,719,5.87,720,4.083,721,4.083,722,4.083,723,5.762,724,4.083,725,3.862,726,5.1,727,2.737,728,2.605,729,2.213,730,3.905,731,4.083,732,3.074,733,3.493,734,2.605,735,3.305,736,4.083,737,4.083,738,1.776,739,5.133,740,4.083,741,4.083,742,4.423,743,4.083,744,3.305,745,3.614,746,3.074,747,4.083,748,3.614,749,4.083,750,3.074,751,4.083,752,4.083]],["title/classes/AuthorizeQueries.html",[80,0.004,708,2.882]],["body/classes/AuthorizeQueries.html",[3,0.091,4,0.071,5,0.071,12,0.217,13,0.771,16,1.146,18,0.62,19,0.356,20,0.008,29,0.274,79,0.091,80,0.006,259,0.006,302,0.006,304,1.692,310,2.297,311,4.204,312,0.971,321,4.774,322,2.051,550,5.089,708,4.357,742,4.631,753,9.125,754,3.347,755,5.374,756,7.593,757,7.593,758,7.593,759,5.089,760,7.593,761,7.593,762,4.845,763,7.593,764,9.069,765,5.245,766,4.643,767,5.245,768,5.245,769,5.245,770,4.643,771,5.245,772,4.246,773,5.245,774,4.643,775,5.245]],["title/injectables/AuthorizeService.html",[30,0.849,730,2.642]],["body/injectables/AuthorizeService.html",[0,0.543,3,0.044,4,0.035,5,0.035,11,1.7,12,0.106,16,0.906,18,0.595,19,0.315,20,0.008,21,1.081,29,0.419,30,0.761,33,0.421,34,2.194,35,0.805,38,0.974,47,2.869,48,1.251,51,1.213,60,1.004,79,0.07,80,0.002,86,2.228,93,1.071,97,0.983,98,1.506,107,0.863,109,0.979,110,1.637,113,1.494,118,2.105,119,1.251,129,1.7,135,1.544,136,1.39,146,2.665,147,2.595,151,2.728,159,1.143,160,0.863,161,2.472,164,2.584,190,1.026,191,1.31,193,2.401,195,2.079,213,1.251,236,1.808,238,2.331,246,2.465,247,2.073,250,1.587,256,1.436,259,0.004,270,3.317,302,0.004,306,2.252,309,0.675,312,0.797,323,1.625,327,3.84,329,2.534,334,2.639,337,2.564,338,1.727,339,1.292,341,2.465,346,0.903,468,2.915,472,2.39,474,1.177,476,1.292,478,3.563,480,1.968,524,1.251,527,1.806,564,2.867,577,1.336,590,1.63,621,2.584,628,2.717,637,2.39,644,1.384,646,1.384,647,2.369,648,3.62,653,1.435,656,1.292,662,2.584,670,1.808,704,3.79,707,2.261,708,4.865,711,1.808,714,2.369,715,3.563,716,1.544,727,3.374,728,1.63,729,1.384,730,2.369,732,1.923,733,3.644,734,1.63,742,3.07,755,4.055,759,4.187,776,0.927,777,2.067,778,3.585,779,4.05,780,4.074,781,4.074,782,4.074,783,4.05,784,4.074,785,1.384,786,4.074,787,4.074,788,2.554,789,2.554,790,3.05,791,2.554,792,5.005,793,3.279,794,2.554,795,5.056,796,2.554,797,2.554,798,2.067,799,2.554,800,2.554,801,2.554,802,2.554,803,3.279,804,2.554,805,2.554,806,2.554,807,3.513,808,4.313,809,4.313,810,2.806,811,2.067,812,4.313,813,1.63,814,1.712,815,2.067,816,2.067,817,1.808,818,2.067,819,2.067,820,3.05,821,3.279,822,3.05,823,2.067,824,2.067,825,3.279,826,2.067,827,3.279,828,1.494,829,4.637,830,2.067,831,2.073,832,1.923,833,2.067,834,1.923,835,2.067,836,1.923,837,2.067,838,2.067,839,1.923,840,2.119,841,1.712,842,1.923,843,1.923,844,2.067,845,1.923,846,2.067,847,1.923,848,2.067,849,2.067,850,2.067,851,3.279,852,2.067,853,1.923,854,2.067,855,2.067,856,3.524,857,2.067,858,2.067,859,2.067,860,2.067,861,2.067,862,4.074,863,3.374,864,2.067,865,4.055,866,2.067,867,2.067,868,1.923,869,2.067,870,2.067,871,4.637,872,3.279,873,5.245,874,2.067,875,3.279,876,3.279,877,3.279,878,3.279,879,1.714,880,3.279,881,2.067,882,2.067,883,2.067,884,2.067,885,2.067,886,2.067,887,2.067,888,3.05,889,2.067,890,2.067,891,1.494,892,1.336,893,1.923,894,1.63,895,2.067,896,1.923,897,1.923,898,2.067,899,2.067,900,1.384,901,2.584,902,1.923,903,2.067,904,4.074,905,2.067,906,2.067,907,2.067,908,2.067,909,2.067,910,1.712,911,3.279,912,2.067,913,2.584,914,1.712,915,2.067,916,2.067,917,2.067,918,2.067,919,1.436,920,2.067,921,2.067,922,1.436,923,2.47,924,2.067,925,2.067,926,1.712,927,2.067,928,2.067,929,1.494,930,2.067,931,2.067,932,2.067,933,2.067,934,2.067,935,2.067,936,2.067,937,1.808,938,1.923,939,1.923,940,3.279,941,2.067,942,2.067,943,2.067,944,1.923,945,2.067,946,2.067,947,2.067]],["title/interfaces/Client.html",[0,0.606,38,1.722]],["body/interfaces/Client.html",[0,0.848,2,1.409,3,0.081,4,0.063,5,0.063,12,0.193,13,0.714,15,2.209,18,0.581,19,0.248,20,0.009,29,0.432,30,1.189,31,5.074,33,0.77,34,2.366,35,1.473,38,3.476,54,2.733,56,3.557,61,3.098,64,2.628,65,2.733,66,2.85,68,2.733,79,0.11,80,0.004,81,2.289,82,2.733,86,2.475,93,1.236,94,1.441,97,1.535,106,2.289,109,1.182,110,1.444,113,3.699,115,4.476,132,2.087,135,0.998,136,1.29,149,2.033,160,2.137,161,1.737,191,0.823,202,1.875,216,2.85,219,1.977,259,0.006,263,3.394,282,3.307,285,2.628,294,2.628,302,0.006,306,2.091,336,3.307,338,1.409,352,3.307,420,2.85,430,1.441,472,2.219,494,3.132,535,3.132,575,4.896,615,3.782,725,3.132,900,2.532,914,3.132,948,4.136,949,5.119,950,3.518,951,3.132,952,5.119,953,7.324,954,3.782,955,4.136,956,4.136,957,4.136,958,4.136,959,4.136,960,4.136,961,3.782,962,4.136,963,4.136,964,4.136,965,4.136,966,6.346,967,4.136,968,4.136,969,4.136,970,4.136,971,3.782,972,3.132,973,4.136,974,5.598,975,5.598,976,4.136,977,4.136,978,4.136,979,3.782,980,2.981,981,4.136,982,4.136,983,4.136,984,4.136,985,4.136,986,3.518,987,3.518,988,3.518,989,4.136,990,3.518,991,4.136,992,4.136,993,5.598,994,4.136,995,2.219,996,5.598,997,3.782,998,4.136,999,4.136]],["title/interfaces/Client-1.html",[0,0.505,38,1.435,1000,1.787]],["body/interfaces/Client-1.html",[0,0.792,2,1.274,3,0.073,4,0.057,5,0.057,11,1.966,12,0.175,13,0.666,19,0.353,20,0.008,29,0.308,38,2.25,60,1.921,79,0.102,87,2.007,89,2.091,119,2.07,129,2.782,135,1.261,141,3.801,161,2.529,163,3.088,168,2.211,190,1.865,193,1.363,195,1.76,202,2.368,206,1.892,225,3.393,229,3.453,259,0.005,263,1.696,302,0.005,309,1.118,312,0.453,315,2.211,338,1.78,354,3.957,430,1.82,455,3.919,480,2.66,481,1.741,501,3.183,503,2.578,504,5.506,517,2.992,527,1.026,528,3.93,584,1.892,627,2.291,646,2.291,716,2.593,910,2.833,1001,3.741,1002,5.212,1003,6.856,1004,4.531,1005,5.96,1006,6.856,1007,6.27,1008,6.856,1009,4.935,1010,6.856,1011,4.559,1012,5.225,1013,6.252,1014,4.559,1015,5.96,1016,3.826,1017,3.767,1018,2.833,1019,3.741,1020,3.741,1021,2.472,1022,2.138,1023,5.225,1024,4.491,1025,2.992,1026,2.195,1027,4.34,1028,3.741,1029,3.741,1030,4.445,1031,3.741,1032,1.497,1033,3.741,1034,3.741,1035,5.225,1036,2.291,1037,3.453,1038,5.225,1039,2.472,1040,3.741,1041,3.741,1042,3.422,1043,3.741,1044,2.833,1045,3.741,1046,3.741,1047,3.422,1048,3.741,1049,3.741,1050,5.225,1051,4.34,1052,5.225,1053,5.225,1054,5.225,1055,5.225,1056,3.741,1057,3.741,1058,3.422,1059,3.741,1060,3.422,1061,3.741,1062,3.741,1063,3.741,1064,3.741,1065,2.992,1066,3.741,1067,3.741]],["title/classes/ClientCredentialsDto.html",[80,0.004,516,3.656]],["body/classes/ClientCredentialsDto.html",[3,0.117,4,0.092,5,0.092,12,0.28,13,0.903,18,0.58,19,0.314,20,0.008,29,0.353,79,0.117,80,0.007,259,0.007,302,0.007,304,2.184,310,2.027,311,4.139,312,0.857,322,2.648,516,6.478,550,5.71,552,6.897,1068,8.52,1069,6.772,1070,6.772,1071,6.772]],["title/interfaces/ClientOptions.html",[0,0.606,1072,2.755]],["body/interfaces/ClientOptions.html",[0,0.919,2,1.089,3,0.063,4,0.049,5,0.049,11,1.797,12,0.149,13,0.595,16,0.927,18,0.502,19,0.349,20,0.009,24,1.769,27,2.567,29,0.325,38,2.998,60,1.808,79,0.145,87,1.715,91,1.957,95,1.957,97,0.877,98,1.343,107,2.106,109,0.777,127,4.265,129,1.22,136,0.997,137,1.571,141,1.571,142,2.421,159,1.616,161,2.549,163,1.89,175,3.855,190,1.336,193,2.652,195,2.128,206,3.068,211,1.769,219,2.638,225,3.32,229,2.113,238,1.165,250,2.161,258,3.261,259,0.005,302,0.005,314,1.343,316,1.664,338,2.519,346,0.805,430,2.248,440,1.449,453,2.057,455,3.852,480,2.977,484,1.769,634,2.305,716,2.779,919,2.031,1009,2.421,1011,2.421,1013,2.421,1014,2.421,1018,2.421,1021,3.086,1024,3.802,1026,1.343,1027,3.977,1032,2.697,1044,2.421,1051,2.305,1072,3.218,1073,2.72,1074,6.291,1075,5.733,1076,2.305,1077,3.972,1078,3.972,1079,2.72,1080,2.967,1081,2.72,1082,4.159,1083,4.594,1084,2.421,1085,2.72,1086,4.374,1087,2.421,1088,2.305,1089,2.031,1090,2.72,1091,2.72,1092,2.72,1093,2.72,1094,3.734,1095,3.972,1096,2.72,1097,2.72,1098,2.557,1099,2.72,1100,3.972,1101,2.72,1102,4.412,1103,2.72,1104,2.557,1105,2.72,1106,3.977,1107,2.72,1108,2.557,1109,3.366,1110,2.72,1111,2.72,1112,3.366,1113,2.421,1114,2.305,1115,2.72,1116,2.203,1117,2.203,1118,2.203,1119,2.557,1120,2.557,1121,2.72,1122,2.203,1123,2.72,1124,2.72,1125,2.421,1126,4.693,1127,5.161,1128,6.693,1129,4.693,1130,2.72,1131,4.652,1132,2.203,1133,3.972,1134,2.557,1135,2.72,1136,2.72,1137,2.72,1138,2.113,1139,2.421,1140,2.557,1141,2.72,1142,2.421,1143,1.827,1144,2.557,1145,5.733,1146,2.72]],["title/injectables/ClientService.html",[30,0.849,535,3.027]],["body/injectables/ClientService.html",[0,0.762,3,0.069,4,0.054,5,0.054,12,0.166,13,0.641,15,2.099,16,0.875,18,0.584,19,0.298,20,0.008,29,0.411,30,1.068,31,5.582,33,0.66,34,2.603,35,1.263,38,3.509,54,2.342,56,3.196,61,2.783,64,2.252,65,2.342,66,2.442,68,2.342,79,0.099,80,0.004,81,1.961,82,3.324,86,2.666,93,1.503,94,1.234,97,1.745,106,2.783,109,1.118,110,1.351,113,4.205,115,5.088,132,2.18,135,1.733,136,1.106,149,1.742,160,2.429,161,2.113,191,1.337,202,1.607,216,2.442,219,1.694,259,0.005,263,3.47,282,4.022,285,2.252,294,2.252,302,0.005,306,2.543,309,1.059,312,0.888,336,4.022,338,1.207,346,1.267,352,4.022,420,2.442,430,1.752,472,2.698,494,2.684,527,1.745,535,3.809,575,3.466,615,3.241,725,3.809,776,1.453,785,2.17,900,2.17,914,2.684,948,3.544,949,5.819,950,3.015,951,2.684,952,5.347,953,7.567,954,5.347,955,3.544,956,3.544,957,3.544,958,3.544,959,3.544,960,3.544,961,3.241,962,3.544,963,3.544,964,3.544,965,6.363,966,5.846,967,3.544,968,6.363,969,3.544,970,3.544,971,3.241,972,3.809,973,5.03,974,5.03,975,5.03,976,3.544,977,5.03,978,5.03,979,4.6,980,3.626,981,5.03,982,5.03,983,5.03,984,5.03,985,5.03,986,3.015,987,3.015,988,3.015,989,3.544,990,3.015,991,3.544,992,3.544,993,5.03,994,3.544,995,1.901,996,5.03,997,3.241,998,3.544,999,3.544,1147,5.683,1148,5.683,1149,5.683,1150,5.683,1151,4.004,1152,4.004,1153,4.004,1154,4.004,1155,2.973,1156,4.004,1157,4.004]],["title/interfaces/Config.html",[0,0.606,60,1.12]],["body/interfaces/Config.html",[0,0.864,2,0.959,3,0.055,4,0.043,5,0.043,11,1.732,12,0.132,13,0.542,16,1.015,18,0.424,19,0.349,20,0.009,24,2.352,27,1.311,29,0.302,38,3.031,60,1.803,79,0.141,87,2.28,91,2.603,95,2.603,97,0.773,98,1.183,107,2.336,109,0.949,127,4.044,129,1.075,136,0.879,137,2.089,141,2.516,142,2.133,159,1.424,161,2.571,163,1.665,175,4.471,190,1.217,193,2.614,195,2.205,206,2.883,211,1.559,219,2.448,225,3.436,229,1.862,238,1.549,250,2.292,258,3.618,259,0.004,302,0.004,309,1.704,314,1.786,316,1.466,338,2.481,346,1.071,430,2.498,440,2.321,453,1.909,455,3.818,480,2.842,484,2.352,634,3.064,716,2.636,919,1.79,1009,2.133,1011,2.133,1013,2.133,1014,2.133,1018,3.219,1021,2.809,1024,3.528,1026,1.183,1027,4.111,1032,2.575,1044,3.219,1051,2.031,1072,1.941,1073,2.396,1074,6.1,1075,5.474,1076,2.031,1077,3.616,1078,4.355,1079,2.396,1080,2.701,1081,2.396,1082,4.099,1083,4.634,1084,3.219,1085,2.396,1086,5.17,1087,3.219,1088,3.064,1089,2.701,1090,3.616,1091,3.616,1092,2.396,1093,3.616,1094,4.56,1095,4.355,1096,3.616,1097,3.616,1098,3.399,1099,2.396,1100,4.355,1101,3.616,1102,4.894,1103,4.355,1104,3.399,1105,3.616,1106,4.815,1107,3.616,1108,3.399,1109,3.691,1110,3.616,1111,3.616,1112,4.412,1113,3.219,1114,4.111,1115,4.355,1116,3.528,1117,3.528,1118,3.528,1119,3.399,1120,3.399,1121,2.396,1122,1.941,1123,2.396,1124,2.396,1125,2.133,1126,4.355,1127,4.851,1128,6.565,1129,4.355,1130,2.396,1131,4.412,1132,1.941,1133,3.616,1134,2.253,1135,2.396,1136,2.396,1137,2.396,1138,1.862,1139,2.133,1140,2.253,1141,2.396,1142,2.133,1143,3.498,1144,2.253,1145,5.474,1146,2.396]],["title/interfaces/Config-1.html",[0,0.505,60,0.933,1000,1.787]],["body/interfaces/Config-1.html",[0,0.716,2,1.106,3,0.064,4,0.05,5,0.05,11,1.949,12,0.152,13,0.602,16,1.078,19,0.329,20,0.008,29,0.278,38,1.399,60,1.898,79,0.093,87,2.534,89,2.446,119,2.614,129,2.902,135,0.784,141,3.928,161,3.01,163,3.613,168,2.792,190,1.749,193,1.721,195,1.981,202,2.771,206,2.388,225,3.499,229,4.039,259,0.005,263,2.523,302,0.005,309,1.411,312,0.572,315,2.792,338,1.106,354,4.628,430,2.129,455,3.493,480,3.165,481,2.198,501,4.018,503,3.255,504,5.939,517,3.777,527,1.295,528,3.75,584,2.388,627,2.892,646,2.892,716,2.397,910,3.577,1001,3.247,1002,2.597,1003,6.112,1004,4.039,1005,2.97,1006,6.112,1007,5.59,1008,6.112,1009,2.459,1010,6.112,1011,2.459,1012,3.247,1013,5.532,1014,2.459,1015,6.681,1016,4.553,1017,4.406,1018,3.577,1019,4.723,1020,4.723,1021,3.121,1022,2.699,1023,6.112,1024,4.212,1025,3.777,1026,2.568,1027,4.885,1028,4.723,1029,3.247,1030,5.199,1031,3.247,1032,2.227,1033,3.247,1034,4.723,1035,6.112,1036,2.892,1037,4.039,1038,6.112,1039,3.121,1040,4.723,1041,4.723,1042,4.319,1043,4.723,1044,3.577,1045,4.723,1046,4.723,1047,4.319,1048,3.247,1049,4.723,1050,6.112,1051,4.885,1052,6.112,1053,6.112,1054,6.112,1055,6.112,1056,6.112,1057,4.723,1058,4.319,1059,4.723,1060,4.319,1061,4.723,1062,4.723,1063,4.723,1064,6.112,1065,3.777,1066,4.723,1067,6.112]],["title/entities/CredentialConfig.html",[1158,2.144,1159,2.755]],["body/entities/CredentialConfig.html",[3,0.077,4,0.06,5,0.06,7,0.812,11,1.357,12,0.183,13,0.687,15,1.994,16,0.913,18,0.494,19,0.333,20,0.008,25,3.884,26,2.981,29,0.424,60,1.727,79,0.077,80,0.005,97,2.061,98,1.643,106,2.981,132,1.458,136,2.38,149,2.648,151,2.099,159,2.724,160,2.056,202,1.772,259,0.005,302,0.005,310,2.151,312,0.91,320,3.748,321,3.643,322,1.727,430,1.876,440,1.772,474,2.804,543,2.584,637,3.737,653,3.008,657,2.819,658,2.584,831,2.507,879,2.576,922,3.423,972,5.03,1024,3.712,1032,2.658,1065,4.308,1158,3.563,1159,3.712,1160,2.484,1161,4.418,1162,5.387,1163,6.585,1164,6.164,1165,5.777,1166,4.577,1167,5.587,1168,6.101,1169,6.395,1170,5.387,1171,4.418,1172,5.387,1173,4.927,1174,5.387,1175,5.637,1176,6.164,1177,3.91,1178,4.418,1179,3.56,1180,6.087,1181,4.927,1182,4.418,1183,6.087,1184,6.087,1185,3.079,1186,3.884,1187,5.311,1188,4.418,1189,4.927,1190,3.91,1191,6.087,1192,6.087,1193,4.418,1194,4.418,1195,4.927,1196,5.243,1197,6.087,1198,4.418,1199,4.418,1200,4.418,1201,2.694,1202,2.961,1203,6.087,1204,5.387,1205,2.235,1206,3.576,1207,3.91,1208,2.961,1209,4.418,1210,3.127]],["title/injectables/CredentialConfigService.html",[30,0.849,1211,3.027]],["body/injectables/CredentialConfigService.html",[3,0.075,4,0.059,5,0.059,7,1.435,12,0.178,15,2.33,16,0.95,18,0.602,19,0.306,20,0.008,29,0.388,30,1.125,33,0.711,60,1.935,71,3.245,79,0.075,80,0.004,86,1.33,93,1.964,94,2.603,97,2.05,105,3.758,109,1.094,132,1.977,135,1.804,149,3.902,151,2.667,190,2.046,191,1.374,200,4.014,203,3.821,204,3.653,240,3.887,259,0.005,302,0.005,312,0.836,346,1.335,527,1.894,653,3.075,738,1.877,776,1.566,1004,4.724,1022,3.029,1158,4.01,1159,5.471,1160,3.368,1174,5.301,1205,2.183,1211,4.979,1212,8.077,1213,6.081,1214,3.493,1215,5.989,1216,4.315,1217,4.926,1218,4.315,1219,6.878,1220,5.989,1221,3.82,1222,4.014,1223,5.66,1224,7.149,1225,4.014,1226,5.989,1227,5.989,1228,4.315,1229,5.258,1230,5.989,1231,4.315,1232,5.989,1233,4.315,1234,3.653,1235,2.753,1236,2.183,1237,3.493,1238,3.82,1239,4.315,1240,4.315,1241,4.315,1242,4.315]],["title/classes/CredentialIssuerMetadataDto.html",[80,0.004,1243,3.656]],["body/classes/CredentialIssuerMetadataDto.html",[3,0.089,4,0.07,5,0.07,7,0.945,12,0.212,13,0.76,18,0.591,19,0.349,20,0.008,26,3.299,79,0.089,80,0.005,105,3.408,119,3.299,160,2.695,171,2.599,259,0.006,302,0.006,304,1.657,312,0.941,323,3.201,332,3.524,338,2.65,355,4.866,524,3.908,562,4.298,625,3.133,637,4.036,653,3.148,831,3.814,937,4.768,1022,3.408,1026,2.505,1173,5.453,1179,3.005,1243,5.453,1244,6.292,1245,8.889,1246,4.547,1247,3.443,1248,6.653,1249,6.653,1250,6.653,1251,6.084,1252,6.653,1253,6.653,1254,6.706,1255,6.653,1256,5.137,1257,5.963,1258,5.137,1259,3.788,1260,6.736,1261,5.137,1262,7.517,1263,5.137,1264,5.137,1265,5.137,1266,5.137,1267,5.072,1268,5.137,1269,3.94,1270,5.137,1271,4.158,1272,4.547]],["title/controllers/CredentialsController.html",[342,1.526,1273,3.656]],["body/controllers/CredentialsController.html",[3,0.089,4,0.069,5,0.069,7,0.941,12,0.212,15,2.018,16,0.913,18,0.494,19,0.294,20,0.008,29,0.443,33,0.843,60,1.975,71,3.641,79,0.089,80,0.005,89,2.657,94,2.456,97,1.933,103,3.621,105,4.03,109,1.105,135,1.876,149,3.465,191,1.321,193,2.167,200,4.503,259,0.006,302,0.006,310,1.9,312,0.803,342,2.534,344,1.95,346,1.498,350,2.429,481,3.617,512,2.429,527,1.821,528,3.674,530,3.264,540,4.69,597,2.992,653,3.146,738,2.225,831,2.107,1004,2.992,1159,4.858,1211,5.028,1213,3.852,1222,4.503,1237,4.141,1273,6.072,1274,5.116,1275,6.718,1276,6.072,1277,6.718,1278,6.64,1279,4.528,1280,5.438,1281,5.116,1282,5.116,1283,5.116,1284,5.116,1285,5.116,1286,3.621,1287,3.621,1288,3.429,1289,4.141,1290,3.621,1291,4.141,1292,2.877,1293,3.621,1294,3.621,1295,4.141,1296,4.287,1297,2.357,1298,5.116,1299,5.116,1300,5.116,1301,4.528,1302,5.116]],["title/controllers/CredentialsMetadataController.html",[342,1.526,1303,3.656]],["body/controllers/CredentialsMetadataController.html",[3,0.099,4,0.077,5,0.077,7,1.049,12,0.236,15,2.214,16,0.877,18,0.608,19,0.326,20,0.008,26,3.529,29,0.376,33,0.94,79,0.099,80,0.005,94,2.435,97,1.749,109,1.061,132,2.378,135,1.688,151,2.707,160,2.669,191,1.269,259,0.006,302,0.006,310,1.825,312,0.772,342,1.927,344,2.174,346,1.606,512,2.708,527,1.749,642,4.052,653,3.096,738,2.481,739,5.1,1166,5.061,1167,5.562,1179,4.215,1229,5.874,1296,5.04,1297,2.628,1303,5.833,1304,5.948,1305,6.992,1306,5.704,1307,5.704,1308,7.206,1309,5.704,1310,5.704,1311,7.206,1312,5.704,1313,4.83,1314,4.617,1315,5.704,1316,5.704,1317,5.704,1318,5.704,1319,5.704]],["title/injectables/CredentialsService.html",[30,0.849,1296,2.882]],["body/injectables/CredentialsService.html",[3,0.06,4,0.047,5,0.047,12,0.142,15,1.962,16,0.911,18,0.592,19,0.319,20,0.008,29,0.451,30,0.957,33,0.567,34,2.556,35,1.085,47,2.759,48,1.686,60,1.263,79,0.06,80,0.003,86,2.065,93,1.346,94,2.387,97,2.034,109,1.053,110,1.552,118,2.066,135,1.79,136,0.95,146,2.747,147,2.36,151,2.688,160,1.72,183,2.099,190,1.896,191,1.318,203,3.249,231,2.436,238,2.306,240,2.664,259,0.004,288,3.106,302,0.004,309,1.89,312,0.802,314,1.28,334,2.346,346,1.135,468,2.885,474,2.346,527,1.817,543,2.013,553,1.586,577,2.664,642,3.767,653,3.035,657,2.196,658,2.013,716,1.941,776,1.249,807,4.209,810,3.501,813,2.196,828,2.978,840,2.664,856,3.616,879,1.456,891,2.013,892,1.801,1032,1.219,1159,4.723,1163,4.122,1164,4.507,1166,3.696,1167,4.791,1176,3.046,1185,2.576,1186,2.196,1195,4.122,1196,2.591,1201,2.099,1205,1.741,1206,2.786,1217,4.085,1229,4.741,1235,2.196,1236,1.741,1237,2.786,1238,3.046,1251,4.122,1278,5.364,1296,3.249,1313,3.413,1320,3.442,1321,5.364,1322,6.061,1323,6.061,1324,5.092,1325,3.442,1326,4.723,1327,6.061,1328,3.442,1329,5.092,1330,3.442,1331,5.786,1332,3.442,1333,5.181,1334,3.442,1335,3.442,1336,3.442,1337,3.442,1338,5.092,1339,3.442,1340,6.698,1341,3.442,1342,3.442,1343,4.507,1344,4.122,1345,5.092,1346,2.591,1347,2.591,1348,4.507,1349,2.591,1350,2.099,1351,2.591,1352,2.591,1353,3.442,1354,3.442,1355,3.442,1356,3.442,1357,3.442,1358,3.442,1359,5.092,1360,4.507,1361,4.563,1362,3.442,1363,3.442,1364,3.442,1365,3.442,1366,3.442,1367,3.442,1368,3.046,1369,3.442,1370,3.442,1371,3.046,1372,3.442,1373,3.442,1374,3.442,1375,2.786,1376,2.591,1377,3.442,1378,3.046,1379,3.442,1380,3.442,1381,2.436,1382,3.442,1383,2.196,1384,5.092,1385,3.442,1386,3.442,1387,3.442,1388,3.442,1389,5.092]],["title/interfaces/CryptoImplementation.html",[0,0.606,1390,3.401]],["body/interfaces/CryptoImplementation.html",[0,1.054,2,1.701,3,0.098,4,0.077,5,0.077,7,1.038,12,0.233,13,0.808,16,0.871,18,0.574,19,0.342,20,0.008,22,2.186,79,0.098,94,2.206,118,1.976,134,5.54,135,1.679,190,2.27,191,1.384,225,2.948,235,3.782,259,0.006,276,3.601,279,5.389,302,0.006,312,0.842,346,1.596,527,1.737,891,4.597,892,4.325,1065,5.851,1390,5.389,1391,8.266,1392,5.643,1393,5.793,1394,7.157,1395,5.066,1396,7.317,1397,7.157,1398,7.157,1399,5.643,1400,6.335,1401,6.957,1402,7.157,1403,7.931,1404,5.643,1405,6.691,1406,7.157,1407,7.157,1408,5.643,1409,6.957,1410,7.157,1411,4.568,1412,4.568]],["title/modules/CryptoModule.html",[357,1.491,369,2.448]],["body/modules/CryptoModule.html",[3,0.111,4,0.087,5,0.087,20,0.008,29,0.434,33,1.055,47,3.86,79,0.111,80,0.006,259,0.007,302,0.007,357,2.745,359,2.864,360,3.134,361,3.348,362,3.348,363,3.134,364,4.207,365,4.207,369,5.035,377,4.048,378,3.348,379,3.134,382,3.134,1413,5.664,1414,5.664,1415,5.664,1416,6.632,1417,6.4,1418,6.4,1419,6.4]],["title/injectables/CryptoService.html",[30,0.849,47,1.86]],["body/injectables/CryptoService.html",[3,0.041,4,0.032,5,0.052,9,4.302,10,4.417,11,1.219,12,0.097,13,0.428,14,3.071,15,0.596,16,0.925,18,0.591,19,0.332,20,0.009,21,2.853,22,1.915,29,0.411,30,0.713,32,3.91,33,0.388,34,2.116,35,0.742,38,0.897,47,1.563,54,1.377,55,2.907,56,2.134,57,1.666,61,1.153,62,1.666,63,1.578,64,1.324,65,1.377,66,1.436,67,1.578,68,1.377,79,0.041,80,0.002,81,1.153,86,1.686,93,1.003,104,1.377,107,0.795,109,1.119,110,1.632,113,2.788,118,2.053,131,2.857,135,1.624,136,1.862,137,1.651,146,2.482,147,2.345,151,2.65,153,2.543,159,1.053,161,1.773,183,2.314,188,2.219,190,1.624,191,1.339,192,1.772,204,1.436,225,0.97,238,1.764,241,3.195,246,2.678,247,0.97,250,1.196,256,1.324,259,0.003,263,0.944,276,2.421,289,3.034,294,2.134,297,2.314,298,2.314,302,0.003,309,1.586,310,0.961,312,0.855,314,2.033,332,1.985,338,1.144,346,0.846,352,1.666,379,2.937,386,1.905,420,3.658,430,0.726,444,1.772,453,1.573,480,1.864,494,4.854,506,1.666,527,1.88,543,1.377,560,3.042,565,2.421,577,1.985,584,3.241,672,2.083,728,1.502,729,1.276,738,2.609,746,5.453,776,0.854,785,1.276,798,1.905,810,3.723,813,1.502,814,2.543,828,1.377,831,1.964,840,1.231,863,2.543,879,1.606,891,2.219,892,1.231,893,1.772,896,2.857,949,4.426,950,1.772,954,3.859,986,1.772,987,1.772,988,3.589,1000,1.118,1032,1.688,1083,2.543,1113,1.578,1140,1.666,1155,2.494,1344,1.905,1383,4.476,1420,2.354,1421,4.984,1422,4.767,1423,3.794,1424,3.359,1425,3.794,1426,3.794,1427,2.857,1428,4.019,1429,3.794,1430,5.468,1431,3.794,1432,2.354,1433,2.354,1434,3.794,1435,5.468,1436,2.354,1437,2.354,1438,3.359,1439,3.359,1440,2.354,1441,3.794,1442,2.354,1443,4.767,1444,3.794,1445,2.354,1446,2.354,1447,3.359,1448,2.354,1449,2.354,1450,2.354,1451,3.794,1452,2.354,1453,2.354,1454,2.354,1455,4.767,1456,3.794,1457,2.354,1458,2.354,1459,2.354,1460,2.354,1461,2.354,1462,4.767,1463,4.767,1464,3.794,1465,2.857,1466,1.772,1467,1.191,1468,2.354,1469,1.772,1470,1.905,1471,2.354,1472,2.354,1473,2.083,1474,2.354,1475,2.354,1476,3.794,1477,5.468,1478,3.075,1479,2.354,1480,2.354,1481,2.354,1482,3.794,1483,1.905,1484,5.997,1485,2.354,1486,5.468,1487,2.354,1488,5.997,1489,2.354,1490,5.468,1491,2.354,1492,3.794,1493,6.41,1494,4.767,1495,2.354,1496,2.354,1497,2.354,1498,2.354,1499,2.354,1500,4.219,1501,3.794,1502,5.077,1503,2.354,1504,2.354,1505,2.354,1506,2.354,1507,2.354,1508,2.354,1509,3.794,1510,2.354,1511,3.794,1512,3.794,1513,3.195,1514,2.354,1515,5.997,1516,3.794,1517,3.071,1518,3.794,1519,3.794,1520,1.905,1521,2.354,1522,2.354,1523,3.794,1524,3.794,1525,3.794,1526,3.794,1527,4.767,1528,3.794,1529,3.794,1530,2.083,1531,2.354,1532,1.905,1533,2.354,1534,2.354,1535,2.354,1536,1.905,1537,1.905,1538,2.354,1539,2.354,1540,2.354,1541,2.354,1542,2.354,1543,2.083,1544,2.083,1545,2.354,1546,2.354,1547,1.905,1548,2.354,1549,2.083,1550,3.794,1551,2.354,1552,3.359,1553,4.219,1554,2.354,1555,2.083,1556,2.354,1557,2.354,1558,2.354,1559,3.794,1560,2.354,1561,3.794,1562,3.794,1563,3.794,1564,3.794,1565,4.84,1566,2.354,1567,2.354,1568,2.354,1569,2.354,1570,2.354,1571,2.083,1572,2.354,1573,2.354,1574,3.359,1575,2.354,1576,2.354,1577,3.794,1578,3.794,1579,3.794,1580,5.468,1581,2.354,1582,3.794,1583,4.767,1584,2.354,1585,3.794,1586,3.794,1587,3.794,1588,3.794,1589,2.354,1590,2.354,1591,2.354,1592,2.354,1593,1.666,1594,2.134,1595,2.354,1596,2.354]],["title/injectables/CryptoService-1.html",[30,0.707,47,1.55,1000,1.787]],["body/injectables/CryptoService-1.html",[3,0.101,4,0.079,5,0.079,12,0.24,16,0.887,19,0.286,20,0.008,29,0.449,30,1.37,33,0.958,34,2.758,35,1.832,47,3.003,79,0.126,80,0.005,93,1.536,100,5.489,109,1.267,118,1.604,135,1.702,191,1.284,202,2.925,238,1.874,259,0.006,276,5.083,302,0.006,309,1.536,312,0.853,346,1.625,430,2.248,527,1.77,776,2.108,840,4.371,892,4.371,1087,3.894,1185,2.939,1297,2.677,1346,4.375,1347,4.375,1383,4.652,1390,5.999,1597,5.81,1598,8.355,1599,7.967,1600,5.81,1601,5.81,1602,7.29,1603,5.81,1604,7.052,1605,7.395,1606,5.81,1607,5.81,1608,7.967,1609,7.617,1610,3.544,1611,4.264,1612,5.81]],["title/modules/DatabaseModule.html",[357,1.491,370,3.197]],["body/modules/DatabaseModule.html",[3,0.099,4,0.077,5,0.077,19,0.283,20,0.008,29,0.446,33,0.94,34,2.739,35,1.798,61,3.529,79,0.125,80,0.005,109,1.061,110,1.485,136,1.99,138,5.736,219,2.414,231,4.037,259,0.006,302,0.006,357,2.378,359,2.552,370,5.1,382,3.529,383,5.425,384,4.395,444,4.294,445,4.617,447,4.617,491,5.048,1236,2.885,1613,5.704,1614,3.823,1615,7.206,1616,5.704,1617,7.206,1618,5.704,1619,5.704,1620,5.704,1621,8.299,1622,8.741,1623,7.575,1624,6.928,1625,5.704,1626,5.704,1627,5.704,1628,5.704,1629,5.704,1630,5.704,1631,7.206,1632,7.899,1633,5.704,1634,5.704,1635,7.206,1636,5.704,1637,5.704,1638,5.704,1639,5.704,1640,5.704,1641,5.048,1642,5.704,1643,5.833,1644,5.704,1645,5.704]],["title/classes/EC_Public.html",[80,0.004,1469,3.401]],["body/classes/EC_Public.html",[3,0.092,4,0.072,5,0.072,7,0.98,12,0.22,13,0.778,18,0.566,19,0.329,20,0.008,21,3.82,22,2.43,24,3.747,29,0.278,79,0.12,80,0.007,81,3.379,106,2.61,107,2.33,195,1.379,202,2.768,259,0.006,276,4.402,302,0.006,304,1.719,312,0.867,440,3.069,619,3.25,627,2.887,696,4.716,750,5.194,810,4.105,840,3.609,926,4.624,1022,3.87,1142,4.624,1244,5.932,1247,5.128,1467,2.695,1469,5.194,1470,6.784,1478,4.914,1517,7.44,1646,5.415,1647,7.162,1648,7.162,1649,6.772,1650,6.193,1651,6.772,1652,6.31,1653,7.418,1654,5.328,1655,6.106,1656,5.194,1657,5.328,1658,7.162,1659,5.328,1660,3.25,1661,4.012]],["title/injectables/EncryptionService.html",[30,0.849,1416,3.197]],["body/injectables/EncryptionService.html",[3,0.081,4,0.063,5,0.063,12,0.192,13,0.711,16,0.933,18,0.594,19,0.342,20,0.008,21,1.965,22,1.228,29,0.441,30,1.184,33,0.765,34,2.726,35,1.464,54,2.716,55,2.832,56,4.019,61,3.085,63,3.112,64,2.611,65,2.716,66,2.832,67,3.112,68,2.716,79,0.081,80,0.004,86,2.779,93,1.228,109,0.927,110,1.184,135,1.637,136,1.973,146,2.803,147,2.416,151,2.154,153,4.221,190,1.595,191,1.349,194,3.496,195,1.202,219,1.965,259,0.006,263,2.527,270,2.02,285,2.611,294,3.542,295,3.287,297,3.841,298,3.841,302,0.006,310,1.176,312,0.933,346,1.404,420,2.832,494,4.221,527,1.944,575,2.832,776,1.685,785,2.516,810,3.923,951,3.112,1143,2.349,1297,2.139,1371,4.11,1396,4.11,1416,4.458,1427,4.742,1447,5.574,1465,4.742,1467,2.349,1478,2.611,1650,3.759,1662,4.644,1663,7.146,1664,7.146,1665,7.146,1666,7.146,1667,6.298,1668,7.662,1669,4.458,1670,6.298,1671,6.298,1672,4.644,1673,4.644,1674,4.458,1675,4.644,1676,4.644,1677,6.325,1678,4.644,1679,4.644,1680,4.644,1681,3.759,1682,4.644,1683,3.759,1684,6.298,1685,6.298,1686,6.298,1687,4.644,1688,4.644,1689,5.574,1690,4.11,1691,4.11,1692,6.298,1693,4.644,1694,4.644,1695,4.644,1696,4.11,1697,4.644,1698,6.298,1699,6.298,1700,4.644,1701,4.644,1702,4.644]],["title/interfaces/Fields.html",[0,0.606,258,2.363]],["body/interfaces/Fields.html",[0,0.827,2,1.358,3,0.078,4,0.061,5,0.061,12,0.255,13,0.696,16,0.921,18,0.498,19,0.321,20,0.009,22,2.095,60,2.029,79,0.131,88,2.278,109,0.908,110,1.726,118,1.243,191,1.086,193,2.44,206,3.385,219,3.201,258,4.146,259,0.005,302,0.005,309,2.216,453,1.486,480,2.958,512,2.138,566,3.018,716,1.717,1004,2.634,1026,1.674,1032,2.898,1125,5.311,1703,3.986,1704,6.696,1705,7.014,1706,6.226,1707,7.243,1708,6.696,1709,3.187,1710,6.656,1711,6.226,1712,3.986,1713,3.986,1714,3.986,1715,3.986,1716,3.986,1717,3.986,1718,3.986,1719,6.226,1720,3.986,1721,6.226,1722,3.986,1723,3.986,1724,3.986,1725,3.986,1726,3.986,1727,6.162,1728,3.986,1729,3.645,1730,3.986,1731,6.226,1732,3.986,1733,3.986,1734,3.986,1735,6.226,1736,3.986,1737,5.459,1738,3.187,1739,3.986,1740,5.459,1741,5.459,1742,5.459,1743,3.986,1744,3.986,1745,3.986,1746,6.226,1747,3.986,1748,3.986,1749,3.986,1750,5.459,1751,3.986,1752,3.986,1753,3.187,1754,3.986]],["title/injectables/FileSystemKeyService.html",[30,0.849,1755,3.656]],["body/injectables/FileSystemKeyService.html",[3,0.056,4,0.044,5,0.079,7,0.59,12,0.133,13,0.545,15,1.639,16,0.97,18,0.597,19,0.343,20,0.008,21,2.738,22,2.147,23,4.913,29,0.424,30,0.908,32,3.946,33,0.529,34,2.407,35,1.012,47,3.118,48,1.572,54,1.878,55,1.958,56,3.27,57,2.272,61,2.368,62,2.272,70,3.084,71,2.62,79,0.056,80,0.003,81,1.572,86,2.674,93,1.278,109,1.147,110,1.371,118,1.335,132,2.291,135,1.785,136,1.335,146,2.769,147,2.665,149,2.103,151,2.615,190,2.162,191,1.403,211,1.572,235,4.652,238,1.035,241,2.152,259,0.004,285,1.805,288,3.546,289,1.624,297,2.948,298,2.948,302,0.004,309,1.278,312,0.905,314,2.162,346,1.078,420,1.958,430,1.49,494,3.24,527,1.934,584,2.163,642,1.805,716,1.224,776,1.165,785,1.74,810,3.903,831,1.991,856,1.624,891,4.059,950,2.417,986,2.417,987,2.417,988,2.417,1087,2.152,1138,1.878,1185,1.624,1189,2.598,1234,1.958,1390,4.378,1411,5.618,1421,3.24,1428,4.337,1465,4.378,1467,1.624,1478,4.567,1483,5.238,1513,3.24,1549,4.279,1574,2.841,1604,5.146,1669,3.422,1677,6.143,1681,4.706,1691,2.841,1755,3.913,1756,8.534,1757,2.841,1758,5.814,1759,5.814,1760,4.834,1761,3.913,1762,6.127,1763,4.834,1764,4.834,1765,3.21,1766,3.913,1767,3.913,1768,3.21,1769,5.618,1770,3.21,1771,3.21,1772,3.21,1773,4.834,1774,3.21,1775,3.21,1776,3.913,1777,3.21,1778,3.913,1779,4.129,1780,5.727,1781,3.21,1782,3.21,1783,3.21,1784,3.21,1785,4.834,1786,4.834,1787,4.279,1788,3.913,1789,2.417,1790,2.598,1791,2.048,1792,3.21,1793,3.21,1794,3.21,1795,3.21,1796,5.814,1797,3.21,1798,5.814,1799,5.814,1800,3.21,1801,4.834,1802,4.834,1803,4.834,1804,3.21,1805,4.834,1806,6.941,1807,3.21,1808,3.21,1809,3.21,1810,3.21,1811,3.21,1812,4.834,1813,3.21,1814,4.834,1815,2.841,1816,2.841,1817,3.21,1818,3.21,1819,3.21,1820,3.21]],["title/interfaces/GenerateTokenOptions.html",[0,0.606,1821,3.656]],["body/interfaces/GenerateTokenOptions.html",[0,0.644,2,1.447,3,0.083,4,0.065,5,0.065,12,0.198,13,0.727,16,1.015,18,0.589,19,0.285,20,0.008,27,1.977,29,0.405,30,1.21,33,0.791,34,2.399,35,1.513,79,0.112,80,0.004,82,2.807,84,4.737,85,5.205,89,3.017,107,1.621,109,1.193,110,1.648,118,2.302,119,2.351,132,1.584,146,2.03,147,2.03,159,2.882,186,2.927,190,1.631,213,2.351,238,2.344,250,2.291,256,4.368,259,0.006,263,2.583,302,0.006,453,1.584,455,2.428,533,3.217,540,4.238,541,3.613,560,3.062,561,4.737,565,4.109,575,3.927,577,3.369,584,3.475,588,6.557,590,4.955,831,2.993,841,3.217,879,3.075,892,2.511,1210,3.397,1297,2.211,1395,3.397,1428,4.316,1466,3.613,1467,2.428,1513,3.217,1821,5.882,1822,4.248,1823,4.248,1824,3.885,1825,4.248,1826,5.7,1827,5.212,1828,5.7,1829,5.7,1830,4.248,1831,4.248,1832,6.432,1833,5.7,1834,4.248,1835,5.212,1836,4.248,1837,4.248,1838,4.248,1839,4.248,1840,4.248,1841,4.248,1842,4.248,1843,4.248,1844,3.613,1845,4.248,1846,4.848,1847,3.885,1848,4.248,1849,4.248,1850,3.613,1851,4.248,1852,3.885,1853,4.248,1854,4.248,1855,4.248,1856,4.248,1857,3.885]],["title/controllers/HealthController.html",[342,1.526,1858,3.656]],["body/controllers/HealthController.html",[3,0.108,4,0.084,5,0.084,7,1.144,12,0.257,20,0.008,29,0.397,33,1.025,70,4.851,79,0.108,80,0.005,86,2.344,93,1.644,109,0.916,131,5.725,132,2.509,135,1.624,213,4.471,259,0.007,302,0.007,310,1.575,312,0.666,342,2.101,344,2.37,346,1.695,512,2.952,524,3.724,645,5.096,702,6.154,1643,6.154,1858,6.926,1859,6.218,1860,8.929,1861,6.73,1862,8.556,1863,6.73,1864,7.603,1865,6.218,1866,6.218,1867,7.603,1868,7.603,1869,5.033,1870,6.218,1871,5.504,1872,6.218,1873,6.218]],["title/modules/HealthModule.html",[357,1.491,371,3.197]],["body/modules/HealthModule.html",[3,0.121,4,0.095,5,0.095,20,0.008,29,0.45,33,1.15,79,0.121,80,0.006,259,0.007,302,0.007,344,3.104,357,2.688,359,3.121,371,5.764,382,3.416,1858,6.982,1869,5.646,1874,6.975,1875,6.975,1876,8.144]],["title/classes/Interceptors.html",[80,0.004,1132,2.755]],["body/classes/Interceptors.html",[0,0.497,3,0.04,4,0.031,5,0.031,11,1.317,12,0.222,13,0.418,15,1.687,16,0.719,18,0.506,19,0.325,20,0.009,22,0.979,27,0.941,29,0.308,38,0.871,60,1.72,79,0.128,80,0.002,88,3.369,89,1.903,93,1.235,107,2.25,109,1.261,110,1.696,118,1.484,127,3.143,129,0.772,135,1.351,136,1.746,137,2.337,141,0.994,143,1.336,146,0.72,147,0.72,171,4.148,190,1.183,191,1.444,193,0.737,195,1.636,204,2.259,206,2.643,211,1.119,219,2.818,225,0.941,246,2.632,250,1.473,259,0.003,263,2.672,270,2.032,302,0.003,304,0.737,309,2.315,312,0.743,314,2.476,323,0.917,338,2.494,341,1.814,346,0.826,430,0.704,440,1.486,453,1.774,455,3.509,480,2.803,484,2.632,499,1.72,505,1.72,527,1.433,561,1.393,901,1.458,913,1.458,1000,2.804,1002,1.617,1016,3.901,1017,2.363,1021,2.732,1022,2.363,1026,2.665,1032,2.092,1036,2.532,1037,4.407,1039,2.166,1072,1.393,1076,1.458,1080,2.083,1088,1.458,1106,1.458,1109,2.363,1112,2.363,1114,2.363,1116,1.393,1117,1.393,1118,1.393,1122,1.393,1131,3.768,1132,3.602,1143,2.363,1155,1.938,1593,3.306,1594,2.083,1610,1.393,1611,2.732,1709,1.617,1738,4.714,1753,3.306,1877,1.849,1878,4.349,1879,4.046,1880,4.78,1881,3.704,1882,2.259,1883,3.704,1884,6.37,1885,2.284,1886,2.998,1887,2.284,1888,2.998,1889,2.284,1890,2.998,1891,2.284,1892,2.998,1893,5.118,1894,2.284,1895,2.998,1896,2.284,1897,2.998,1898,2.789,1899,2.981,1900,2.981,1901,2.849,1902,1.849,1903,1.531,1904,2.622,1905,1.849,1906,1.617,1907,2.259,1908,1.458,1909,1.458,1910,2.363,1911,2.981,1912,2.981,1913,2.363,1914,2.363,1915,2.998,1916,4.78,1917,3.781,1918,1.849,1919,4.046,1920,4.426,1921,1.849,1922,1.849,1923,1.849,1924,1.849,1925,1.849,1926,2.998,1927,2.998,1928,1.849,1929,3.781,1930,1.458,1931,2.998,1932,1.849,1933,1.849,1934,2.998,1935,3.602,1936,4.349,1937,4.78,1938,1.849,1939,2.998,1940,1.849,1941,2.998,1942,1.849,1943,2.998,1944,1.849,1945,1.849,1946,1.849,1947,1.849,1948,2.998,1949,1.849,1950,1.72,1951,1.849,1952,3.781,1953,1.849,1954,1.849,1955,1.849,1956,1.849,1957,1.849,1958,1.617,1959,1.849,1960,1.849,1961,1.849,1962,1.849,1963,1.849,1964,1.849,1965,1.849,1966,1.849,1967,3.781,1968,1.849,1969,1.849,1970,1.849,1971,1.849,1972,1.849,1973,2.998,1974,1.849,1975,1.849,1976,2.998,1977,1.849,1978,1.849,1979,2.998,1980,1.849,1981,1.849,1982,1.849,1983,1.849,1984,1.849,1985,2.789,1986,1.849,1987,1.849,1988,1.849,1989,1.849,1990,1.849,1991,1.849,1992,1.849,1993,1.849,1994,1.849,1995,2.998,1996,2.998,1997,1.336,1998,1.849,1999,1.849,2000,1.849,2001,1.849,2002,2.998,2003,1.849,2004,1.849,2005,1.849,2006,1.849,2007,2.482,2008,1.849,2009,1.72,2010,1.849,2011,2.363,2012,1.849,2013,1.849,2014,4.349,2015,1.849,2016,1.849,2017,3.781,2018,4.78,2019,1.849,2020,2.998,2021,1.849,2022,1.849,2023,1.849,2024,2.998,2025,2.998,2026,1.849]],["title/entities/IssuanceConfig.html",[1158,2.144,1165,3.027]],["body/entities/IssuanceConfig.html",[3,0.08,4,0.062,5,0.062,7,0.845,11,1.393,12,0.19,13,0.705,15,2.021,16,0.761,18,0.502,19,0.336,20,0.008,25,3.988,26,3.061,29,0.429,60,1.55,79,0.08,80,0.006,97,2.08,107,2.111,129,2.111,136,1.726,149,2.719,151,2.142,168,3.99,188,3.656,195,1.617,259,0.006,302,0.006,306,3.684,310,2.085,312,0.882,315,3.27,320,2.88,322,1.795,329,3.041,334,3.514,337,3.18,339,3.162,350,2.18,430,1.927,472,3.908,474,2.88,476,3.162,481,3.142,628,2.719,635,4.706,636,4.424,637,4.245,638,3.988,644,3.387,646,3.387,647,4.461,648,3.621,649,3.656,653,2.701,656,2.323,658,2.686,659,4.706,669,5.252,1158,3.621,1159,5.021,1160,2.582,1162,5.532,1165,4.189,1168,5.029,1169,4.706,1187,3.25,1190,4.064,1195,6.174,1202,4.189,1204,5.532,1205,2.323,1225,4.189,1269,3.656,2027,8.422,2028,4.064,2029,5.029,2030,5.751,2031,4.064,2032,4.064,2033,3.457,2034,5.059,2035,4.064,2036,5.532,2037,6.25,2038,4.592,2039,6.25,2040,5.059,2041,6.25,2042,4.064,2043,4.064,2044,4.064,2045,4.592,2046,4.592,2047,5.532,2048,3.717,2049,4.064]],["title/controllers/IssuanceController.html",[342,1.526,2050,3.656]],["body/controllers/IssuanceController.html",[3,0.091,4,0.072,5,0.072,12,0.218,15,2.041,16,0.926,18,0.501,19,0.299,20,0.008,29,0.447,33,0.868,60,1.998,79,0.091,80,0.005,89,2.695,94,2.346,97,1.955,105,3.464,109,1.121,135,1.888,149,3.504,191,1.34,193,2.209,200,4.59,259,0.006,302,0.006,310,1.927,312,0.815,342,1.78,344,2.008,346,1.527,350,2.501,481,3.64,512,2.501,527,1.847,528,3.727,530,3.361,540,4.714,597,3.081,637,4.064,738,2.291,787,4.45,831,2.17,1004,3.081,1222,4.59,1276,6.159,1279,4.663,1280,5.543,1286,3.729,1287,3.729,1288,3.531,1290,3.729,1291,4.264,1292,2.962,1293,3.729,1294,3.729,1295,4.264,1297,2.427,1301,4.663,2050,5.543,2051,5.268,2052,6.848,2053,6.848,2054,6.735,2055,5.268,2056,5.268,2057,5.268,2058,5.268,2059,6.066,2060,5.268,2061,5.268,2062,4.663,2063,5.268,2064,5.268,2065,5.268,2066,3.729,2067,5.268]],["title/classes/IssuanceDto.html",[80,0.004,2059,3.401]],["body/classes/IssuanceDto.html",[3,0.111,4,0.087,5,0.087,12,0.264,13,0.871,15,2.104,18,0.569,19,0.347,20,0.008,29,0.433,79,0.111,80,0.007,136,1.761,259,0.007,302,0.007,304,2.057,306,2.854,310,2.104,311,3.976,312,0.89,318,3.89,320,3.557,322,2.494,631,5.784,655,5.814,658,3.73,667,4.069,669,5.299,2030,6.722,2059,5.814,2068,6.378,2069,5.645,2070,6.378,2071,6.378,2072,6.378,2073,6.378,2074,6.378,2075,6.25]],["title/injectables/IssuanceService.html",[30,0.849,787,2.642]],["body/injectables/IssuanceService.html",[3,0.071,4,0.055,5,0.055,12,0.169,15,2.145,16,0.93,18,0.598,19,0.311,20,0.009,21,2.823,29,0.434,30,1.082,33,0.672,60,1.797,79,0.071,80,0.004,86,1.775,93,1.522,94,2.514,97,1.759,105,2.912,109,1.067,110,1.362,118,1.842,129,2.254,135,1.872,146,2.67,147,1.286,149,3.153,151,2.698,160,1.945,161,2.95,190,1.458,191,1.346,203,3.673,238,2.152,240,3.012,250,2.104,259,0.005,288,3.511,302,0.005,306,1.825,309,1.917,312,0.819,334,2.653,346,1.283,522,3.071,527,1.855,631,2.734,637,3.442,644,3.12,649,3.903,653,2.567,658,2.386,666,2.887,669,5.476,716,2.195,776,1.48,787,3.367,944,3.071,1159,3.511,1165,3.859,1205,2.063,1208,2.734,1211,4.858,1213,3.071,1217,4.421,1222,3.859,1223,3.859,1235,2.603,1236,2.063,1276,4.66,1289,3.302,1343,5.096,2030,5.401,2048,3.302,2049,3.61,2054,5.096,2059,5.458,2062,3.61,2076,4.079,2077,5.757,2078,6.672,2079,4.079,2080,6.672,2081,4.079,2082,5.757,2083,5.757,2084,4.079,2085,5.757,2086,4.079,2087,4.079,2088,4.079,2089,7.248,2090,5.757,2091,4.079,2092,4.079,2093,3.61,2094,4.079,2095,4.079,2096,5.757,2097,4.079,2098,5.757,2099,4.079,2100,4.079,2101,4.079,2102,3.61,2103,6.672,2104,7.248,2105,4.079,2106,4.079,2107,4.079,2108,4.079,2109,4.079]],["title/controllers/IssuerManagementController.html",[342,1.526,2110,3.656]],["body/controllers/IssuerManagementController.html",[3,0.081,4,0.063,5,0.063,7,0.858,12,0.193,16,0.568,18,0.307,19,0.342,20,0.008,24,2.286,29,0.455,33,0.769,51,3,79,0.081,80,0.004,89,2.238,94,1.948,98,1.735,106,2.286,107,1.577,110,1.188,132,2.086,135,0.997,146,2.259,147,1.992,186,2.846,191,0.822,193,2.775,195,2.257,247,1.922,259,0.006,270,3.49,289,3.197,302,0.006,309,1.671,310,1.182,312,0.5,316,2.15,339,2.361,342,1.577,344,1.779,346,1.409,350,2.216,355,2.846,440,2.874,481,3.305,484,3.509,512,2.216,517,4.473,524,3.095,527,1.133,528,2.286,530,2.978,531,5.115,532,4.758,540,4.017,548,4.758,553,2.911,597,2.73,648,3.402,653,2.238,729,2.529,738,2.03,744,3.778,762,4.032,831,1.922,910,3.128,914,3.128,922,3.554,923,3.854,938,3.514,961,3.778,995,3,1026,1.735,1166,3.854,1286,3.303,1287,3.303,1288,3.128,1290,3.303,1291,3.778,1292,4.029,1293,3.303,1294,3.303,1295,3.778,1297,2.15,1513,3.128,1958,3.303,2007,3.128,2066,3.303,2110,5.115,2111,6.319,2112,5.593,2113,4.667,2114,6.342,2115,4.131,2116,5.766,2117,4.131,2118,5.593,2119,4.571,2120,4.131,2121,4.667,2122,4.667,2123,4.667,2124,6.319,2125,4.131,2126,4.571,2127,3.778,2128,4.667,2129,3.128,2130,3.778,2131,4.571,2132,4.131,2133,4.131,2134,5.593,2135,6.796,2136,4.131,2137,4.131,2138,5.799,2139,5.593,2140,4.235,2141,4.131,2142,4.667,2143,4.667,2144,4.131,2145,4.667,2146,4.667,2147,4.131,2148,3.778,2149,4.131,2150,4.131,2151,4.131,2152,4.131,2153,4.131]],["title/interfaces/IssuerMetadata.html",[0,0.606,2154,3.197]],["body/interfaces/IssuerMetadata.html",[0,1.106,2,1.89,3,0.109,4,0.085,5,0.085,7,1.153,12,0.259,13,0.862,18,0.543,19,0.337,20,0.008,21,3.234,22,2.021,26,3.743,29,0.327,79,0.109,106,3.743,259,0.007,302,0.007,338,2.304,440,3.066,625,4.661,627,4.141,630,5.754,810,3.743,831,3.816,937,5.409,1179,4.47,1246,5.55,1259,3.526,1467,3.172,1478,4.826,1646,5.409,1660,5.524,2154,5.409,2155,6.27]],["title/modules/IssuerModule.html",[357,1.491,372,3.197]],["body/modules/IssuerModule.html",[3,0.077,4,0.061,5,0.061,20,0.008,29,0.488,33,0.736,34,2.311,35,1.408,79,0.106,80,0.004,110,1.152,160,1.508,233,3.614,259,0.005,302,0.005,344,2.337,357,2.311,359,1.998,360,2.187,361,2.336,362,2.336,363,2.187,364,3.542,365,3.542,369,4.423,372,6.66,375,4.978,377,3.208,378,2.336,379,2.187,382,3.003,384,3.74,385,2.849,389,3.952,404,3.362,425,3.614,553,2.057,698,5.668,730,5.205,785,2.42,787,4.774,817,3.161,831,1.839,1159,3.74,1165,2.993,1201,2.723,1207,3.952,1208,2.993,1211,5.471,1213,3.362,1236,2.259,1273,5.668,1289,3.614,1296,5.208,1303,5.668,1305,3.952,1314,3.614,1350,2.723,1614,2.993,2048,3.614,2050,5.668,2093,3.952,2110,5.668,2112,3.952,2126,5.678,2156,3.952,2157,3.952,2158,3.952,2159,3.952,2160,5.208,2161,5.471,2162,5.208,2163,4.978,2164,5.208,2165,4.465,2166,5.668,2167,3.952,2168,4.465,2169,4.465,2170,4.465,2171,3.952,2172,4.465,2173,4.465,2174,4.465,2175,4.11,2176,3.161,2177,3.362,2178,4.465,2179,4.465,2180,6.132,2181,3.362,2182,4.11,2183,2.42,2184,3.952,2185,4.465,2186,6.132,2187,4.465,2188,4.465]],["title/classes/JwksResponseDto.html",[80,0.004,1661,3.401]],["body/classes/JwksResponseDto.html",[3,0.1,4,0.078,5,0.078,7,1.055,12,0.237,13,0.816,18,0.522,19,0.284,20,0.008,21,3.804,22,2.377,24,3.88,29,0.299,79,0.125,80,0.007,81,2.811,106,3.543,107,1.939,195,1.872,202,2.302,259,0.006,276,3.662,302,0.006,304,1.851,312,0.615,440,3.178,619,3.5,627,3.92,750,4.321,810,4.074,840,3.002,926,3.846,1022,4.428,1142,3.846,1244,5.12,1247,5.309,1467,2.903,1469,4.321,1470,5.855,1478,5.102,1517,7.397,1646,5.607,1647,6.403,1648,6.403,1649,6.403,1650,4.645,1651,5.079,1652,5.447,1653,6.403,1655,5.079,1656,4.321,1658,6.403,1660,4.412,1661,5.447,2189,5.079]],["title/injectables/JwtAuthGuard.html",[30,0.849,597,2.642]],["body/injectables/JwtAuthGuard.html",[3,0.109,4,0.085,5,0.085,12,0.26,16,0.931,19,0.3,20,0.008,29,0.448,30,1.438,33,1.035,79,0.109,80,0.006,93,1.661,109,1.127,110,1.18,135,1.342,136,1.734,191,1.347,259,0.007,302,0.007,312,0.819,346,1.705,527,1.857,537,5.559,597,4.474,601,4.729,776,2.279,1082,3.87,1297,2.894,2190,6.281,2191,7.65,2192,7.65,2193,5.559,2194,7.922,2195,6.281,2196,7.65,2197,6.95,2198,6.281,2199,4.007,2200,5.084,2201,6.281,2202,7.65,2203,5.084,2204,7.65,2205,6.281,2206,5.559,2207,6.281,2208,6.281]],["title/injectables/JwtService.html",[30,0.849,533,3.027]],["body/injectables/JwtService.html",[0,0.586,3,0.076,4,0.059,5,0.059,12,0.181,16,0.909,18,0.566,19,0.293,20,0.008,27,2.487,29,0.39,30,1.135,33,0.72,34,2.676,35,1.377,79,0.105,80,0.004,82,3.531,84,4.78,85,5.253,89,3.14,93,1.154,107,1.475,109,1.154,110,1.616,118,2.238,119,2.957,132,1.993,135,1.595,146,2.556,147,1.904,159,3.097,186,3.682,190,1.891,191,1.315,213,2.957,238,2.232,250,2.182,256,2.455,259,0.005,263,2.777,302,0.005,309,1.154,312,0.839,346,1.346,430,1.346,453,1.441,455,3.501,527,1.812,533,4.046,540,4.431,541,3.287,560,2.786,561,4.78,565,3.852,575,3.682,577,3.159,584,3.507,588,4.887,590,2.786,776,1.584,785,2.366,831,2.851,841,4.046,879,3.317,892,2.284,1210,4.273,1297,2.011,1395,3.09,1428,4.046,1466,3.287,1467,2.209,1513,4.046,1821,6.044,1822,3.864,1823,3.864,1824,4.887,1825,6.125,1826,5.344,1827,4.887,1828,5.344,1829,5.344,1830,3.864,1831,3.864,1832,6.125,1833,5.344,1834,3.864,1835,4.887,1836,3.864,1837,3.864,1838,3.864,1839,3.864,1840,3.864,1841,3.864,1842,3.864,1843,3.864,1844,4.546,1845,5.344,1846,5.211,1847,3.534,1848,3.864,1849,3.864,1850,3.287,1851,5.344,1852,4.887,1853,5.344,1854,5.344,1855,3.864,1856,6.609,1857,3.534,2209,6.037,2210,6.037,2211,4.366,2212,4.366,2213,4.366,2214,4.366,2215,4.366,2216,4.366]],["title/injectables/JwtStrategy.html",[30,0.849,598,3.401]],["body/injectables/JwtStrategy.html",[3,0.11,4,0.064,5,0.064,12,0.195,16,0.938,19,0.302,20,0.008,22,1.681,29,0.433,30,1.195,33,0.776,34,3.012,35,1.485,60,1.784,79,0.082,80,0.004,82,3.718,84,2.872,85,3.156,86,2.557,89,2.251,93,1.245,107,1.59,109,1.221,110,1.448,118,1.3,119,2.306,135,1.358,136,1.755,137,2.048,159,2.107,163,2.463,191,1.357,211,3.114,247,1.939,250,2.269,259,0.006,302,0.006,312,0.825,346,1.417,396,5.558,453,1.554,481,1.939,527,1.87,540,4.032,541,3.545,561,3.877,566,3.156,584,3.221,590,4.056,598,4.786,601,3.545,611,4.167,716,1.795,725,4.261,776,1.708,785,2.551,831,3.416,879,3.045,1027,3.004,1082,3.216,1166,2.872,1210,5.094,1297,2.169,1383,3.004,1395,5.094,1532,3.811,1660,3.877,1824,5.826,1835,3.811,1857,3.811,1997,2.754,2011,4.592,2203,3.811,2217,4.708,2218,6.357,2219,6.357,2220,7.197,2221,4.708,2222,6.357,2223,4.708,2224,6.357,2225,7.197,2226,4.708,2227,4.708,2228,6.357,2229,4.708,2230,4.708,2231,4.708,2232,4.708,2233,4.167,2234,6.357,2235,4.167,2236,7.706,2237,4.708,2238,4.708,2239,4.708,2240,4.167,2241,4.708,2242,4.708,2243,4.708,2244,4.708,2245,4.708,2246,4.708,2247,4.708,2248,6.357,2249,4.708,2250,4.708,2251,4.167,2252,6.357,2253,4.708,2254,4.708,2255,4.708,2256,4.708,2257,4.708,2258,4.708,2259,4.708,2260,4.708,2261,4.708,2262,3.811,2263,4.708,2264,4.708]],["title/entities/KeyEntity.html",[1158,2.144,2265,3.656]],["body/entities/KeyEntity.html",[3,0.117,4,0.091,5,0.091,12,0.278,13,0.899,18,0.525,19,0.313,20,0.008,29,0.351,79,0.117,80,0.006,136,2.2,151,2.561,259,0.007,302,0.007,310,2.019,312,0.854,972,5.341,1158,3.784,1160,3.781,1168,5.641,1187,5.641,1202,4.506,1205,3.401,1403,7.054,1411,6.876,2265,6.451,2266,6.723,2267,6.723,2268,6.723]],["title/modules/KeyModule.html",[357,1.491,373,3.197]],["body/modules/KeyModule.html",[3,0.095,4,0.074,5,0.074,15,1.383,20,0.008,29,0.473,33,0.9,34,2.853,35,1.722,47,3.56,48,2.675,60,1.354,79,0.122,80,0.005,109,1.14,110,1.317,118,1.935,135,1.167,138,5.188,259,0.006,302,0.006,312,0.585,346,1.217,357,2.555,359,2.444,364,2.762,365,2.762,369,3.798,373,5.479,382,2.675,383,5.277,384,4.275,385,3.484,396,4.698,398,4.834,444,4.112,445,4.42,447,4.42,1089,3.071,1421,4.698,1614,3.66,1623,6.851,1624,5.674,1755,5.674,1790,5.674,2182,4.698,2183,2.959,2265,4.42,2269,5.461,2270,7.741,2271,5.461,2272,7.741,2273,7.009,2274,5.461,2275,5.674,2276,7.65,2277,5.978,2278,5.461,2279,5.461,2280,7.009,2281,5.461,2282,5.461,2283,4.42,2284,5.461,2285,5.461,2286,4.834,2287,7.009,2288,5.461,2289,5.461,2290,5.461,2291,7.009]],["title/classes/KeyService.html",[80,0.004,1421,3.027]],["body/classes/KeyService.html",[0,0.867,3,0.084,4,0.066,5,0.066,7,0.888,12,0.2,15,1.638,16,1.039,18,0.61,19,0.348,20,0.008,21,2.737,22,2.293,23,5.511,29,0.337,79,0.084,80,0.004,94,1.489,132,2.57,135,1.876,141,2.813,151,2.771,190,2.309,191,1.503,247,1.99,259,0.006,302,0.006,304,1.558,312,0.914,314,2.711,346,1.442,506,5.16,527,2.071,584,2.894,665,3.082,810,3.976,891,4.887,1138,3.783,1185,2.443,1393,5.235,1421,4.335,1428,4.887,1467,2.443,1669,4.578,1674,4.578,1761,5.235,1762,6.907,1767,5.235,1769,6.571,1776,5.235,1778,3.91,1779,4.968,1791,3.082,1847,3.91,2292,4.83,2293,9.347,2294,4.83,2295,4.83,2296,4.83,2297,4.83,2298,4.83,2299,4.83,2300,7.787,2301,4.83]],["title/injectables/LoggerConfigService.html",[30,0.849,2302,3.656]],["body/injectables/LoggerConfigService.html",[0,0.593,3,0.106,4,0.06,5,0.06,7,0.813,12,0.183,13,0.687,16,0.741,18,0.459,19,0.274,20,0.008,27,3.63,29,0.318,30,1.145,33,0.729,34,2.686,35,1.395,60,1.728,71,3.301,79,0.106,80,0.004,86,2.658,93,1.169,97,1.975,109,1.251,110,0.831,132,2.011,133,4.587,135,1.864,137,3.031,191,1.073,202,2.444,213,2.984,250,1.921,259,0.005,302,0.005,312,0.952,346,1.358,414,4.931,427,4.931,428,4.931,429,4.931,433,3.58,435,3.131,436,3.58,437,3.58,439,5.653,440,2.796,446,4.931,449,5.64,503,3.715,527,1.479,738,1.924,776,1.605,785,2.397,1032,1.567,1155,3.928,1214,3.58,1221,3.915,1297,2.038,2302,4.931,2303,7.92,2304,3.563,2305,6.645,2306,6.645,2307,6.645,2308,6.645,2309,6.645,2310,6.645,2311,6.645,2312,6.092,2313,6.645,2314,6.645,2315,6.092,2316,4.423,2317,6.374,2318,4.423,2319,4.423,2320,7.204,2321,4.423,2322,4.423,2323,4.423,2324,5.392,2325,4.423,2326,4.423,2327,5.392,2328,5.392,2329,4.587,2330,4.423,2331,5.392,2332,5.392,2333,3.715,2334,5.392,2335,5.392,2336,5.392,2337,5.392,2338,5.392,2339,3.915,2340,3.915,2341,5.314,2342,3.915,2343,5.392,2344,5.246,2345,3.915,2346,3.915,2347,3.915,2348,3.915,2349,3.915,2350,3.915,2351,3.915]],["title/interfaces/LoggerConfiguration.html",[0,0.606,2317,3.656]],["body/interfaces/LoggerConfiguration.html",[0,0.681,2,1.53,3,0.116,4,0.069,5,0.069,12,0.21,13,0.754,18,0.334,19,0.324,20,0.008,27,3.761,29,0.349,30,1.256,33,0.836,34,2.466,35,1.6,60,1.258,71,2.75,79,0.116,80,0.004,86,2.303,97,1.813,109,1.291,110,0.954,132,1.675,133,3.82,137,3.25,202,2.036,213,2.485,250,2.107,259,0.006,302,0.006,414,4.107,427,5.409,428,5.409,429,5.409,433,4.107,435,3.591,436,4.107,437,4.107,439,6.212,440,3.186,446,6.679,449,6.679,503,3.095,738,2.207,1032,1.797,1155,3.496,1214,4.107,1297,2.338,2302,4.107,2303,4.491,2304,2.968,2305,4.491,2306,4.491,2307,4.491,2308,4.491,2309,4.491,2310,4.491,2311,4.491,2313,4.491,2314,4.491,2317,6.427,2320,7.499,2324,4.491,2327,4.491,2328,4.491,2329,3.82,2331,4.491,2332,4.491,2333,3.095,2334,7.303,2335,7.303,2336,7.303,2337,5.914,2338,5.914,2339,4.491,2340,4.491,2341,5.62,2342,4.491,2343,5.914,2344,5.625,2345,4.491,2346,4.491,2347,4.491,2348,4.491,2349,4.491,2350,4.491,2351,4.491]],["title/interfaces/Middleware.html",[0,0.606,1080,2.54]],["body/interfaces/Middleware.html",[0,0.518,2,0.725,3,0.042,4,0.033,5,0.033,11,1.577,12,0.229,13,0.436,15,1.225,18,0.513,19,0.319,20,0.009,22,1.021,29,0.316,38,0.917,60,1.753,79,0.13,80,0.002,88,3.441,89,1.961,93,0.636,107,2.584,109,1.271,110,1.704,118,1.529,127,3.239,129,0.813,136,1.787,137,2.104,141,1.046,143,1.407,146,0.758,147,0.758,171,3.275,190,1.225,191,1.372,193,0.776,195,1.888,206,2.713,211,1.178,219,2.878,225,0.991,246,2.712,250,2.041,259,0.003,263,2.597,270,2.104,302,0.003,309,2.331,314,2.529,323,0.965,338,2.52,341,1.891,430,0.742,440,1.549,453,1.828,455,3.577,480,2.853,484,2.712,499,1.811,505,1.811,561,1.467,901,1.535,913,1.535,1000,2.879,1002,1.703,1016,3.977,1017,2.464,1021,2.829,1022,2.447,1026,2.713,1032,2.148,1036,2.621,1037,4.474,1039,2.258,1072,1.467,1076,1.535,1080,2.72,1088,1.535,1106,1.535,1109,2.464,1112,2.464,1114,2.464,1116,1.467,1117,1.467,1118,1.467,1122,1.467,1131,4.881,1132,3.377,1143,2.447,1593,3.424,1594,2.172,1610,1.467,1611,2.829,1709,1.703,1738,4.815,1753,3.424,1877,1.947,1878,3.126,1879,1.811,1880,5.906,1884,5.122,1886,1.947,1888,1.947,1890,1.947,1892,1.947,1893,3.916,1895,1.947,1897,3.126,1898,2.907,1899,3.086,1900,3.086,1901,2.95,1902,1.947,1903,1.612,1904,2.733,1905,1.947,1906,1.703,1907,2.355,1908,1.535,1909,1.535,1910,2.464,1911,3.086,1912,3.086,1913,2.464,1914,2.464,1915,3.126,1916,4.908,1917,3.916,1918,1.947,1919,4.169,1920,4.512,1921,1.947,1922,1.947,1923,1.947,1924,1.947,1925,1.947,1926,3.126,1927,3.126,1928,1.947,1929,3.916,1930,1.535,1931,3.126,1932,1.947,1933,1.947,1934,3.126,1935,3.698,1936,4.482,1937,4.908,1938,1.947,1939,3.126,1940,1.947,1941,3.126,1942,1.947,1943,3.126,1944,1.947,1945,1.947,1946,1.947,1947,1.947,1948,3.126,1949,1.947,1950,1.811,1951,1.947,1952,3.916,1953,1.947,1954,1.947,1955,1.947,1956,1.947,1957,1.947,1958,1.703,1959,1.947,1960,1.947,1961,1.947,1962,1.947,1963,1.947,1964,1.947,1965,1.947,1966,1.947,1967,3.916,1968,1.947,1969,1.947,1970,1.947,1971,1.947,1972,1.947,1973,3.126,1974,1.947,1975,1.947,1976,3.126,1977,1.947,1978,1.947,1979,3.126,1980,1.947,1981,1.947,1982,1.947,1983,1.947,1984,1.947,1985,2.907,1986,1.947,1987,1.947,1988,1.947,1989,1.947,1990,1.947,1991,1.947,1992,1.947,1993,1.947,1994,1.947,1995,3.126,1996,3.126,1997,1.407,1998,1.947,1999,1.947,2000,1.947,2001,1.947,2002,3.126,2003,1.947,2004,1.947,2005,1.947,2006,1.947,2007,2.588,2008,1.947,2009,1.811,2010,1.947,2011,2.464,2012,1.947,2013,1.947,2014,4.482,2015,1.947,2016,1.947,2017,3.916,2018,4.908,2019,1.947,2020,3.126,2021,1.947,2022,1.947,2023,1.947,2024,3.126,2025,3.126,2026,1.947]],["title/classes/NotificationRequestDto.html",[80,0.004,2352,3.401]],["body/classes/NotificationRequestDto.html",[3,0.116,4,0.091,5,0.091,12,0.276,13,0.895,18,0.523,19,0.311,20,0.008,29,0.414,79,0.116,80,0.007,259,0.007,302,0.007,304,2.153,310,2.01,311,3.902,312,0.85,322,2.61,754,4.259,770,5.908,774,5.908,980,5.403,1201,4.071,2352,5.975,2353,8.468,2354,8.468,2355,6.855,2356,7.935,2357,7.935,2358,5.026]],["title/classes/Oauth2AuthorizationServerResponse.html",[80,0.004,2359,3.656]],["body/classes/Oauth2AuthorizationServerResponse.html",[3,0.085,4,0.066,5,0.066,7,0.899,11,1.453,12,0.202,13,0.736,18,0.606,19,0.346,20,0.008,22,1.724,27,2.685,28,5.276,79,0.085,80,0.004,82,5.005,89,2.309,91,3.532,106,3.193,119,4.449,195,1.265,259,0.006,302,0.006,304,1.576,312,0.943,323,3.774,332,4.093,338,2.681,440,2.615,524,4.355,619,2.981,711,5.537,719,6.333,831,3.021,832,5.522,834,5.522,836,5.522,839,5.522,842,5.522,843,5.522,845,5.522,847,5.522,873,4.908,1244,6.294,1247,3.276,1259,4.4,1383,4.159,1395,5.537,1537,5.276,1646,4.614,1660,3.975,2189,4.326,2359,5.276,2360,8.892,2361,4.887,2362,4.887,2363,8.383,2364,4.887,2365,4.887,2366,3.956,2367,4.887,2368,4.887,2369,5.769,2370,6.518,2371,4.326]],["title/classes/OfferRequestDto.html",[80,0.004,2116,3.027]],["body/classes/OfferRequestDto.html",[3,0.099,4,0.078,5,0.078,7,1.328,11,1.275,12,0.237,13,0.815,16,1.011,18,0.585,19,0.349,20,0.008,22,1.513,29,0.413,51,2.716,79,0.125,80,0.007,98,2.941,195,1.868,259,0.006,302,0.006,304,1.845,310,2.104,311,3.645,312,0.89,316,4.092,320,3.326,321,4.139,322,2.237,350,2.716,468,2.076,625,3.489,754,3.65,762,5.047,772,4.631,922,4.06,923,4.825,995,2.716,1032,2.026,2075,5.844,2116,4.839,2119,3.65,2129,5.302,2130,4.631,2131,5.047,2140,4.839,2358,4.308,2372,7.582,2373,6.403,2374,5.721,2375,5.064,2376,5.721,2377,5.436,2378,5.721,2379,5.721,2380,5.064,2381,5.721,2382,6.39,2383,4.631]],["title/classes/OfferResponse.html",[80,0.004,2119,2.882]],["body/classes/OfferResponse.html",[3,0.107,4,0.084,5,0.084,7,1.132,11,1.372,12,0.255,13,0.853,18,0.594,19,0.321,20,0.008,22,1.628,29,0.427,51,2.923,79,0.131,80,0.007,98,2.289,195,1.593,259,0.007,302,0.007,304,1.986,311,3.482,312,0.809,316,3.929,320,3.482,321,4.278,322,2.407,350,2.923,468,2.967,754,3.928,762,3.928,922,3.462,923,3.755,995,3.882,1032,2.18,2075,6.117,2116,4.126,2119,4.822,2129,5.065,2130,4.983,2131,4.822,2140,5.065,2358,4.635,2372,7.238,2373,4.983,2377,4.635,2382,6.689,2383,4.983,2384,6.156,2385,5.449]],["title/controllers/Oid4vciController.html",[342,1.526,2166,3.656]],["body/controllers/Oid4vciController.html",[3,0.091,4,0.071,5,0.071,11,1.942,12,0.217,16,0.832,18,0.563,19,0.316,20,0.008,29,0.454,33,0.866,51,2.494,79,0.091,80,0.005,94,2.342,109,1.119,110,0.987,135,1.719,151,2.662,160,2.309,188,3.072,190,1.731,191,1.204,193,2.759,240,2.748,246,4.372,247,2.816,257,3.718,259,0.006,302,0.006,310,1.731,312,0.732,340,5.093,342,1.775,344,2.002,346,1.524,468,2.92,474,3.708,512,2.494,524,4.087,527,1.659,528,2.573,653,2.691,727,3.521,729,2.847,738,2.285,739,4.838,900,2.847,902,3.955,1201,3.204,1269,3.998,1297,2.42,2126,4.848,2127,4.252,2162,3.352,2166,5.533,2175,3.521,2177,3.955,2352,6.059,2386,5.253,2387,5.253,2388,5.253,2389,5.253,2390,5.253,2391,6.05,2392,5.253,2393,5.253,2394,5.253,2395,4.649,2396,4.649,2397,4.649,2398,3.718,2399,5.253,2400,4.252,2401,5.253,2402,4.649,2403,5.253,2404,4.649,2405,5.253,2406,5.253,2407,5.253,2408,5.253,2409,5.253,2410,5.253,2411,5.253,2412,5.253]],["title/injectables/Oid4vciService.html",[30,0.849,2126,2.882]],["body/injectables/Oid4vciService.html",[3,0.043,4,0.034,5,0.034,11,1.722,12,0.234,13,0.448,15,1.665,16,0.751,18,0.566,19,0.309,20,0.009,21,2.095,29,0.445,30,0.746,32,4.01,33,0.411,34,2.277,35,0.785,47,2.841,48,1.22,51,1.885,55,2.422,57,1.763,61,1.945,62,1.763,79,0.043,80,0.002,81,1.22,86,2.333,93,1.05,94,1.224,97,0.964,109,0.832,110,1.67,118,2.038,134,2.661,135,1.318,136,0.688,146,2.518,147,2.607,149,1.083,151,2.555,155,2.016,160,1.673,161,1.476,190,1.665,191,1.086,193,2.225,195,0.645,213,2.425,238,2.225,240,2.077,246,3.022,247,1.635,250,2.258,257,1.763,259,0.003,267,1.589,269,2.016,277,2.016,285,1.401,289,2.009,295,2.81,297,1.519,298,1.519,302,0.003,312,0.791,329,0.949,338,1.703,339,1.26,340,3.318,346,0.885,453,1.634,466,2.322,468,2.853,474,1.829,478,2.81,480,2.208,481,2.039,522,1.875,524,1.945,527,1.498,540,3.44,565,3.159,577,2.59,637,1.183,644,1.35,646,1.35,653,1.406,662,3.159,667,1.589,714,1.457,729,1.35,730,3.304,733,3.609,734,1.589,738,3.292,759,3.786,776,0.904,787,4.034,792,2.989,807,2.233,808,2.989,809,3.728,812,2.989,813,1.589,814,1.669,817,1.763,828,2.896,831,2.327,856,2.505,863,2.661,865,3.998,868,1.875,879,1.68,888,1.875,894,2.533,897,2.989,919,1.401,922,2.233,923,1.519,971,2.016,995,1.183,997,2.016,1000,1.885,1032,0.882,1065,1.763,1119,3.504,1155,1.303,1165,1.669,1179,1.457,1201,1.519,1234,1.519,1248,2.205,1249,2.205,1250,2.205,1251,2.016,1252,2.205,1253,3.514,1254,3.214,1255,2.205,1269,3.845,1272,2.205,1288,1.669,1296,4.828,1314,2.016,1321,4.382,1331,3.214,1333,3.159,1553,2.205,1611,2.322,1788,4.572,1789,1.875,1906,1.763,2040,2.016,2066,1.763,2116,3.786,2119,2.533,2126,2.533,2154,5.069,2163,3.445,2164,4.401,2167,2.205,2175,2.661,2176,1.763,2181,1.875,2184,2.205,2199,3.159,2304,1.457,2333,2.422,2352,4.253,2373,3.214,2396,2.205,2397,2.205,2398,3.504,2413,2.491,2414,6.17,2415,4.951,2416,4.951,2417,2.491,2418,3.97,2419,3.97,2420,2.491,2421,2.491,2422,2.491,2423,2.491,2424,2.491,2425,2.491,2426,3.97,2427,3.514,2428,2.491,2429,2.491,2430,2.491,2431,5.648,2432,2.491,2433,5.648,2434,4.951,2435,2.491,2436,3.97,2437,2.491,2438,2.491,2439,2.491,2440,3.318,2441,2.491,2442,2.491,2443,3.97,2444,2.491,2445,2.491,2446,4.382,2447,2.491,2448,2.491,2449,2.491,2450,2.491,2451,2.491,2452,2.491,2453,4.951,2454,2.491,2455,2.491,2456,2.491,2457,2.491,2458,2.491,2459,3.97,2460,2.491,2461,2.491,2462,5,2463,2.491,2464,5.648,2465,2.491,2466,2.205,2467,2.491,2468,2.016,2469,2.491,2470,3.97,2471,2.491,2472,3.97,2473,2.491,2474,2.205,2475,5,2476,3.97,2477,3.97,2478,3.97,2479,3.97,2480,3.97,2481,3.97,2482,3.97,2483,3.97,2484,4.645,2485,2.989,2486,2.989,2487,2.491,2488,2.205,2489,6.17,2490,2.491,2491,2.491,2492,2.491,2493,2.491,2494,2.491,2495,2.205,2496,2.491,2497,2.491,2498,3.97,2499,2.491,2500,2.491,2501,2.491,2502,2.491,2503,2.491,2504,2.491,2505,2.491,2506,2.491,2507,6.575,2508,2.491,2509,3.97,2510,3.97,2511,2.205,2512,2.491,2513,2.205,2514,2.491,2515,2.491,2516,2.491,2517,2.491,2518,2.491,2519,2.205,2520,2.491,2521,2.491,2522,2.491,2523,4.951,2524,2.491,2525,3.97,2526,2.491,2527,2.491,2528,2.491,2529,2.205,2530,2.491,2531,2.491,2532,2.491,2533,2.205,2534,2.491,2535,2.491,2536,2.205,2537,2.205]],["title/controllers/Oid4vpController.html",[342,1.526,2538,3.656]],["body/controllers/Oid4vpController.html",[3,0.09,4,0.071,5,0.071,7,0.959,11,1.517,12,0.216,16,0.828,18,0.601,19,0.267,20,0.008,29,0.434,33,0.86,79,0.09,80,0.005,91,3.687,93,1.379,94,2.566,95,2.827,100,3.927,101,5.075,102,5.123,109,1.002,135,1.824,151,2.621,191,1.198,193,2.685,195,1.761,253,5.828,259,0.006,302,0.006,310,1.724,312,0.729,323,2.73,342,2.558,344,1.988,346,1.517,468,3.155,476,4.398,512,2.477,524,3.333,527,1.651,528,2.555,543,3.051,694,6.043,738,2.269,739,4.816,786,4.869,900,3.687,1223,4.56,1297,2.403,1313,4.56,2162,3.328,2175,4.56,2177,3.927,2395,4.617,2398,3.692,2400,4.222,2402,4.617,2404,4.617,2538,6.13,2539,5.216,2540,5.216,2541,6.804,2542,7.573,2543,6.703,2544,5.216,2545,5.216,2546,5.216,2547,4.617,2548,5.216,2549,5.216,2550,4.56,2551,4.617,2552,4.617,2553,5.216,2554,5.216,2555,5.216,2556,5.216,2557,5.216,2558,5.216,2559,5.216,2560,5.216]],["title/modules/Oid4vpModule.html",[357,1.491,2160,2.882]],["body/modules/Oid4vpModule.html",[3,0.096,4,0.075,5,0.075,20,0.008,29,0.477,33,0.911,79,0.096,80,0.005,259,0.006,302,0.006,344,2.692,357,2.569,359,2.473,360,2.706,361,2.891,362,2.891,363,2.706,364,3.937,365,3.937,369,4.698,374,5.531,375,5.287,377,3.695,378,2.891,379,2.706,382,3.459,385,3.526,393,4.473,404,4.161,786,5.376,2160,6.021,2162,5.531,2163,5.287,2164,5.531,2175,4.733,2176,3.911,2177,4.161,2181,4.161,2182,4.733,2183,2.995,2538,6.301,2551,4.891,2561,4.891,2562,4.891,2563,4.891,2564,4.891,2565,5.531,2566,5.526,2567,5.526,2568,4.891]],["title/injectables/Oid4vpService.html",[30,0.849,786,2.642]],["body/injectables/Oid4vpService.html",[3,0.047,4,0.037,5,0.037,9,1.729,11,1.691,12,0.112,15,0.686,16,0.721,18,0.573,19,0.232,20,0.009,22,0.717,24,1.327,29,0.439,30,0.798,33,0.447,34,2.352,35,0.855,47,2.808,48,1.327,51,1.287,52,4.346,60,0.672,61,1.327,69,4.776,79,0.047,80,0.002,86,2.274,93,1.122,94,2.274,98,2.39,103,3.004,104,2.482,109,0.625,110,1.616,118,1.444,119,1.327,129,0.916,132,0.894,135,1.373,146,2.391,147,2.534,151,2.66,160,2.171,161,1.578,173,2.194,174,2.194,175,1.524,176,2.194,177,2.194,178,2.194,183,2.589,188,1.585,190,1.5,191,1.042,192,2.041,193,1.369,195,1.532,225,1.116,231,3.004,238,1.688,247,2.155,248,3.939,250,2.326,253,5.385,258,1.418,259,0.004,267,3.777,270,1.846,282,1.918,289,2.147,295,3.004,302,0.004,309,0.717,312,0.634,314,1.945,323,2.579,329,1.618,334,1.249,338,1.577,339,1.371,346,0.946,453,2.122,466,2.482,468,2.676,472,3.383,474,1.249,476,3.449,527,1.655,543,2.482,550,2.845,565,3.338,577,2.737,584,1.213,617,2.041,621,2.708,622,3.436,694,4.457,727,2.845,728,1.729,733,3.728,734,1.729,742,1.653,755,4.825,762,1.729,776,0.983,786,2.482,807,1.524,828,3.06,840,3.097,856,1.371,879,2.505,892,2.221,900,2.3,929,1.585,995,1.287,1000,1.287,1185,1.371,1225,1.816,1376,2.041,1378,2.399,1381,1.918,1383,1.729,1400,3.757,1405,4.792,1416,5.044,1478,1.524,1500,5.689,1532,2.194,1660,1.653,1689,2.399,1696,2.399,1710,2.041,1727,2.041,1729,2.194,1788,3.436,1789,2.041,1879,2.041,1906,3.004,2011,1.729,2119,1.729,2163,3.611,2164,4.547,2175,2.845,2176,1.918,2181,2.041,2199,4.101,2304,1.585,2333,3.611,2398,3.703,2440,3.506,2466,2.399,2484,4.84,2485,3.196,2486,3.196,2488,3.757,2495,5.689,2511,2.399,2513,2.399,2519,3.757,2543,3.757,2547,3.757,2552,2.399,2569,2.71,2570,5.232,2571,5.232,2572,2.71,2573,2.71,2574,2.71,2575,2.71,2576,3.436,2577,3.436,2578,3.196,2579,2.71,2580,4.792,2581,2.71,2582,2.71,2583,4.244,2584,2.71,2585,2.71,2586,2.71,2587,2.71,2588,2.194,2589,2.71,2590,2.71,2591,2.399,2592,5.92,2593,4.244,2594,5.232,2595,2.71,2596,4.244,2597,6.428,2598,2.71,2599,2.71,2600,3.436,2601,2.71,2602,2.71,2603,2.71,2604,2.399,2605,2.71,2606,2.71,2607,2.71,2608,2.71,2609,2.71,2610,2.71,2611,2.71,2612,2.71,2613,2.71,2614,2.71,2615,2.71,2616,2.71,2617,2.71,2618,5.232,2619,5.232,2620,2.71,2621,2.399,2622,4.244,2623,4.244,2624,2.71,2625,2.71,2626,2.71,2627,2.71,2628,2.71,2629,2.71,2630,2.71,2631,2.194,2632,2.399,2633,2.71,2634,2.71,2635,2.194,2636,2.399,2637,2.71,2638,2.71,2639,5.92,2640,4.244,2641,2.71,2642,2.71,2643,2.71,2644,4.244,2645,2.71,2646,2.71,2647,2.399,2648,2.399,2649,2.71,2650,2.71,2651,2.71,2652,2.71,2653,5.92,2654,4.244,2655,4.244,2656,2.71,2657,2.71,2658,2.71,2659,4.244,2660,2.71,2661,2.71,2662,2.71,2663,4.244,2664,2.71,2665,2.71,2666,2.71,2667,4.244,2668,2.71,2669,5.232,2670,2.71,2671,4.244,2672,2.71,2673,4.244,2674,4.244,2675,2.71,2676,2.71,2677,2.71,2678,2.71,2679,2.71,2680,2.71,2681,2.71,2682,2.71]],["title/classes/ParResponseDto.html",[80,0.004,735,3.656]],["body/classes/ParResponseDto.html",[3,0.115,4,0.09,5,0.09,11,2.021,12,0.274,13,0.892,18,0.52,19,0.31,20,0.008,79,0.115,80,0.006,171,3.997,259,0.007,302,0.007,304,2.138,312,0.846,323,3.17,557,6.357,593,6.994,619,4.042,719,6.396,735,6.396,742,5.149,995,4.151,2366,5.365,2371,5.866,2529,6.994,2683,8.443,2684,7.902]],["title/interfaces/Params.html",[0,0.606,1727,3.401]],["body/interfaces/Params.html",[0,0.823,2,1.348,3,0.078,4,0.061,5,0.061,12,0.254,13,0.692,18,0.497,19,0.328,20,0.009,22,2.09,60,2.025,79,0.131,88,2.262,109,0.904,110,1.725,118,1.234,191,1.081,193,2.698,206,3.742,219,3.539,258,3.946,259,0.005,302,0.005,309,2.211,453,1.476,480,3.27,512,2.123,566,2.996,716,1.704,1004,2.615,1026,1.662,1032,3.153,1125,4.696,1703,3.957,1704,3.957,1705,5.432,1706,3.957,1707,7.227,1708,6.676,1709,3.164,1710,6.647,1711,6.202,1712,3.957,1713,3.957,1714,3.957,1715,3.957,1716,3.957,1717,3.957,1718,3.957,1719,6.202,1720,3.957,1721,6.202,1722,3.957,1723,3.957,1724,3.957,1725,3.957,1726,3.957,1727,6.297,1728,3.957,1729,3.619,1730,3.957,1731,6.202,1732,3.957,1733,3.957,1734,3.957,1735,6.202,1736,3.957,1737,5.432,1738,3.164,1739,3.957,1740,5.432,1741,5.432,1742,5.432,1743,3.957,1744,3.957,1745,3.957,1746,6.202,1747,3.957,1748,3.957,1749,3.957,1750,5.432,1751,3.957,1752,3.957,1753,3.164,1754,3.957]],["title/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,0.606,820,3.401]],["body/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,0.608,2,0.89,3,0.051,4,0.04,5,0.04,11,1.691,12,0.122,13,0.512,18,0.563,19,0.277,20,0.009,21,1.249,29,0.433,30,0.852,33,0.486,34,1.822,35,0.93,38,1.125,47,2.274,48,1.445,51,1.401,60,1.124,79,0.079,80,0.003,86,2.176,93,0.78,97,1.1,98,1.686,107,0.997,109,1.039,110,1.67,113,1.726,118,2.193,119,1.445,129,1.865,136,1.524,146,2.226,147,2.672,151,2.656,159,1.32,160,0.997,161,2.625,164,2.893,190,0.747,193,2.157,195,1.902,213,1.445,236,2.088,238,2.447,246,1.445,247,2.274,250,1.741,256,1.659,259,0.004,270,3.07,302,0.004,306,2.471,309,0.78,323,1.819,327,4.153,329,2.362,334,2.855,337,2.029,338,1.868,339,1.493,341,2.704,468,3.013,472,2.621,474,1.359,476,1.493,478,3.908,480,2.159,524,1.445,564,3.209,577,1.544,590,1.883,621,2.893,628,2.909,637,2.621,644,1.599,646,1.599,647,2.652,648,3.942,653,1.606,656,1.493,662,2.893,670,2.088,704,2.222,708,3.953,711,2.088,714,2.652,715,3.209,727,3.701,728,1.883,729,1.599,730,1.726,732,2.222,733,2.889,734,1.883,742,3.367,755,4.386,759,3.039,777,2.388,780,2.388,781,2.388,782,2.388,784,2.388,786,3.229,787,3.229,790,2.222,792,5.034,793,2.388,795,5.015,803,2.388,807,3.76,808,5.315,809,4.665,810,3.035,811,2.388,812,4.665,813,1.883,814,1.978,815,2.388,816,2.388,817,2.088,818,2.388,819,2.388,820,4.157,821,5.412,822,3.414,823,2.388,824,2.388,825,3.67,826,2.388,827,3.67,828,1.726,829,5.015,830,2.388,831,2.274,832,2.222,833,2.388,834,2.222,835,2.388,836,2.222,837,2.388,838,2.388,839,2.222,840,2.372,841,1.978,842,2.222,843,2.222,844,2.388,845,2.222,846,2.388,847,2.222,848,2.388,849,2.388,850,2.388,851,3.67,852,2.388,853,2.222,854,2.388,855,2.388,856,3.719,857,2.388,858,2.388,859,2.388,860,2.388,861,2.388,862,4.469,863,3.701,864,2.388,865,4.386,866,2.388,867,2.388,868,2.222,869,2.388,870,2.388,871,5.015,872,3.67,873,5.535,874,2.388,875,3.67,876,3.67,877,3.67,878,3.67,879,1.919,880,3.67,881,2.388,882,2.388,883,2.388,884,2.388,885,2.388,886,2.388,887,2.388,888,3.414,889,2.388,890,2.388,891,1.726,892,1.544,893,2.222,894,1.883,895,2.388,896,2.222,897,2.222,898,2.388,899,2.388,900,1.599,901,2.893,902,2.222,903,2.388,904,4.469,905,2.388,906,2.388,907,2.388,908,2.388,909,2.388,910,1.978,911,3.67,912,2.388,913,2.893,914,1.978,915,2.388,916,2.388,917,2.388,918,2.388,919,1.659,920,2.388,921,2.388,922,1.659,923,2.765,924,2.388,925,2.388,926,1.978,927,2.388,928,2.388,929,1.726,930,2.388,931,2.388,932,2.388,933,2.388,934,2.388,935,2.388,936,2.388,937,2.088,938,2.222,939,2.222,940,3.67,941,2.388,942,2.388,943,2.388,944,2.222,945,2.388,946,2.388,947,2.388]],["title/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,0.606,822,3.401]],["body/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,0.605,2,0.883,3,0.051,4,0.04,5,0.04,11,1.687,12,0.121,13,0.509,16,0.549,18,0.57,19,0.288,20,0.009,21,1.24,29,0.433,30,0.847,33,0.483,34,1.814,35,0.924,38,1.117,47,2.264,48,1.435,51,1.391,60,1.118,79,0.078,80,0.003,86,2.17,93,0.775,97,1.094,98,1.677,107,0.99,109,1.037,110,1.669,113,1.714,118,2.189,119,1.435,129,1.857,136,1.518,146,2.219,147,2.668,151,2.654,159,1.311,160,0.99,161,2.617,164,2.877,190,0.742,193,2.15,195,1.898,213,1.435,236,2.074,238,2.442,246,1.435,247,2.264,250,1.733,256,1.648,259,0.004,270,3.062,302,0.004,306,2.46,309,0.775,323,1.809,327,4.137,329,2.353,334,2.844,337,2.018,338,1.861,339,1.482,341,2.692,468,3.008,472,2.61,474,1.35,476,1.482,478,3.891,480,2.149,524,1.435,564,3.192,577,1.533,590,1.869,621,2.877,628,2.899,637,2.61,644,1.588,646,1.588,647,2.637,648,3.764,653,1.597,656,1.482,662,2.877,670,2.074,704,2.206,708,3.939,711,2.074,714,2.637,715,3.192,727,3.684,728,1.869,729,1.588,730,1.714,732,2.206,733,2.876,734,1.869,742,3.352,755,4.369,759,3.022,777,2.371,780,2.371,781,2.371,782,2.371,784,2.371,786,3.215,787,3.215,790,2.206,792,5.018,793,2.371,795,4.997,803,2.371,807,3.748,808,4.648,809,4.648,810,3.023,811,2.371,812,5.3,813,1.869,814,1.964,815,2.371,816,2.371,817,2.074,818,2.371,819,2.371,820,3.395,821,5.395,822,4.139,823,4.997,824,4.997,825,3.65,826,2.371,827,3.65,828,1.714,829,4.997,830,2.371,831,2.264,832,2.206,833,2.371,834,2.206,835,2.371,836,2.206,837,2.371,838,2.371,839,2.206,840,2.359,841,1.964,842,2.206,843,2.206,844,2.371,845,2.206,846,2.371,847,2.206,848,2.371,849,2.371,850,2.371,851,3.65,852,2.371,853,2.206,854,2.371,855,2.371,856,3.709,857,2.371,858,2.371,859,2.371,860,2.371,861,2.371,862,4.449,863,3.684,864,2.371,865,4.369,866,2.371,867,2.371,868,2.206,869,2.371,870,2.371,871,4.997,872,3.65,873,5.521,874,2.371,875,3.65,876,3.65,877,3.65,878,3.65,879,1.908,880,3.65,881,2.371,882,2.371,883,2.371,884,2.371,885,2.371,886,2.371,887,2.371,888,3.395,889,2.371,890,2.371,891,1.714,892,1.533,893,2.206,894,1.869,895,2.371,896,2.206,897,2.206,898,2.371,899,2.371,900,1.588,901,2.877,902,2.206,903,2.371,904,4.449,905,2.371,906,2.371,907,2.371,908,2.371,909,2.371,910,1.964,911,3.65,912,2.371,913,2.877,914,1.964,915,2.371,916,2.371,917,2.371,918,2.371,919,1.648,920,2.371,921,2.371,922,1.648,923,2.75,924,2.371,925,2.371,926,1.964,927,2.371,928,2.371,929,1.714,930,2.371,931,2.371,932,2.371,933,2.371,934,2.371,935,2.371,936,2.371,937,2.074,938,2.206,939,2.206,940,3.65,941,2.371,942,2.371,943,2.371,944,2.206,945,2.371,946,2.371,947,2.371]],["title/interfaces/PathSerializer.html",[0,0.606,1904,3.197]],["body/interfaces/PathSerializer.html",[0,0.526,2,0.74,3,0.043,4,0.033,5,0.033,11,1.366,12,0.232,13,0.443,15,1.242,18,0.531,19,0.316,20,0.009,22,1.038,29,0.32,38,0.936,60,1.766,79,0.131,80,0.002,88,3.469,89,1.984,93,0.649,107,2.069,109,1.275,110,1.708,118,1.547,127,3.276,129,0.829,136,1.804,137,2.133,141,1.068,143,1.436,146,0.774,147,0.774,171,3.304,190,1.242,191,1.379,193,0.792,195,1.69,206,2.741,211,1.202,219,3.188,225,1.011,246,2.744,250,1.546,259,0.003,263,2.621,270,2.133,302,0.003,309,2.337,314,2.55,323,0.985,338,2.582,341,1.922,430,0.757,440,1.574,453,1.849,455,3.604,480,2.872,484,2.744,499,1.848,505,1.848,561,1.497,901,1.566,913,1.566,1000,2.908,1002,1.737,1016,4.006,1017,2.504,1021,2.868,1022,2.48,1026,2.731,1032,2.429,1036,2.657,1037,4.5,1039,2.295,1072,1.497,1076,1.566,1080,2.207,1088,1.566,1106,1.566,1109,2.504,1112,2.504,1114,2.504,1116,1.497,1117,1.497,1118,1.497,1122,1.497,1131,3.908,1132,3.416,1143,2.48,1593,3.47,1594,2.207,1610,1.497,1611,2.868,1709,1.737,1738,4.854,1753,3.47,1877,1.987,1878,3.177,1879,1.848,1880,3.969,1884,5.163,1886,1.987,1888,1.987,1890,1.987,1892,1.987,1893,3.969,1895,1.987,1897,3.177,1898,2.955,1899,3.128,1900,3.128,1901,2.99,1902,1.987,1903,1.645,1904,3.47,1905,1.987,1906,1.737,1907,2.394,1908,1.566,1909,1.566,1910,2.504,1911,3.128,1912,3.128,1913,2.504,1914,2.504,1915,3.177,1916,4.958,1917,3.969,1918,1.987,1919,4.218,1920,4.545,1921,1.987,1922,1.987,1923,1.987,1924,1.987,1925,1.987,1926,3.177,1927,3.177,1928,1.987,1929,3.969,1930,1.566,1931,3.177,1932,1.987,1933,1.987,1934,3.177,1935,3.736,1936,4.534,1937,4.958,1938,1.987,1939,3.177,1940,1.987,1941,3.177,1942,1.987,1943,3.177,1944,1.987,1945,1.987,1946,1.987,1947,1.987,1948,3.177,1949,1.987,1950,1.848,1951,1.987,1952,3.969,1953,1.987,1954,1.987,1955,1.987,1956,1.987,1957,1.987,1958,1.737,1959,1.987,1960,1.987,1961,1.987,1962,1.987,1963,1.987,1964,1.987,1965,1.987,1966,1.987,1967,3.969,1968,1.987,1969,1.987,1970,1.987,1971,1.987,1972,1.987,1973,3.177,1974,1.987,1975,1.987,1976,3.177,1977,1.987,1978,1.987,1979,3.177,1980,1.987,1981,1.987,1982,1.987,1983,1.987,1984,1.987,1985,2.955,1986,1.987,1987,1.987,1988,1.987,1989,1.987,1990,1.987,1991,1.987,1992,1.987,1993,1.987,1994,1.987,1995,3.177,1996,3.177,1997,1.436,1998,1.987,1999,1.987,2000,1.987,2001,1.987,2002,3.177,2003,1.987,2004,1.987,2005,1.987,2006,1.987,2007,2.63,2008,1.987,2009,1.848,2010,1.987,2011,2.504,2012,1.987,2013,1.987,2014,4.534,2015,1.987,2016,1.987,2017,3.969,2018,4.958,2019,1.987,2020,3.177,2021,1.987,2022,1.987,2023,1.987,2024,3.177,2025,3.177,2026,1.987]],["title/entities/PresentationConfig.html",[929,2.642,1158,2.144]],["body/entities/PresentationConfig.html",[3,0.085,4,0.066,5,0.066,7,0.897,10,3.969,11,2.012,12,0.202,13,0.734,15,2.063,16,0.951,18,0.515,19,0.336,20,0.008,25,4.152,26,3.187,29,0.425,49,5.184,51,2.314,78,4.606,79,0.085,80,0.006,97,1.579,104,3.806,136,2.158,149,2.83,151,2.208,168,4.089,188,3.806,195,1.684,202,2.611,206,3.278,247,2.008,248,5.515,259,0.006,302,0.006,310,2.122,311,2.998,312,0.897,320,3.601,322,1.906,329,3.104,337,3.278,338,1.962,350,2.314,430,2.006,626,6.291,627,3.526,628,2.83,630,4.899,656,2.466,697,4.899,750,3.67,926,3.267,929,3.806,972,5.238,1084,4.361,1158,3.711,1160,2.741,1168,5.532,1169,4.899,1170,4.315,1177,4.315,1187,5.184,1202,4.361,1205,2.466,1313,4.361,2028,4.315,2029,5.184,2031,4.315,2032,4.315,2033,3.67,2034,5.267,2035,4.315,2036,5.759,2042,4.315,2043,4.315,2044,4.315,2047,5.759,2550,4.361,2600,5.929,2685,8.552,2686,4.875,2687,7.324,2688,4.875,2689,4.875,2690,4.875]],["title/classes/PresentationDuringIssuance.html",[80,0.004,649,2.642]],["body/classes/PresentationDuringIssuance.html",[3,0.11,4,0.086,5,0.086,7,1.167,12,0.262,13,0.869,16,0.937,18,0.608,19,0.346,20,0.008,29,0.402,79,0.133,80,0.007,191,1.117,259,0.007,302,0.007,304,2.047,310,1.95,311,4.275,312,0.824,320,3.818,322,2.481,329,3.159,337,3.708,633,4.491,649,4.502,656,3.21,657,5.287,1082,3.21,1167,5.159,1304,6.239,2691,6.345,2692,6.345,2693,5.616,2694,5.616,2695,5.616]],["title/classes/PresentationDuringIssuanceConfig.html",[80,0.004,640,3.197]],["body/classes/PresentationDuringIssuanceConfig.html",[3,0.08,4,0.063,5,0.063,7,0.851,11,1.4,12,0.191,13,0.709,16,0.563,18,0.305,19,0.324,20,0.008,29,0.399,60,1.897,79,0.133,80,0.007,97,2.048,105,3.178,107,2.122,129,2.787,160,2.41,161,3.273,186,2.822,202,3.069,216,3.831,259,0.006,302,0.006,304,1.492,306,4.006,310,1.172,312,0.496,315,3.286,318,2.822,319,2.952,320,3.286,321,3.732,322,1.809,329,2.395,334,2.131,337,3.192,338,1.894,453,1.527,472,4.323,474,3.686,476,4.269,481,2.938,628,3.735,631,3.101,632,4.73,633,3.274,634,2.952,635,3.483,636,4.446,637,2.197,638,2.952,639,5.415,640,5.662,642,3.533,643,3.745,644,4.146,645,3.101,646,3.865,647,5.022,648,4.077,649,5.195,650,3.745,652,3.745,653,2.526,654,5.085,655,5.37,656,2.34,657,2.952,658,2.706,659,4.73,660,3.745,661,3.745,662,2.952,663,5.085,664,4.446,665,4.008,666,3.274,667,2.952,668,3.745,669,2.952,2069,4.095,2696,4.626]],["title/controllers/PresentationManagementController.html",[342,1.526,2697,3.656]],["body/controllers/PresentationManagementController.html",[3,0.068,4,0.053,5,0.053,7,0.717,11,1.835,12,0.161,15,1.904,16,0.865,18,0.468,19,0.341,20,0.008,24,1.91,29,0.449,33,0.643,51,2.647,52,3.97,60,1.761,79,0.068,80,0.003,86,1.719,89,2.516,93,1.031,94,2.317,97,1.897,98,1.45,105,2.821,106,1.91,107,1.317,109,0.959,110,1.048,135,1.79,146,2.052,147,1.758,191,1.251,193,2.596,195,2.168,203,3.558,204,3.401,240,2.917,247,1.606,253,3.737,259,0.005,270,3.269,289,2.821,302,0.005,309,1.474,310,1.799,312,0.761,315,2.917,316,1.797,329,1.486,339,1.973,342,1.317,344,1.486,346,1.243,350,1.851,440,2.611,481,3.611,484,3.188,512,1.851,517,3.947,527,1.724,528,3.188,530,2.488,531,4.514,532,4.198,540,4.586,548,4.198,553,2.569,597,2.281,628,3.644,648,3.09,729,2.113,738,2.426,744,3.156,762,3.558,786,3.807,929,4.155,995,2.647,1004,2.281,1026,1.45,1166,3.401,1208,2.614,1222,3.737,1280,4.514,1286,2.76,1287,2.76,1288,2.614,1290,2.76,1292,3.661,1293,3.947,1294,3.947,1513,2.614,1958,2.76,2007,2.614,2066,4.607,2114,5.761,2115,3.451,2117,3.451,2118,4.936,2119,4.153,2120,3.451,2125,3.451,2129,2.614,2131,4.153,2132,3.451,2133,3.451,2134,4.936,2135,6.287,2136,3.451,2137,3.451,2138,5.269,2139,4.936,2140,3.737,2141,3.451,2147,3.451,2148,3.156,2149,3.451,2150,3.451,2151,3.451,2152,3.451,2153,3.451,2588,3.156,2697,4.514,2698,3.899,2699,5.576,2700,5.761,2701,3.899,2702,3.899,2703,3.899,2704,3.899,2705,6.327,2706,3.899,2707,3.899,2708,3.899,2709,3.899,2710,3.899,2711,5.576,2712,3.451,2713,3.156,2714,3.899,2715,3.899,2716,3.899,2717,3.899,2718,3.899,2719,3.899,2720,3.899,2721,3.899,2722,3.899,2723,3.899,2724,3.899,2725,3.899,2726,3.899,2727,3.899,2728,3.899,2729,3.899,2730,3.899]],["title/classes/PresentationRequest.html",[80,0.004,2705,3.656]],["body/classes/PresentationRequest.html",[3,0.096,4,0.075,5,0.075,7,1.015,11,1.889,12,0.228,13,0.796,15,1.787,16,0.859,18,0.465,19,0.35,20,0.008,26,3.456,29,0.368,79,0.122,80,0.006,97,2.103,195,2.28,202,2.831,229,4.127,253,5.213,259,0.006,302,0.006,304,1.78,310,1.97,311,3.584,312,0.833,316,3.777,320,3.251,321,3.691,322,2.157,326,4.994,329,3.358,337,3.481,341,3.456,620,4.994,627,3.824,628,3.686,648,2.62,656,2.791,754,3.52,762,4.963,772,4.466,995,3.693,2129,5.213,2131,4.963,2138,4.466,2140,3.698,2262,5.711,2358,4.154,2375,4.884,2377,4.154,2380,4.884,2383,5.711,2385,4.884,2550,4.729,2705,5.711,2731,6.636,2732,7.056]],["title/interfaces/PresentationRequestOptions.html",[0,0.606,2580,3.656]],["body/interfaces/PresentationRequestOptions.html",[0,0.864,2,1.943,3,0.112,4,0.088,5,0.088,7,1.185,11,1.86,12,0.266,13,0.877,16,1.118,18,0.549,19,0.305,20,0.008,26,3.806,29,0.336,79,0.112,97,1.886,195,2.011,259,0.007,302,0.007,329,3.433,337,3.876,468,3.267,620,5.499,656,3.26,2550,5.208,2580,7.01,2731,5.216,2733,6.444,2734,6.289]],["title/modules/PresentationsModule.html",[357,1.491,2565,2.882]],["body/modules/PresentationsModule.html",[3,0.105,4,0.083,5,0.083,20,0.008,29,0.474,33,1.002,52,5.678,79,0.105,80,0.005,259,0.007,302,0.007,344,2.857,357,2.683,359,2.719,360,2.976,361,3.179,362,3.179,363,2.976,364,4.112,365,4.112,377,3.922,378,3.179,379,2.976,382,3.671,929,3.554,1208,4.072,1236,3.074,1614,4.072,2160,4.783,2182,5.024,2183,3.293,2565,5.845,2697,6.58,2712,5.378,2713,4.918,2735,5.378,2736,5.378,2737,5.378,2738,5.378,2739,6.285,2740,6.076,2741,7.496,2742,6.076,2743,6.076,2744,5.378,2745,6.076]],["title/injectables/PresentationsService.html",[30,0.849,52,2.755]],["body/injectables/PresentationsService.html",[3,0.041,4,0.032,5,0.032,7,1.294,10,3.925,11,0.852,12,0.098,13,0.431,15,2.307,16,0.824,18,0.592,19,0.299,20,0.008,21,2.029,22,0.628,29,0.405,30,0.718,32,3.925,33,0.391,52,3.352,71,2.979,78,4.556,79,0.041,80,0.002,81,1.163,86,2.24,91,2.071,93,1.453,94,2.626,95,3.667,97,2.024,98,0.883,101,3.684,102,2.877,103,2.705,104,2.235,105,3.56,109,1.228,110,1.365,118,2.006,132,1.261,135,1.749,136,1.663,137,1.662,141,1.033,146,2.029,147,1.733,149,3.561,151,2.597,164,3.507,190,1.998,191,1.313,195,0.989,200,3.684,225,2.899,226,1.922,235,1.592,238,1.547,240,3.682,250,1.205,257,2.705,259,0.003,270,2.391,302,0.003,309,1.268,312,0.832,314,1.421,346,0.852,430,1.478,453,1.261,500,3.093,503,2.331,522,1.788,527,1.81,543,1.389,553,2.532,577,1.242,584,2.88,617,4.138,622,3.093,626,2.705,628,3.48,675,4.245,745,5.697,776,0.862,807,1.335,810,2.349,840,1.999,841,4.535,856,1.933,879,3.427,900,2.071,929,4.541,995,3.056,1004,3.215,1022,1.933,1086,2.438,1104,2.705,1113,2.561,1155,1.242,1158,3.056,1160,2.149,1185,4.181,1186,4.318,1208,1.592,1217,3.925,1222,2.561,1223,2.561,1224,6.23,1225,1.592,1229,3.89,1234,2.331,1235,1.515,1236,1.201,1259,2.149,1313,2.561,1331,3.882,1344,3.882,1346,1.788,1347,1.788,1348,6.43,1349,1.788,1360,2.102,1368,3.383,1409,6.746,1412,6.285,1465,1.788,1466,1.788,1467,1.201,1779,2.438,1791,1.515,1882,2.331,2011,1.515,2029,1.681,2183,1.287,2277,5.142,2600,1.922,2700,3.383,2713,1.922,2746,2.375,2747,3.822,2748,7.038,2749,6.767,2750,4.796,2751,5.496,2752,3.822,2753,3.822,2754,4.796,2755,3.822,2756,1.788,2757,5.278,2758,5.496,2759,3.822,2760,3.383,2761,3.383,2762,3.822,2763,3.822,2764,2.375,2765,3.822,2766,3.822,2767,2.375,2768,2.375,2769,3.822,2770,2.375,2771,2.375,2772,2.375,2773,6.024,2774,5.496,2775,2.375,2776,4.796,2777,3.822,2778,2.375,2779,3.822,2780,3.822,2781,2.375,2782,4.796,2783,2.375,2784,3.822,2785,3.822,2786,2.375,2787,2.375,2788,1.788,2789,1.592,2790,2.375,2791,2.375,2792,2.375,2793,2.375,2794,3.822,2795,2.375,2796,2.375,2797,2.375,2798,2.375,2799,1.922,2800,2.375,2801,2.375,2802,2.375,2803,2.375,2804,2.375,2805,2.375,2806,2.375,2807,2.375,2808,2.375,2809,2.375,2810,2.375,2811,2.375,2812,2.375,2813,2.375,2814,2.375,2815,3.822,2816,2.375,2817,2.375,2818,2.375,2819,2.375,2820,2.375,2821,2.375,2822,2.375,2823,4.796,2824,2.375,2825,2.375,2826,2.375,2827,2.375,2828,3.093,2829,3.822,2830,2.102,2831,2.375]],["title/interfaces/PresentedData.html",[0,0.606,2832,3.656]],["body/interfaces/PresentedData.html",[0,0.93,2,1.618,3,0.093,4,0.073,5,0.073,7,0.987,11,1.196,12,0.222,13,0.782,15,1.359,18,0.506,19,0.301,20,0.008,22,1.419,79,0.093,87,2.548,98,1.995,109,1.195,110,1.645,118,2.24,141,2.334,146,1.692,147,2.421,160,2.838,190,1.359,195,1.389,259,0.006,263,2.781,270,2.334,294,3.898,302,0.006,328,4.422,329,2.046,338,1.618,430,1.654,519,5.61,521,4.344,528,3.76,553,3.738,625,4.227,638,3.424,653,1.901,664,5.434,856,2.715,1086,3.424,1234,3.273,1269,3.139,2140,3.597,2550,3.597,2832,6.567,2833,4.344,2834,5.366,2835,6.135,2836,5.366,2837,5.366,2838,4.75,2839,6.795,2840,5.61,2841,6.135,2842,4.344,2843,4.75,2844,6.214,2845,6.795,2846,4.75,2847,6.795,2848,6.135,2849,6.135,2850,4.75,2851,4.75,2852,4.75,2853,4.75,2854,6.135,2855,6.135,2856,4.75,2857,4.75,2858,4.75,2859,4.75,2860,4.75,2861,4.75,2862,4.75,2863,4.75,2864,4.75,2865,4.75,2866,4.344]],["title/interfaces/ProcessResponse.html",[0,0.606,2840,3.656]],["body/interfaces/ProcessResponse.html",[0,0.933,2,1.627,3,0.094,4,0.073,5,0.073,7,0.993,11,1.203,12,0.223,13,0.785,15,1.367,18,0.507,19,0.302,20,0.008,22,1.427,79,0.094,87,2.563,98,2.007,109,1.197,110,1.647,118,2.245,141,2.348,146,1.702,147,2.427,160,1.823,190,1.367,195,1.8,259,0.006,263,2.791,270,2.348,294,3.912,302,0.006,328,4.439,329,2.058,338,1.627,430,1.664,519,5.631,521,4.369,528,3.77,553,3.746,625,4.243,638,3.444,653,2.464,664,5.449,856,2.73,1086,3.444,1234,3.292,1269,3.157,2832,6.231,2833,4.369,2835,4.777,2838,4.777,2839,7.758,2840,6.231,2841,6.158,2842,4.369,2843,4.777,2844,6.231,2845,6.814,2846,4.777,2847,6.814,2848,6.158,2849,6.158,2850,4.777,2851,4.777,2852,4.777,2853,4.777,2854,6.158,2855,6.158,2856,4.777,2857,4.777,2858,4.777,2859,4.777,2860,4.777,2861,4.777,2862,4.777,2863,4.777,2864,4.777,2865,4.777,2866,4.369]],["title/interfaces/QuerySerializerOptions.html",[0,0.606,1017,2.882]],["body/interfaces/QuerySerializerOptions.html",[0,0.66,2,1.483,3,0.085,4,0.067,5,0.067,12,0.203,13,0.739,16,1.022,18,0.565,19,0.33,20,0.009,22,2.221,27,3.031,29,0.257,79,0.146,88,3.722,109,1.155,110,1.611,118,1.808,193,2.53,206,2.202,225,3.364,259,0.006,263,2.627,302,0.006,309,2.452,453,2.161,716,2.496,1015,6.349,1016,2.767,1017,4.177,1022,4.249,1026,2.917,1032,1.742,1116,3.001,1117,4.488,1143,3.722,1155,3.425,1593,4.634,1594,3.682,1898,3.704,1904,3.482,1907,3.001,1935,4.784,1997,2.877,2009,4.929,2867,4.92,2868,5.745,2869,3.482,2870,4.92,2871,7.844,2872,4.92,2873,6.547,2874,4.92,2875,6.547,2876,6.547,2877,6.547,2878,4.92,2879,4.92,2880,4.92,2881,4.92,2882,4.92,2883,6.547,2884,4.92]],["title/classes/RegistrarConfig.html",[58,3.401,80,0.004]],["body/classes/RegistrarConfig.html",[3,0.114,4,0.09,5,0.09,7,1.212,9,5.026,10,4.804,12,0.273,13,0.889,15,2.318,16,1.062,18,0.575,19,0.309,20,0.008,58,6.342,59,4.964,75,6.376,79,0.114,80,0.007,97,1.6,132,2.176,185,5.931,259,0.007,302,0.007,304,2.126,312,0.844,1247,4.418,2885,8.424,2886,6.592,2887,8.424,2888,6.592,2889,6.592]],["title/modules/RegistrarModule.html",[357,1.491,374,2.882]],["body/modules/RegistrarModule.html",[3,0.098,4,0.077,5,0.077,7,1.044,20,0.008,29,0.446,33,0.936,59,5.935,69,6.235,70,4.584,71,3.894,79,0.125,80,0.005,104,4.202,110,1.067,132,2.371,259,0.006,302,0.006,334,2.616,357,2.735,359,3.527,360,2.781,361,2.97,362,2.97,363,2.781,364,3.988,365,3.988,369,4.731,374,5.913,377,3.759,378,2.97,379,2.781,382,4.058,384,4.382,385,3.622,392,5.025,425,4.596,1166,3.463,1210,4.018,1624,6.381,1903,3.805,2329,4.275,2565,5.57,2890,5.025,2891,5.025,2892,5.025,2893,5.677,2894,5.677,2895,6.36,2896,5.677,2897,5.677,2898,5.677,2899,5.677,2900,5.677,2901,5.677,2902,7.883,2903,7.883,2904,5.677,2905,5.677]],["title/injectables/RegistrarService.html",[30,0.849,69,3.027]],["body/injectables/RegistrarService.html",[0,0.266,1,2.669,3,0.034,4,0.027,5,0.08,6,1.755,7,0.778,8,1.755,9,5.496,10,5.254,11,0.442,12,0.082,13,0.372,14,1.605,15,1.866,16,0.829,17,4.432,18,0.574,19,0.283,20,0.008,21,0.839,22,0.524,23,2.334,24,0.971,25,1.265,26,0.971,27,1.358,28,1.605,29,0.392,30,0.62,31,4.182,32,3.604,33,0.327,34,2.247,35,0.625,36,5.543,37,1.605,38,3.184,39,1.755,40,2.918,41,2.918,42,2.918,43,2.918,44,2.918,45,2.918,46,1.605,47,2.892,48,0.971,49,3.491,50,1.755,51,0.941,52,4.282,53,1.755,54,1.16,55,1.209,56,1.115,57,1.403,58,5.75,59,6.559,60,2.043,61,2.073,62,1.403,63,1.329,64,1.115,65,1.16,66,1.209,67,1.329,68,1.16,69,3.96,70,2.104,71,1.787,72,2.918,73,2.482,74,5.543,75,6.181,76,2.918,77,4.365,78,5.1,79,0.034,80,0.002,81,0.971,82,2.885,83,4.365,84,2.011,85,2.21,86,2.591,87,1.565,88,1.003,89,2.323,90,2.918,91,1.787,92,3.426,93,1.304,94,1.931,95,3.202,96,2.482,97,1.652,98,1.226,99,2.669,100,2.482,101,2.21,102,2.482,103,2.334,104,1.928,105,1.668,106,0.971,107,1.43,108,2.482,109,1.156,110,1.476,111,1.755,112,1.755,113,1.928,114,1.755,115,2.334,116,1.755,117,1.755,118,2.193,119,0.971,120,1.755,121,1.755,122,1.755,123,1.755,124,1.755,125,5.543,126,1.755,127,1.16,128,1.755,129,0.67,130,2.918,131,2.482,132,1.628,133,3.713,134,3.306,135,1.697,136,1.362,137,1.434,138,2.21,139,3.713,140,2.918,141,2.145,142,3.96,143,1.928,144,2.918,145,2.918,146,2.578,147,2.214,148,2.918,149,1.434,150,2.918,151,2.561,152,2.482,153,2.21,154,2.918,155,4.783,156,1.755,157,1.755,158,2.918,159,1.475,160,1.114,161,1.226,162,2.918,163,1.725,164,3.493,165,4.365,166,1.755,167,1.755,168,1.725,169,1.755,170,1.755,171,1.003,172,1.755,173,1.605,174,1.605,175,1.115,176,1.605,177,1.605,178,1.605,179,1.755,180,1.755,181,1.755,182,1.755,183,1.209,184,2.918,185,5.547,186,3.604,187,5.23,188,3.456,189,2.918,190,1.249,191,1.414,192,1.493,193,1.365,194,2.482,195,0.513,196,1.755,197,1.755,198,2.918,199,2.918,200,2.21,201,3.713,202,1.323,203,3.77,204,3.604,205,2.918,206,0.887,207,1.755,208,1.755,209,1.755,210,1.755,211,3.334,212,5.125,213,2.682,214,3.426,215,2.918,216,2.581,217,3.746,218,2.918,219,2.087,220,4.846,221,3.426,222,5.23,223,2.669,224,1.755,225,0.817,226,1.605,227,1.755,228,1.755,229,2.885,230,3.746,231,2.334,232,1.755,233,1.605,234,1.755,235,1.329,236,1.403,237,1.755,238,1.365,239,2.918,240,1.037,241,2.21,242,1.755,243,1.755,244,3.746,245,3.746,246,1.615,247,1.743,248,3.713,249,1.755,250,1.04,251,1.755,252,1.605,253,3.306,254,1.755,255,1.755,256,1.115,257,1.403,258,1.037,259,0.004,260,1.605,261,1.755,262,1.755,263,1.698,264,1.755,265,1.755,266,1.755,267,1.265,268,1.755,269,1.605,270,0.862,271,1.755,272,1.755,273,2.669,274,1.605,275,1.755,276,1.265,277,1.605,278,1.755,279,1.493,280,1.755,281,1.755,282,2.334,283,2.918,284,2.669,285,1.854,286,2.918,287,1.755,288,1.209,289,1.003,290,1.493,291,2.918,292,2.918,293,1.755,294,1.854,295,1.403,296,1.755,297,1.209,298,1.209,299,2.669,300,2.918,301,1.755,302,0.003,310,0.502,312,0.841,346,0.735,527,1.652,716,0.756,776,0.719,785,1.074,1155,1.725,1427,2.482,2906,3.297,2907,3.297,2908,3.297,2909,3.297,2910,3.297,2911,3.297,2912,1.983,2913,1.983,2914,1.983,2915,1.983,2916,1.983,2917,1.983,2918,1.983,2919,1.983,2920,1.983,2921,1.983,2922,1.983,2923,1.983,2924,1.983,2925,1.983,2926,1.983,2927,1.983]],["title/classes/RegistrationCertificateRequest.html",[49,3.197,80,0.004]],["body/classes/RegistrationCertificateRequest.html",[3,0.109,4,0.085,5,0.085,7,1.153,10,5.233,11,1.704,12,0.259,13,0.862,15,2.088,16,0.93,18,0.503,19,0.3,20,0.008,26,3.743,29,0.399,49,6.074,78,6.074,79,0.109,80,0.007,104,4.47,193,2.838,259,0.007,302,0.007,304,2.023,310,1.936,311,3.798,312,0.819,320,3.798,322,2.452,620,5.409,627,4.141,697,5.754,754,4.001,766,5.55,1173,6.186,2928,8.243,2929,8.243,2930,6.27,2931,6.27]],["title/interfaces/RequestOptions.html",[0,0.606,1122,2.755]],["body/interfaces/RequestOptions.html",[0,0.91,2,1.065,3,0.061,4,0.048,5,0.048,11,1.853,12,0.146,13,0.586,16,0.975,18,0.447,19,0.35,20,0.009,24,1.73,27,1.455,29,0.321,38,2.977,60,1.873,79,0.144,87,1.677,91,1.915,95,1.915,97,0.858,98,1.314,107,2.291,109,0.764,127,3.036,129,1.194,136,0.975,137,1.537,141,1.537,142,2.368,159,1.581,161,2.522,163,1.848,175,3.815,190,1.315,193,2.778,195,2.116,206,3.495,211,2.543,219,3.197,225,3.3,229,2.066,238,1.14,250,2.139,258,3.22,259,0.005,302,0.005,314,1.314,316,1.628,338,2.638,346,0.788,430,2.228,440,1.417,453,2.031,455,3.822,480,2.954,484,1.73,634,2.254,716,2.755,919,1.987,1009,2.368,1011,2.368,1013,2.368,1014,2.368,1018,2.368,1021,4.419,1024,3.753,1026,1.314,1027,4.328,1032,2.944,1044,2.368,1051,2.254,1072,2.155,1073,2.66,1074,5.441,1075,4.634,1076,2.254,1077,3.909,1078,3.909,1079,2.66,1080,2.919,1081,2.66,1082,4.205,1083,4.546,1084,2.368,1085,2.66,1086,4.328,1087,2.368,1088,2.254,1089,1.987,1090,2.66,1091,2.66,1092,2.66,1093,2.66,1094,3.674,1095,3.909,1096,2.66,1097,2.66,1098,2.501,1099,2.66,1100,3.909,1101,2.66,1102,4.356,1103,2.66,1104,2.501,1105,2.66,1106,3.927,1107,2.66,1108,2.501,1109,3.312,1110,2.66,1111,2.66,1112,3.312,1113,2.368,1114,2.254,1115,2.66,1116,2.155,1117,2.155,1118,2.155,1119,2.501,1120,2.501,1121,2.66,1122,3.166,1123,3.909,1124,3.909,1125,4.125,1126,4.634,1127,5.107,1128,6.671,1129,4.634,1130,2.66,1131,4.611,1132,2.155,1133,3.909,1134,2.501,1135,2.66,1136,2.66,1137,2.66,1138,2.066,1139,2.368,1140,2.501,1141,2.66,1142,2.368,1143,1.787,1144,2.501,1145,5.689,1146,2.66]],["title/modules/ResolverModule.html",[357,1.491,2739,3.197]],["body/modules/ResolverModule.html",[3,0.114,4,0.089,5,0.089,20,0.008,29,0.439,33,1.085,79,0.114,80,0.006,259,0.007,302,0.007,357,2.778,359,2.945,360,3.223,361,3.443,362,3.443,363,3.223,364,4.258,365,4.258,377,4.116,378,3.443,379,3.223,382,3.223,2182,5.274,2183,3.566,2739,6.474,2757,6.654,2932,5.825,2933,5.825,2934,5.825,2935,6.581,2936,6.581]],["title/injectables/ResolverService.html",[30,0.849,2757,3.197]],["body/injectables/ResolverService.html",[3,0.087,4,0.068,5,0.068,7,0.921,10,3.053,12,0.207,16,0.806,19,0.26,20,0.008,21,3.342,22,2.232,24,2.452,29,0.44,30,1.245,33,0.825,79,0.087,80,0.004,93,1.324,94,2.042,109,1.093,110,1.484,118,2.268,132,2.186,135,1.415,141,2.881,146,2.34,147,1.578,190,1.678,191,1.166,195,1.295,213,3.244,238,2.548,241,4.439,247,2.062,259,0.006,260,4.052,302,0.006,312,0.709,314,3.201,346,1.476,480,2.589,527,1.607,573,3.769,584,2.964,725,3.355,728,3.194,776,1.816,807,2.815,810,4.281,831,3.477,856,3.35,879,2.802,1179,3.873,1186,3.194,1297,2.306,1381,4.687,1467,2.532,1478,3.724,1552,4.431,1779,5.039,1815,4.431,1919,3.769,2154,3.543,2183,2.713,2277,5.974,2756,3.769,2757,4.687,2761,5.862,2788,4.986,2789,3.355,2937,5.006,2938,6.623,2939,6.623,2940,5.006,2941,6.623,2942,5.006,2943,6.623,2944,6.623,2945,5.862,2946,6.623,2947,5.006,2948,5.006,2949,4.431,2950,5.006,2951,5.006,2952,5.006,2953,5.006,2954,5.006,2955,5.006,2956,5.006,2957,5.006,2958,5.006,2959,5.006,2960,5.006,2961,5.006,2962,6.623,2963,4.431,2964,5.006,2965,5.006,2966,4.431,2967,5.006,2968,5.006,2969,5.006,2970,5.006,2971,5.006,2972,5.006]],["title/classes/SchemaResponse.html",[80,0.004,1196,3.401]],["body/classes/SchemaResponse.html",[3,0.112,4,0.088,5,0.088,12,0.268,13,1.002,18,0.571,19,0.358,20,0.008,79,0.112,80,0.006,259,0.007,302,0.007,304,2.089,309,2.061,312,0.929,334,3.852,430,2.403,619,3.951,1026,2.898,1032,2.761,1166,5.099,1196,5.868,1206,7.185,1304,6.684,2366,5.243,2973,7.794,2974,7.794,2975,7.794,2976,5.733,2977,5.733,2978,5.733]],["title/interfaces/SerializeOptions.html",[0,0.606,2979,3.197]],["body/interfaces/SerializeOptions.html",[0,0.955,2,1.182,3,0.068,4,0.053,5,0.053,18,0.553,19,0.296,20,0.009,22,1.48,27,2.689,79,0.148,88,1.983,98,2.427,109,1.365,110,1.635,118,1.082,136,1.082,168,2.928,191,1.379,238,1.264,250,1.236,259,0.005,263,1.573,302,0.005,309,2.352,332,2.051,430,2.414,453,1.294,714,2.293,716,1.494,1016,2.204,1026,1.458,1032,1.388,1036,3.859,1037,5.304,1039,3.818,1082,3.302,1089,2.204,1143,1.983,1594,4.404,1610,4.593,1611,5.203,1899,2.501,1900,2.501,1901,4.593,1907,3.414,1908,3.571,1909,3.571,1910,4.165,1911,5.259,1912,5.143,1913,4.805,1914,4.165,1920,4.805,1930,4.165,1935,5.116,1997,2.293,2868,4.375,2869,3.962,2979,5.04,2980,2.951,2981,5.04,2982,4.214,2983,2.951,2984,2.951,2985,2.775,2986,2.951,2987,6.549,2988,2.951,2989,4.915,2990,2.951,2991,5.361,2992,5.361,2993,2.951,2994,2.951,2995,4.214,2996,2.951,2997,2.951,2998,2.951,2999,2.951,3000,2.951,3001,2.951,3002,2.951,3003,2.951,3004,2.951,3005,2.951,3006,2.951,3007,2.951,3008,2.951,3009,2.951]],["title/interfaces/SerializePrimitiveOptions.html",[0,0.606,2981,3.197]],["body/interfaces/SerializePrimitiveOptions.html",[0,0.948,2,1.162,3,0.067,4,0.052,5,0.052,12,0.159,13,0.624,16,0.673,18,0.565,19,0.315,20,0.009,22,1.462,27,3.082,79,0.147,88,1.95,98,2.405,109,1.363,110,1.63,118,1.064,136,1.064,168,2.893,191,1.471,238,1.243,250,1.216,259,0.005,263,1.547,302,0.005,309,2.346,332,2.017,430,2.401,453,1.272,714,2.255,716,1.47,1016,2.168,1026,1.433,1032,1.365,1036,3.829,1037,5.293,1039,3.783,1082,2.798,1089,2.168,1143,1.95,1594,4.379,1610,4.563,1611,5.19,1899,2.46,1900,2.46,1901,4.563,1907,3.373,1908,3.529,1909,3.529,1910,4.127,1911,5.235,1912,5.118,1913,4.774,1914,4.127,1920,4.774,1930,4.127,1935,5.289,1997,2.255,2868,3.707,2869,3.915,2979,4.578,2980,2.903,2981,5.001,2982,4.164,2983,2.903,2984,2.903,2985,2.729,2986,2.903,2987,6.529,2988,2.903,2989,4.87,2990,2.903,2991,5.32,2992,5.32,2993,2.903,2994,2.903,2995,4.164,2996,2.903,2997,2.903,2998,2.903,2999,2.903,3000,2.903,3001,2.903,3002,2.903,3003,2.903,3004,2.903,3005,2.903,3006,2.903,3007,2.903,3008,2.903,3009,2.903]],["title/interfaces/SerializePrimitiveParam.html",[0,0.606,1901,2.755]],["body/interfaces/SerializePrimitiveParam.html",[0,0.951,2,1.171,3,0.067,4,0.053,5,0.053,12,0.161,13,0.627,18,0.566,19,0.306,20,0.009,22,1.47,27,2.675,79,0.147,88,1.964,98,2.415,109,1.364,110,1.632,118,1.072,136,1.072,168,2.909,191,1.375,238,1.253,250,1.224,259,0.005,263,1.558,302,0.005,309,2.385,332,2.032,430,2.406,453,1.282,714,2.271,716,1.48,1016,2.184,1026,1.444,1032,1.375,1036,3.842,1037,5.298,1039,3.798,1082,3.285,1089,2.184,1143,1.964,1594,4.39,1610,4.576,1611,5.195,1899,2.478,1900,2.478,1901,4.761,1907,3.391,1908,3.547,1909,3.547,1910,4.143,1911,5.246,1912,5.129,1913,4.787,1914,4.143,1920,4.787,1930,4.143,1935,5.105,1997,2.271,2868,3.726,2869,3.935,2979,4.596,2980,2.924,2981,5.018,2982,4.186,2983,2.924,2984,2.924,2985,2.748,2986,2.924,2987,6.538,2988,2.924,2989,4.889,2990,2.924,2991,5.338,2992,5.338,2993,2.924,2994,2.924,2995,4.186,2996,2.924,2997,2.924,2998,2.924,2999,2.924,3000,2.924,3001,2.924,3002,2.924,3003,2.924,3004,2.924,3005,2.924,3006,2.924,3007,2.924,3008,2.924,3009,2.924]],["title/interfaces/SerializerOptions.html",[0,0.606,2868,3.027]],["body/interfaces/SerializerOptions.html",[0,0.947,2,1.16,3,0.067,4,0.052,5,0.052,12,0.159,13,0.623,18,0.55,19,0.315,20,0.009,22,1.46,27,3.079,79,0.147,88,1.946,98,2.402,109,1.363,110,1.629,118,1.062,136,1.525,168,2.889,191,1.37,238,1.241,250,1.213,259,0.005,263,1.543,302,0.005,309,2.359,332,2.013,430,2.471,453,1.27,714,2.25,716,1.466,1016,2.163,1026,1.43,1032,1.363,1036,3.826,1037,5.347,1039,3.778,1082,2.794,1089,2.163,1143,3.268,1594,4.376,1610,4.559,1611,5.188,1899,2.455,1900,2.455,1901,4.559,1907,3.368,1908,3.524,1909,3.524,1910,4.122,1911,5.233,1912,5.114,1913,4.77,1914,4.122,1920,5.233,1930,4.122,1935,5.093,1997,2.25,2868,4.33,2869,3.909,2979,4.572,2980,2.897,2981,4.572,2982,4.158,2983,2.897,2984,2.897,2985,2.723,2986,2.897,2987,6.526,2988,2.897,2989,4.864,2990,2.897,2991,5.315,2992,5.315,2993,2.897,2994,2.897,2995,4.158,2996,2.897,2997,2.897,2998,2.897,2999,2.897,3000,2.897,3001,2.897,3002,2.897,3003,2.897,3004,2.897,3005,2.897,3006,2.897,3007,2.897,3008,2.897,3009,2.897]],["title/entities/Session.html",[468,1.639,1158,2.144]],["body/entities/Session.html",[3,0.059,4,0.047,5,0.047,7,0.63,11,1.926,12,0.142,13,0.754,15,1.959,16,1.09,18,0.569,19,0.346,20,0.008,25,3.856,26,2.96,29,0.39,51,2.409,71,1.857,79,0.088,80,0.003,97,1.622,136,2.472,143,3.535,149,2.207,151,1.822,160,2.612,168,3.496,195,1.313,259,0.004,302,0.004,310,2.188,312,0.925,323,3.31,329,2.948,335,3.592,337,3.193,339,3.38,340,4.782,354,3.401,355,3.095,430,2.06,453,1.131,468,3.106,481,2.49,562,3.238,584,2.271,627,4.049,628,3.25,630,3.821,638,3.238,648,3.173,653,2.965,656,1.733,697,5.626,708,3.856,715,4.73,742,3.686,748,5.35,865,4.278,879,1.45,922,4.814,923,3.686,980,2.186,995,3.173,1025,2.425,1026,2.485,1158,3.387,1160,1.927,1168,6.114,1169,6.74,1185,1.733,1186,2.186,1187,5.84,1201,2.089,1202,3.401,1205,1.733,1225,4.479,1247,2.296,1269,4.644,1313,3.401,1333,2.186,1349,2.579,1565,4.492,1656,3.821,1846,3.821,2029,4.278,2033,2.579,2034,4.108,2116,4.051,2355,4.108,2468,4.892,2550,3.401,2576,4.108,2588,2.773,2604,5.35,3010,3.426,3011,6.044,3012,3.426,3013,5.775,3014,3.426,3015,3.426,3016,3.426,3017,5.35,3018,3.426,3019,5.074,3020,3.426,3021,3.426,3022,3.426,3023,3.426,3024,6.044,3025,3.426,3026,3.426,3027,3.426,3028,4.492,3029,5.074,3030,3.426,3031,5.074,3032,3.426,3033,5.074,3034,3.426,3035,3.426,3036,2.579]],["title/controllers/SessionController.html",[342,1.526,3037,3.656]],["body/controllers/SessionController.html",[3,0.091,4,0.071,5,0.071,7,0.966,12,0.217,15,2.113,16,0.832,18,0.501,19,0.268,20,0.008,26,3.348,29,0.461,33,0.866,79,0.091,80,0.005,86,2.107,89,2.421,93,1.389,94,2.342,109,1.119,135,1.719,160,2.309,190,2.038,191,1.204,193,1.694,259,0.006,302,0.006,309,2.009,310,1.925,312,0.814,342,1.775,344,2.002,346,1.524,350,2.494,355,4.169,468,3.268,481,3.13,512,2.494,527,1.659,528,2.573,530,3.352,540,4.21,553,3.149,597,3.072,642,3.844,733,3.975,738,2.973,1223,4.581,1229,5.696,1286,3.718,1287,3.718,1288,3.521,1290,3.718,1292,2.954,1293,3.718,1294,3.718,1326,4.634,1350,3.204,1351,3.955,1882,4.169,2066,3.718,3036,5.147,3037,5.533,3038,5.253,3039,8.048,3040,6.835,3041,6.835,3042,5.253,3043,5.253,3044,6.835,3045,5.253,3046,5.253,3047,5.696,3048,6.835,3049,5.253,3050,4.649,3051,4.252,3052,6.05,3053,4.649,3054,4.252,3055,5.253,3056,5.253,3057,5.253,3058,5.253,3059,5.253,3060,5.253,3061,5.253]],["title/interfaces/SessionLogContext.html",[0,0.606,2440,3.027]],["body/interfaces/SessionLogContext.html",[0,0.773,2,1.738,3,0.1,4,0.078,5,0.078,7,1.06,12,0.238,13,0.819,15,1.838,16,1.045,18,0.606,19,0.349,20,0.008,22,1.918,25,4.629,26,4.081,73,4.341,79,0.1,149,3.453,151,2.512,259,0.006,302,0.006,312,0.618,355,4.425,466,4.873,468,3.265,472,4.077,474,3.956,476,4.343,1051,4.629,1060,5.873,1172,6.421,1844,5.462,2199,5.065,2304,4.243,2333,3.516,2440,4.862,2485,6.273,2486,6.699,2734,5.873,3013,5.873,3062,5.873,3063,5.765,3064,5.765,3065,5.765,3066,7.255,3067,7.255]],["title/injectables/SessionLoggerInterceptor.html",[30,0.849,2162,2.882]],["body/injectables/SessionLoggerInterceptor.html",[3,0.063,4,0.049,5,0.049,7,1.261,11,1.909,12,0.15,13,0.596,15,1.337,16,0.759,19,0.299,20,0.008,22,0.956,27,2.175,29,0.41,30,0.992,33,0.596,34,2.758,35,1.14,79,0.063,80,0.003,81,1.771,86,2.535,89,1.281,91,2.861,93,1.813,94,2.348,95,3.953,96,5.164,97,1.281,106,1.771,108,3.975,109,1.01,110,1.639,135,1.465,137,1.573,139,4.696,151,1.592,161,2.998,175,3.857,191,1.208,193,2.763,195,1.614,225,2.175,238,1.166,250,1.966,258,1.891,259,0.005,289,2.671,302,0.005,312,0.735,335,2.559,338,2.431,346,1.177,355,4.183,415,2.559,416,2.722,435,2.559,466,4.266,468,3.032,480,1.414,481,1.489,482,4.673,484,1.771,486,3.2,524,1.771,527,1.514,554,2.926,566,2.423,575,2.205,738,3.313,776,1.312,980,3.979,1179,4.266,1641,3.2,1850,3.975,1884,3.975,2162,4.376,2193,3.2,2194,7.279,2197,5.551,2199,4.86,2200,2.926,2206,3.2,2283,5.551,2304,4.266,2333,4.183,2341,2.559,2344,3.975,2400,2.926,2484,5.164,2485,5.492,2577,4.274,2578,2.722,2789,2.423,2828,5.048,2844,2.926,3062,5.904,3068,3.615,3069,5.28,3070,5.28,3071,5.28,3072,6.742,3073,5.28,3074,5.28,3075,6.858,3076,3.615,3077,5.28,3078,5.28,3079,5.28,3080,5.28,3081,5.28,3082,7.294,3083,5.28,3084,5.28,3085,3.615,3086,5.28,3087,6.236,3088,5.28,3089,6.858,3090,5.28,3091,3.615,3092,3.615,3093,3.615,3094,5.28,3095,3.615,3096,3.615,3097,3.615,3098,3.615,3099,3.615,3100,3.615,3101,3.615,3102,3.615,3103,3.615,3104,3.615,3105,3.615,3106,3.615,3107,3.615,3108,4.673,3109,3.615,3110,3.615,3111,3.615,3112,3.615,3113,3.615,3114,6.236,3115,6.236,3116,3.615,3117,3.615,3118,6.858,3119,3.615,3120,3.615,3121,3.615,3122,3.615,3123,3.2,3124,3.2,3125,3.615,3126,3.615,3127,3.2,3128,3.615,3129,3.2,3130,3.2,3131,2.559,3132,3.2,3133,3.2,3134,3.615,3135,3.2,3136,3.2,3137,3.615,3138,3.615,3139,3.615,3140,3.615,3141,5.28,3142,3.615]],["title/injectables/SessionLoggerService.html",[30,0.849,2163,2.755]],["body/injectables/SessionLoggerService.html",[3,0.051,4,0.04,5,0.04,7,0.828,11,1.224,12,0.121,13,0.508,16,0.981,18,0.539,19,0.325,20,0.008,27,3.018,29,0.322,30,0.846,33,0.482,34,2.615,35,0.922,68,3.606,79,0.051,80,0.003,86,2.332,89,1.944,93,1.63,94,1.388,95,2.439,96,3.389,97,1.092,108,3.389,109,1.187,110,1.031,132,1.486,135,1.723,137,1.271,139,4.133,149,1.271,161,2.292,188,1.71,191,1.459,250,2.745,259,0.004,302,0.004,312,0.888,323,2.473,346,1.003,415,2.069,416,2.201,435,2.069,468,3.193,472,3.684,527,1.957,628,1.958,637,2.137,645,3.017,653,2.491,726,4.858,738,2.896,746,3.389,776,1.06,798,6.413,980,4.826,1134,2.069,1155,4.145,1269,3.894,1393,4.99,1846,4.642,1850,4.642,2163,3.76,2199,5.743,2283,3.643,2304,3.606,2329,3.389,2333,4.289,2341,2.069,2344,6.592,2355,5.389,2440,6.095,2486,5.516,2537,2.587,2578,3.389,2591,2.587,3017,5.893,3062,6.782,3072,6.695,3108,6.695,3124,2.587,3127,3.984,3129,3.984,3130,7.551,3131,3.186,3132,3.984,3143,2.923,3144,4.501,3145,4.501,3146,4.501,3147,5.489,3148,5.489,3149,4.501,3150,5.489,3151,4.501,3152,5.489,3153,5.489,3154,5.489,3155,4.501,3156,6.165,3157,2.923,3158,4.501,3159,4.501,3160,9.24,3161,2.923,3162,2.923,3163,6.658,3164,2.923,3165,2.923,3166,2.923,3167,4.501,3168,2.923,3169,5.489,3170,2.923,3171,2.923,3172,4.501,3173,2.923,3174,2.923,3175,2.923,3176,2.923,3177,2.923,3178,2.923,3179,2.923,3180,4.501,3181,2.923,3182,2.923,3183,2.923,3184,7.923,3185,7.923,3186,2.201,3187,7.564,3188,2.923,3189,2.923,3190,2.923,3191,2.923,3192,2.923,3193,2.923,3194,2.923,3195,2.923,3196,2.923,3197,4.501]],["title/modules/SessionModule.html",[357,1.491,375,2.755]],["body/modules/SessionModule.html",[3,0.1,4,0.078,5,0.078,7,1.062,20,0.008,29,0.464,33,0.952,70,4.634,71,4.305,79,0.126,80,0.005,110,1.085,259,0.006,302,0.006,344,2.768,357,2.751,359,2.584,360,2.828,361,3.021,362,3.021,363,2.828,364,4.019,365,4.019,375,5.612,377,3.799,378,3.021,379,2.828,382,3.557,384,4.429,403,5.111,430,2.239,468,2.095,481,3.272,591,4.348,592,5.111,733,4.838,1236,2.921,1350,3.522,1614,3.87,2161,5.877,2171,5.111,2632,7.032,3036,5.982,3037,6.431,3050,5.111,3051,4.674,3052,5.111,3198,5.111,3199,5.111,3200,5.774,3201,5.111,3202,5.774,3203,5.774,3204,5.111,3205,5.774,3206,5.111,3207,5.774,3208,5.774,3209,5.774]],["title/injectables/SessionService.html",[30,0.849,733,2.363]],["body/injectables/SessionService.html",[3,0.073,4,0.057,5,0.057,12,0.174,15,1.493,16,0.942,18,0.562,19,0.304,20,0.008,29,0.429,30,1.108,31,5.676,33,0.695,34,2.717,35,1.33,60,1.461,79,0.073,80,0.004,81,2.066,86,2.095,93,1.558,94,2.386,98,2.878,109,1.212,110,1.382,118,1.627,135,1.898,143,3.447,151,2.218,183,3.595,190,1.493,191,1.363,201,4.438,211,3.328,259,0.005,289,3.721,302,0.005,312,0.899,346,1.314,352,5.207,363,2.887,406,3.414,430,1.817,468,3.169,506,2.985,527,1.879,621,4.938,642,3.315,665,3.761,733,3.084,738,2.564,759,4.93,776,1.53,853,4.438,1000,2.798,1155,2.206,1205,2.133,1217,4.486,1235,2.691,1236,2.133,1502,4.438,1882,3.595,2029,2.985,2262,4.771,3036,5.538,3051,3.414,3204,5.217,3206,5.217,3210,4.217,3211,7.356,3212,7.356,3213,4.217,3214,8.231,3215,4.217,3216,5.894,3217,4.217,3218,7.356,3219,4.217,3220,5.894,3221,7.356,3222,4.217,3223,5.894,3224,4.217,3225,4.217,3226,5.894,3227,7.356,3228,4.217,3229,5.894,3230,4.217,3231,5.894,3232,7.356,3233,5.894,3234,5.894,3235,5.894,3236,4.217,3237,5.894,3238,5.894,3239,4.217,3240,4.217,3241,4.217,3242,4.217,3243,5.894,3244,5.894,3245,4.217,3246,5.894,3247,4.217,3248,4.217,3249,4.217,3250,4.217,3251,4.217,3252,4.217,3253,4.217,3254,5.894,3255,4.217,3256,4.217,3257,4.217,3258,4.217]],["title/controllers/StatusListController.html",[342,1.526,3259,3.656]],["body/controllers/StatusListController.html",[3,0.109,4,0.086,5,0.086,12,0.261,16,0.768,18,0.545,19,0.325,20,0.008,29,0.431,33,1.041,79,0.109,80,0.006,94,1.946,109,0.93,135,1.64,151,2.313,191,1.112,259,0.007,302,0.007,310,1.599,312,0.676,314,2.347,342,2.133,344,2.406,346,1.711,350,2.997,512,2.997,527,1.532,530,4.028,553,3.809,1259,4.65,1292,4.65,1297,2.909,1326,5.043,1350,4.68,1351,4.753,3259,6.211,3260,5.143,3261,6.313,3262,6.313,3263,6.792,3264,5.11,3265,7.674,3266,6.313,3267,7.674,3268,6.313,3269,6.313,3270,6.313,3271,5.588,3272,6.313,3273,6.313]],["title/interfaces/StatusListFile.html",[0,0.606,3274,3.656]],["body/interfaces/StatusListFile.html",[0,0.46,2,1.035,3,0.06,4,0.047,5,0.115,12,0.25,13,0.573,15,0.869,16,0.619,18,0.564,19,0.263,20,0.009,29,0.451,30,0.955,32,3.69,33,0.566,34,1.997,35,1.082,47,2.492,48,1.681,54,2.007,55,2.093,56,2.858,61,3.662,63,2.3,64,1.93,65,2.007,66,2.093,67,2.3,68,2.007,79,0.06,80,0.003,81,1.681,86,2.449,93,0.907,94,1.865,97,1.233,109,1.052,110,1.683,118,2.136,132,1.133,135,0.733,136,0.948,146,2.251,147,2.251,151,2.555,152,2.584,153,2.3,163,1.796,171,4.019,175,1.93,183,3.69,190,0.869,204,2.093,219,1.452,238,1.639,240,1.796,247,1.414,259,0.004,267,3.242,285,3.403,288,2.093,289,3.383,290,4.556,297,2.093,298,2.093,302,0.004,309,1.888,314,1.276,440,1.377,453,1.133,466,2.972,468,2.591,553,4.087,584,2.274,585,5.376,653,1.8,807,2.858,828,3.539,840,1.796,856,1.736,879,3.164,892,1.796,894,2.19,951,2.3,995,1.63,1000,1.63,1022,1.736,1025,2.429,1138,2.007,1181,2.778,1185,2.57,1205,1.736,1217,3.099,1234,3.099,1235,2.19,1236,1.736,1259,4.897,1271,6.052,1292,2.858,1326,2.093,1333,3.861,1350,2.093,1352,2.584,1361,3.826,1375,4.113,1376,2.584,1381,2.429,1547,2.778,1674,2.429,1683,2.778,1766,2.778,1779,3.242,1791,2.19,1882,3.099,2631,2.778,2635,2.778,2799,2.778,3047,3.597,3054,2.778,3131,5.843,3260,2.3,3264,2.778,3274,5.78,3275,3.038,3276,6.32,3277,5.92,3278,4.498,3279,3.038,3280,3.038,3281,4.498,3282,2.778,3283,2.429,3284,2.778,3285,2.778,3286,3.038,3287,2.778,3288,3.038,3289,3.038,3290,3.038,3291,3.038,3292,4.498,3293,5.92,3294,4.498,3295,3.038,3296,3.038,3297,5.356,3298,4.498,3299,3.038,3300,3.038,3301,3.038,3302,3.038,3303,3.038,3304,3.038,3305,3.038,3306,3.038,3307,3.038,3308,4.498,3309,3.038,3310,4.498,3311,3.038,3312,3.038,3313,4.498,3314,4.498,3315,3.038,3316,3.038,3317,3.038,3318,3.038,3319,5.356,3320,3.038,3321,3.038,3322,3.038,3323,3.038,3324,3.038,3325,3.038,3326,2.778,3327,5.356,3328,3.038,3329,3.038,3330,3.038,3331,6.32,3332,3.038,3333,3.038,3334,4.498,3335,3.038,3336,3.038,3337,3.038,3338,3.038,3339,3.038,3340,3.038,3341,4.498,3342,4.498,3343,3.038,3344,3.038,3345,3.038]],["title/modules/StatusListModule.html",[357,1.491,2161,3.027]],["body/modules/StatusListModule.html",[3,0.108,4,0.084,5,0.084,20,0.008,29,0.466,33,1.023,79,0.108,80,0.005,259,0.007,302,0.007,344,2.895,357,2.709,359,2.778,360,3.04,361,3.248,362,3.248,363,3.04,364,4.152,365,4.152,369,4.837,377,3.974,378,3.248,379,3.04,382,3.72,385,3.961,553,3.499,1236,3.14,1326,5.693,1350,3.786,1351,4.674,1614,4.16,2161,6.162,3259,6.643,3260,4.16,3283,4.394,3284,5.025,3285,5.025,3346,5.494,3347,5.494,3348,5.494,3349,6.208,3350,6.208,3351,6.208,3352,6.208]],["title/injectables/StatusListService.html",[30,0.849,1326,2.755]],["body/injectables/StatusListService.html",[0,0.368,3,0.048,4,0.037,5,0.115,12,0.218,13,0.484,15,1.086,16,0.948,18,0.595,19,0.311,20,0.008,29,0.431,30,0.806,32,4.181,33,0.453,34,2.263,35,0.866,47,2.95,48,1.345,54,1.606,55,1.675,56,2.412,61,3.357,63,1.84,64,1.544,65,1.606,66,1.675,67,1.84,68,1.606,79,0.048,80,0.002,81,1.345,86,2.64,93,1.134,94,1.627,97,1.281,109,0.952,110,1.63,118,2.102,132,1.415,135,1.695,136,1.184,146,2.607,147,2.039,151,2.653,152,3.229,153,2.874,163,2.244,171,3.748,175,2.412,183,3.218,190,1.086,191,1.371,204,2.615,219,1.162,238,1.383,240,1.437,247,1.131,259,0.004,267,2.736,285,2.967,288,2.615,289,3.468,290,3.973,297,1.675,298,1.675,302,0.004,309,2.059,310,0.696,312,0.863,314,1.021,346,0.956,430,0.847,440,1.72,453,0.906,466,2.508,468,2.763,484,1.345,527,1.89,553,4.116,584,1.919,585,4.87,653,1.869,776,0.996,785,1.488,807,2.412,828,3.086,840,1.437,856,1.389,879,2.233,892,1.437,894,1.752,951,1.84,995,1.304,1000,1.304,1005,3.471,1022,1.389,1025,1.944,1138,2.508,1155,2.244,1181,2.223,1185,2.169,1205,1.389,1217,3.637,1234,3.637,1235,1.752,1236,1.389,1259,4.928,1271,4.271,1292,2.412,1326,2.615,1333,4.127,1350,4.984,1352,2.068,1361,3.229,1375,3.471,1376,2.068,1381,1.944,1427,3.229,1547,2.223,1669,3.035,1674,3.035,1683,2.223,1766,3.471,1779,2.736,1791,1.752,1882,3.637,2631,2.223,2635,2.223,2799,3.471,3047,4.22,3054,2.223,3131,5.39,3260,5.477,3263,3.796,3264,3.471,3274,5.797,3275,2.431,3276,3.796,3277,3.796,3278,3.796,3279,2.431,3280,2.431,3281,3.796,3282,2.223,3283,1.944,3284,2.223,3285,2.223,3286,2.431,3287,4.271,3288,3.796,3289,2.431,3290,4.67,3291,3.796,3292,5.278,3293,6.067,3294,4.67,3295,3.796,3296,3.796,3297,4.67,3298,3.796,3299,2.431,3300,2.431,3301,2.431,3302,2.431,3303,2.431,3304,2.431,3305,2.431,3306,2.431,3307,2.431,3308,3.796,3309,3.796,3310,3.796,3311,2.431,3312,2.431,3313,3.796,3314,3.796,3315,2.431,3316,2.431,3317,2.431,3318,2.431,3319,4.67,3320,2.431,3321,3.796,3322,2.431,3323,3.796,3324,2.431,3325,2.431,3326,3.471,3327,5.725,3328,4.67,3329,2.431,3330,2.431,3331,5.725,3332,2.431,3333,2.431,3334,3.796,3335,2.431,3336,2.431,3337,3.796,3338,2.431,3339,3.796,3340,2.431,3341,3.796,3342,3.796,3343,2.431,3344,2.431,3345,2.431,3353,4.288,3354,4.288,3355,4.288,3356,4.288,3357,4.288,3358,2.746,3359,2.746,3360,2.746,3361,2.746,3362,2.746,3363,2.746,3364,2.746,3365,2.746,3366,2.746,3367,2.746,3368,2.746]],["title/entities/StatusMapping.html",[1158,2.144,3283,3.197]],["body/entities/StatusMapping.html",[3,0.105,4,0.082,5,0.082,12,0.35,13,0.843,18,0.584,19,0.356,20,0.008,29,0.315,79,0.105,80,0.005,136,2.507,171,3.78,259,0.007,302,0.007,310,2.146,312,0.908,466,4.744,972,6.086,1158,3.548,1160,3.4,1202,5.835,1205,3.059,1259,4.562,1333,5.176,2033,6.38,3260,5.835,3283,5.29,3369,8.706,3370,6.046,3371,8.869,3372,6.046,3373,7.473,3374,6.046,3375,6.046,3376,6.046]],["title/classes/StatusUpdateDto.html",[80,0.004,3047,3.197]],["body/classes/StatusUpdateDto.html",[3,0.103,4,0.081,5,0.081,12,0.246,13,0.835,15,2.134,16,1.026,17,6.82,18,0.555,19,0.316,20,0.008,29,0.31,79,0.103,80,0.007,97,1.796,160,2.5,164,4.721,171,3.743,259,0.007,267,4.721,302,0.007,304,1.919,310,2.04,311,3.882,312,0.863,319,3.796,321,3.871,322,2.326,341,3.624,466,4.71,468,3.057,481,3.048,553,3.993,653,2.984,1000,4,1333,5.138,3047,5.237,3053,7.458,3260,5.647,3377,5.95,3378,5.95,3379,5.95,3380,5.95,3381,5.95,3382,5.95,3383,7.399,3384,5.95]],["title/interfaces/TDataShape.html",[0,0.606,1144,3.197]],["body/interfaces/TDataShape.html",[0,0.919,2,1.089,3,0.063,4,0.049,5,0.049,11,1.797,12,0.149,13,0.595,16,0.981,18,0.502,19,0.345,20,0.009,24,1.769,27,1.488,29,0.325,38,2.998,60,1.808,79,0.145,87,1.715,91,1.957,95,1.957,97,0.877,98,1.343,107,2.106,109,0.777,127,3.086,129,1.22,136,0.997,137,1.571,141,1.571,142,2.421,159,1.616,161,2.549,163,1.89,175,3.855,190,1.336,193,2.762,195,2.128,206,3.519,211,1.769,219,3.222,225,3.32,229,2.113,238,1.165,250,2.161,258,3.261,259,0.005,302,0.005,314,1.343,316,1.664,338,2.607,346,0.805,430,2.248,440,1.449,453,2.057,455,3.852,480,3.215,484,1.769,634,2.305,716,2.779,919,2.031,1009,2.421,1011,2.421,1013,2.421,1014,2.421,1018,2.421,1021,3.086,1024,3.802,1026,1.343,1027,3.977,1032,2.697,1044,2.421,1051,2.305,1072,2.203,1073,2.72,1074,5.49,1075,4.693,1076,2.305,1077,3.972,1078,3.972,1079,2.72,1080,2.967,1081,2.72,1082,4.159,1083,4.594,1084,2.421,1085,2.72,1086,4.374,1087,2.421,1088,2.305,1089,2.031,1090,2.72,1091,2.72,1092,2.72,1093,2.72,1094,3.734,1095,3.972,1096,2.72,1097,2.72,1098,2.557,1099,2.72,1100,3.972,1101,2.72,1102,4.412,1103,2.72,1104,2.557,1105,2.72,1106,3.977,1107,2.72,1108,2.557,1109,3.366,1110,2.72,1111,2.72,1112,3.366,1113,2.421,1114,2.305,1115,2.72,1116,2.203,1117,2.203,1118,2.203,1119,2.557,1120,2.557,1121,2.72,1122,2.203,1123,2.72,1124,2.72,1125,2.421,1126,4.693,1127,5.161,1128,6.693,1129,4.693,1130,2.72,1131,4.652,1132,2.203,1133,3.972,1134,2.557,1135,2.72,1136,2.72,1137,2.72,1138,2.113,1139,2.421,1140,2.557,1141,2.72,1142,2.421,1143,1.827,1144,3.734,1145,5.733,1146,2.72]],["title/interfaces/TokenPayload.html",[0,0.606,540,2.363]],["body/interfaces/TokenPayload.html",[0,0.875,2,1.966,3,0.113,4,0.089,5,0.089,7,1.2,9,4.162,11,1.745,12,0.27,13,0.883,18,0.552,19,0.256,20,0.008,29,0.34,33,1.075,38,2.487,79,0.136,89,3.08,98,2.91,109,0.961,110,1.471,160,2.204,225,2.687,256,3.668,259,0.007,302,0.007,481,3.224,540,4.387,550,4.372,584,2.919,585,6.548,716,2.487,1026,2.425,2197,6.335,3385,6.523,3386,7.827,3387,6.523,3388,6.523,3389,6.523]],["title/classes/TokenResponse.html",[80,0.004,520,3.656]],["body/classes/TokenResponse.html",[3,0.119,4,0.093,5,0.093,12,0.284,13,0.91,18,0.531,19,0.317,20,0.008,79,0.119,80,0.006,171,4.079,259,0.007,302,0.007,304,2.213,312,0.917,324,4.597,520,6.528,554,6.934,556,7.582,557,6.449,619,4.184,2976,6.071,2977,6.071,2978,6.071,3390,8.841]],["title/classes/VCT.html",[80,0.004,1167,3.027]],["body/classes/VCT.html",[3,0.098,4,0.077,5,0.077,7,1.449,12,0.234,13,0.81,16,1.123,18,0.615,19,0.352,20,0.008,29,0.374,79,0.124,80,0.007,191,1.387,259,0.006,302,0.006,304,1.829,310,2.245,311,4.312,312,0.949,320,3.307,322,2.216,329,2.161,337,3.212,633,4.012,649,3.316,656,2.868,657,5.723,1082,3.985,1167,5.726,1304,6.753,2693,6.972,2694,6.972,2695,6.972,3391,5.669,3392,5.669,3393,5.669,3394,5.669,3395,5.669,3396,5.669,3397,5.669]],["title/injectables/VaultKeyService.html",[30,0.849,2275,3.656]],["body/injectables/VaultKeyService.html",[3,0.044,4,0.034,5,0.034,11,0.564,12,0.105,13,0.453,15,1.676,16,0.961,18,0.608,19,0.34,20,0.008,21,2.116,22,2.01,23,4.399,29,0.397,30,0.755,33,0.417,34,2.29,35,0.797,47,2.858,48,1.238,56,1.422,61,1.968,79,0.044,80,0.002,86,2.531,87,1.2,89,1.423,93,1.062,94,2.287,95,1.37,104,1.479,109,1.119,110,1.506,118,1.716,132,1.326,135,1.754,137,1.1,146,2.66,147,2.087,151,2.666,163,2.102,188,1.479,190,2.101,191,1.39,194,3.025,213,2.449,216,1.542,219,1.07,221,3.252,223,2.046,235,1.694,238,1.613,241,1.694,247,2.059,250,1.576,259,0.004,270,2.175,285,1.422,289,2.032,294,2.812,302,0.004,309,1.643,312,0.88,314,2.118,338,0.762,346,0.896,420,3.049,480,2.587,481,2.059,527,1.916,565,1.613,566,1.694,573,3.025,577,1.323,584,2.237,625,1.542,667,2.563,716,0.964,725,1.694,746,4.289,776,0.917,810,3.633,879,2.63,891,3.635,919,1.422,951,1.694,1000,1.2,1026,1.494,1036,1.37,1082,2.032,1139,1.694,1185,1.279,1223,2.693,1383,3.19,1401,3.556,1405,4.611,1412,6.153,1421,4.825,1428,3.351,1467,1.279,1473,2.237,1478,1.422,1483,2.046,1520,2.046,1530,2.237,1537,3.252,1571,3.556,1605,2.237,1609,2.237,1652,3.025,1669,2.844,1674,2.844,1681,2.046,1710,3.025,1757,2.237,1761,3.252,1762,5.616,1767,3.252,1769,5.031,1776,3.252,1778,2.046,1779,3.634,1780,5.042,1787,2.237,1790,2.046,1791,1.613,1816,2.237,1882,1.542,1903,1.694,1950,3.025,2102,2.237,2148,3.252,2183,1.37,2203,2.046,2275,3.252,2276,7.186,2277,4.684,2286,2.237,2341,1.789,2474,3.556,2756,1.903,2788,4.289,2789,1.694,2963,2.237,2966,6.373,3123,5.501,3398,7.758,3399,5,3400,4.018,3401,4.018,3402,4.018,3403,4.018,3404,2.528,3405,4.018,3406,2.528,3407,5.696,3408,6.617,3409,4.018,3410,4.018,3411,2.528,3412,6.215,3413,2.528,3414,2.528,3415,4.018,3416,4.018,3417,2.528,3418,2.528,3419,2.528,3420,4.018,3421,2.528,3422,4.018,3423,2.528,3424,2.528,3425,4.018,3426,4.018,3427,2.528,3428,2.528,3429,2.528,3430,2.528,3431,5.696,3432,2.528,3433,2.528,3434,2.528,3435,2.528,3436,2.528,3437,2.528,3438,2.528,3439,2.528,3440,2.528,3441,2.528,3442,2.528,3443,3.556,3444,4.018,3445,2.528,3446,2.528,3447,2.528,3448,2.528,3449,2.528,3450,2.528,3451,4.018,3452,2.528,3453,2.528,3454,2.528,3455,2.528,3456,2.528,3457,2.528,3458,2.528,3459,2.528,3460,2.528,3461,2.528,3462,2.237,3463,2.528,3464,2.528,3465,5,3466,2.528,3467,2.528,3468,2.528,3469,2.528,3470,2.528,3471,2.528,3472,6.938,3473,2.528,3474,4.018,3475,2.528,3476,4.018,3477,5,3478,5,3479,2.528,3480,4.018,3481,4.018,3482,2.528,3483,5.042,3484,2.528,3485,2.528,3486,5,3487,5.696,3488,5,3489,4.018,3490,2.528,3491,4.018,3492,2.528,3493,4.018,3494,5,3495,2.528,3496,2.528,3497,2.528,3498,4.018,3499,2.528,3500,2.528,3501,2.528,3502,2.528,3503,2.528,3504,2.528,3505,2.528]],["title/modules/VerifierModule.html",[357,1.491,376,3.197]],["body/modules/VerifierModule.html",[3,0.106,4,0.083,5,0.083,20,0.008,29,0.47,33,1.01,79,0.106,80,0.005,259,0.007,302,0.007,357,2.693,359,2.741,360,3,361,3.205,362,3.205,363,3,364,3.099,365,3.099,369,4.822,374,5.677,375,5.426,376,6.641,377,3.941,378,3.205,379,3,382,3.69,385,3.909,393,4.959,404,4.612,2160,5.677,2182,5.049,2183,3.32,2565,5.677,2568,5.422,2744,5.422,3506,6.126,3507,6.126,3508,6.126]],["title/classes/WebHookAuthConfig.html",[80,0.004,330,3.401]],["body/classes/WebHookAuthConfig.html",[3,0.092,4,0.072,5,0.072,7,0.977,12,0.22,13,0.777,16,0.647,18,0.503,19,0.362,20,0.008,22,2.214,29,0.359,60,1.894,79,0.14,80,0.007,87,3.976,97,2.12,129,1.795,191,0.936,202,3.359,259,0.006,302,0.006,303,6.086,304,1.714,305,4.3,306,4.038,307,5.752,308,4.3,309,1.821,310,1.744,311,3.724,312,0.738,314,2.56,315,3.603,316,3.173,318,3.24,319,3.39,320,3.52,321,3.603,322,2.077,323,2.132,324,3.561,325,4.3,326,3.76,327,5.121,328,5.343,329,3.27,330,6.086,331,5.574,332,3.603,333,5.574,334,3.173,335,3.76,336,3.76,337,2.377,338,2.076,339,2.688,340,3.561,341,2.602,3509,5.313,3510,5.313,3511,5.313]],["title/classes/WebhookConfig.html",[80,0.004,337,2.021]],["body/classes/WebhookConfig.html",[3,0.092,4,0.072,5,0.072,7,0.976,12,0.219,13,0.776,16,0.983,18,0.532,19,0.354,20,0.008,22,2.136,29,0.359,60,1.315,79,0.14,80,0.007,87,3.835,97,2.119,129,2.579,191,0.934,202,3.441,259,0.006,302,0.006,303,5.748,304,1.711,305,4.294,306,4.002,307,6.082,308,4.294,309,1.819,310,1.743,311,3.856,312,0.737,314,2.558,315,3.599,316,3.17,318,3.236,319,3.385,320,3.518,321,3.599,322,2.074,323,2.128,324,3.556,325,4.294,326,3.755,327,4.611,328,4.871,329,3.269,330,6.082,331,4.294,332,2.776,333,4.294,334,2.444,335,4.869,336,4.869,337,3.079,338,2.523,339,3.48,340,4.611,341,3.37,3512,5.305,3513,5.305,3514,5.305]],["title/injectables/WebhookService.html",[30,0.849,2164,2.882]],["body/injectables/WebhookService.html",[3,0.068,4,0.053,5,0.053,7,0.721,12,0.162,16,0.795,19,0.256,20,0.009,29,0.42,30,1.052,33,0.646,79,0.068,80,0.003,86,2.012,93,1.883,94,2.586,101,3.751,109,0.824,110,1.227,118,1.545,132,1.847,135,1.196,143,3.274,146,2.599,147,2.245,160,2.723,191,1.15,195,1.843,225,2.306,238,1.805,240,3.725,247,2.306,250,1.765,259,0.005,302,0.005,307,4.214,312,0.699,315,2.928,328,3.571,329,3.391,341,2.741,346,1.248,468,3.262,480,2.784,527,1.584,628,2.435,637,2.657,644,3.033,733,4.312,734,2.501,776,1.422,894,4.543,939,5.896,979,5.763,1032,1.982,1058,4.531,1175,4.531,1269,5.131,1352,2.951,1361,4.214,2011,4.996,2163,4.343,2164,4.543,2176,2.775,2183,2.124,2199,2.501,2277,5.705,2304,2.293,2398,5.04,2440,5.402,2468,4.531,2484,6.606,2533,3.47,2536,4.954,2647,5.778,2648,4.954,2756,2.951,2788,4.915,2789,2.627,2830,4.954,3443,4.954,3515,3.92,3516,6.528,3517,6.528,3518,3.92,3519,3.92,3520,3.92,3521,3.92,3522,3.92,3523,5.597,3524,3.92,3525,3.92,3526,3.92,3527,3.92,3528,3.92,3529,7.12,3530,7.12,3531,5.597,3532,3.92,3533,5.597,3534,5.597,3535,7.831,3536,5.597,3537,4.954,3538,5.597,3539,5.597,3540,5.597,3541,5.597,3542,5.597,3543,5.597,3544,3.92,3545,3.92,3546,3.92,3547,3.92,3548,5.597,3549,3.92]],["title/controllers/WellKnownController.html",[342,1.526,381,3.656]],["body/controllers/WellKnownController.html",[3,0.083,4,0.065,5,0.065,7,1.337,12,0.198,16,0.885,18,0.578,19,0.318,20,0.008,22,1.922,29,0.452,33,0.791,47,2.993,48,2.351,79,0.083,80,0.004,86,2.24,93,1.269,94,1.479,106,3.154,109,1.07,119,4.172,135,1.874,146,2.629,147,1.513,151,2.568,190,1.841,191,1.28,259,0.006,302,0.006,310,1.841,312,0.778,314,1.784,323,3.418,342,2.455,344,1.829,346,1.436,350,2.279,381,5.212,386,5.212,387,6.874,440,2.583,512,2.279,527,1.764,543,3.766,548,3.613,653,2.281,701,7.381,702,5.212,716,2.455,730,4.25,738,3.161,739,4.558,778,6.432,790,3.613,831,3.509,1179,4.738,1243,3.885,1244,5.497,1424,6.432,1439,4.248,1478,2.699,1646,4.558,1660,3.927,1661,3.613,2126,4.637,2127,3.885,2154,4.558,2359,6.286,2427,4.248,2446,4.248,2949,4.248,3271,5.7,3550,4.799,3551,4.799,3552,7.766,3553,6.439,3554,4.799,3555,6.439,3556,4.799,3557,4.799,3558,4.799,3559,4.799,3560,4.799,3561,4.799,3562,4.799,3563,4.799,3564,4.799,3565,6.439,3566,4.799,3567,4.799,3568,4.799,3569,4.799,3570,4.799,3571,4.799,3572,4.799,3573,4.799]],["title/changelog.html",[1267,2.834,3186,2.834,3574,3.764]],["body/changelog.html",[5,0.07,20,0.006,22,1.37,60,1.679,84,4.131,101,3.472,106,3.696,107,2.288,129,1.75,149,2.253,211,4.4,212,3.9,259,0.006,294,2.913,302,0.007,316,2.386,329,2.582,338,2.042,354,3.472,396,3.472,420,3.159,455,2.62,551,4.193,562,3.305,626,3.666,628,2.253,637,2.459,919,4.244,1098,3.666,1102,3.666,1139,3.472,1520,4.193,1536,4.193,1543,4.585,1827,4.193,1871,4.585,1882,3.159,2240,5.995,2251,4.585,2304,3.03,2333,3.159,2577,4.193,2828,6.109,2985,3.666,3028,4.585,3575,5.18,3576,7.881,3577,8.903,3578,5.18,3579,8.903,3580,8.903,3581,4.193,3582,5.18,3583,5.18,3584,5.18,3585,4.585,3586,5.18,3587,5.18,3588,6.68,3589,5.18,3590,5.18,3591,5.18,3592,5.18,3593,9.199,3594,6.773,3595,5.682,3596,5.18,3597,6.68,3598,6.773,3599,5.18,3600,6.773,3601,5.18,3602,5.18,3603,5.18,3604,5.18,3605,5.18,3606,5.18,3607,5.18,3608,6.773,3609,7.547,3610,5.18,3611,6.773,3612,5.18,3613,5.18,3614,5.18,3615,5.18,3616,5.18,3617,5.18,3618,5.18,3619,5.18,3620,5.18,3621,5.18,3622,5.18,3623,5.18,3624,5.18,3625,5.18,3626,5.18,3627,5.18,3628,4.585,3629,5.18,3630,5.18,3631,5.18,3632,5.18,3633,5.18,3634,5.18,3635,5.18,3636,5.18,3637,5.18,3638,5.18,3639,5.18,3640,4.585,3641,5.18,3642,5.18,3643,5.18,3644,5.18,3645,5.18,3646,5.18,3647,5.18,3648,5.18,3649,5.18,3650,5.18,3651,5.18,3652,5.18,3653,5.18,3654,5.18,3655,5.18,3656,5.18,3657,5.18,3658,5.18,3659,5.18,3660,5.18,3661,4.585,3662,5.18,3663,4.585,3664,5.18,3665,4.585,3666,5.18,3667,5.18,3668,5.18,3669,5.18,3670,5.18]],["title/dependencies.html",[360,2.663,3671,3.332]],["body/dependencies.html",[20,0.008,33,0.947,35,1.812,37,4.652,38,2.191,64,3.232,65,3.362,80,0.006,259,0.006,302,0.006,318,3.505,322,2.247,350,2.729,360,2.815,384,3.505,395,5.087,396,3.852,406,4.652,415,4.068,416,5.969,439,4.328,503,3.505,553,2.648,601,4.328,729,3.115,813,3.667,879,3.064,1047,4.652,1179,3.362,1185,4.21,1186,3.667,1201,3.505,1205,2.907,1236,2.907,1259,3.232,1346,4.328,1347,4.328,1349,4.328,1467,2.907,1660,3.505,1789,4.328,1791,3.667,1869,4.652,2131,3.667,2183,3.115,2200,4.652,2233,5.087,2235,5.087,2789,3.852,3282,4.652,3672,7.241,3673,5.748,3674,7.927,3675,5.748,3676,5.748,3677,5.748,3678,5.748,3679,5.748,3680,5.748,3681,5.748,3682,7.241,3683,8.322,3684,8.322,3685,8.322,3686,5.748,3687,5.748,3688,8.322,3689,5.748,3690,5.748,3691,5.748,3692,5.748,3693,5.748,3694,5.748,3695,5.748,3696,5.748,3697,5.748,3698,5.748,3699,5.748,3700,5.748,3701,5.748,3702,5.748,3703,5.748,3704,5.748,3705,5.748,3706,5.748,3707,5.748,3708,5.748,3709,5.748]],["title/miscellaneous/enumerations.html",[3710,2.834,3711,4.812]],["body/miscellaneous/enumerations.html",[11,1.585,12,0.294,19,0.279,20,0.008,195,1.84,259,0.007,302,0.007,309,2.177,326,5.031,628,3.092,754,5.253,995,3.909,2129,5.518,2131,5.253,2377,5.352,2731,5.754,3710,5.352,3711,6.292,3712,7.108]],["title/miscellaneous/functions.html",[673,4.4,3710,2.834]],["body/miscellaneous/functions.html",[11,1.911,12,0.237,16,1.081,18,0.609,19,0.349,20,0.008,27,2.36,60,1.421,92,6.729,135,1.92,141,2.492,143,3.351,171,3.656,190,2.217,191,1.565,246,2.806,259,0.006,284,5.85,302,0.006,363,4.071,415,4.056,524,3.54,527,2.157,673,4.638,814,4.844,863,3.84,1083,4.844,1138,3.351,1438,5.072,1502,5.96,2621,5.072,2833,4.638,2842,4.638,2866,5.85,3287,5.85,3710,4.314,3713,5.73,3714,7.916,3715,8.751,3716,5.73,3717,5.73,3718,7.227,3719,7.227,3720,7.227,3721,5.73,3722,7.227,3723,7.227,3724,5.73,3725,5.73,3726,5.73,3727,7.227,3728,5.73,3729,5.73,3730,5.73,3731,5.73,3732,5.73,3733,5.73,3734,5.73]],["title/index.html",[12,0.156,1267,2.834,3186,2.834]],["body/index.html",[4,0.086,19,0.184,20,0.008,22,1.899,38,1.788,60,1.163,87,3.816,89,2.246,97,1.138,99,3.797,132,1.548,134,4.25,159,2.837,160,1.584,201,3.532,203,2.993,214,3.797,259,0.006,288,2.861,302,0.006,306,2.837,316,2.161,332,2.454,351,6.506,356,4.152,432,5.612,440,1.882,474,2.161,476,2.373,484,2.297,503,3.867,525,5.612,528,2.297,550,3.144,551,5.132,552,3.797,553,2.161,560,2.993,561,2.861,562,2.993,573,4.774,575,3.867,591,3.532,642,2.638,648,2.227,653,1.661,665,2.993,831,1.932,879,1.985,900,4.17,952,5.814,990,6.052,1007,3.797,1030,3.532,1080,2.638,1120,3.32,1175,3.797,1185,2.373,1186,2.993,1189,3.797,1259,2.638,1292,3.566,1502,3.532,1544,4.152,1594,2.638,1643,3.797,1652,3.532,1690,4.152,1861,4.152,2007,3.144,2475,5.612,2578,5.408,2636,4.152,3131,3.32,3483,5.612,3581,6.228,3585,4.152,3588,5.612,3595,3.532,3597,4.152,3628,6.81,3661,6.358,3663,4.152,3735,4.69,3736,6.341,3737,4.69,3738,4.69,3739,7.183,3740,6.341,3741,4.69,3742,4.69,3743,6.341,3744,3.797,3745,4.69,3746,4.69,3747,6.341,3748,4.69,3749,4.69,3750,4.69,3751,4.69,3752,4.69,3753,4.69,3754,4.69,3755,4.69,3756,4.69,3757,4.69,3758,4.69,3759,4.69,3760,4.69,3761,4.69,3762,4.69,3763,4.69,3764,4.69,3765,4.69,3766,4.69,3767,4.69,3768,4.69,3769,4.69,3770,4.69,3771,4.69,3772,4.152,3773,4.69,3774,4.69,3775,6.341,3776,4.152,3777,4.69,3778,4.69,3779,4.69,3780,4.69,3781,4.69,3782,6.341,3783,4.69,3784,6.341,3785,4.69,3786,4.69,3787,4.69,3788,4.69,3789,4.69,3790,6.341,3791,4.69,3792,4.69,3793,4.69,3794,4.69,3795,4.69,3796,4.69,3797,6.341,3798,6.341,3799,4.69,3800,4.152,3801,4.69,3802,4.69,3803,4.69,3804,6.341,3805,4.69,3806,6.341,3807,4.69,3808,4.69,3809,7.183,3810,4.69,3811,4.69,3812,4.152,3813,4.69,3814,4.69,3815,4.69,3816,4.69,3817,4.69,3818,4.69,3819,4.152,3820,4.69,3821,4.69,3822,4.69,3823,4.69,3824,4.69,3825,4.152,3826,6.341,3827,4.69,3828,4.69,3829,4.69,3830,6.341,3831,4.69,3832,4.69,3833,4.69,3834,4.69,3835,4.69,3836,4.152,3837,4.69,3838,4.69,3839,4.69,3840,4.69,3841,4.69,3842,4.69,3843,4.69,3844,4.69,3845,4.69,3846,4.69,3847,4.69,3848,4.774,3849,4.152,3850,4.152,3851,3.797,3852,3.797]],["title/license.html",[1267,2.834,3186,2.834,3848,2.834]],["body/license.html",[2,0.8,4,0.109,5,0.099,7,0.488,20,0.006,24,1.3,29,0.138,46,3.38,70,1.693,73,5.673,80,0.002,97,0.644,107,2.605,132,0.876,134,1.779,138,4.529,159,1.188,168,1.389,185,3.144,191,0.735,211,2.045,212,1.998,252,4.178,256,2.348,258,1.389,259,0.004,273,2.148,274,4.737,279,1.998,302,0.004,312,0.284,315,1.389,316,2.696,334,2.696,341,3.117,354,1.779,355,1.619,379,1.3,484,1.3,500,4.737,560,1.693,562,1.693,564,3.653,621,1.693,642,1.493,647,2.442,648,2.451,666,1.879,667,3.734,729,2.263,901,1.693,913,1.693,922,2.348,980,1.693,1000,1.26,1024,1.619,1026,2.513,1030,1.998,1036,4.394,1042,2.148,1084,2.798,1089,1.493,1094,1.879,1108,1.879,1118,3.57,1158,3.661,1160,1.493,1163,3.38,1225,1.779,1254,3.38,1257,2.349,1292,1.493,1555,2.349,1656,6.409,1844,4.792,1852,5.151,1863,2.349,1903,1.779,1985,1.998,2040,3.38,2144,3.696,2369,5.18,2391,2.349,2462,3.696,2576,2.148,2734,2.148,2760,2.349,2895,3.696,2945,2.349,3013,2.148,3133,4.569,3135,2.349,3136,3.696,3326,3.38,3462,2.349,3537,2.349,3576,2.349,3581,4.178,3595,3.886,3640,2.349,3665,2.349,3772,3.696,3776,2.349,3812,2.349,3819,2.349,3825,2.349,3836,2.349,3848,6.826,3849,2.349,3850,6.669,3851,4.737,3852,4.178,3853,2.654,3854,2.654,3855,2.654,3856,7.534,3857,8.107,3858,5.853,3859,6.364,3860,2.654,3861,8.297,3862,7.711,3863,2.654,3864,2.654,3865,7.711,3866,7.993,3867,6.364,3868,2.654,3869,6.364,3870,2.654,3871,5.853,3872,2.654,3873,2.654,3874,5.853,3875,4.175,3876,4.175,3877,2.654,3878,5.161,3879,4.175,3880,4.175,3881,2.654,3882,4.175,3883,2.654,3884,4.175,3885,2.654,3886,2.654,3887,2.654,3888,2.654,3889,2.654,3890,2.654,3891,5.161,3892,2.654,3893,5.161,3894,4.175,3895,6.758,3896,5.853,3897,4.175,3898,5.161,3899,2.654,3900,2.654,3901,2.654,3902,2.654,3903,2.654,3904,2.654,3905,2.654,3906,9.066,3907,5.161,3908,2.654,3909,7.534,3910,2.654,3911,4.175,3912,2.654,3913,8.512,3914,8.571,3915,2.654,3916,2.654,3917,2.654,3918,2.654,3919,2.654,3920,2.654,3921,4.175,3922,5.161,3923,2.654,3924,2.654,3925,2.654,3926,2.654,3927,5.853,3928,6.364,3929,2.654,3930,4.175,3931,5.853,3932,4.175,3933,2.654,3934,6.364,3935,2.654,3936,2.654,3937,5.161,3938,2.654,3939,2.654,3940,2.654,3941,4.175,3942,2.654,3943,2.654,3944,2.654,3945,5.161,3946,2.654,3947,2.654,3948,2.654,3949,7.711,3950,2.654,3951,4.175,3952,7.324,3953,4.175,3954,4.175,3955,4.175,3956,5.161,3957,4.175,3958,5.161,3959,4.175,3960,4.175,3961,4.175,3962,4.175,3963,2.654,3964,6.364,3965,7.07,3966,5.161,3967,4.175,3968,2.654,3969,4.175,3970,2.654,3971,2.654,3972,5.161,3973,2.654,3974,2.654,3975,2.654,3976,5.161,3977,2.654,3978,2.654,3979,2.654,3980,4.175,3981,4.175,3982,2.654,3983,2.654,3984,2.654,3985,2.654,3986,2.654,3987,2.654,3988,2.654,3989,4.175,3990,2.654,3991,2.654,3992,2.654,3993,2.654,3994,2.654,3995,2.654,3996,2.654,3997,5.161,3998,2.654,3999,2.654,4000,2.654,4001,2.654,4002,2.654,4003,7.324,4004,2.654,4005,2.654,4006,2.654,4007,2.654,4008,2.654,4009,5.853,4010,4.175,4011,2.654,4012,2.654,4013,2.654,4014,5.161,4015,2.654,4016,2.654,4017,4.175,4018,2.654,4019,2.654,4020,2.654,4021,2.654,4022,2.654,4023,2.654,4024,2.654,4025,2.654,4026,2.654,4027,2.654,4028,5.161,4029,5.853,4030,2.654,4031,2.654,4032,2.654,4033,2.654,4034,2.654,4035,2.654,4036,2.654,4037,2.654,4038,2.654,4039,2.654,4040,4.175,4041,2.654,4042,2.654,4043,4.175,4044,2.654,4045,2.654,4046,2.654,4047,2.654,4048,2.654,4049,2.654,4050,2.654,4051,2.654,4052,5.853,4053,5.161,4054,5.161,4055,5.161,4056,4.175,4057,5.161,4058,4.175,4059,4.175,4060,4.175,4061,2.654,4062,2.654,4063,2.654,4064,2.654,4065,2.654,4066,2.654,4067,2.654,4068,4.175,4069,2.654,4070,2.654,4071,6.364,4072,2.654,4073,2.654,4074,2.654,4075,2.654,4076,2.654,4077,2.654,4078,2.654,4079,2.654,4080,6.364,4081,2.654,4082,2.654,4083,2.654,4084,2.654,4085,2.654,4086,2.654,4087,2.654,4088,2.654,4089,2.654,4090,2.654,4091,2.654,4092,2.654,4093,2.654,4094,2.654,4095,2.654,4096,5.161,4097,2.654,4098,2.654,4099,2.654,4100,4.175,4101,2.654,4102,2.654,4103,2.654,4104,2.654,4105,2.654,4106,2.654,4107,2.654,4108,2.654,4109,2.654,4110,2.654,4111,2.654,4112,2.654,4113,2.654,4114,2.654,4115,4.175,4116,2.654,4117,2.654,4118,4.175,4119,4.175,4120,2.654,4121,2.654,4122,2.654,4123,2.654,4124,2.654,4125,2.654,4126,2.654,4127,2.654,4128,2.349,4129,2.349,4130,2.654,4131,2.654,4132,2.654,4133,2.654,4134,2.654,4135,2.654]],["title/modules.html",[359,2.765]],["body/modules.html",[20,0.007,259,0.007,302,0.007,358,4.886,359,2.904,368,4.593,369,4.228,370,4.593,371,4.593,372,4.593,373,4.593,374,4.14,375,3.958,376,4.593,560,5.338,562,5.988,2160,4.14,2161,4.349,2565,4.14,2739,4.593,4136,9.385,4137,9.385,4138,9.462,4139,8.367]],["title/overview.html",[3744,5.002]],["body/overview.html",[2,1.227,20,0.008,47,3.534,52,4.97,69,5.461,259,0.005,302,0.005,304,1.313,344,1.551,357,1.343,358,6.924,359,1.821,360,1.993,361,2.129,362,2.129,363,1.993,364,2.059,365,2.059,366,3.602,367,3.602,368,6.293,369,4.897,370,5.126,371,4.717,372,6.604,373,4.717,374,5.588,375,5.291,376,6.249,377,3.007,378,2.129,379,1.993,533,5.461,535,4.467,591,3.064,594,3.602,595,3.602,596,3.602,597,4.766,598,6.135,730,4.766,733,4.263,776,1.477,786,4.766,787,3.898,1160,2.289,1211,4.467,1296,4.252,1326,4.97,1413,3.602,1414,3.602,1415,3.602,1416,5.768,1536,3.294,2126,5.199,2156,3.602,2157,3.602,2158,3.602,2159,3.602,2160,5.851,2161,5.672,2162,4.62,2163,4.417,2164,4.62,2561,3.602,2562,3.602,2563,3.602,2564,3.602,2565,5.473,2735,3.602,2736,3.602,2737,3.602,2738,3.602,2739,5.611,2757,5.768,2890,3.602,2891,3.602,2892,3.602,2932,3.602,2933,3.602,2934,3.602,3198,3.602,3199,3.602,3201,3.602,3346,3.602,3347,3.602,3348,3.602,3744,3.294,4140,4.07,4141,4.07,4142,4.07,4143,4.07]],["title/properties.html",[13,0.613,3671,3.332]],["body/properties.html",[7,1.305,13,0.801,20,0.008,259,0.007,302,0.007,900,3.845,990,5.342,1080,3.99,1217,4.327,3595,5.342,3800,6.28,3848,5.342,3851,5.743,3852,5.743,4128,6.28,4129,6.28,4144,7.095,4145,7.095,4146,7.095,4147,7.095,4148,7.095]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":267,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{}}}],["0.0.1",{"_index":4144,"title":{},"body":{"properties.html":{}}}],["0.14.0",{"_index":3688,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":3691,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":3704,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":3683,"title":{},"body":{"dependencies.html":{}}}],["0.3.25",{"_index":3708,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":3306,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["0.5.1",{"_index":3690,"title":{},"body":{"dependencies.html":{}}}],["07",{"_index":3577,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":3644,"title":{},"body":{"changelog.html":{}}}],["0x00",{"_index":3491,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["1",{"_index":1000,"title":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService-1.html":{}},"body":{"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["1.0.0",{"_index":3643,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":3631,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":3625,"title":{},"body":{"changelog.html":{}}}],["1.10.0",{"_index":3689,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":3612,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":3608,"title":{},"body":{"changelog.html":{}}}],["1.2.2",{"_index":3603,"title":{},"body":{"changelog.html":{}}}],["1.2.3",{"_index":3592,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":3575,"title":{},"body":{"changelog.html":{}}}],["1.5.4",{"_index":3702,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":3632,"title":{},"body":{"changelog.html":{}}}],["10,000",{"_index":3292,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["10.5.0",{"_index":3700,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":899,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["1000",{"_index":183,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["10000",{"_index":3299,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["11",{"_index":3626,"title":{},"body":{"changelog.html":{}}}],["11.0.0",{"_index":3682,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":3677,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":3709,"title":{},"body":{"dependencies.html":{}}}],["11.1.3",{"_index":3674,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":3681,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":3586,"title":{},"body":{"changelog.html":{}}}],["12/schema",{"_index":2975,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["12395c8",{"_index":3651,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":3590,"title":{},"body":{"changelog.html":{}}}],["13.0.0",{"_index":3701,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":4141,"title":{},"body":{"overview.html":{}}}],["15",{"_index":4140,"title":{},"body":{"overview.html":{}}}],["17.13.3",{"_index":3692,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":3609,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":3604,"title":{},"body":{"changelog.html":{}}}],["1912bb8",{"_index":3582,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":294,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["2.0",{"_index":3852,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["20",{"_index":2985,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"changelog.html":{}}}],["200",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["2004",{"_index":3854,"title":{},"body":{"license.html":{}}}],["201",{"_index":2118,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["2025",{"_index":3576,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["20250602121005",{"_index":3685,"title":{},"body":{"dependencies.html":{}}}],["24",{"_index":591,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"index.html":{},"overview.html":{}}}],["24h",{"_index":589,"title":{},"body":{"controllers/AuthController.html":{}}}],["256",{"_index":1371,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{}}}],["259ab39",{"_index":3596,"title":{},"body":{"changelog.html":{}}}],["2742ec4",{"_index":3670,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":3578,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":4142,"title":{},"body":{"overview.html":{}}}],["2913417",{"_index":3602,"title":{},"body":{"changelog.html":{}}}],["295428b",{"_index":3607,"title":{},"body":{"changelog.html":{}}}],["2a71850",{"_index":3655,"title":{},"body":{"changelog.html":{}}}],["2aa727a",{"_index":3601,"title":{},"body":{"changelog.html":{}}}],["2f07af2",{"_index":3654,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":1520,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["3.0.1",{"_index":3676,"title":{},"body":{"dependencies.html":{}}}],["3.14.1",{"_index":3695,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":3672,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":896,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["3000:3000",{"_index":3808,"title":{},"body":{"index.html":{}}}],["31",{"_index":4143,"title":{},"body":{"overview.html":{}}}],["32",{"_index":3483,"title":{},"body":{"injectables/VaultKeyService.html":{},"index.html":{}}}],["32fbd8e",{"_index":3617,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":3489,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["33ac2c7",{"_index":3657,"title":{},"body":{"changelog.html":{}}}],["35f4d1e",{"_index":3629,"title":{},"body":{"changelog.html":{}}}],["3600",{"_index":2516,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["365",{"_index":1529,"title":{},"body":{"injectables/CryptoService.html":{}}}],["3ac47ec",{"_index":3648,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":1530,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["4.0.0",{"_index":3673,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":3697,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":3675,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":3696,"title":{},"body":{"dependencies.html":{}}}],["401",{"_index":521,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["404",{"_index":2865,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["40ccd32",{"_index":3650,"title":{},"body":{"changelog.html":{}}}],["45f3f7f",{"_index":3652,"title":{},"body":{"changelog.html":{}}}],["46c9ce6",{"_index":3624,"title":{},"body":{"changelog.html":{}}}],["4be0171",{"_index":3653,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":1532,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vpService.html":{}}}],["5.0.3",{"_index":3680,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":3707,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":3886,"title":{},"body":{"license.html":{}}}],["500",{"_index":749,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["53804b0",{"_index":3584,"title":{},"body":{"changelog.html":{}}}],["54e8a4e",{"_index":3660,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":1536,"title":{},"body":{"injectables/CryptoService.html":{},"changelog.html":{},"overview.html":{}}}],["6.0.0",{"_index":3679,"title":{},"body":{"dependencies.html":{}}}],["6.0.11",{"_index":3693,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":2632,"title":{},"body":{"injectables/Oid4vpService.html":{},"modules/SessionModule.html":{}}}],["6a6cdb6",{"_index":3641,"title":{},"body":{"changelog.html":{}}}],["6bb4aa9",{"_index":3606,"title":{},"body":{"changelog.html":{}}}],["6d31de0",{"_index":3636,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":1543,"title":{},"body":{"injectables/CryptoService.html":{},"changelog.html":{}}}],["7.8.2",{"_index":3705,"title":{},"body":{"dependencies.html":{}}}],["7a6a69c",{"_index":3599,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":298,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["8.16.3",{"_index":3699,"title":{},"body":{"dependencies.html":{}}}],["86400",{"_index":558,"title":{},"body":{"controllers/AuthController.html":{}}}],["892b30e",{"_index":3649,"title":{},"body":{"changelog.html":{}}}],["8f9498a",{"_index":3610,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":3864,"title":{},"body":{"license.html":{}}}],["905e17c",{"_index":3611,"title":{},"body":{"changelog.html":{}}}],["9104df3",{"_index":3614,"title":{},"body":{"changelog.html":{}}}],["91b5499",{"_index":3627,"title":{},"body":{"changelog.html":{}}}],["937603a",{"_index":3630,"title":{},"body":{"changelog.html":{}}}],["98303c1",{"_index":3662,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":3504,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["_fns",{"_index":1878,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["_key",{"_index":2879,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["_url",{"_index":1916,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["_url.match(path_param_re",{"_index":1918,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["_url.startswith",{"_index":1980,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["a128gcm",{"_index":2626,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["above",{"_index":4032,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":2293,"title":{},"body":{"classes/KeyService.html":{}}}],["abstraction",{"_index":3761,"title":{},"body":{"index.html":{}}}],["ac4ee24",{"_index":3659,"title":{},"body":{"changelog.html":{}}}],["accept",{"_index":2145,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["acceptance",{"_index":4098,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":4096,"title":{},"body":{"license.html":{}}}],["accepts",{"_index":526,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":9,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{}}}],["access_token",{"_index":554,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{}}}],["accesscert",{"_index":2639,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscert?.length",{"_index":2652,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscertificatecontrollerfindone",{"_index":40,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificatecontrollerregister",{"_index":41,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificateid",{"_index":2887,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["accesscertificateresponse",{"_index":1,"title":{"interfaces/AccessCertificateResponse.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accessing",{"_index":96,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["accesstoken",{"_index":92,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["accesstokenrequest",{"_index":862,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["accordingly",{"_index":984,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["act",{"_index":4104,"title":{},"body":{"license.html":{}}}],["acting",{"_index":3870,"title":{},"body":{"license.html":{}}}],["action",{"_index":2592,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["acts",{"_index":4078,"title":{},"body":{"license.html":{}}}],["add",{"_index":211,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionService.html":{},"interfaces/TDataShape.html":{},"changelog.html":{},"license.html":{}}}],["add(issuer_state",{"_index":3217,"title":{},"body":{"injectables/SessionService.html":{}}}],["addaccesscertificate",{"_index":230,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["addaccesscertificate(config",{"_index":2912,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["added",{"_index":1020,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["addendum",{"_index":4023,"title":{},"body":{"license.html":{}}}],["addext",{"_index":1526,"title":{},"body":{"injectables/CryptoService.html":{}}}],["adding",{"_index":74,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["additional",{"_index":1844,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["additionaldata",{"_index":3160,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["additions",{"_index":3929,"title":{},"body":{"license.html":{}}}],["addregistrationcertificate",{"_index":245,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["addregistrationcertificate(req",{"_index":2914,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["address",{"_index":2835,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["addrp",{"_index":2906,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp(tenantid",{"_index":189,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["adds",{"_index":184,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["adjust",{"_index":3647,"title":{},"body":{"changelog.html":{}}}],["advancing",{"_index":3845,"title":{},"body":{"index.html":{}}}],["advised",{"_index":4094,"title":{},"body":{"license.html":{}}}],["against",{"_index":3981,"title":{},"body":{"license.html":{}}}],["agent",{"_index":482,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["agree",{"_index":4107,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":4055,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":4037,"title":{},"body":{"license.html":{}}}],["alg",{"_index":892,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["algorithm",{"_index":276,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/RegistrarService.html":{}}}],["algorithms",{"_index":1395,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["align",{"_index":2441,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["alleging",{"_index":3986,"title":{},"body":{"license.html":{}}}],["allowed",{"_index":1750,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["allowedauthenticationschemes",{"_index":2480,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["allowedsigningalgs",{"_index":877,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["allowextra",{"_index":1704,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["allowing",{"_index":981,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["allowinsecureurls",{"_index":2188,"title":{},"body":{"modules/IssuerModule.html":{}}}],["allowreserved",{"_index":1935,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["alone",{"_index":3977,"title":{},"body":{"license.html":{}}}],["along",{"_index":4015,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":4022,"title":{},"body":{"license.html":{}}}],["alpha",{"_index":3684,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":203,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["always",{"_index":1142,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["amount",{"_index":1270,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["and/or",{"_index":4101,"title":{},"body":{"license.html":{}}}],["animo",{"_index":3780,"title":{},"body":{"index.html":{}}}],["annotations",{"_index":3918,"title":{},"body":{"license.html":{}}}],["any).issuer",{"_index":2264,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["any).method",{"_index":944,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/IssuanceService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["anymore",{"_index":956,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["apache",{"_index":3851,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["api",{"_index":87,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{}}}],["api/client",{"_index":1100,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["api:read",{"_index":2717,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["api:write",{"_index":2718,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apibody",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apibody({description",{"_index":718,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["apiexcludecontroller",{"_index":349,"title":{},"body":{"controllers/AppController.html":{}}}],["apihideproperty",{"_index":2047,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apihideproperty()@column('varchar",{"_index":2043,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apikey",{"_index":328,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{}}}],["apikeyconfig",{"_index":303,"title":{"classes/ApiKeyConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["apioperation",{"_index":3565,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apioperation({summary",{"_index":3558,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiproduces",{"_index":2125,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproduces('application/json",{"_index":2137,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproperty",{"_index":2382,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["apiproperty({example",{"_index":2376,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["apiresponse",{"_index":531,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiresponse({description",{"_index":2117,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apisecurity",{"_index":1287,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apisecurity('oauth2",{"_index":1294,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apitags",{"_index":530,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{}}}],["apitags('authentication",{"_index":544,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('issuer",{"_index":1291,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["apitags('presentation",{"_index":2716,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apitags('session",{"_index":3055,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags('status",{"_index":3269,"title":{},"body":{"controllers/StatusListController.html":{}}}],["app/app.controller",{"_index":402,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":343,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appear",{"_index":4019,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":3911,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":4053,"title":{},"body":{"license.html":{}}}],["application",{"_index":143,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"injectables/WebhookService.html":{},"miscellaneous/functions.html":{}}}],["application/json",{"_index":2007,"title":{},"body":{"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"index.html":{}}}],["application/jwk",{"_index":3555,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["application/statuslist+jwt",{"_index":3267,"title":{},"body":{"controllers/StatusListController.html":{}}}],["applications",{"_index":1096,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["applies",{"_index":3971,"title":{},"body":{"license.html":{}}}],["apply",{"_index":4115,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":358,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1108,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["appropriateness",{"_index":4067,"title":{},"body":{"license.html":{}}}],["architecture",{"_index":3837,"title":{},"body":{"index.html":{}}}],["archives",{"_index":4127,"title":{},"body":{"license.html":{}}}],["aren’t",{"_index":2999,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["arg",{"_index":1735,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["args",{"_index":1705,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["args.entries",{"_index":1736,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["arising",{"_index":4084,"title":{},"body":{"license.html":{}}}],["array",{"_index":1022,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"classes/JwksResponseDto.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array(size",{"_index":3302,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array(size).fill(0).map",{"_index":3300,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array.isarray(dcql_query",{"_index":2607,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["array.isarray(value",{"_index":1593,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["array['headers",{"_index":1994,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["arraybuffer",{"_index":1115,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["arrays",{"_index":1034,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["arrays/objects",{"_index":2998,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["arrayseparatorstyle",{"_index":1914,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["arraystyle",{"_index":1907,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["asserted",{"_index":4113,"title":{},"body":{"license.html":{}}}],["associated",{"_index":3013,"title":{},"body":{"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["assume",{"_index":913,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"license.html":{}}}],["assuming",{"_index":2834,"title":{},"body":{"interfaces/PresentedData.html":{}}}],["async",{"_index":146,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{}}}],["att",{"_index":2823,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attach",{"_index":4116,"title":{},"body":{"license.html":{}}}],["attached",{"_index":3910,"title":{},"body":{"license.html":{}}}],["attestation",{"_index":902,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["attestations",{"_index":2776,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attestations.map((att",{"_index":2824,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attestations—issuing",{"_index":3774,"title":{},"body":{"index.html":{}}}],["attribute",{"_index":3773,"title":{},"body":{"index.html":{}}}],["attribution",{"_index":4009,"title":{},"body":{"license.html":{}}}],["aud",{"_index":2629,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["audience",{"_index":590,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["audio",{"_index":1957,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["auth",{"_index":129,"title":{"interfaces/Auth.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["auth.controller",{"_index":604,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":603,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.in",{"_index":1966,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["auth.name",{"_index":1965,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["auth.scheme",{"_index":508,"title":{},"body":{"interfaces/Auth.html":{}}}],["auth/auth.guard",{"_index":1290,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth/auth.module",{"_index":410,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/tenant",{"_index":67,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["auth/token.decorator",{"_index":1288,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth_client_id",{"_index":616,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth_client_secret",{"_index":615,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["auth_client_secret=$(openssl",{"_index":3807,"title":{},"body":{"index.html":{}}}],["auth_client_secret=your",{"_index":3813,"title":{},"body":{"index.html":{}}}],["auth_queries",{"_index":748,"title":{},"body":{"controllers/AuthorizeController.html":{},"entities/Session.html":{}}}],["auth_session",{"_index":755,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth_validation_schema",{"_index":409,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["authconfig",{"_index":327,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["authcontroller",{"_index":510,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["authenticating",{"_index":90,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["authentication",{"_index":306,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{}}}],["authenticationconfig",{"_index":669,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["authenticationconfigdto",{"_index":631,"title":{"classes/AuthenticationConfigDto.html":{}},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["authenticationconfighelper",{"_index":670,"title":{"classes/AuthenticationConfigHelper.html":{}},"body":{"classes/AuthenticationConfigHelper.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationconfighelper.getpresentationconfig(authconfig",{"_index":930,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationconfighelper.isauthurlauth(authconfig",{"_index":934,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationconfighelper.isnoneauth(authconfig",{"_index":941,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationconfighelper.ispresentationduringissuanceauth",{"_index":928,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationurlconfig",{"_index":639,"title":{"classes/AuthenticationUrlConfig.html":{}},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["authguard",{"_index":2201,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":2191,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authheader",{"_index":567,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.startswith('basic",{"_index":569,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.substring(6",{"_index":571,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":368,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":4148,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":323,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["authorization_challenge_endpoint",{"_index":847,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_code",{"_index":865,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorization_encrypted_response_alg",{"_index":2624,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_encrypted_response_enc",{"_index":2625,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_endpoint",{"_index":834,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_request",{"_index":2591,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{}}}],["authorization_server",{"_index":1248,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["authorization_servers",{"_index":1249,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["authorizationchallengeendpoint",{"_index":704,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationchallengeendpoint(res",{"_index":707,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{}}}],["authorizationcodegrantidentifier",{"_index":808,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationresponse",{"_index":694,"title":{"classes/AuthorizationResponse.html":{}},"body":{"classes/AuthorizationResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["authorizationserver",{"_index":825,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata",{"_index":792,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.dpop_signing_alg_values_supported",{"_index":878,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.issuer",{"_index":897,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservers",{"_index":2453,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["authorize",{"_index":705,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(queries",{"_index":712,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize.service",{"_index":731,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize/authorize.controller",{"_index":2170,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorize/authorize.service",{"_index":2167,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["authorizecontroller",{"_index":698,"title":{"controllers/AuthorizeController.html":{}},"body":{"controllers/AuthorizeController.html":{},"modules/IssuerModule.html":{}}}],["authorized",{"_index":647,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"license.html":{}}}],["authorized_code",{"_index":868,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizequeries",{"_index":708,"title":{"classes/AuthorizeQueries.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorizequeries})@post('par",{"_index":720,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorizeservice",{"_index":730,"title":{"injectables/AuthorizeService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["authorship",{"_index":3907,"title":{},"body":{"license.html":{}}}],["authresponse",{"_index":617,"title":{"interfaces/AuthResponse.html":{}},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["authserver",{"_index":827,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/.well",{"_index":837,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize",{"_index":835,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/challenge",{"_index":848,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/par",{"_index":844,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/token",{"_index":833,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authtoken",{"_index":504,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["authtype",{"_index":3531,"title":{},"body":{"injectables/WebhookService.html":{}}}],["authurl",{"_index":661,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["authz",{"_index":2637,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authzmetadata",{"_index":778,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/WellKnownController.html":{}}}],["authzmetadata(tenantid",{"_index":790,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/WellKnownController.html":{}}}],["authzservice",{"_index":2419,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["auto",{"_index":1106,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["autoloadentities",{"_index":1634,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["autologging",{"_index":451,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":2331,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["available",{"_index":560,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"index.html":{},"license.html":{},"modules.html":{}}}],["avoid",{"_index":3134,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["await",{"_index":147,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{}}}],["axios",{"_index":1047,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"dependencies.html":{}}}],["b",{"_index":1985,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"license.html":{}}}],["b.headers",{"_index":1992,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["b3abd57",{"_index":3667,"title":{},"body":{"changelog.html":{}}}],["b989c6c",{"_index":3619,"title":{},"body":{"changelog.html":{}}}],["b99786b",{"_index":3591,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":579,"title":{},"body":{"controllers/AuthController.html":{}}}],["backend",{"_index":3739,"title":{},"body":{"index.html":{}}}],["badgateway/oauth2",{"_index":37,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"dependencies.html":{}}}],["badrequestexception",{"_index":2434,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["badrequestexception('session",{"_index":2520,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["bar",{"_index":2857,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["base",{"_index":634,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["base64",{"_index":573,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["base64credentials",{"_index":570,"title":{},"body":{"controllers/AuthController.html":{}}}],["base64url",{"_index":3465,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["based",{"_index":134,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"index.html":{},"license.html":{}}}],["baseurl",{"_index":127,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["basic",{"_index":502,"title":{},"body":{"interfaces/Auth.html":{},"controllers/AuthController.html":{}}}],["basis",{"_index":4056,"title":{},"body":{"license.html":{}}}],["batch",{"_index":1262,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batch_credential_issuance",{"_index":1250,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["batch_size",{"_index":1272,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["batches",{"_index":2528,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["bearer",{"_index":324,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"classes/TokenResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["become",{"_index":1135,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["beef4d2",{"_index":3623,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":910,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["begin",{"_index":1554,"title":{},"body":{"injectables/CryptoService.html":{}}}],["behalf",{"_index":3934,"title":{},"body":{"license.html":{}}}],["behavior",{"_index":1110,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["being",{"_index":1172,"title":{},"body":{"entities/CredentialConfig.html":{},"interfaces/SessionLogContext.html":{}}}],["below",{"_index":3912,"title":{},"body":{"license.html":{}}}],["beneficial",{"_index":3890,"title":{},"body":{"license.html":{}}}],["best",{"_index":1949,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["better",{"_index":3534,"title":{},"body":{"injectables/WebhookService.html":{}}}],["between",{"_index":624,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["bigint",{"_index":2880,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["binary",{"_index":2136,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bind",{"_index":3926,"title":{},"body":{"license.html":{}}}],["bits",{"_index":3276,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["bitsperstatus",{"_index":3277,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["blob",{"_index":1116,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["body",{"_index":193,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{}}}],["body.auth_session",{"_index":911,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.client_id",{"_index":580,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.client_secret",{"_index":581,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.code",{"_index":866,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.credentialconfigurationids",{"_index":2460,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.event",{"_index":2525,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.grant_type",{"_index":563,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.issuanceid",{"_index":2459,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.issuer_state",{"_index":904,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.notification_id",{"_index":2523,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.requestid",{"_index":2722,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body.response",{"_index":2662,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["body.response_type",{"_index":2147,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["body.webhook",{"_index":2723,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body['pre",{"_index":867,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body_",{"_index":1713,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["bodyserializer",{"_index":1015,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["boilerplate",{"_index":4117,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":27,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":363,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":744,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bound",{"_index":255,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["boundaries",{"_index":3786,"title":{},"body":{"index.html":{}}}],["brackets",{"_index":4119,"title":{},"body":{"license.html":{}}}],["branch",{"_index":3832,"title":{},"body":{"index.html":{}}}],["break",{"_index":1753,"title":{},"body":{"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{}}}],["bridges",{"_index":3738,"title":{},"body":{"index.html":{}}}],["browse",{"_index":4138,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":4136,"title":{},"body":{"modules.html":{}}}],["btoa(token",{"_index":509,"title":{},"body":{"interfaces/Auth.html":{}}}],["buffer",{"_index":2148,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/VaultKeyService.html":{}}}],["buffer.concat([buffer.alloc(32",{"_index":3493,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.concat([rpadded",{"_index":3499,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from",{"_index":572,"title":{},"body":{"controllers/AuthController.html":{}}}],["buffer.from(dersignature",{"_index":3473,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(json.stringify(header)).tostring",{"_index":3464,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(json.stringify(payload)).tostring",{"_index":3467,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(value).tostring('base64",{"_index":3460,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["bug",{"_index":3579,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":4146,"title":{},"body":{"properties.html":{}}}],["build",{"_index":3666,"title":{},"body":{"changelog.html":{}}}],["buildclientparams",{"_index":1732,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["builder/querypartialentity",{"_index":3241,"title":{},"body":{"injectables/SessionService.html":{}}}],["buildkeymap",{"_index":1720,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["buildkeymap(config.args",{"_index":1726,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["buildkeymap(fields",{"_index":1733,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["buildurl",{"_index":1002,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["buildurlfn",{"_index":1011,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["built",{"_index":3783,"title":{},"body":{"index.html":{}}}],["bundle",{"_index":2532,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["business",{"_index":3768,"title":{},"body":{"index.html":{}}}],["byte",{"_index":3481,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["bytes",{"_index":1571,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["c",{"_index":4006,"title":{},"body":{"license.html":{}}}],["c.id",{"_index":975,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["c3b1b48",{"_index":3633,"title":{},"body":{"changelog.html":{}}}],["c805439",{"_index":3646,"title":{},"body":{"changelog.html":{}}}],["ca",{"_index":1539,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cache",{"_index":2241,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cacreateserial",{"_index":1541,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cakey",{"_index":1540,"title":{},"body":{"injectables/CryptoService.html":{}}}],["calculatejwkthumbprint",{"_index":1463,"title":{},"body":{"injectables/CryptoService.html":{}}}],["call",{"_index":3079,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["callback",{"_index":506,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"injectables/CryptoService.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{}}}],["callback(auth",{"_index":507,"title":{},"body":{"interfaces/Auth.html":{}}}],["callbackcontext",{"_index":1461,"title":{},"body":{"injectables/CryptoService.html":{}}}],["callbacks",{"_index":662,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["called",{"_index":142,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["callhandler",{"_index":3075,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["calling",{"_index":1140,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["calls",{"_index":3793,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":2192,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":2196,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["carry",{"_index":4001,"title":{},"body":{"license.html":{}}}],["cascade",{"_index":1192,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["case",{"_index":1611,"title":{},"body":{"injectables/CryptoService-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["catch",{"_index":577,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/VaultKeyService.html":{}}}],["catch(async",{"_index":3434,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["catcherror",{"_index":3092,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["catcherror((error",{"_index":3126,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["cause",{"_index":3880,"title":{},"body":{"license.html":{}}}],["cb",{"_index":2248,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cb(err",{"_index":2250,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cd",{"_index":3801,"title":{},"body":{"index.html":{}}}],["cert",{"_index":241,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["cert.id",{"_index":264,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cert.publickey.export",{"_index":2960,"title":{},"body":{"injectables/ResolverService.html":{}}}],["cert.revoked",{"_index":262,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cert.subjectaltname?.includes(new",{"_index":2957,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certificate",{"_index":10,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{}}}],["certificate.pem",{"_index":1493,"title":{},"body":{"injectables/CryptoService.html":{}}}],["certificatechainlength",{"_index":2651,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["certificates",{"_index":77,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["certificatetype",{"_index":1435,"title":{},"body":{"injectables/CryptoService.html":{}}}],["certout",{"_index":1492,"title":{},"body":{"injectables/CryptoService.html":{}}}],["certs",{"_index":260,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["certs?.length",{"_index":266,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["certs[0",{"_index":2956,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certs[0].jwt",{"_index":268,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["chain",{"_index":1552,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/ResolverService.html":{}}}],["challenge",{"_index":711,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["changed",{"_index":4005,"title":{},"body":{"license.html":{}}}],["changelog",{"_index":3574,"title":{"changelog.html":{}},"body":{}}],["character",{"_index":3812,"title":{},"body":{"index.html":{},"license.html":{}}}],["characters",{"_index":1041,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["charge",{"_index":3958,"title":{},"body":{"license.html":{}}}],["check",{"_index":213,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthenticationConfigHelper.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/JwtService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["checked",{"_index":918,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["checking",{"_index":3291,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["checks",{"_index":131,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"controllers/HealthController.html":{},"injectables/RegistrarService.html":{}}}],["checl",{"_index":2961,"title":{},"body":{"injectables/ResolverService.html":{}}}],["choice",{"_index":3750,"title":{},"body":{"index.html":{}}}],["choose",{"_index":3825,"title":{},"body":{"index.html":{},"license.html":{}}}],["ci",{"_index":3593,"title":{},"body":{"changelog.html":{}}}],["citizen",{"_index":2839,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["claim",{"_index":3983,"title":{},"body":{"license.html":{}}}],["claims",{"_index":1163,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"license.html":{}}}],["class",{"_index":80,"title":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"classes/IssuanceDto.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrarConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{},"license.html":{}}}],["classes",{"_index":304,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"classes/IssuanceDto.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrarConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"overview.html":{}}}],["clean",{"_index":1544,"title":{},"body":{"injectables/CryptoService.html":{},"index.html":{}}}],["cleancontent",{"_index":1952,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.endswith('+json",{"_index":1955,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.startswith('application/json",{"_index":1954,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.startswith('text",{"_index":1961,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.startswith(type",{"_index":1960,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleanup",{"_index":959,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clear",{"_index":1879,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{}}}],["client",{"_index":38,"title":{"interfaces/Client.html":{},"interfaces/Client-1.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"dependencies.html":{},"index.html":{}}}],["client's",{"_index":1136,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["client.id",{"_index":586,"title":{},"body":{"controllers/AuthController.html":{}}}],["client.secret",{"_index":976,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["client.service",{"_index":536,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["client['buildurl",{"_index":1972,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["client_credentials",{"_index":547,"title":{},"body":{"controllers/AuthController.html":{}}}],["client_id",{"_index":550,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["client_metadata",{"_index":2614,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_name",{"_index":2627,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_secret",{"_index":552,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"index.html":{}}}],["clientauthentication",{"_index":1573,"title":{},"body":{"injectables/CryptoService.html":{}}}],["clientauthenticationnone",{"_index":1464,"title":{},"body":{"injectables/CryptoService.html":{}}}],["clientcredentialsdto",{"_index":516,"title":{"classes/ClientCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{}}}],["clientid",{"_index":113,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["clientoptions",{"_index":1072,"title":{"interfaces/ClientOptions.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["clients",{"_index":953,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clients.foreach((client",{"_index":963,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clientsecret",{"_index":115,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{}}}],["clientservice",{"_index":535,"title":{"injectables/ClientService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"overview.html":{}}}],["clone",{"_index":3797,"title":{},"body":{"index.html":{}}}],["cloudflare",{"_index":3634,"title":{},"body":{"changelog.html":{}}}],["cluster_appmodule",{"_index":366,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":594,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":596,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":595,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cryptomodule",{"_index":1413,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_cryptomodule_exports",{"_index":1414,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_cryptomodule_providers",{"_index":1415,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_issuermodule",{"_index":2156,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_exports",{"_index":2158,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_imports",{"_index":2159,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_providers",{"_index":2157,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule",{"_index":2561,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_exports",{"_index":2563,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_imports",{"_index":2562,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_providers",{"_index":2564,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule",{"_index":2735,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_exports",{"_index":2738,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_imports",{"_index":2737,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_providers",{"_index":2736,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_registrarmodule",{"_index":2890,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_registrarmodule_exports",{"_index":2892,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_registrarmodule_imports",{"_index":2893,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["cluster_registrarmodule_providers",{"_index":2891,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_resolvermodule",{"_index":2932,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_resolvermodule_exports",{"_index":2933,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_resolvermodule_providers",{"_index":2934,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_sessionmodule",{"_index":3198,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_exports",{"_index":3199,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_imports",{"_index":3200,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":3201,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule",{"_index":3346,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule_exports",{"_index":3348,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule_imports",{"_index":3349,"title":{},"body":{"modules/StatusListModule.html":{}}}],["cluster_statuslistmodule_providers",{"_index":3347,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_verifiermodule",{"_index":3506,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cluster_verifiermodule_imports",{"_index":3507,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cmd",{"_index":1505,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cn=${subject",{"_index":1525,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cnf",{"_index":1331,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["cnonce",{"_index":888,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["cnonceexpiresin",{"_index":898,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["cnonceexpiresinseconds",{"_index":2515,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["code",{"_index":648,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{},"index.html":{},"license.html":{}}}],["code_challenge",{"_index":756,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_method",{"_index":757,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_methods_supported",{"_index":845,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["codecov",{"_index":3613,"title":{},"body":{"changelog.html":{}}}],["colorize",{"_index":456,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":1202,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}}}],["column('json",{"_index":1168,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["column('json')@isobject",{"_index":1177,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{}}}],["column('varchar",{"_index":1187,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["column({type",{"_index":2033,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}}}],["combination",{"_index":3978,"title":{},"body":{"license.html":{}}}],["commands",{"_index":1504,"title":{},"body":{"injectables/CryptoService.html":{}}}],["comment",{"_index":4122,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":4092,"title":{},"body":{"license.html":{}}}],["common",{"_index":3873,"title":{},"body":{"license.html":{}}}],["commonoptions",{"_index":1632,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["communicates",{"_index":3762,"title":{},"body":{"index.html":{}}}],["communication",{"_index":3937,"title":{},"body":{"license.html":{}}}],["compact",{"_index":1455,"title":{},"body":{"injectables/CryptoService.html":{}}}],["comparison",{"_index":275,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["compatible",{"_index":3778,"title":{},"body":{"index.html":{}}}],["compiled",{"_index":3903,"title":{},"body":{"license.html":{}}}],["complete",{"_index":2766,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["completed",{"_index":3124,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["completion",{"_index":3169,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["compliance",{"_index":4130,"title":{},"body":{"license.html":{}}}],["complies",{"_index":4026,"title":{},"body":{"license.html":{}}}],["computer",{"_index":4089,"title":{},"body":{"license.html":{}}}],["concatenate",{"_index":3497,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["condition",{"_index":3229,"title":{},"body":{"injectables/SessionService.html":{}}}],["conditions",{"_index":3857,"title":{},"body":{"license.html":{}}}],["config",{"_index":60,"title":{"interfaces/Config.html":{},"interfaces/Config-1.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionService.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["config.accesscertificateid",{"_index":217,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["config.allowextra",{"_index":1752,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.args",{"_index":1725,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.authenticationconfig",{"_index":927,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["config.baseurl",{"_index":1987,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.baseurl.length",{"_index":1989,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.baseurl.substring(0",{"_index":1988,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.baseurl?.endswith",{"_index":1986,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.config",{"_index":690,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.dto",{"_index":658,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.dto.ts",{"_index":633,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/VCT.html":{}}}],["config.dto.ts:10",{"_index":3391,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:12",{"_index":3392,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:14",{"_index":3393,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:16",{"_index":3395,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:18",{"_index":3396,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:22",{"_index":691,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:23",{"_index":2691,"title":{},"body":{"classes/PresentationDuringIssuance.html":{}}}],["config.dto.ts:25",{"_index":2692,"title":{},"body":{"classes/PresentationDuringIssuance.html":{}}}],["config.dto.ts:31",{"_index":693,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:45",{"_index":2696,"title":{},"body":{"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.dto.ts:6",{"_index":3397,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:60",{"_index":651,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["config.dto.ts:69",{"_index":641,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["config.dto.ts:8",{"_index":3394,"title":{},"body":{"classes/VCT.html":{}}}],["config.entity",{"_index":1208,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["config.entity.ts",{"_index":2028,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:17",{"_index":2042,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:24",{"_index":2044,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:32",{"_index":2686,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:33",{"_index":2038,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:38",{"_index":2689,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:44",{"_index":2032,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:50",{"_index":2035,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:56",{"_index":2045,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.headers",{"_index":1990,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.helper",{"_index":819,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["config.helper.ts",{"_index":671,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.helper.ts:14",{"_index":685,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.helper.ts:23",{"_index":682,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.helper.ts:32",{"_index":687,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.helper.ts:44",{"_index":680,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.id",{"_index":155,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["config.in",{"_index":1723,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.key",{"_index":1721,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.map",{"_index":1724,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.method",{"_index":688,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.service",{"_index":1289,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["config.service.ts",{"_index":1214,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["config.service.ts:10",{"_index":1218,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:17",{"_index":2315,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:23",{"_index":2323,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:25",{"_index":1228,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:37",{"_index":1231,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:47",{"_index":2325,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:50",{"_index":1233,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:59",{"_index":2316,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:63",{"_index":1221,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{}}}],["config.service.ts:67",{"_index":2322,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:71",{"_index":2321,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:75",{"_index":2319,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:79",{"_index":2318,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:86",{"_index":2326,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:94",{"_index":2330,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.ts",{"_index":2886,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["config.ts:12",{"_index":2888,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["config.ts:8",{"_index":2889,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["config/credential",{"_index":1213,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["configmodule",{"_index":383,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configmodule.forroot",{"_index":417,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":1195,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{}}}],["configservice",{"_index":34,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["configservice.get",{"_index":447,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configservice.get('jwt_issuer",{"_index":2263,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":2257,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_client_id",{"_index":2255,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_internal_issuer_url",{"_index":2254,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_internal_issuer_url')}/protocol/openid",{"_index":2245,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('log_level",{"_index":450,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('oidc",{"_index":2237,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow('db_database",{"_index":1644,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_host",{"_index":1636,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_password",{"_index":1642,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_port",{"_index":1638,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_username",{"_index":1640,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('folder",{"_index":491,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configservie",{"_index":1602,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["configurable",{"_index":1497,"title":{},"body":{"injectables/CryptoService.html":{}}}],["configuration",{"_index":97,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{},"license.html":{}}}],["configuration(@token",{"_index":2726,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configuration(user",{"_index":2701,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configurations",{"_index":105,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["configure",{"_index":3798,"title":{},"body":{"index.html":{}}}],["configured",{"_index":2262,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/PresentationRequest.html":{},"injectables/SessionService.html":{}}}],["conflictexception",{"_index":807,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["conflictexception('authorization",{"_index":869,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["conflictexception('issuer",{"_index":2968,"title":{},"body":{"injectables/ResolverService.html":{}}}],["conflictexception('no",{"_index":2664,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["conflictexception('request",{"_index":2805,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["conforms",{"_index":1052,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["connect",{"_index":1003,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["connect/certs",{"_index":2246,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["connect/token",{"_index":121,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["connection",{"_index":1864,"title":{},"body":{"controllers/HealthController.html":{}}}],["consequential",{"_index":4083,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":4103,"title":{},"body":{"license.html":{}}}],["console",{"_index":3616,"title":{},"body":{"changelog.html":{}}}],["console.error",{"_index":271,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["console.error('error",{"_index":223,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["console.log('keycloak",{"_index":2249,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["console.log('received",{"_index":2848,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["console.log('session",{"_index":2411,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["console.log(err",{"_index":2815,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["console.log(json.stringify(presented",{"_index":2849,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["console.log(presented",{"_index":2850,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["console.log(request.headers",{"_index":2860,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["console.warn('access",{"_index":228,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["conspicuously",{"_index":3946,"title":{},"body":{"license.html":{}}}],["const",{"_index":110,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["constitutes",{"_index":3987,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":93,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{}}}],["constructor(authzservice",{"_index":2417,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["constructor(configservice",{"_index":785,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["constructor(configservie",{"_index":1600,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["constructor(credentialconfigrepository",{"_index":1216,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["constructor(crpytoservice",{"_index":1325,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["constructor(cryptoservice",{"_index":2572,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["constructor(httpservice",{"_index":2756,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["constructor(issuanceconfigrepo",{"_index":2079,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["constructor(logger",{"_index":3157,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["constructor(private",{"_index":1297,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{}}}],["constructor(reflector",{"_index":2193,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["constructor(sessionrepository",{"_index":3213,"title":{},"body":{"injectables/SessionService.html":{}}}],["construed",{"_index":4024,"title":{},"body":{"license.html":{}}}],["consume",{"_index":2854,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["contained",{"_index":4012,"title":{},"body":{"license.html":{}}}],["containing",{"_index":627,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{}}}],["content",{"_index":484,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"index.html":{},"license.html":{}}}],["contents",{"_index":4020,"title":{},"body":{"license.html":{}}}],["contenttype",{"_index":1948,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["contenttype.split(';')[0]?.trim",{"_index":1953,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["context",{"_index":2199,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{}}}],["context.flowtype",{"_index":3185,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.getclass",{"_index":2207,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":2206,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.sessionid",{"_index":3187,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.switchtohttp().getrequest",{"_index":3098,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":3099,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.tenantid",{"_index":3188,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.ts",{"_index":3063,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["context.ts:21",{"_index":3065,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["continue",{"_index":1738,"title":{},"body":{"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{}}}],["contract",{"_index":3882,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":3838,"title":{},"body":{"index.html":{}}}],["contributing.md",{"_index":3846,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":3928,"title":{},"body":{"license.html":{}}}],["contribution(s",{"_index":3976,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":4028,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":3949,"title":{},"body":{"license.html":{}}}],["contributors",{"_index":3843,"title":{},"body":{"index.html":{}}}],["contributory",{"_index":3988,"title":{},"body":{"license.html":{}}}],["control",{"_index":3871,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":3872,"title":{},"body":{"license.html":{}}}],["controller",{"_index":342,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["controller(':tenantid/.well",{"_index":3566,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["controller(':tenantid/authorize",{"_index":737,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["controller(':tenantid/oid4vp",{"_index":2553,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["controller(':tenantid/status",{"_index":3270,"title":{},"body":{"controllers/StatusListController.html":{}}}],["controller(':tenantid/vci",{"_index":2401,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["controller('auth",{"_index":545,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('credentials",{"_index":1315,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["controller('health",{"_index":1870,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('issuer",{"_index":1295,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["controller('presentation",{"_index":2719,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["controller('session",{"_index":3056,"title":{},"body":{"controllers/SessionController.html":{}}}],["controllers",{"_index":344,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["conversions",{"_index":3904,"title":{},"body":{"license.html":{}}}],["convert",{"_index":2102,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/VaultKeyService.html":{}}}],["converting",{"_index":1061,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["converts",{"_index":3407,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["cookie",{"_index":499,"title":{},"body":{"interfaces/Auth.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["coordinate",{"_index":1658,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["copies",{"_index":3994,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3133,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["copyright",{"_index":3866,"title":{},"body":{"license.html":{}}}],["core",{"_index":3771,"title":{},"body":{"index.html":{}}}],["core/auth",{"_index":1076,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["core/bodyserializer",{"_index":1897,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["core/pathserializer",{"_index":1902,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["core/types",{"_index":1079,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["coreclient",{"_index":1077,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["coreconfig",{"_index":1078,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["correct",{"_index":919,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["corresponds",{"_index":668,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["counterclaim",{"_index":3984,"title":{},"body":{"license.html":{}}}],["covered",{"_index":249,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cp",{"_index":3802,"title":{},"body":{"index.html":{}}}],["crddential",{"_index":1180,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["create",{"_index":289,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["create(session",{"_index":3220,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(tenantid",{"_index":3403,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["create_authorization_request",{"_index":2593,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest",{"_index":2570,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest(requestid",{"_index":2574,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationservermetadata",{"_index":830,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["createclientconfig",{"_index":1133,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["createconfig",{"_index":2026,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createcredentialoffer",{"_index":2465,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["created",{"_index":188,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{}}}],["createdat",{"_index":2029,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["createentry",{"_index":3328,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createentry(session",{"_index":3358,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createhash",{"_index":1458,"title":{},"body":{"injectables/CryptoService.html":{}}}],["createhash(alg.replace",{"_index":1567,"title":{},"body":{"injectables/CryptoService.html":{}}}],["createheaderandpayload",{"_index":3278,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createinterceptors",{"_index":2020,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createkeydto",{"_index":3438,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["createlist",{"_index":3353,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist(tenantid",{"_index":3309,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createoffer",{"_index":2415,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["createoffer(body",{"_index":2420,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["createparamdecorator",{"_index":3386,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["createqueryserializer",{"_index":1934,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createqueryserializer(options.queryserializer",{"_index":1977,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createrequest",{"_index":2571,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createrequest(requestid",{"_index":2579,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["creates",{"_index":1405,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["cred",{"_index":2500,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["cred.length",{"_index":2505,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential",{"_index":653,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["credential(req",{"_index":2388,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credential_configurations_supported",{"_index":1251,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{}}}],["credential_configurations_supported[value.id",{"_index":1356,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_creation",{"_index":3193,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_endpoint",{"_index":1252,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["credential_issuance",{"_index":3192,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_issuer",{"_index":1253,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["credential_issuer}/vci/credential",{"_index":2449,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_issuer}/vci/notification",{"_index":2450,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_request",{"_index":2487,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_revoked",{"_index":2357,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["credential_verification",{"_index":3195,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credentialconfig",{"_index":1159,"title":{"entities/CredentialConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentialconfig.issuanceconfig",{"_index":2037,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["credentialconfig.schema",{"_index":1389,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct",{"_index":1384,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct.vct",{"_index":1385,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigid",{"_index":2098,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfigrepo",{"_index":1327,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigrepository",{"_index":1219,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfigs",{"_index":2030,"title":{},"body":{"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["credentialconfigservice",{"_index":1211,"title":{"injectables/CredentialConfigService.html":{}},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"overview.html":{}}}],["credentialconfiguration",{"_index":1358,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.claims",{"_index":1363,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.disclosureframe",{"_index":1364,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigurationid",{"_index":1333,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["credentialconfigurationids",{"_index":2373,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{}}}],["credentialconfigurationsupported",{"_index":1176,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{}}}],["credentialcount",{"_index":2673,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialid",{"_index":1340,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialissuer",{"_index":2446,"title":{},"body":{"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{}}}],["credentialissuermetadatadto",{"_index":1243,"title":{"classes/CredentialIssuerMetadataDto.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/WellKnownController.html":{}}}],["credentialofferobject",{"_index":3024,"title":{},"body":{"entities/Session.html":{}}}],["credentialpayload",{"_index":2468,"title":{},"body":{"injectables/Oid4vciService.html":{},"entities/Session.html":{},"injectables/WebhookService.html":{}}}],["credentialrequest",{"_index":2472,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialresponse",{"_index":2396,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["credentials",{"_index":160,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"injectables/WebhookService.html":{},"index.html":{}}}],["credentials.dto",{"_index":539,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":1069,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:5",{"_index":1070,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:7",{"_index":1071,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.length",{"_index":2513,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["credentials.push(cred",{"_index":2502,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentials.push(credential",{"_index":2101,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentials.split",{"_index":576,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials/credential",{"_index":2093,"title":{},"body":{"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials/credentials.controller",{"_index":2172,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials/credentials.service",{"_index":1314,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["credentials/entities/credential.entity",{"_index":2048,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials?.length",{"_index":2674,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialsconfigservice",{"_index":2080,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialscontroller",{"_index":1273,"title":{"controllers/CredentialsController.html":{}},"body":{"controllers/CredentialsController.html":{},"modules/IssuerModule.html":{}}}],["credentialsissued",{"_index":2512,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialsize",{"_index":2504,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialsmetadatacontroller",{"_index":1303,"title":{"controllers/CredentialsMetadataController.html":{}},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{}}}],["credentialsservice",{"_index":1296,"title":{"injectables/CredentialsService.html":{}},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"overview.html":{}}}],["credentialtype",{"_index":3163,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["cron",{"_index":3233,"title":{},"body":{"injectables/SessionService.html":{}}}],["cross",{"_index":3982,"title":{},"body":{"license.html":{}}}],["crpytoservice",{"_index":1329,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["crt",{"_index":14,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/RegistrarService.html":{}}}],["crv",{"_index":1650,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/JwksResponseDto.html":{}}}],["crypto",{"_index":1604,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{}}}],["crypto.service",{"_index":1418,"title":{},"body":{"modules/CryptoModule.html":{}}}],["crypto/crypto",{"_index":1792,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["crypto/crypto.module",{"_index":385,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["crypto/crypto.service",{"_index":48,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["crypto/encryption/encryption.service",{"_index":2587,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["crypto/key/crypto/crypto.module",{"_index":401,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto/key/key.module",{"_index":399,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto_validation_schema",{"_index":400,"title":{},"body":{"modules/AppModule.html":{}}}],["cryptographic",{"_index":99,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["cryptoimplementation",{"_index":1390,"title":{"interfaces/CryptoImplementation.html":{}},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{}}}],["cryptokey",{"_index":1677,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["cryptomodule",{"_index":369,"title":{"modules/CryptoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["cryptoservice",{"_index":47,"title":{"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["cryptotype",{"_index":1605,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/VaultKeyService.html":{}}}],["csr",{"_index":1531,"title":{},"body":{"injectables/CryptoService.html":{}}}],["ctx",{"_index":3387,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3388,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["curl",{"_index":3816,"title":{},"body":{"index.html":{}}}],["current_timestamp",{"_index":2034,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["currentdate",{"_index":1562,"title":{},"body":{"injectables/CryptoService.html":{}}}],["currently",{"_index":331,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["curve",{"_index":1648,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["custom",{"_index":1090,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["customary",{"_index":4047,"title":{},"body":{"license.html":{}}}],["customprops",{"_index":465,"title":{},"body":{"modules/AppModule.html":{}}}],["d",{"_index":3819,"title":{},"body":{"index.html":{},"license.html":{}}}],["d6205da",{"_index":3664,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":4080,"title":{},"body":{"license.html":{}}}],["data",{"_index":225,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/WebhookService.html":{}}}],["data.append(key",{"_index":2871,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["data.revoked",{"_index":227,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["data.tostring",{"_index":2884,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["database",{"_index":1643,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"index.html":{}}}],["database/database.module",{"_index":407,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":370,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":168,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"license.html":{}}}],["date((payload.exp",{"_index":1564,"title":{},"body":{"injectables/CryptoService.html":{}}}],["date().gettime",{"_index":1378,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["date(date.now",{"_index":3258,"title":{},"body":{"injectables/SessionService.html":{}}}],["date(token.expiresat",{"_index":170,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["date.gettime",{"_index":182,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["date.now",{"_index":3115,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["day",{"_index":3238,"title":{},"body":{"injectables/SessionService.html":{}}}],["days",{"_index":1528,"title":{},"body":{"injectables/CryptoService.html":{}}}],["db",{"_index":1871,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["db_database",{"_index":1629,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_host",{"_index":1620,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_password",{"_index":1628,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_port",{"_index":1625,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_type",{"_index":1617,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_username",{"_index":1627,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_validation_schema",{"_index":1616,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dbtype",{"_index":1631,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dc+sd",{"_index":2620,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcql",{"_index":2687,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["dcql_query",{"_index":248,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{}}}],["dcql_query.length",{"_index":2608,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcqlquerycount",{"_index":2606,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dd",{"_index":461,"title":{},"body":{"modules/AppModule.html":{}}}],["de",{"_index":993,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["deal",{"_index":2133,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["debug",{"_index":427,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["debugging",{"_index":1853,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["declarations",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["decode",{"_index":1851,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodedvc",{"_index":2807,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.header",{"_index":2810,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.payload",{"_index":2809,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodejwt",{"_index":1823,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodejwt(token",{"_index":1855,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodetoken",{"_index":2209,"title":{},"body":{"injectables/JwtService.html":{}}}],["decodetoken(token",{"_index":1854,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decorators",{"_index":310,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"entities/CredentialConfig.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"entities/KeyEntity.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["decryptjwe",{"_index":1667,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe(response",{"_index":1671,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["dedicated",{"_index":2679,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["deeply",{"_index":2996,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["deepobject",{"_index":1039,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["deeppartial",{"_index":3221,"title":{},"body":{"injectables/SessionService.html":{}}}],["default",{"_index":430,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Auth.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{}}}],["defaultheaders",{"_index":2025,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["defaultpathserializer",{"_index":1915,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["defaultqueryserializer",{"_index":2024,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["defend",{"_index":4109,"title":{},"body":{"license.html":{}}}],["define",{"_index":750,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{}}}],["defined",{"_index":312,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"license.html":{}}}],["defines",{"_index":2898,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["definition",{"_index":3875,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":3860,"title":{},"body":{"license.html":{}}}],["delete",{"_index":1004,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"interfaces/Fields.html":{},"controllers/IssuanceController.html":{},"interfaces/Params.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["delete(':id",{"_index":1280,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/PresentationManagementController.html":{}}}],["delete(tenantid",{"_index":1220,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["deleteconfiguration",{"_index":2699,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(@param('id",{"_index":2729,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(id",{"_index":2703,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteissuanceconfiguration",{"_index":1276,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["deleteissuanceconfiguration(id",{"_index":1279,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{}}}],["deleteissuanceconfiguration(tenantid",{"_index":2083,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["deletepresentationconfig",{"_index":2752,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletepresentationconfig(id",{"_index":2763,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletes",{"_index":1222,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["deletion",{"_index":2765,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deliberate",{"_index":4075,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":360,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":3594,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":3600,"title":{},"body":{"changelog.html":{}}}],["der",{"_index":3408,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["der.slice(2",{"_index":3475,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["derivative",{"_index":3913,"title":{},"body":{"license.html":{}}}],["derived",{"_index":3915,"title":{},"body":{"license.html":{}}}],["dersignature",{"_index":3409,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["dertojwtsignature",{"_index":3400,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["dertojwtsignature(dersignature",{"_index":3405,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["desc",{"_index":2800,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["describing",{"_index":4048,"title":{},"body":{"license.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"interfaces/CryptoImplementation.html":{},"classes/EC_Public.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"interfaces/TokenPayload.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"license.html":{},"properties.html":{}}}],["designated",{"_index":3948,"title":{},"body":{"license.html":{}}}],["desired",{"_index":1053,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["details",{"_index":697,"title":{},"body":{"classes/AuthorizationResponse.html":{},"entities/PresentationConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{}}}],["determines",{"_index":635,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["determining",{"_index":4066,"title":{},"body":{"license.html":{}}}],["dev",{"_index":991,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["developers",{"_index":3841,"title":{},"body":{"index.html":{}}}],["development",{"_index":3782,"title":{},"body":{"index.html":{}}}],["development/testing",{"_index":969,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["df29d1e",{"_index":3642,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":279,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["differnt",{"_index":2518,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["digest",{"_index":1344,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/PresentationsService.html":{}}}],["diplomatic",{"_index":3735,"title":{},"body":{"index.html":{}}}],["direct",{"_index":3878,"title":{},"body":{"license.html":{}}}],["direct_post.jwt",{"_index":2613,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["direction",{"_index":3881,"title":{},"body":{"license.html":{}}}],["directly",{"_index":942,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["disable",{"_index":174,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["disclaimer",{"_index":4051,"title":{},"body":{"license.html":{}}}],["disclosed",{"_index":2837,"title":{},"body":{"interfaces/PresentedData.html":{}}}],["disclosure",{"_index":1183,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["disclosureframe",{"_index":1164,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{}}}],["discoveryendpoint",{"_index":122,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["discussing",{"_index":3943,"title":{},"body":{"license.html":{}}}],["display",{"_index":1254,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{},"license.html":{}}}],["display.json",{"_index":997,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{}}}],["displayinfo",{"_index":989,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["distribute",{"_index":3964,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":4014,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":3859,"title":{},"body":{"license.html":{}}}],["dns",{"_index":237,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["docker",{"_index":3661,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["document",{"_index":2945,"title":{},"body":{"injectables/ResolverService.html":{},"license.html":{}}}],["documentation",{"_index":3581,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["documents",{"_index":2762,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["don't",{"_index":1094,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["dpop",{"_index":873,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpop_jkt",{"_index":758,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["dpop_signing_alg_values_supported",{"_index":839,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpopvalue",{"_index":871,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dto",{"_index":620,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["dto/auth",{"_index":2792,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dto/authentication",{"_index":2049,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{}}}],["dto/authorization",{"_index":2552,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["dto/authorize",{"_index":732,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dto/client",{"_index":538,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/credential",{"_index":3564,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["dto/issuance.dto",{"_index":2062,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["dto/issuer",{"_index":2948,"title":{},"body":{"injectables/ResolverService.html":{}}}],["dto/jwks",{"_index":3562,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["dto/notification",{"_index":2397,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["dto/oauth",{"_index":3563,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["dto/offer",{"_index":2439,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["dto/par",{"_index":736,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["dto/presentation",{"_index":2589,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dto/status",{"_index":3286,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["dto/token",{"_index":542,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/vp",{"_index":2690,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["dummy",{"_index":1509,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummy.csr",{"_index":1487,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummy_key.pem",{"_index":1485,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummycsr",{"_index":1486,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummykey",{"_index":1484,"title":{},"body":{"injectables/CryptoService.html":{}}}],["duration",{"_index":3118,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["duration}ms",{"_index":3125,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["during",{"_index":1175,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/WebhookService.html":{},"index.html":{}}}],["dynamicmodule",{"_index":2272,"title":{},"body":{"modules/KeyModule.html":{}}}],["e",{"_index":3809,"title":{},"body":{"index.html":{}}}],["e.g",{"_index":1060,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/SessionLogContext.html":{}}}],["e3e5971",{"_index":3615,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":667,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/IssuanceDto.html":{},"injectables/Oid4vciService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["early",{"_index":3781,"title":{},"body":{"index.html":{}}}],["easier",{"_index":273,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["easily",{"_index":3765,"title":{},"body":{"index.html":{}}}],["easy",{"_index":3787,"title":{},"body":{"index.html":{}}}],["ec",{"_index":1517,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["ec_paramgen_curve:prime256v1",{"_index":1519,"title":{},"body":{"injectables/CryptoService.html":{}}}],["ec_public",{"_index":1469,"title":{"classes/EC_Public.html":{}},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["ecdh",{"_index":1696,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["ecdsa",{"_index":3440,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["echo",{"_index":3804,"title":{},"body":{"index.html":{}}}],["ecosystem",{"_index":3747,"title":{},"body":{"index.html":{}}}],["ed25519",{"_index":1609,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/VaultKeyService.html":{}}}],["eddsa",{"_index":2618,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["editorial",{"_index":3916,"title":{},"body":{"license.html":{}}}],["effect",{"_index":1044,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["effectively",{"_index":1951,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["eject",{"_index":1880,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["eject(id",{"_index":1886,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["elaborations",{"_index":3919,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":3772,"title":{},"body":{"index.html":{},"license.html":{}}}],["element",{"_index":1181,"title":{},"body":{"entities/CredentialConfig.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["elements",{"_index":1271,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["elliptic",{"_index":1647,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["emits",{"_index":3083,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["emitter",{"_index":65,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["emitter.module",{"_index":413,"title":{},"body":{"modules/AppModule.html":{}}}],["emitter/dist/event",{"_index":412,"title":{},"body":{"modules/AppModule.html":{}}}],["empty",{"_index":290,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["enabled",{"_index":133,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/RegistrarService.html":{}}}],["enabledebugmode",{"_index":2335,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablehttplogger",{"_index":446,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablesessionlogger",{"_index":2334,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enclosed",{"_index":4118,"title":{},"body":{"license.html":{}}}],["encode",{"_index":3500,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encoded",{"_index":1043,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["encodedheader",{"_index":3463,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedheader}.${encodedpayload",{"_index":3469,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedheader}.${encodedpayload}.${signature",{"_index":3471,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedpayload",{"_index":3466,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodeuricomponent",{"_index":1932,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["encodeuricomponent(key)}=${encodeuricomponent(value",{"_index":2660,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["encodeuricomponent(v",{"_index":2989,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["encodeuricomponent(value",{"_index":3001,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["encryption.json",{"_index":1685,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption/encryption.service",{"_index":1419,"title":{},"body":{"modules/CryptoModule.html":{}}}],["encryptionservice",{"_index":1416,"title":{"injectables/EncryptionService.html":{}},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"overview.html":{}}}],["end",{"_index":1555,"title":{},"body":{"injectables/CryptoService.html":{},"license.html":{}}}],["endpoint",{"_index":524,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/functions.html":{}}}],["endpoints",{"_index":702,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/HealthController.html":{},"controllers/WellKnownController.html":{}}}],["ensure",{"_index":163,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["entities",{"_index":1160,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{},"license.html":{},"overview.html":{}}}],["entities/credential.entity",{"_index":1237,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{}}}],["entities/issuance",{"_index":2092,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["entities/key.entity",{"_index":2279,"title":{},"body":{"modules/KeyModule.html":{}}}],["entities/presentation",{"_index":2713,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["entities/session.entity",{"_index":3051,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["entities/status",{"_index":3284,"title":{},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["entity",{"_index":1158,"title":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{},"license.html":{}}}],["entries",{"_index":3293,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["entries.length",{"_index":3343,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["entry",{"_index":3327,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["enum",{"_index":326,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/PresentationRequest.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":3711,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":3628,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["env.example",{"_index":3803,"title":{},"body":{"index.html":{}}}],["environment",{"_index":2329,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/RegistrarModule.html":{},"injectables/SessionLoggerService.html":{}}}],["err",{"_index":2011,"title":{},"body":{"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"injectables/WebhookService.html":{}}}],["err.message",{"_index":2830,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/WebhookService.html":{}}}],["errinterceptor",{"_index":2010,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["error",{"_index":250,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["error('credential",{"_index":921,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["error('error",{"_index":239,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["error('invalid",{"_index":2474,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/VaultKeyService.html":{}}}],["error('issuer",{"_index":2951,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error('key",{"_index":1815,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/ResolverService.html":{}}}],["error('no",{"_index":2818,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["error('signer",{"_index":1578,"title":{},"body":{"injectables/CryptoService.html":{}}}],["error('stack",{"_index":3333,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["error('subject",{"_index":2959,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(`error",{"_index":3543,"title":{},"body":{"injectables/WebhookService.html":{}}}],["error(`invalid",{"_index":1849,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["error(`unsupported",{"_index":1612,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["error.message",{"_index":1850,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.name",{"_index":3129,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.stack",{"_index":3132,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error_description",{"_index":909,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["errors",{"_index":3144,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["es",{"_index":1689,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["es256",{"_index":840,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["es256.getverifier(publickey",{"_index":2812,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["es256k",{"_index":2623,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["es384",{"_index":2619,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["eslint",{"_index":173,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["eslint/no",{"_index":178,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["etc",{"_index":1120,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"index.html":{}}}],["eudi",{"_index":990,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"index.html":{},"properties.html":{}}}],["eudiplo",{"_index":351,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"index.html":{}}}],["even",{"_index":3776,"title":{},"body":{"index.html":{},"license.html":{}}}],["event",{"_index":980,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/NotificationRequestDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"license.html":{}}}],["eventemitter",{"_index":954,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{}}}],["eventemitter2",{"_index":949,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{}}}],["eventemittermodule",{"_index":411,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":496,"title":{},"body":{"modules/AppModule.html":{}}}],["events",{"_index":68,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["example",{"_index":316,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["examples",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["except",{"_index":3966,"title":{},"body":{"license.html":{}}}],["exchange",{"_index":726,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["exclude",{"_index":1709,"title":{},"body":{"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{}}}],["excluding",{"_index":3945,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":3957,"title":{},"body":{"license.html":{}}}],["execsync",{"_index":1471,"title":{},"body":{"injectables/CryptoService.html":{}}}],["execsync(cmd",{"_index":1506,"title":{},"body":{"injectables/CryptoService.html":{}}}],["executed",{"_index":4038,"title":{},"body":{"license.html":{}}}],["execution",{"_index":3078,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["executioncontext",{"_index":2197,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{}}}],["exercise",{"_index":4070,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":3892,"title":{},"body":{"license.html":{}}}],["exist",{"_index":288,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{}}}],["existing",{"_index":201,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"index.html":{}}}],["exists",{"_index":204,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["exists(id",{"_index":1888,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["existssync",{"_index":54,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["existssync(certout",{"_index":1496,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(dummykey",{"_index":1512,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(file",{"_index":1547,"title":{},"body":{"injectables/CryptoService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["existssync(filepath",{"_index":287,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["existssync(folder",{"_index":986,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["existssync(join(folder",{"_index":1549,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["existssync(this.folder",{"_index":1475,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(this.privateenncryptionpath",{"_index":1687,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exp",{"_index":2630,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["expandvariables",{"_index":442,"title":{},"body":{"modules/AppModule.html":{}}}],["expected",{"_index":2377,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["expectedcode",{"_index":886,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectednonce",{"_index":2497,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["expectedpreauthorizedcode",{"_index":881,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedtxcode",{"_index":883,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expextedapikey",{"_index":2855,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["expiration",{"_index":2684,"title":{},"body":{"classes/ParResponseDto.html":{}}}],["expirationdate",{"_index":169,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["expirationdate.gettime",{"_index":181,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["expire",{"_index":2261,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expires_in",{"_index":557,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{}}}],["expiresin",{"_index":588,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["expiresinseconds",{"_index":895,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["explicitly",{"_index":4030,"title":{},"body":{"license.html":{}}}],["explode",{"_index":1920,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["exploded",{"_index":1035,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["export",{"_index":79,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{}}}],["exportable",{"_index":3445,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["exportjwk",{"_index":1681,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["exportjwk(cryptokey",{"_index":3455,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["exportjwk(secret.privatekey",{"_index":1693,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exportjwk(secret.publickey",{"_index":1694,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exportpkcs8",{"_index":1784,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exportpkcs8((await",{"_index":1808,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exports",{"_index":365,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["exportspki",{"_index":1785,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exportspki((await",{"_index":1810,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["expose",{"_index":2021,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["express",{"_index":729,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"dependencies.html":{},"license.html":{}}}],["extends",{"_index":1082,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationDuringIssuance.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{}}}],["extends#integrity",{"_index":2693,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["extension",{"_index":1534,"title":{},"body":{"injectables/CryptoService.html":{}}}],["external",{"_index":561,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"index.html":{}}}],["extfile",{"_index":1542,"title":{},"body":{"injectables/CryptoService.html":{}}}],["extra",{"_index":1746,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["extract",{"_index":566,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Fields.html":{},"injectables/JwtStrategy.html":{},"interfaces/Params.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{}}}],["extractable",{"_index":1691,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["extractjwt",{"_index":2231,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2252,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extraprefixes",{"_index":1717,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["extraprefixes.find(([prefix",{"_index":1747,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["extraprefixesmap",{"_index":1712,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":555,"title":{},"body":{"controllers/AuthController.html":{}}}],["f15f6ab",{"_index":3587,"title":{},"body":{"changelog.html":{}}}],["f75298f",{"_index":3621,"title":{},"body":{"changelog.html":{}}}],["f7e7505",{"_index":3639,"title":{},"body":{"changelog.html":{}}}],["face",{"_index":3748,"title":{},"body":{"index.html":{}}}],["failed",{"_index":2537,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/SessionLoggerService.html":{}}}],["failure",{"_index":4090,"title":{},"body":{"license.html":{}}}],["fall",{"_index":578,"title":{},"body":{"controllers/AuthController.html":{}}}],["false",{"_index":137,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["fatal",{"_index":429,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["features",{"_index":3588,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fee",{"_index":4097,"title":{},"body":{"license.html":{}}}],["fetch",{"_index":1086,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["field",{"_index":1708,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["field.map",{"_index":1740,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["fields",{"_index":258,"title":{"interfaces/Fields.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["fields[index",{"_index":1737,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["fieldsconfig",{"_index":1711,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["fieldsconfig[number",{"_index":1734,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["fifty",{"_index":3885,"title":{},"body":{"license.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"license.html":{}}}],["file.bits",{"_index":3312,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.elements[id",{"_index":3338,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.jwt",{"_index":3318,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.stack.pop",{"_index":3332,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["filed",{"_index":3992,"title":{},"body":{"license.html":{}}}],["filename",{"_index":3287,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/functions.html":{}}}],["filepath",{"_index":284,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["files",{"_index":3898,"title":{},"body":{"license.html":{}}}],["filesystem",{"_index":2274,"title":{},"body":{"modules/KeyModule.html":{}}}],["filesystemkeyservice",{"_index":1755,"title":{"injectables/FileSystemKeyService.html":{}},"body":{"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{}}}],["fill(0",{"_index":3303,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["final",{"_index":1012,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["finally",{"_index":2946,"title":{},"body":{"injectables/ResolverService.html":{}}}],["find",{"_index":977,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["findclientbyid",{"_index":1147,"title":{},"body":{"injectables/ClientService.html":{}}}],["findclientbyid(clientid",{"_index":978,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["finding",{"_index":224,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["findonebyorfail",{"_index":1360,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["findoptionswhere",{"_index":3227,"title":{},"body":{"injectables/SessionService.html":{}}}],["first",{"_index":2944,"title":{},"body":{"injectables/ResolverService.html":{}}}],["firstvaluefrom",{"_index":2788,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["firstvaluefrom(this.httpservice.get(uri)).then",{"_index":2816,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fitness",{"_index":4063,"title":{},"body":{"license.html":{}}}],["fixes",{"_index":3580,"title":{},"body":{"changelog.html":{}}}],["flow",{"_index":472,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["flow_complete",{"_index":3190,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_error",{"_index":3191,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_start",{"_index":3189,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flows",{"_index":3585,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["flowtype",{"_index":2485,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["fn",{"_index":1893,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["focus",{"_index":3767,"title":{},"body":{"index.html":{}}}],["folder",{"_index":420,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["following",{"_index":3997,"title":{},"body":{"license.html":{}}}],["foo",{"_index":2856,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["force_pubkey",{"_index":1538,"title":{},"body":{"injectables/CryptoService.html":{}}}],["foreach((file",{"_index":1546,"title":{},"body":{"injectables/CryptoService.html":{}}}],["form",{"_index":1036,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["format",{"_index":24,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["formdata",{"_index":1117,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["formdatabodyserializer",{"_index":2874,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["forroot",{"_index":2270,"title":{},"body":{"modules/KeyModule.html":{}}}],["forwardref",{"_index":2741,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["found",{"_index":856,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["frame",{"_index":1184,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["free",{"_index":3326,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"license.html":{}}}],["friendly",{"_index":3792,"title":{},"body":{"index.html":{}}}],["fs",{"_index":951,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["full",{"_index":3821,"title":{},"body":{"index.html":{}}}],["function",{"_index":141,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":673,"title":{"miscellaneous/functions.html":{}},"body":{"classes/AuthenticationConfigHelper.html":{},"miscellaneous/functions.html":{}}}],["further",{"_index":3033,"title":{},"body":{"entities/Session.html":{}}}],["g",{"_index":1906,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{}}}],["general",{"_index":3637,"title":{},"body":{"changelog.html":{}}}],["generate",{"_index":1513,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/PresentationManagementController.html":{}}}],["generated",{"_index":46,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["generated/client.gen",{"_index":39,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["generatekeypair",{"_index":1396,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{}}}],["generatekeypair('ecdh",{"_index":1688,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generaterandom",{"_index":1570,"title":{},"body":{"injectables/CryptoService.html":{}}}],["generates",{"_index":1400,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{}}}],["generatesalt",{"_index":1345,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["generatetoken",{"_index":1825,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generatetoken(payload",{"_index":2213,"title":{},"body":{"injectables/JwtService.html":{}}}],["generatetokenoptions",{"_index":1821,"title":{"interfaces/GenerateTokenOptions.html":{}},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generation",{"_index":1827,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"changelog.html":{}}}],["generic",{"_index":1393,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/KeyService.html":{},"injectables/SessionLoggerService.html":{}}}],["genpkey",{"_index":1516,"title":{},"body":{"injectables/CryptoService.html":{}}}],["get(':id",{"_index":3044,"title":{},"body":{"controllers/SessionController.html":{}}}],["get('jwks.json",{"_index":3572,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('oauth",{"_index":3553,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('openid",{"_index":3567,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('request/:requestid/:session",{"_index":2554,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get('request/:requestid/:session')@sessionlogger('session",{"_index":2545,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get('schema/:id",{"_index":1308,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('session",{"_index":2410,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["get('status",{"_index":3265,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get('vct/:id",{"_index":1311,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get()@healthcheck",{"_index":1865,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(state",{"_index":3223,"title":{},"body":{"injectables/SessionService.html":{}}}],["get(tenantid",{"_index":1227,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getaccesscertificateid",{"_index":2907,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getaccesscertificateid(config",{"_index":215,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["getaccesstoken",{"_index":3714,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getalg",{"_index":1598,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getall",{"_index":3211,"title":{},"body":{"injectables/SessionService.html":{}}}],["getallsessions",{"_index":3039,"title":{},"body":{"controllers/SessionController.html":{}}}],["getauthorizationserver",{"_index":779,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["getauthorizationserver(tenantid",{"_index":793,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["getauthtoken",{"_index":505,"title":{},"body":{"interfaces/Auth.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getauthtoken(auth",{"_index":1963,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getby",{"_index":853,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["getby(where",{"_index":3226,"title":{},"body":{"injectables/SessionService.html":{}}}],["getbyid",{"_index":1215,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getbyid(tenantid",{"_index":1230,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getcallbackcontext",{"_index":1422,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcallbackcontext(tenantid",{"_index":1432,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcertchain",{"_index":1423,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcertchain(type",{"_index":1434,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getclients",{"_index":965,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["getconfig",{"_index":1005,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/StatusListService.html":{}}}],["getconfig(tenantid",{"_index":3321,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["getconfigs",{"_index":1277,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(@token",{"_index":1298,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(user",{"_index":1282,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfiguration",{"_index":2305,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getcredential",{"_index":1321,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{}}}],["getcredential(credentialconfigurationid",{"_index":1330,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredential(req",{"_index":2422,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["getcredentialconfiguration",{"_index":1322,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfiguration(tenantid",{"_index":1334,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcrypto",{"_index":1599,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getcrypto(alg",{"_index":1606,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getencryptionpublickey",{"_index":1668,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getexternaloidcconfig",{"_index":2219,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getexternaloidcconfig(configservice",{"_index":2222,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getheadersfromrequest",{"_index":814,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["getheadersfromrequest(req",{"_index":863,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["gethello",{"_index":347,"title":{},"body":{"controllers/AppController.html":{}}}],["getintegratedoauth2config",{"_index":2220,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getintegratedoauth2config(configservice",{"_index":2226,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getinterceptorindex",{"_index":1881,"title":{},"body":{"classes/Interceptors.html":{}}}],["getinterceptorindex(id",{"_index":1890,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getissuanceconfiguration",{"_index":2077,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfiguration(tenantid",{"_index":2085,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid",{"_index":2078,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid(body.issuanceid",{"_index":2458,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["getissuanceconfigurationbyid(issuanceconfigid",{"_index":2087,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurations",{"_index":2053,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(@token",{"_index":2063,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(user",{"_index":2056,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getjwk",{"_index":3401,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getjwk(key",{"_index":3410,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getjwks",{"_index":1424,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["getjwks(tenantid",{"_index":1439,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["getkeys",{"_index":1760,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["getkeys(tenantid",{"_index":1764,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["getkid",{"_index":1761,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getkid(tenantid",{"_index":1767,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getlist",{"_index":3263,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlist(@param('tenantid",{"_index":3272,"title":{},"body":{"controllers/StatusListController.html":{}}}],["getlist(tenantid",{"_index":3264,"title":{},"body":{"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["getlogformat",{"_index":2306,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getloglevel",{"_index":2307,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getoauth2token",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{}}}],["getoauth2token(body",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{}}}],["getoffer",{"_index":2114,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoffer(res",{"_index":2115,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getorthrow('public_url",{"_index":233,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/IssuerModule.html":{},"injectables/RegistrarService.html":{}}}],["getparseas",{"_index":1947,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getpresentationconfig",{"_index":675,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{},"injectables/PresentationsService.html":{}}}],["getpresentationconfig(config",{"_index":679,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["getpresentationconfig(id",{"_index":2767,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs",{"_index":2753,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs(tenantid",{"_index":2769,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpublickey",{"_index":1762,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getpublickey(type",{"_index":1769,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getrequestwithsession",{"_index":2542,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(tenantid",{"_index":2544,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getresponse",{"_index":2543,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["getresponse(body",{"_index":2547,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["gets",{"_index":3415,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getschema",{"_index":1323,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschema(credentialconfigurationid",{"_index":1336,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getsession",{"_index":3040,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(@param('id",{"_index":3058,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(id",{"_index":3043,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsigner",{"_index":1397,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsigner(privatekeyjwk",{"_index":1402,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsignjwtcallback",{"_index":1425,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getsignjwtcallback(tenantid",{"_index":1441,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getting",{"_index":1267,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["geturl",{"_index":1973,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getvct",{"_index":1324,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getvct(credentialid",{"_index":1338,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getverifier",{"_index":1398,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getverifier(publickeyjwk",{"_index":1407,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["ghcr.io/cre8/eudiplo:latest",{"_index":3815,"title":{},"body":{"index.html":{}}}],["git",{"_index":3799,"title":{},"body":{"index.html":{}}}],["give",{"_index":3998,"title":{},"body":{"license.html":{}}}],["given",{"_index":1223,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/VaultKeyService.html":{}}}],["global",{"_index":2273,"title":{},"body":{"modules/KeyModule.html":{}}}],["globalthis.fetch",{"_index":1091,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["globalthis.headers",{"_index":1438,"title":{},"body":{"injectables/CryptoService.html":{},"miscellaneous/functions.html":{}}}],["goodwill",{"_index":4087,"title":{},"body":{"license.html":{}}}],["governing",{"_index":4134,"title":{},"body":{"license.html":{}}}],["grade",{"_index":3779,"title":{},"body":{"index.html":{}}}],["grant",{"_index":564,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"license.html":{}}}],["grant_type",{"_index":549,"title":{},"body":{"controllers/AuthController.html":{}}}],["granted",{"_index":3894,"title":{},"body":{"license.html":{}}}],["granting",{"_index":3868,"title":{},"body":{"license.html":{}}}],["grants",{"_index":2462,"title":{},"body":{"injectables/Oid4vciService.html":{},"license.html":{}}}],["granttype",{"_index":821,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["granular",{"_index":3583,"title":{},"body":{"changelog.html":{}}}],["graph",{"_index":4139,"title":{},"body":{"modules.html":{}}}],["grossly",{"_index":4076,"title":{},"body":{"license.html":{}}}],["guard",{"_index":683,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["guide",{"_index":3824,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":3847,"title":{},"body":{"index.html":{}}}],["h",{"_index":3818,"title":{},"body":{"index.html":{}}}],["handle",{"_index":714,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["handled",{"_index":1847,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["handlenotification",{"_index":2416,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["handlenotification(req",{"_index":2424,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["handler",{"_index":3080,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["handlerequest",{"_index":2866,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"miscellaneous/functions.html":{}}}],["handlerequest(request",{"_index":2842,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"miscellaneous/functions.html":{}}}],["handles",{"_index":703,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["handlesigningkeyerror",{"_index":2247,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handling",{"_index":101,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/WebhookService.html":{},"changelog.html":{}}}],["harmless",{"_index":4111,"title":{},"body":{"license.html":{}}}],["hascerts",{"_index":1426,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hascerts(tenantid",{"_index":1444,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hash",{"_index":1566,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashalg",{"_index":1369,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hashalgorithm",{"_index":1462,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashalgorithm.sha256",{"_index":1586,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashcallback",{"_index":1583,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hasher",{"_index":1368,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["hasresponsedata",{"_index":3542,"title":{},"body":{"injectables/WebhookService.html":{}}}],["haswebhook",{"_index":2668,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["head",{"_index":1006,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["header",{"_index":314,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["header('content",{"_index":3271,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["header.entries",{"_index":1998,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["header.kid",{"_index":2972,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c",{"_index":2952,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c.map",{"_index":2954,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header['jwk",{"_index":2962,"title":{},"body":{"injectables/ResolverService.html":{}}}],["headername",{"_index":308,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["headers",{"_index":480,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["headers.append(key",{"_index":1595,"title":{},"body":{"injectables/CryptoService.html":{}}}],["headers.authorization",{"_index":568,"title":{},"body":{"controllers/AuthController.html":{}}}],["headers.set(key",{"_index":1596,"title":{},"body":{"injectables/CryptoService.html":{}}}],["headers[session.webhook!.auth.config.headername",{"_index":3526,"title":{},"body":{"injectables/WebhookService.html":{}}}],["headers[webhook.auth.config.headername",{"_index":3546,"title":{},"body":{"injectables/WebhookService.html":{}}}],["headers_",{"_index":1714,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["health",{"_index":1860,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1875,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":408,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1867,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1862,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1858,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["healthmodule",{"_index":371,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["helper",{"_index":1501,"title":{},"body":{"injectables/CryptoService.html":{}}}],["here",{"_index":936,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["hereby",{"_index":3953,"title":{},"body":{"license.html":{}}}],["herein",{"_index":4034,"title":{},"body":{"license.html":{}}}],["hey",{"_index":1101,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["hh:mm:ss",{"_index":462,"title":{},"body":{"modules/AppModule.html":{}}}],["hold",{"_index":4110,"title":{},"body":{"license.html":{}}}],["host",{"_index":231,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["hosted",{"_index":1209,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["hostname",{"_index":1500,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{}}}],["host}/${tenantid",{"_index":2595,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid}/credentials",{"_index":1386,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["host}/${tenantid}/oid4vp/response",{"_index":2611,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["hot",{"_index":2327,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["hour",{"_index":3206,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["hours",{"_index":592,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{}}}],["hs256",{"_index":1835,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["http",{"_index":503,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{},"index.html":{}}}],["http://localhost:3000/auth/oauth2/token",{"_index":3817,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licenses",{"_index":3855,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":4132,"title":{},"body":{"license.html":{}}}],["httpmethod",{"_index":809,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["httpmodule",{"_index":2182,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules/VerifierModule.html":{}}}],["https://cre8.github.io/eudiplo/latest",{"_index":356,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["https://cre8.github.io/eudiplo/latest/api",{"_index":3820,"title":{},"body":{"index.html":{}}}],["https://cre8.github.io/eudiplo/main",{"_index":3831,"title":{},"body":{"index.html":{}}}],["https://developer.mozilla.org/docs/web/api/fetch#body",{"_index":1123,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["https://developer.mozilla.org/docs/web/api/fetch#method",{"_index":1033,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["https://developer.mozilla.org/docs/web/api/headers/headers#init",{"_index":1029,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["https://github.com/cre8/eudiplo.git",{"_index":3800,"title":{},"body":{"index.html":{},"properties.html":{}}}],["https://github.com/cre8/eudiplo/issues",{"_index":4147,"title":{},"body":{"properties.html":{}}}],["https://json",{"_index":2973,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["https://swagger.io/docs/specification/serialization/#query",{"_index":1048,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["https://www.npmjs.com/package/@hey",{"_index":1099,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["httpservice",{"_index":2277,"title":{},"body":{"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["i.e",{"_index":2004,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["iat",{"_index":1376,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["id",{"_index":15,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/VaultKeyService.html":{}}}],["identification",{"_index":4126,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":26,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"entities/IssuanceConfig.html":{},"interfaces/IssuerMetadata.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{}}}],["identifying",{"_index":4121,"title":{},"body":{"license.html":{}}}],["idx",{"_index":3331,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["ignore",{"_index":463,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":2259,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ignoring",{"_index":955,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["ii",{"_index":3883,"title":{},"body":{"license.html":{}}}],["iii",{"_index":3889,"title":{},"body":{"license.html":{}}}],["image",{"_index":1958,"title":{},"body":{"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png",{"_index":2135,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png')@apibody({type",{"_index":2121,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["image/png')@useguards(jwtauthguard)@apisecurity('oauth2')@apibody({type",{"_index":2706,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["imeplement",{"_index":1394,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implement",{"_index":957,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["implementation",{"_index":1087,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["implementation.ts",{"_index":1392,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:19",{"_index":1399,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:24",{"_index":1404,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:29",{"_index":1408,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implements",{"_index":81,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/FileSystemKeyService.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["implied",{"_index":4059,"title":{},"body":{"license.html":{}}}],["import",{"_index":29,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"license.html":{}}}],["importconfig",{"_index":3727,"title":{},"body":{"miscellaneous/functions.html":{}}}],["importdirectory",{"_index":3718,"title":{},"body":{"miscellaneous/functions.html":{}}}],["importdirectory(config",{"_index":3726,"title":{},"body":{"miscellaneous/functions.html":{}}}],["importfilewithretry",{"_index":3719,"title":{},"body":{"miscellaneous/functions.html":{}}}],["importfilewithretry(filepath",{"_index":3728,"title":{},"body":{"miscellaneous/functions.html":{}}}],["importjwk",{"_index":1465,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/PresentationsService.html":{}}}],["importjwk(payload.cnf.jwk",{"_index":2819,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["importjwk(privatekey",{"_index":1809,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["importjwk(publicjwk",{"_index":1560,"title":{},"body":{"injectables/CryptoService.html":{}}}],["importjwk(publickey",{"_index":1811,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["importpkcs8",{"_index":1786,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["imports",{"_index":382,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["importspki",{"_index":1787,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["importspki(key",{"_index":3453,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["improve",{"_index":3589,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":3638,"title":{},"body":{"changelog.html":{}}}],["improving",{"_index":3944,"title":{},"body":{"license.html":{}}}],["inability",{"_index":4085,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":4082,"title":{},"body":{"license.html":{}}}],["include",{"_index":3922,"title":{},"body":{"license.html":{}}}],["included",{"_index":2040,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/Oid4vciService.html":{},"license.html":{}}}],["includes",{"_index":2576,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{},"license.html":{}}}],["including",{"_index":73,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["inclusion",{"_index":3932,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":3951,"title":{},"body":{"license.html":{}}}],["incurred",{"_index":4112,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":4108,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":4099,"title":{},"body":{"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["indexable",{"_index":3064,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["indexes",{"_index":3294,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["indicated",{"_index":3908,"title":{},"body":{"license.html":{}}}],["indicates",{"_index":28,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{}}}],["indicating",{"_index":2732,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["indirect",{"_index":3879,"title":{},"body":{"license.html":{}}}],["individual",{"_index":3891,"title":{},"body":{"license.html":{}}}],["infer",{"_index":1107,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["infers",{"_index":1946,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{}}}],["information",{"_index":355,"title":{},"body":{"controllers/AppController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/IssuerManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["informational",{"_index":4021,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":3975,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":3989,"title":{},"body":{"license.html":{}}}],["inherit",{"_index":1508,"title":{},"body":{"injectables/CryptoService.html":{}}}],["inherited",{"_index":3412,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["init",{"_index":1669,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["init(tenant",{"_index":1773,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["init(tenantid",{"_index":1674,"title":{},"body":{"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["initial",{"_index":1137,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["initialconfig",{"_index":291,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["initialization",{"_index":1134,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{}}}],["initialize",{"_index":1138,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/functions.html":{}}}],["initialized",{"_index":150,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["initializes",{"_index":103,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/CredentialsController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["inject",{"_index":444,"title":{},"body":{"modules/AppModule.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["inject('keyservice",{"_index":1456,"title":{},"body":{"injectables/CryptoService.html":{}}}],["injectable",{"_index":30,"title":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["injectables",{"_index":776,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"overview.html":{}}}],["injectrepository",{"_index":1235,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["injectrepository(credentialconfig",{"_index":1238,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{}}}],["injectrepository(issuanceconfig",{"_index":2094,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["injectrepository(presentationconfig",{"_index":2793,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["injectrepository(session",{"_index":3242,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository(statusmapping",{"_index":3289,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["input",{"_index":3459,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["install",{"_index":1098,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{}}}],["instance",{"_index":95,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["instance.decode(`${data}.${signature",{"_index":2808,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["instanceof",{"_index":1997,"title":{},"body":{"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["instead",{"_index":1102,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{}}}],["institute",{"_index":3979,"title":{},"body":{"license.html":{}}}],["institutions",{"_index":3842,"title":{},"body":{"index.html":{}}}],["insufficient_authorization",{"_index":908,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["int",{"_index":3373,"title":{},"body":{"entities/StatusMapping.html":{}}}],["integrated",{"_index":1824,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["integrates",{"_index":3764,"title":{},"body":{"index.html":{}}}],["integration",{"_index":952,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"index.html":{}}}],["intended",{"_index":1655,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["intentionally",{"_index":3930,"title":{},"body":{"license.html":{}}}],["interact",{"_index":4145,"title":{},"body":{"properties.html":{}}}],["interacting",{"_index":83,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["interaction",{"_index":72,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["intercept",{"_index":3070,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercept(context",{"_index":3074,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interceptor",{"_index":1884,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["interceptors",{"_index":1132,"title":{"classes/Interceptors.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["intercepts",{"_index":3077,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interested",{"_index":3844,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"interfaces/IssuerMetadata.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"license.html":{},"overview.html":{}}}],["internally",{"_index":2023,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["internals",{"_index":2022,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["interval",{"_index":3246,"title":{},"body":{"injectables/SessionService.html":{}}}],["intervaltime",{"_index":3244,"title":{},"body":{"injectables/SessionService.html":{}}}],["invalid",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["irrevocable",{"_index":3960,"title":{},"body":{"license.html":{}}}],["is_public_key",{"_index":2202,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["isabsolute",{"_index":397,"title":{},"body":{"modules/AppModule.html":{}}}],["isabsolute(folder",{"_index":493,"title":{},"body":{"modules/AppModule.html":{}}}],["isarray",{"_index":2075,"title":{},"body":{"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["isarray()@isoptional",{"_index":2374,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["isauthurlauth",{"_index":676,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isauthurlauth(config",{"_index":681,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isdebugmodeenabled",{"_index":2308,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isenabled",{"_index":139,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["isenum",{"_index":2358,"title":{},"body":{"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isenum(['credential_accepted",{"_index":2356,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum(responsetype",{"_index":2383,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isglobal",{"_index":441,"title":{},"body":{"modules/AppModule.html":{}}}],["ishttploggerenabled",{"_index":2309,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isin",{"_index":319,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin(['apikey",{"_index":333,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin(['none",{"_index":650,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isin([0",{"_index":3384,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnoneauth",{"_index":677,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isnoneauth(config",{"_index":684,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isnumber",{"_index":3383,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber()@isin(['0",{"_index":3381,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["iso",{"_index":1062,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["isobject",{"_index":320,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isobject()@column('json",{"_index":2031,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["isobject()@isoptional",{"_index":2380,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/PresentationRequest.html":{}}}],["isobject()@isoptional()@validatenested()@type(undefined",{"_index":692,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["isobject()@validatenested()@type(undefined",{"_index":2069,"title":{},"body":{"classes/IssuanceDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isoptional",{"_index":321,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizeQueries.html":{},"entities/CredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isoptional()@isstring",{"_index":764,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["ispresentationduringissuanceauth",{"_index":678,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["ispresentationduringissuanceauth(config",{"_index":686,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["ispublic",{"_index":2204,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["iss",{"_index":1375,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["issessionloggerenabled",{"_index":2310,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isstring",{"_index":311,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/IssuanceDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isstring()@isoptional",{"_index":3378,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isstring({each",{"_index":2071,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["issuance",{"_index":637,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"changelog.html":{}}}],["issuance.service",{"_index":2061,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["issuance/dto/authentication",{"_index":818,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuance/entities/issuance",{"_index":1207,"title":{},"body":{"entities/CredentialConfig.html":{},"modules/IssuerModule.html":{}}}],["issuance/issuance.controller",{"_index":2178,"title":{},"body":{"modules/IssuerModule.html":{}}}],["issuance/issuance.service",{"_index":817,"title":{},"body":{"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig",{"_index":1165,"title":{"entities/IssuanceConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["issuanceconfig.authenticationconfig.method",{"_index":2463,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuanceconfig.credentialconfigs",{"_index":1191,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["issuanceconfig.credentialconfigs.map((config",{"_index":2461,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuanceconfigid",{"_index":2089,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuanceconfigrepo",{"_index":2082,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuancecontroller",{"_index":2050,"title":{"controllers/IssuanceController.html":{}},"body":{"controllers/IssuanceController.html":{},"modules/IssuerModule.html":{}}}],["issuancedto",{"_index":2059,"title":{"classes/IssuanceDto.html":{}},"body":{"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["issuanceid",{"_index":923,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["issuanceservice",{"_index":787,"title":{"injectables/IssuanceService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"overview.html":{}}}],["issuance—and",{"_index":3777,"title":{},"body":{"index.html":{}}}],["issue",{"_index":2391,"title":{},"body":{"controllers/Oid4vciController.html":{},"license.html":{}}}],["issued",{"_index":1173,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["issuer",{"_index":831,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["issuer.png",{"_index":996,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["issuer/authorize/authorize.service",{"_index":3561,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuer/authorize/dto/authorize",{"_index":3034,"title":{},"body":{"entities/Session.html":{}}}],["issuer/issuer.module",{"_index":390,"title":{},"body":{"modules/AppModule.html":{}}}],["issuer/oid4vci/dto/offer",{"_index":2588,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{}}}],["issuer/oid4vci/oid4vci.service",{"_index":2127,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/WellKnownController.html":{}}}],["issuer/status",{"_index":3052,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["issuer_cert.pem",{"_index":1491,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_cert.srl",{"_index":1545,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_key.pem",{"_index":1489,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_state",{"_index":759,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["issuer_validation_schema",{"_index":389,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{}}}],["issuercert",{"_index":1490,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuerkey",{"_index":1488,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuermanagementcontroller",{"_index":2110,"title":{"controllers/IssuerManagementController.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{}}}],["issuermetadata",{"_index":2154,"title":{"interfaces/IssuerMetadata.html":{}},"body":{"interfaces/IssuerMetadata.html":{},"injectables/Oid4vciService.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{}}}],["issuermetadata(@param('tenantid",{"_index":3568,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuermetadata(tenantid",{"_index":2427,"title":{},"body":{"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{}}}],["issuermetadata.authorizationservers",{"_index":2477,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermetadata.credentialissuer.credential_issuer",{"_index":2479,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermetadataresult",{"_index":2436,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermodule",{"_index":372,"title":{"modules/IssuerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules.html":{},"overview.html":{}}}],["issuing",{"_index":3194,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["isurl",{"_index":654,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isusingexternaloidc",{"_index":1856,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["it's",{"_index":1058,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/WebhookService.html":{}}}],["item.name",{"_index":209,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["iterator",{"_index":1996,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["january",{"_index":3853,"title":{},"body":{"license.html":{}}}],["job",{"_index":3234,"title":{},"body":{"injectables/SessionService.html":{}}}],["jobs",{"_index":3669,"title":{},"body":{"changelog.html":{}}}],["joi",{"_index":384,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"dependencies.html":{}}}],["joi.boolean().default(false",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.exist",{"_index":2903,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["joi.number().default(24",{"_index":3208,"title":{},"body":{"modules/SessionModule.html":{}}}],["joi.number().default(60",{"_index":3205,"title":{},"body":{"modules/SessionModule.html":{}}}],["joi.number().when('db_type",{"_index":1626,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["joi.object",{"_index":419,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.optional",{"_index":1623,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["joi.required",{"_index":1624,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{}}}],["joi.string",{"_index":425,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/RegistrarModule.html":{}}}],["joi.string().default('./tmp",{"_index":421,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('24h",{"_index":614,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().default('eudiplo",{"_index":423,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('key",{"_index":2289,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().optional",{"_index":605,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().optional().default('eudiplo",{"_index":612,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().required",{"_index":608,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().uri().when('km_type",{"_index":2285,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().valid('file",{"_index":2281,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().valid('sqlite",{"_index":1618,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["joi.string().when('db_type",{"_index":1621,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["joi.string().when('km_type",{"_index":2287,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().when('registrar_url",{"_index":2902,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["joi.when('oidc",{"_index":607,"title":{},"body":{"modules/AuthModule.html":{}}}],["join",{"_index":61,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["join(__dirname",{"_index":495,"title":{},"body":{"modules/AppModule.html":{}}}],["join(folder",{"_index":494,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["join(separator",{"_index":2995,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["join(separatorarraynoexplode(style",{"_index":2990,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["join(this.configservice.getorthrow('folder",{"_index":1474,"title":{},"body":{"injectables/CryptoService.html":{}}}],["join(this.folder",{"_index":1477,"title":{},"body":{"injectables/CryptoService.html":{}}}],["joinedvalues",{"_index":2987,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["joining",{"_index":3746,"title":{},"body":{"index.html":{}}}],["jointable",{"_index":1203,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["jose",{"_index":1467,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["joseheaderparameters",{"_index":2300,"title":{},"body":{"classes/KeyService.html":{}}}],["josepublickey",{"_index":1579,"title":{},"body":{"injectables/CryptoService.html":{}}}],["json",{"_index":440,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"entities/CredentialConfig.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["json.parse",{"_index":295,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["json.parse(readfilesync(file",{"_index":3322,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.parse(readfilesync(this.privateenncryptionpath",{"_index":1695,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["json.stringify",{"_index":1025,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.stringify(await",{"_index":1692,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["json.stringify(body",{"_index":2878,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["json.stringify(config",{"_index":301,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["json.stringify(content",{"_index":3325,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.stringify(credentialissuer).replace",{"_index":2452,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["json.stringify(data",{"_index":3122,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["json.stringify(displayinfo",{"_index":998,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["json.stringify(initialconfig",{"_index":293,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["json.stringify(value",{"_index":2009,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["json.stringify(values.dcql_query).replace",{"_index":2598,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["json.stringify(values.registrationcert).replace",{"_index":2601,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jsonbodyserializer",{"_index":1898,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["jsonwebkey",{"_index":1403,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"entities/KeyEntity.html":{}}}],["jwk",{"_index":810,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["jwk.kid",{"_index":3456,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["jwk_ec_public",{"_index":1649,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["jwks",{"_index":1660,"title":{},"body":{"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["jwks_uri",{"_index":836,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["jwksrequestsperminute",{"_index":2243,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksresponsedto",{"_index":1661,"title":{"classes/JwksResponseDto.html":{}},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"controllers/WellKnownController.html":{}}}],["jwksuri",{"_index":2244,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwkthumbprint",{"_index":1585,"title":{},"body":{"injectables/CryptoService.html":{}}}],["jwt",{"_index":879,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.service",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["jwt.setaudience(options.audience",{"_index":1842,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.sign(secretkey",{"_index":1843,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.strategy",{"_index":602,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt/crypto",{"_index":1346,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":3282,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt/sd",{"_index":1349,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt/types",{"_index":1791,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["jwt_alg_values",{"_index":2622,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jwt_expires_in",{"_index":613,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_issuer",{"_index":611,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwt_secret",{"_index":610,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_secret=$(openssl",{"_index":3805,"title":{},"body":{"index.html":{}}}],["jwt_secret=your",{"_index":3811,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":597,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"overview.html":{}}}],["jwtdecrypt",{"_index":1682,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtdecrypt(response",{"_index":1701,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtfromrequest",{"_index":2225,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtheaderparameters",{"_index":1780,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["jwtpayload",{"_index":1779,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["jwtservice",{"_index":533,"title":{"injectables/JwtService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"overview.html":{}}}],["jwtstrategy",{"_index":598,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"overview.html":{}}}],["jwtstrategy.getexternaloidcconfig(configservice",{"_index":2238,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy.getintegratedoauth2config(configservice",{"_index":2239,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtverify",{"_index":1466,"title":{},"body":{"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{}}}],["jwtverify(`${data}.${signature",{"_index":2820,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["jwtverify(compact",{"_index":1561,"title":{},"body":{"injectables/CryptoService.html":{}}}],["jwtverify(token",{"_index":1848,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwtwithstatuslistpayload",{"_index":3279,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["kb",{"_index":2621,"title":{},"body":{"injectables/Oid4vpService.html":{},"miscellaneous/functions.html":{}}}],["kbverifier",{"_index":2749,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key",{"_index":22,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/AuthResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"index.html":{}}}],["key).then",{"_index":2821,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key.kid",{"_index":2971,"title":{},"body":{"injectables/ResolverService.html":{}}}],["key.pem",{"_index":1483,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["key.service",{"_index":1790,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["key.service.ts",{"_index":1757,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["key.service.ts:101",{"_index":3417,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:102",{"_index":3418,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:118",{"_index":1768,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:121",{"_index":3411,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:131",{"_index":1770,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:132",{"_index":1771,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:133",{"_index":1772,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:137",{"_index":3421,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:15",{"_index":3428,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:150",{"_index":1781,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:17",{"_index":3427,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:185",{"_index":3406,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:19",{"_index":3402,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:29",{"_index":1782,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:31",{"_index":1783,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:32",{"_index":1763,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:41",{"_index":1775,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:42",{"_index":1774,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:51",{"_index":1777,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:60",{"_index":1765,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:68",{"_index":3404,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.slice(prefix.length",{"_index":1749,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["key.startswith(prefix",{"_index":1748,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["key/key.service",{"_index":1468,"title":{},"body":{"injectables/CryptoService.html":{}}}],["key_validation_schema",{"_index":398,"title":{},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{}}}],["keybinding",{"_index":2785,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindingnonce",{"_index":2774,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindings",{"_index":2784,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keycloak",{"_index":2251,"title":{},"body":{"injectables/JwtStrategy.html":{},"changelog.html":{}}}],["keycloak_client_id",{"_index":609,"title":{},"body":{"modules/AuthModule.html":{}}}],["keycloak_internal_issuer_url",{"_index":606,"title":{},"body":{"modules/AuthModule.html":{}}}],["keyentity",{"_index":2265,"title":{"entities/KeyEntity.html":{}},"body":{"entities/KeyEntity.html":{},"modules/KeyModule.html":{}}}],["keylike",{"_index":3416,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keymap",{"_index":1719,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["keymodule",{"_index":373,"title":{"modules/KeyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"modules.html":{},"overview.html":{}}}],["keymodule.forroot",{"_index":488,"title":{},"body":{"modules/AppModule.html":{}}}],["keypair",{"_index":1401,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/VaultKeyService.html":{}}}],["keys",{"_index":1478,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["keys.privatekey",{"_index":1801,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keys.publickey",{"_index":1802,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keys.publickey.kid",{"_index":1814,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keyservice",{"_index":1421,"title":{"classes/KeyService.html":{}},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["keyservice:100",{"_index":3414,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:156",{"_index":3424,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:45",{"_index":3419,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:57",{"_index":3423,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:90",{"_index":3413,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["kind",{"_index":4058,"title":{},"body":{"license.html":{}}}],["km_type",{"_index":2280,"title":{},"body":{"modules/KeyModule.html":{}}}],["kmtype",{"_index":2291,"title":{},"body":{"modules/KeyModule.html":{}}}],["know",{"_index":251,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["known",{"_index":3552,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller",{"_index":388,"title":{},"body":{"modules/AppModule.html":{}}}],["known.controller.ts",{"_index":3550,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:26",{"_index":3560,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:36",{"_index":3554,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:50",{"_index":3557,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known/dto/credential",{"_index":1245,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["known/dto/jwks",{"_index":1470,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["known/dto/oauth",{"_index":2360,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["known/jwks.json",{"_index":838,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["known/jwt",{"_index":2965,"title":{},"body":{"injectables/ResolverService.html":{}}}],["known/openid",{"_index":124,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["known/well",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["kty",{"_index":1651,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["label",{"_index":1911,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["language",{"_index":4133,"title":{},"body":{"license.html":{}}}],["last",{"_index":3330,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["later",{"_index":961,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{}}}],["latest",{"_index":3826,"title":{},"body":{"index.html":{}}}],["law",{"_index":4054,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":3985,"title":{},"body":{"license.html":{}}}],["layer",{"_index":3736,"title":{},"body":{"index.html":{}}}],["legal",{"_index":3869,"title":{},"body":{"license.html":{}}}],["legend",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["length",{"_index":3123,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{}}}],["lessthan",{"_index":3239,"title":{},"body":{"injectables/SessionService.html":{}}}],["lessthan(new",{"_index":3257,"title":{},"body":{"injectables/SessionService.html":{}}}],["level",{"_index":449,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels",{"_index":2342,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels[level.tolowercase",{"_index":2345,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["liability",{"_index":4071,"title":{},"body":{"license.html":{}}}],["liable",{"_index":4079,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":3752,"title":{},"body":{"index.html":{}}}],["licensable",{"_index":3973,"title":{},"body":{"license.html":{}}}],["license",{"_index":3848,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":3849,"title":{},"body":{"index.html":{},"license.html":{}}}],["licenses",{"_index":3990,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":3865,"title":{},"body":{"license.html":{}}}],["lightweight",{"_index":3760,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":4060,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":4135,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3896,"title":{},"body":{"license.html":{}}}],["line",{"_index":176,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["link",{"_index":1024,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["links",{"_index":2039,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["list",{"_index":1259,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/PresentationsService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{},"index.html":{}}}],["list')@header('content",{"_index":3266,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller",{"_index":3351,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.controller.ts",{"_index":3261,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller.ts:16",{"_index":3268,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.json",{"_index":3288,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["list.module",{"_index":2171,"title":{},"body":{"modules/IssuerModule.html":{},"modules/SessionModule.html":{}}}],["list.module.ts",{"_index":3350,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.service",{"_index":1351,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{}}}],["list.service.ts",{"_index":3275,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["list.service.ts:112",{"_index":3362,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:116",{"_index":3361,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:125",{"_index":3367,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:138",{"_index":3359,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:178",{"_index":3366,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:189",{"_index":3368,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:31",{"_index":3357,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:39",{"_index":3364,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:42",{"_index":3365,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:52",{"_index":3363,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:79",{"_index":3360,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list/dto/status",{"_index":3053,"title":{},"body":{"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{}}}],["list/entities/status",{"_index":3369,"title":{},"body":{"entities/StatusMapping.html":{}}}],["list/status",{"_index":1350,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["listen",{"_index":982,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["lists",{"_index":3940,"title":{},"body":{"license.html":{}}}],["literal",{"_index":625,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/OfferRequestDto.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/VaultKeyService.html":{}}}],["litigation",{"_index":3980,"title":{},"body":{"license.html":{}}}],["live",{"_index":2851,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["load",{"_index":282,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["loadclients",{"_index":968,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["loadconfig",{"_index":2908,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["loadconfig(tenantid",{"_index":283,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["loadconfiguration",{"_index":2311,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loadtypemetadataformat",{"_index":1373,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["locale",{"_index":992,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["locality",{"_index":2838,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["lock",{"_index":3758,"title":{},"body":{"index.html":{}}}],["log",{"_index":2344,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_debug_mode",{"_index":436,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_enable_http_logger",{"_index":433,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_enable_session_logger",{"_index":435,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_format",{"_index":437,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_level",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["logauthorizationrequest",{"_index":3146,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logauthorizationrequest(context",{"_index":3159,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcontext",{"_index":2484,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WebhookService.html":{}}}],["logcredentialissuance",{"_index":3147,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialissuance(context",{"_index":3162,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification",{"_index":3148,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification(context",{"_index":3165,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete",{"_index":3149,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete(context",{"_index":3167,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror",{"_index":3150,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror(context",{"_index":3170,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart",{"_index":3151,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart(context",{"_index":3172,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logformat",{"_index":2336,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["logged",{"_index":3066,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["logger",{"_index":2304,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"changelog.html":{}}}],["logger.decorator",{"_index":2400,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor",{"_index":2177,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["logger.interceptor.ts",{"_index":3068,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:141",{"_index":3085,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:19",{"_index":3073,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:44",{"_index":3076,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.service",{"_index":2176,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{}}}],["logger.service.ts",{"_index":3143,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:102",{"_index":3164,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:12",{"_index":3158,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:124",{"_index":3166,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:146",{"_index":3161,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:163",{"_index":3181,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:180",{"_index":3175,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:202",{"_index":3177,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:221",{"_index":3179,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:30",{"_index":3182,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:37",{"_index":3173,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:56",{"_index":3168,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:75",{"_index":3171,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger/session",{"_index":3523,"title":{},"body":{"injectables/WebhookService.html":{}}}],["loggerconfigservice",{"_index":2302,"title":{"injectables/LoggerConfigService.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loggerconfiguration",{"_index":2317,"title":{"interfaces/LoggerConfiguration.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loggermodule",{"_index":414,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loggermodule.forrootasync",{"_index":443,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":2333,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"changelog.html":{}}}],["logic",{"_index":3769,"title":{},"body":{"index.html":{}}}],["loglevel",{"_index":2320,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["lognotification",{"_index":3152,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["lognotification(context",{"_index":3174,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logo",{"_index":994,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["logs",{"_index":2577,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"changelog.html":{}}}],["logsession",{"_index":3153,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsession(context",{"_index":3176,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror",{"_index":3154,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror(context",{"_index":3178,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange",{"_index":3155,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange(context",{"_index":3180,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["long",{"_index":3794,"title":{},"body":{"index.html":{}}}],["loss",{"_index":4086,"title":{},"body":{"license.html":{}}}],["losses",{"_index":4093,"title":{},"body":{"license.html":{}}}],["made",{"_index":1084,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"entities/PresentationConfig.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["mailing",{"_index":3939,"title":{},"body":{"license.html":{}}}],["main",{"_index":3663,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["maintain",{"_index":623,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["major",{"_index":3830,"title":{},"body":{"index.html":{}}}],["make",{"_index":3640,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["making",{"_index":2760,"title":{},"body":{"injectables/PresentationsService.html":{},"license.html":{}}}],["malfunction",{"_index":4091,"title":{},"body":{"license.html":{}}}],["manage",{"_index":1162,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["managed",{"_index":3942,"title":{},"body":{"license.html":{}}}],["management",{"_index":1292,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{},"license.html":{}}}],["management.controller",{"_index":2173,"title":{},"body":{"modules/IssuerModule.html":{}}}],["management.controller.ts",{"_index":2113,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management.controller.ts:63",{"_index":2123,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management/credentials",{"_index":1275,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["management/issuance",{"_index":2052,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["management/issuer",{"_index":2112,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{}}}],["managing",{"_index":71,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/FileSystemKeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{}}}],["manytomany",{"_index":1204,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["manytomany(undefined",{"_index":1190,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["map",{"_index":1710,"title":{},"body":{"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"injectables/VaultKeyService.html":{}}}],["map(([key",{"_index":3008,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["map((_",{"_index":3304,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["map((v",{"_index":2994,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["map.get(config.key",{"_index":1739,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["map.get(key",{"_index":1745,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["map.set(config.key",{"_index":1722,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["mapping",{"_index":3334,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity",{"_index":3285,"title":{},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity.ts",{"_index":3370,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:12",{"_index":3374,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:15",{"_index":3372,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:6",{"_index":3376,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:9",{"_index":3375,"title":{},"body":{"entities/StatusMapping.html":{}}}],["marked",{"_index":3947,"title":{},"body":{"license.html":{}}}],["marks",{"_index":4044,"title":{},"body":{"license.html":{}}}],["match",{"_index":1919,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/ResolverService.html":{}}}],["match.length",{"_index":1922,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["match.substring(1",{"_index":1921,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["matches",{"_index":1917,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["matching",{"_index":259,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["math.floor(date.now",{"_index":2631,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["math.floor(new",{"_index":2633,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["math.random",{"_index":3307,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["math.round(new",{"_index":1377,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["matrix",{"_index":1912,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["matrixstyle",{"_index":1910,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["maybe",{"_index":277,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["mean",{"_index":3862,"title":{},"body":{"license.html":{}}}],["means",{"_index":3876,"title":{},"body":{"license.html":{}}}],["meant",{"_index":2002,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mechanical",{"_index":3900,"title":{},"body":{"license.html":{}}}],["mechanism",{"_index":960,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["mechanism(s",{"_index":1124,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["media",{"_index":3905,"title":{},"body":{"license.html":{}}}],["medium",{"_index":3995,"title":{},"body":{"license.html":{}}}],["meet",{"_index":3996,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":4062,"title":{},"body":{"license.html":{}}}],["merely",{"_index":3925,"title":{},"body":{"license.html":{}}}],["mergeconfigs",{"_index":1984,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders",{"_index":1995,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders.append(key",{"_index":2001,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders.delete(key",{"_index":2000,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders.set",{"_index":2008,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergeheaders",{"_index":1993,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergeheaders(a.headers",{"_index":1991,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["message",{"_index":3130,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["metadata",{"_index":1179,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"interfaces/IssuerMetadata.html":{},"injectables/Oid4vciService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["metadata.'})@get('openid",{"_index":3559,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["metadata.controller",{"_index":2179,"title":{},"body":{"modules/IssuerModule.html":{}}}],["metadata.controller.ts",{"_index":1306,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.controller.ts:13",{"_index":1312,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.controller.ts:23",{"_index":1309,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.dto",{"_index":2949,"title":{},"body":{"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{}}}],["metadata.dto.ts",{"_index":1246,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{}}}],["metadata.dto.ts:12",{"_index":1258,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:16",{"_index":1264,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:20",{"_index":1268,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:24",{"_index":1261,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:33",{"_index":1266,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:37",{"_index":1263,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:41",{"_index":1256,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:8",{"_index":1265,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata/credentials",{"_index":1305,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{}}}],["metadata/dto/credential",{"_index":657,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/VCT.html":{}}}],["metadata/dto/schema",{"_index":1206,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/SchemaResponse.html":{}}}],["metadata/vct/${credentialconfig.id",{"_index":1387,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["method",{"_index":161,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{}}}],["methodfn",{"_index":1013,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["methods",{"_index":346,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{}}}],["middleware",{"_index":1080,"title":{"interfaces/Middleware.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"index.html":{},"properties.html":{}}}],["mirko",{"_index":4128,"title":{},"body":{"license.html":{},"properties.html":{}}}],["miscellaneous",{"_index":3710,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["missing",{"_index":1511,"title":{},"body":{"injectables/CryptoService.html":{}}}],["misused",{"_index":179,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["mkdirsync",{"_index":950,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["mkdirsync(folder",{"_index":987,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["mkdirsync(this.folder",{"_index":1476,"title":{},"body":{"injectables/CryptoService.html":{}}}],["mm",{"_index":460,"title":{},"body":{"modules/AppModule.html":{}}}],["modifications",{"_index":3895,"title":{},"body":{"license.html":{}}}],["modified",{"_index":4000,"title":{},"body":{"license.html":{}}}],["modify",{"_index":2144,"title":{},"body":{"controllers/IssuerManagementController.html":{},"license.html":{}}}],["modifying",{"_index":3135,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["module",{"_index":357,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["modules",{"_index":359,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["mollik",{"_index":4129,"title":{},"body":{"license.html":{},"properties.html":{}}}],["more",{"_index":354,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/Session.html":{},"changelog.html":{},"license.html":{}}}],["move",{"_index":2678,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["ms",{"_index":3730,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mso_mdoc",{"_index":2617,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["multi",{"_index":3028,"title":{},"body":{"entities/Session.html":{},"changelog.html":{}}}],["multipart/form",{"_index":1956,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["multiple",{"_index":1119,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/Oid4vciService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["mysql2",{"_index":3694,"title":{},"body":{"dependencies.html":{}}}],["n${json.stringify(signer.publicjwk",{"_index":1589,"title":{},"body":{"injectables/CryptoService.html":{}}}],["name",{"_index":191,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["name)?.id",{"_index":210,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["name.endswith",{"_index":1923,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.length",{"_index":1925,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.startswith",{"_index":1926,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.substring(0",{"_index":1924,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.substring(1",{"_index":1927,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["nameing",{"_index":3656,"title":{},"body":{"changelog.html":{}}}],["names",{"_index":4043,"title":{},"body":{"license.html":{}}}],["name}=${allowreserved",{"_index":3000,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["name}=${joinedvalues",{"_index":2991,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["name}=${token",{"_index":1970,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name}=${value.toisostring",{"_index":3003,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["name}[${key",{"_index":3009,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["native",{"_index":1045,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["necessarily",{"_index":3974,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":104,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/VaultKeyService.html":{}}}],["need",{"_index":216,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["needed",{"_index":186,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{}}}],["needs",{"_index":917,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["negligence",{"_index":4074,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":4077,"title":{},"body":{"license.html":{}}}],["nested",{"_index":2997,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["nestinterceptor",{"_index":3090,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["nestjs",{"_index":415,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":2183,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":35,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2200,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":64,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":601,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":3678,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":406,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":395,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":350,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1869,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":1236,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["nestjs/typeorm/dist/typeorm.module",{"_index":2278,"title":{},"body":{"modules/KeyModule.html":{}}}],["never",{"_index":1103,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["new",{"_index":118,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["next",{"_index":175,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{}}}],["next.handle",{"_index":3096,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.handle().pipe",{"_index":3116,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.js",{"_index":1095,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["node:child_process",{"_index":1472,"title":{},"body":{"injectables/CryptoService.html":{}}}],["node:crypto",{"_index":728,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{}}}],["node:fs",{"_index":57,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["node:path",{"_index":62,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["nodejs",{"_index":1347,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["non",{"_index":3956,"title":{},"body":{"license.html":{}}}],["noncce",{"_index":3031,"title":{},"body":{"entities/Session.html":{}}}],["nonce",{"_index":2495,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["none",{"_index":644,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/WebhookService.html":{}}}],["normally",{"_index":4018,"title":{},"body":{"license.html":{}}}],["nothing",{"_index":4033,"title":{},"body":{"license.html":{}}}],["notice",{"_index":3909,"title":{},"body":{"license.html":{}}}],["notices",{"_index":4003,"title":{},"body":{"license.html":{}}}],["notification",{"_index":1269,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{}}}],["notification.id",{"_index":2522,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notification_endpoint",{"_index":1255,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["notification_id",{"_index":2354,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["notificationevent",{"_index":2355,"title":{},"body":{"classes/NotificationRequestDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["notificationid",{"_index":2507,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notificationindex",{"_index":2527,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notificationrequestdto",{"_index":2352,"title":{"classes/NotificationRequestDto.html":{}},"body":{"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["notifications",{"_index":340,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["notifications(body",{"_index":2392,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["notify",{"_index":2846,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["notifywebhook",{"_index":3011,"title":{},"body":{"entities/Session.html":{}}}],["notitification",{"_index":2426,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notwithstanding",{"_index":4031,"title":{},"body":{"license.html":{}}}],["now",{"_index":914,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["null",{"_index":263,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthenticationConfigHelper.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["nullable",{"_index":1169,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["number",{"_index":171,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"classes/ParResponseDto.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"miscellaneous/functions.html":{}}}],["oauth",{"_index":2636,"title":{},"body":{"injectables/Oid4vpService.html":{},"index.html":{}}}],["oauth2",{"_index":82,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{}}}],["oauth2authorizationserver",{"_index":795,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oauth2authorizationserverresponse",{"_index":2359,"title":{"classes/Oauth2AuthorizationServerResponse.html":{}},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{}}}],["oauth2client",{"_index":36,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oauth2resourceserver",{"_index":2433,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["object",{"_index":1026,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["object.entries",{"_index":1751,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["object.entries(arg",{"_index":1744,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["object.entries(body).foreach(([key",{"_index":2875,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["object.entries(extraprefixesmap",{"_index":1718,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["object.entries(header",{"_index":1999,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["object.entries(params",{"_index":1729,"title":{},"body":{"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{}}}],["object.entries(req.headers",{"_index":1592,"title":{},"body":{"injectables/CryptoService.html":{}}}],["object.entries(value",{"_index":3007,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["object.entries(value).foreach(([key",{"_index":3004,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["object.keys(res.vp_token",{"_index":2822,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["object.keys(value).length",{"_index":1730,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["objects",{"_index":1038,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["objectseparatorstyle",{"_index":2982,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["objectstyle",{"_index":2869,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["obligations",{"_index":4100,"title":{},"body":{"license.html":{}}}],["observable",{"_index":3082,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["obtain",{"_index":4131,"title":{},"body":{"license.html":{}}}],["offer",{"_index":922,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"license.html":{}}}],["offer.credentialoffer",{"_index":2469,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offer.credentialofferobject",{"_index":2467,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offered",{"_index":2531,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offerrequestdto",{"_index":2116,"title":{"classes/OfferRequestDto.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{}}}],["offerresponse",{"_index":2119,"title":{"classes/OfferResponse.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{}}}],["oid4vci",{"_index":474,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/SessionLogContext.html":{},"index.html":{}}}],["oid4vci/dto/offer",{"_index":2128,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["oid4vci/oid4vci.controller",{"_index":2169,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.service",{"_index":2168,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/util",{"_index":815,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oid4vcicontroller",{"_index":2166,"title":{"controllers/Oid4vciController.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{}}}],["oid4vciservice",{"_index":2126,"title":{"injectables/Oid4vciService.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["oid4vp",{"_index":476,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/SessionLogContext.html":{},"index.html":{}}}],["oid4vp.controller",{"_index":2567,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["oid4vp.service",{"_index":2551,"title":{},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vp/dto/presentation",{"_index":2714,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vp/oid4vp.module",{"_index":2744,"title":{},"body":{"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{}}}],["oid4vp/oid4vp.service",{"_index":2715,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vpcontroller",{"_index":2538,"title":{"controllers/Oid4vpController.html":{}},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vpmodule",{"_index":2160,"title":{"modules/Oid4vpModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["oid4vpservice",{"_index":786,"title":{"injectables/Oid4vpService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"overview.html":{}}}],["oidc",{"_index":84,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"changelog.html":{}}}],["oidc_client_id",{"_index":2904,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["oidc_client_secret",{"_index":2905,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["oidc_issuer_url",{"_index":2901,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["oidcissuerurl",{"_index":111,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/.well",{"_index":123,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/protocol/openid",{"_index":120,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["older",{"_index":3237,"title":{},"body":{"injectables/SessionService.html":{}}}],["omit",{"_index":1083,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/functions.html":{}}}],["omitkeys",{"_index":1145,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["onapplicationbootstrap",{"_index":31,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{}}}],["once",{"_index":187,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["one",{"_index":212,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"changelog.html":{},"license.html":{}}}],["onevent",{"_index":63,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["onevent(tenant_events.tenant_init",{"_index":1447,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{}}}],["onevent(tenant_events.tenant_keys",{"_index":152,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["onmoduleinit",{"_index":32,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit",{"_index":1427,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit(tenantid",{"_index":153,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["open",{"_index":3737,"title":{},"body":{"index.html":{}}}],["openapi",{"_index":2005,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["openid",{"_index":2541,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["openid4vc",{"_index":636,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["openid4vc/oauth2",{"_index":813,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"dependencies.html":{}}}],["openid4vc/openid4vci",{"_index":1201,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["openid4vc/openid4vp",{"_index":3686,"title":{},"body":{"dependencies.html":{}}}],["openid4vc/utils",{"_index":3687,"title":{},"body":{"dependencies.html":{}}}],["openid4vci",{"_index":701,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/WellKnownController.html":{}}}],["openid4vcidraftversion",{"_index":2437,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vcidraftversion.draft14",{"_index":2455,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vciissuer",{"_index":2431,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vp://?${(await",{"_index":905,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["openid4vp://?${values.uri",{"_index":2725,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["openssl",{"_index":1515,"title":{},"body":{"injectables/CryptoService.html":{}}}],["operation",{"_index":1226,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["operations",{"_index":100,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService-1.html":{},"controllers/Oid4vpController.html":{},"injectables/RegistrarService.html":{}}}],["option",{"_index":1088,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["optional",{"_index":16,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/SerializePrimitiveOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":455,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{}}}],["options.audience",{"_index":1841,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.auth",{"_index":1964,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.baseurl",{"_index":1974,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.dto",{"_index":2590,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["options.dto.ts",{"_index":2733,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{}}}],["options.expiresin",{"_index":1830,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.headers.append('cookie",{"_index":1969,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.headers.set(name",{"_index":1971,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.path",{"_index":1975,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.query",{"_index":1967,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.query[name",{"_index":1968,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.queryserializer",{"_index":1976,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.url",{"_index":1978,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["optionslegacyparser",{"_index":1146,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["order",{"_index":2799,"title":{},"body":{"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["organizations",{"_index":3745,"title":{},"body":{"index.html":{}}}],["origin",{"_index":4049,"title":{},"body":{"license.html":{}}}],["original",{"_index":3136,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["originaldraftversion",{"_index":2454,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["otherwhise",{"_index":2132,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["otherwise",{"_index":138,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["out",{"_index":379,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"license.html":{},"overview.html":{}}}],["outstanding",{"_index":3887,"title":{},"body":{"license.html":{}}}],["over",{"_index":3763,"title":{},"body":{"index.html":{}}}],["override",{"_index":1109,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["overview",{"_index":3744,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["overwrite",{"_index":1343,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{}}}],["overwritten",{"_index":1174,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{}}}],["owner",{"_index":3867,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":3884,"title":{},"body":{"license.html":{}}}],["p",{"_index":1690,"title":{},"body":{"injectables/EncryptionService.html":{},"index.html":{}}}],["p256",{"_index":3441,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["package",{"_index":3671,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pad",{"_index":3484,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["page",{"_index":3665,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["pair",{"_index":1510,"title":{},"body":{"injectables/CryptoService.html":{}}}],["pairs",{"_index":629,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["par",{"_index":706,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(body",{"_index":717,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["param",{"_index":94,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{}}}],["param('id",{"_index":1301,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{}}}],["param('requestid",{"_index":2556,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["param('session",{"_index":2557,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["param('tenantid",{"_index":739,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["parameter",{"_index":501,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["parameterize",{"_index":1498,"title":{},"body":{"injectables/CryptoService.html":{}}}],["parameters",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1727,"title":{"interfaces/Params.html":{}},"body":{"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{}}}],["params.body",{"_index":1743,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["params[field.in",{"_index":1741,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["params[slot",{"_index":1731,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["paramsserializer",{"_index":1046,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["parresponsedto",{"_index":735,"title":{"classes/ParResponseDto.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{}}}],["parse",{"_index":1113,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"injectables/PresentationsService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["parseaccesstokenrequest",{"_index":861,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parseas",{"_index":1114,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["parsechallengerequest",{"_index":780,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest(body",{"_index":796,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["parsed",{"_index":1104,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/PresentationsService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["parsedaccesstokenauthorizationcoderequestgrant",{"_index":820,"title":{"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenpreauthorizedcoderequestgrant",{"_index":822,"title":{"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest",{"_index":860,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.accesstokenrequest",{"_index":876,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.dpop?.jwt",{"_index":880,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant",{"_index":875,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.granttype",{"_index":872,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.preauthorizedcode",{"_index":882,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.txcode",{"_index":884,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedcredentialrequest",{"_index":2470,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.credentialconfigurationid",{"_index":2489,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.proofs.jwt",{"_index":2492,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.proofs?.jwt?.length",{"_index":2491,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest?.proofs?.jwt",{"_index":2473,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parseloglevel",{"_index":2312,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["parseloglevel(level",{"_index":2324,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["parseresponse",{"_index":2754,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseresponse(res",{"_index":2772,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["part",{"_index":500,"title":{},"body":{"interfaces/Auth.html":{},"injectables/PresentationsService.html":{},"license.html":{}}}],["partial",{"_index":1706,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["particular",{"_index":4064,"title":{},"body":{"license.html":{}}}],["parties",{"_index":76,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["party",{"_index":185,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["pass",{"_index":2143,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["passed",{"_index":1065,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vciService.html":{}}}],["passport",{"_index":2233,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjwtsecret",{"_index":2234,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":600,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":2230,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":2218,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":1641,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["patch",{"_index":1007,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"index.html":{}}}],["patent",{"_index":3965,"title":{},"body":{"license.html":{}}}],["path",{"_index":219,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["path[name",{"_index":1928,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["path_",{"_index":1715,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["path_param_re",{"_index":1905,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["pathserializer",{"_index":1904,"title":{"interfaces/PathSerializer.html":{}},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["pathurl",{"_index":1979,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["payload",{"_index":584,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{}}}],["payload.cnf",{"_index":2817,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["payload.iss",{"_index":2950,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.iss}/.well",{"_index":2964,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.sub",{"_index":1839,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["payload?.exp",{"_index":1563,"title":{},"body":{"injectables/CryptoService.html":{}}}],["payloads",{"_index":2938,"title":{},"body":{"injectables/ResolverService.html":{}}}],["pem",{"_index":23,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["percent",{"_index":1042,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"license.html":{}}}],["perform",{"_index":1863,"title":{},"body":{"controllers/HealthController.html":{},"license.html":{}}}],["periodically",{"_index":162,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["permission",{"_index":4041,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":3893,"title":{},"body":{"license.html":{}}}],["perpetual",{"_index":3954,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":4010,"title":{},"body":{"license.html":{}}}],["pg",{"_index":3698,"title":{},"body":{"dependencies.html":{}}}],["pick",{"_index":1131,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["pid",{"_index":2140,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentedData.html":{}}}],["pid,hostname",{"_index":464,"title":{},"body":{"modules/AppModule.html":{}}}],["pino",{"_index":416,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{}}}],["pinohttp",{"_index":448,"title":{},"body":{"modules/AppModule.html":{}}}],["pinologger",{"_index":3072,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["pipedelimited",{"_index":1909,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["pipeline",{"_index":3598,"title":{},"body":{"changelog.html":{}}}],["pkcecodechallengemethod",{"_index":811,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["pkcecodechallengemethod.s256",{"_index":846,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["pkcs#8",{"_index":1514,"title":{},"body":{"injectables/CryptoService.html":{}}}],["pkeyopt",{"_index":1518,"title":{},"body":{"injectables/CryptoService.html":{}}}],["placeholders",{"_index":2451,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["places",{"_index":4013,"title":{},"body":{"license.html":{}}}],["please",{"_index":1093,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["pluggable",{"_index":3789,"title":{},"body":{"index.html":{}}}],["plumbing",{"_index":3770,"title":{},"body":{"index.html":{}}}],["png",{"_index":2134,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["pnpm",{"_index":3658,"title":{},"body":{"changelog.html":{}}}],["populate",{"_index":1028,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["port",{"_index":1637,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["possession",{"_index":3426,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["possibility",{"_index":4095,"title":{},"body":{"license.html":{}}}],["post",{"_index":528,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"controllers/SessionController.html":{},"index.html":{}}}],["post('challenge",{"_index":709,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('credential",{"_index":2403,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('credential')@sessionlogger('state",{"_index":2389,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification",{"_index":2406,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification')@sessionlogger('notification_id",{"_index":2393,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('oauth2/token",{"_index":546,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('offer",{"_index":2142,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["post('par",{"_index":741,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('request",{"_index":2720,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["post('response",{"_index":2559,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["post('response')@sessionlogger('state",{"_index":2548,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["post('revoke",{"_index":3048,"title":{},"body":{"controllers/SessionController.html":{}}}],["post('token",{"_index":723,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["postgres",{"_index":1635,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres').default('sqlite",{"_index":1619,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["power",{"_index":3877,"title":{},"body":{"license.html":{}}}],["pre",{"_index":646,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["preauthorizedcode",{"_index":823,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["preauthorizedcodegrantidentifier",{"_index":812,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["preferred",{"_index":1257,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"license.html":{}}}],["prefix",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"interfaces/Fields.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"interfaces/Params.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["preheader",{"_index":3314,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["prepare",{"_index":3462,"title":{},"body":{"injectables/VaultKeyService.html":{},"license.html":{}}}],["preparepresentation",{"_index":3720,"title":{},"body":{"miscellaneous/functions.html":{}}}],["preparepresentation(kb",{"_index":3734,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prepayload",{"_index":3313,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["presentation",{"_index":628,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["presentationconfig",{"_index":929,"title":{"entities/PresentationConfig.html":{}},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["presentationconfig.webhook",{"_index":2655,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationconfig?.presentation.webhook",{"_index":931,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["presentationduringissuance",{"_index":649,"title":{"classes/PresentationDuringIssuance.html":{}},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/VCT.html":{}}}],["presentationduringissuanceconfig",{"_index":640,"title":{"classes/PresentationDuringIssuanceConfig.html":{}},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["presentationmanagementcontroller",{"_index":2697,"title":{"controllers/PresentationManagementController.html":{}},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentationrequest",{"_index":2705,"title":{"classes/PresentationRequest.html":{}},"body":{"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["presentationrequestoptions",{"_index":2580,"title":{"interfaces/PresentationRequestOptions.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/PresentationRequestOptions.html":{}}}],["presentations",{"_index":102,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["presentations.controller",{"_index":2742,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["presentations.service",{"_index":2712,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentations/dto/auth",{"_index":2586,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentations/presentations.module",{"_index":2568,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["presentations/presentations.service",{"_index":2585,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationsmodule",{"_index":2565,"title":{"modules/PresentationsModule.html":{}},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["presentationsservice",{"_index":52,"title":{"injectables/PresentationsService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"overview.html":{}}}],["presented",{"_index":664,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["presented.credentials[0].values.address.locality",{"_index":2852,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["presenteddata",{"_index":2832,"title":{"interfaces/PresentedData.html":{}},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["pretty",{"_index":439,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"dependencies.html":{}}}],["primary",{"_index":972,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/StatusMapping.html":{}}}],["primarycolumn",{"_index":3035,"title":{},"body":{"entities/Session.html":{}}}],["primarycolumn('uuid",{"_index":3019,"title":{},"body":{"entities/Session.html":{}}}],["primarygeneratedcolumn",{"_index":2046,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":2041,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["printed",{"_index":4125,"title":{},"body":{"license.html":{}}}],["privacy",{"_index":3791,"title":{},"body":{"index.html":{}}}],["private",{"_index":86,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{}}}],["private_key",{"_index":3138,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["privateencryptionkey",{"_index":1663,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privateenncryptionpath",{"_index":1664,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privatekey",{"_index":1411,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/FileSystemKeyService.html":{},"entities/KeyEntity.html":{}}}],["privatekey.alg",{"_index":1805,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekey.kid",{"_index":1804,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekeyinstance",{"_index":1818,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekeyjwk",{"_index":1406,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["privatekeypath",{"_index":1758,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatethumbprint",{"_index":1587,"title":{},"body":{"injectables/CryptoService.html":{}}}],["proceed",{"_index":3081,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["process",{"_index":638,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"entities/Session.html":{}}}],["process.env.node_env",{"_index":431,"title":{},"body":{"modules/AppModule.html":{}}}],["process_presentation_response",{"_index":2667,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processes",{"_index":2583,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processing",{"_index":1059,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["processresponse",{"_index":2840,"title":{"interfaces/ProcessResponse.html":{}},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["product",{"_index":4045,"title":{},"body":{"license.html":{}}}],["production",{"_index":432,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["progress",{"_index":3067,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["prominent",{"_index":4002,"title":{},"body":{"license.html":{}}}],["promise",{"_index":190,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["promise.all(att",{"_index":2831,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["promise.resolve((input",{"_index":3436,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["promise.resolve(keys.publickey",{"_index":1817,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["promise.resolve(tenantid",{"_index":3450,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["promises",{"_index":180,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["proof",{"_index":3425,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["proofcount",{"_index":2490,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["proofverified",{"_index":2506,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["proper",{"_index":958,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["properties",{"_index":13,"title":{"properties.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"entities/KeyEntity.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"properties.html":{}}}],["proprietary",{"_index":3754,"title":{},"body":{"index.html":{}}}],["protected",{"_index":2124,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["protocol",{"_index":2475,"title":{},"body":{"injectables/Oid4vciService.html":{},"index.html":{}}}],["protocols",{"_index":3743,"title":{},"body":{"index.html":{}}}],["protocol}//${req.host}${req.url",{"_index":2478,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["provide",{"_index":1089,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"modules/KeyModule.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["provided",{"_index":341,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"license.html":{}}}],["provider",{"_index":85,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{}}}],["providers",{"_index":364,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["provides",{"_index":2895,"title":{},"body":{"modules/RegistrarModule.html":{},"license.html":{}}}],["providing",{"_index":1861,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["prs",{"_index":3840,"title":{},"body":{"index.html":{}}}],["pubkey",{"_index":1482,"title":{},"body":{"injectables/CryptoService.html":{}}}],["public",{"_index":21,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["public()@post('oauth2/token')@apibody({type",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{}}}],["public.decorator",{"_index":537,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["public_url",{"_index":2184,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["public_url=https://example.com",{"_index":3810,"title":{},"body":{"index.html":{}}}],["publiccryptokey",{"_index":1559,"title":{},"body":{"injectables/CryptoService.html":{}}}],["publicencryptionkey",{"_index":1665,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["publicencryptionpath",{"_index":1666,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["publicjwk",{"_index":893,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["publickey",{"_index":235,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/FileSystemKeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["publickey.alg",{"_index":1807,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publickey.kid",{"_index":1803,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publickeyjwk",{"_index":1410,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["publickeypath",{"_index":1759,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publicly",{"_index":3962,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":252,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["purposes",{"_index":3874,"title":{},"body":{"license.html":{}}}],["pushed",{"_index":719,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["pushed_authorization_request_endpoint",{"_index":843,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["put",{"_index":1008,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["pwd)/config:/app/config",{"_index":3814,"title":{},"body":{"index.html":{}}}],["qr",{"_index":2138,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["qrcode",{"_index":2131,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["qrcode.tobuffer(values.uri",{"_index":2150,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["qrcodebuffer",{"_index":2149,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["queries",{"_index":715,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["queries.request_uri",{"_index":851,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["query",{"_index":206,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["query_",{"_index":1716,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["querydeeppartialentity",{"_index":3218,"title":{},"body":{"injectables/SessionService.html":{}}}],["queryparams",{"_index":1936,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["queryparams[name",{"_index":1938,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["queryserializer",{"_index":1016,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["queryserializer(query",{"_index":1981,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["queryserializeroptions",{"_index":1017,"title":{"interfaces/QuerySerializerOptions.html":{}},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["querystring",{"_index":2659,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["quick",{"_index":3796,"title":{},"body":{"index.html":{}}}],["quickstart",{"_index":3823,"title":{},"body":{"index.html":{}}}],["r",{"_index":2966,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["r.data",{"_index":2967,"title":{},"body":{"injectables/ResolverService.html":{}}}],["r.length",{"_index":3488,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["r.slice(1",{"_index":3492,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["r[0",{"_index":3490,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rand",{"_index":3806,"title":{},"body":{"index.html":{}}}],["random",{"_index":1574,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["randombytes",{"_index":1459,"title":{},"body":{"injectables/CryptoService.html":{}}}],["randombytes(bytes",{"_index":1572,"title":{},"body":{"injectables/CryptoService.html":{}}}],["randomness",{"_index":3296,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["randomuuid",{"_index":727,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["ratelimit",{"_index":2242,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["raw",{"_index":1950,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/VaultKeyService.html":{}}}],["rawsignature",{"_index":3498,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["re",{"_index":903,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["reach",{"_index":935,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["reachable",{"_index":2969,"title":{},"body":{"injectables/ResolverService.html":{}}}],["react",{"_index":983,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["readable",{"_index":4011,"title":{},"body":{"license.html":{}}}],["readfilesync",{"_index":55,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["readfilesync(filepath",{"_index":296,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["readfilesync(join(folder",{"_index":1812,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["readfilesync(this.publicencryptionpath",{"_index":1700,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["readonly",{"_index":738,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{}}}],["readonlyarray",{"_index":1125,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Fields.html":{},"interfaces/Params.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["real",{"_index":1575,"title":{},"body":{"injectables/CryptoService.html":{}}}],["reason",{"_index":4114,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":4046,"title":{},"body":{"license.html":{}}}],["receive",{"_index":2550,"title":{},"body":{"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"entities/Session.html":{}}}],["received",{"_index":3537,"title":{},"body":{"injectables/WebhookService.html":{},"license.html":{}}}],["recent",{"_index":3829,"title":{},"body":{"index.html":{}}}],["recipients",{"_index":3999,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":4124,"title":{},"body":{"license.html":{}}}],["recommended",{"_index":3828,"title":{},"body":{"index.html":{}}}],["record",{"_index":1032,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{},"injectables/WebhookService.html":{}}}],["record)[name",{"_index":1742,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["recursive",{"_index":988,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["redacted",{"_index":3142,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["redirect",{"_index":652,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["redirect_uri",{"_index":760,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["redirected",{"_index":659,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["redistributing",{"_index":4068,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":3993,"title":{},"body":{"license.html":{}}}],["reference",{"_index":1189,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/FileSystemKeyService.html":{},"index.html":{}}}],["reflect",{"_index":3703,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2194,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["refresh",{"_index":145,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["refresh_token",{"_index":3139,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["refreshaccesstoken",{"_index":165,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["refreshes",{"_index":158,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["regarding",{"_index":4039,"title":{},"body":{"license.html":{}}}],["regcert",{"_index":2597,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["register",{"_index":3231,"title":{},"body":{"injectables/SessionService.html":{}}}],["registrar",{"_index":59,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{}}}],["registrar.json",{"_index":286,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrar.service",{"_index":2896,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar/generated",{"_index":2931,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrar/registrar.module",{"_index":393,"title":{},"body":{"modules/AppModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["registrar/registrar.service",{"_index":2584,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["registrar_url",{"_index":2900,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar_validation_schema",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"modules/RegistrarModule.html":{}}}],["registrarconfig",{"_index":58,"title":{"classes/RegistrarConfig.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{}}}],["registrarmodule",{"_index":374,"title":{"modules/RegistrarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["registrarservice",{"_index":69,"title":{"injectables/RegistrarService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"overview.html":{}}}],["registration",{"_index":78,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["registrationcert",{"_index":2600,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{}}}],["registrationcertid",{"_index":2782,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["registrationcertificatecontrollerall",{"_index":42,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrollerregister",{"_index":43,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrationcertificatecreation",{"_index":2929,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrationcertificaterequest",{"_index":49,"title":{"classes/RegistrationCertificateRequest.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["related",{"_index":2283,"title":{},"body":{"modules/KeyModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["relations",{"_index":2096,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["release",{"_index":3597,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["relevant",{"_index":2409,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["reload",{"_index":2328,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["reloadconfiguration",{"_index":2313,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["rely",{"_index":3753,"title":{},"body":{"index.html":{}}}],["relying",{"_index":75,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerfindall",{"_index":44,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerregister",{"_index":45,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["remain",{"_index":3923,"title":{},"body":{"license.html":{}}}],["remove",{"_index":2828,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"changelog.html":{}}}],["replace",{"_index":1553,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{}}}],["replace('https",{"_index":234,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["replace(/=/g",{"_index":3505,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\+/g",{"_index":3502,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\//g",{"_index":3503,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\r?\\n|\\r/g",{"_index":1556,"title":{},"body":{"injectables/CryptoService.html":{}}}],["replaced",{"_index":4120,"title":{},"body":{"license.html":{}}}],["replacevalue",{"_index":1931,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["repository",{"_index":1217,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"properties.html":{}}}],["represent",{"_index":3920,"title":{},"body":{"license.html":{}}}],["representatives",{"_index":3938,"title":{},"body":{"license.html":{}}}],["representing",{"_index":630,"title":{},"body":{"interfaces/AuthResponse.html":{},"interfaces/IssuerMetadata.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["represents",{"_index":1247,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/RegistrarConfig.html":{},"entities/Session.html":{}}}],["reproduce",{"_index":3961,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":4050,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":3858,"title":{},"body":{"license.html":{}}}],["repsonse",{"_index":8,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["req",{"_index":246,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["req+jwt",{"_index":2638,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["req.body",{"_index":269,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["req.body?.session_id",{"_index":470,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['content",{"_index":485,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['user",{"_index":483,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['x",{"_index":467,"title":{},"body":{"modules/AppModule.html":{}}}],["req.id",{"_index":265,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["req.method",{"_index":478,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["req.params?.session",{"_index":469,"title":{},"body":{"modules/AppModule.html":{}}}],["req.params?.tenantid",{"_index":471,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url",{"_index":479,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url?.includes('/oid4vp",{"_index":475,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url?.includes('/vci",{"_index":473,"title":{},"body":{"modules/AppModule.html":{}}}],["reqinterceptor",{"_index":2012,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["request",{"_index":11,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["request.'})@isenum(responsetype",{"_index":2378,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.body?.[sessionidparam",{"_index":3102,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.dto",{"_index":51,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["request.dto.ts",{"_index":754,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"miscellaneous/enumerations.html":{}}}],["request.dto.ts:12",{"_index":766,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:15",{"_index":771,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:17",{"_index":2930,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:18",{"_index":773,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:20",{"_index":2379,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:21",{"_index":775,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:24",{"_index":767,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:26",{"_index":2375,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/PresentationRequest.html":{}}}],["request.dto.ts:27",{"_index":768,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:30",{"_index":769,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:33",{"_index":772,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/OfferRequestDto.html":{},"classes/PresentationRequest.html":{}}}],["request.dto.ts:36",{"_index":765,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:37",{"_index":2381,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:41",{"_index":2385,"title":{},"body":{"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["request.dto.ts:42",{"_index":2384,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:6",{"_index":770,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.dto.ts:9",{"_index":774,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.header",{"_index":2643,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.headers.get('x",{"_index":2861,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["request.headers['content",{"_index":3111,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers['user",{"_index":3110,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers['x",{"_index":3103,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.json",{"_index":2847,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["request.method",{"_index":2844,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["request.params?.[sessionidparam",{"_index":3101,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params?.tenantid",{"_index":3105,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.payload",{"_index":2646,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.query?.[sessionidparam",{"_index":3104,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.url",{"_index":3106,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.user",{"_index":3389,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["request/response",{"_index":2332,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["request_error",{"_index":3128,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_start",{"_index":3109,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_success",{"_index":3119,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_uri",{"_index":742,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["requested",{"_index":257,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["requestfn",{"_index":1014,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["requestid",{"_index":253,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{}}}],["requesting",{"_index":3775,"title":{},"body":{"index.html":{}}}],["requestinit['headers",{"_index":1031,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["requestoptions",{"_index":1122,"title":{"interfaces/RequestOptions.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["requestresult",{"_index":1126,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["requests",{"_index":91,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{}}}],["requestvalidator",{"_index":1056,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["require_pushed_authorization_requests",{"_index":842,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["required",{"_index":334,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"license.html":{}}}],["requiredclaimkeys",{"_index":2826,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requiredfields",{"_index":2773,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requires",{"_index":2370,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["res",{"_index":270,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["res.data",{"_index":226,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['crt",{"_index":243,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['id",{"_index":244,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['jwt",{"_index":281,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data.data.keys['1'].public_key",{"_index":3451,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["res.data.id",{"_index":3448,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["res.data?.filter",{"_index":261,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.error",{"_index":222,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.payload",{"_index":1702,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["res.redirect(`${values.redirect_uri}?code=${code",{"_index":858,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send",{"_index":946,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send(qrcodebuffer",{"_index":2152,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.send(values",{"_index":2153,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.setheader('content",{"_index":2151,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.state",{"_index":2663,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["res.status(400).send(response",{"_index":933,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.statuscode",{"_index":487,"title":{},"body":{"modules/AppModule.html":{}}}],["reserved",{"_index":1040,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["reset",{"_index":378,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["resinterceptor",{"_index":2013,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["resolve",{"_index":2943,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolved",{"_index":1019,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["resolvepublickey",{"_index":2939,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolvepublickey(payload",{"_index":2941,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolver.service",{"_index":2936,"title":{},"body":{"modules/ResolverModule.html":{}}}],["resolver/resolver.module",{"_index":2743,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["resolver/resolver.service",{"_index":2790,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolvermodule",{"_index":2739,"title":{"modules/ResolverModule.html":{}},"body":{"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules.html":{},"overview.html":{}}}],["resolverservice",{"_index":2757,"title":{"injectables/ResolverService.html":{}},"body":{"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"overview.html":{}}}],["resolves",{"_index":1224,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/PresentationsService.html":{}}}],["resolving",{"_index":2761,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["resource",{"_index":761,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["resourceserver",{"_index":2414,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["response",{"_index":195,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["response('not",{"_index":2864,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response('unauthorized",{"_index":2862,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response(null",{"_index":2863,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response.data!.find((item",{"_index":208,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.data!['id",{"_index":198,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.dto",{"_index":543,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"controllers/WellKnownController.html":{}}}],["response.dto.ts",{"_index":619,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:11",{"_index":696,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{}}}],["response.dto.ts:13",{"_index":2362,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:15",{"_index":1654,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:17",{"_index":2367,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:19",{"_index":1657,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:2",{"_index":2976,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:21",{"_index":2364,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:23",{"_index":1659,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:25",{"_index":2365,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:29",{"_index":2368,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:3",{"_index":2978,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:33",{"_index":2189,"title":{},"body":{"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:37",{"_index":2361,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:4",{"_index":2977,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:5",{"_index":2366,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{}}}],["response.dto.ts:9",{"_index":2371,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["response.error",{"_index":196,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.json(res",{"_index":2853,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response.jwks.keys.find((key",{"_index":2970,"title":{},"body":{"injectables/ResolverService.html":{}}}],["response.statuscode",{"_index":3120,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["response_mode",{"_index":2612,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_processing",{"_index":2666,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_type",{"_index":762,"title":{},"body":{"classes/AuthorizeQueries.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["response_types_supported",{"_index":2628,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_uri",{"_index":2610,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responses",{"_index":3069,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsesize",{"_index":3121,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsestatus",{"_index":3540,"title":{},"body":{"injectables/WebhookService.html":{}}}],["responsestyle",{"_index":1074,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["responsetransformer",{"_index":1064,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["responsetype",{"_index":2129,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["responsetype.qrcode",{"_index":2139,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsetype.uri",{"_index":2141,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsevalidator",{"_index":1067,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["responsibility",{"_index":4106,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":70,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"license.html":{}}}],["result",{"_index":1225,"title":{},"body":{"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"license.html":{}}}],["result.payload",{"_index":2827,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resulting",{"_index":3899,"title":{},"body":{"license.html":{}}}],["results",{"_index":302,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retain",{"_index":4007,"title":{},"body":{"license.html":{}}}],["retrieve",{"_index":745,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/PresentationsService.html":{}}}],["retrieved",{"_index":2859,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["retrieves",{"_index":1229,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{}}}],["return",{"_index":109,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{}}}],["returned",{"_index":229,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["returning",{"_index":1018,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["returns",{"_index":135,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["returntype",{"_index":1092,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["reuse",{"_index":2680,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["revisions",{"_index":3917,"title":{},"body":{"license.html":{}}}],["revokeall",{"_index":3041,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(@body",{"_index":3060,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(value",{"_index":3046,"title":{},"body":{"controllers/SessionController.html":{}}}],["revoked",{"_index":17,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{}}}],["right",{"_index":3449,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rights",{"_index":4102,"title":{},"body":{"license.html":{}}}],["risk",{"_index":3756,"title":{},"body":{"index.html":{}}}],["risks",{"_index":4069,"title":{},"body":{"license.html":{}}}],["rlength",{"_index":3478,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["root",{"_index":551,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{},"index.html":{}}}],["rootpath",{"_index":492,"title":{},"body":{"modules/AppModule.html":{}}}],["royalty",{"_index":3959,"title":{},"body":{"license.html":{}}}],["rp",{"_index":220,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["rp_name",{"_index":422,"title":{},"body":{"modules/AppModule.html":{}}}],["rpadded",{"_index":3486,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rs256",{"_index":2253,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["rsa",{"_index":2235,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["run",{"_index":1502,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/SessionService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["running",{"_index":353,"title":{},"body":{"controllers/AppController.html":{}}}],["runs",{"_index":3788,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2789,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":3093,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["s",{"_index":3472,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s's",{"_index":3482,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s.length",{"_index":3494,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s.slice(1",{"_index":3496,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s[0",{"_index":3495,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["safely",{"_index":1055,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["saltgenerator",{"_index":1372,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["same",{"_index":901,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"license.html":{}}}],["san",{"_index":1533,"title":{},"body":{"injectables/CryptoService.html":{}}}],["san.ext",{"_index":1495,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sanext",{"_index":1494,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sanitize",{"_index":3088,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody",{"_index":3071,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody(body",{"_index":3084,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized",{"_index":3089,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized[field",{"_index":3141,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizes",{"_index":3086,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["satisfies",{"_index":2456,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["save",{"_index":299,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/RegistrarService.html":{}}}],["saveconfig",{"_index":2909,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["saveconfig(config",{"_index":300,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["scalable",{"_index":3785,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":489,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":3214,"title":{},"body":{"injectables/SessionService.html":{}}}],["schema",{"_index":1166,"title":{},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"controllers/PresentationManagementController.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{}}}],["schema(@param('id",{"_index":1318,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema(id",{"_index":1307,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema.org/draft/2020",{"_index":2974,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["schema_uri",{"_index":2694,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["schema_uri#integrity",{"_index":2695,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["schemaresponse",{"_index":1196,"title":{"classes/SchemaResponse.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/SchemaResponse.html":{}}}],["scheme",{"_index":498,"title":{},"body":{"interfaces/Auth.html":{}}}],["scope",{"_index":763,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["script",{"_index":1499,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sd",{"_index":1185,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{},"index.html":{}}}],["sdjwt",{"_index":1365,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwt.issue",{"_index":1374,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwtinstance",{"_index":2750,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["sdjwtvcinstance",{"_index":1348,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["search",{"_index":1937,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.join",{"_index":1945,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.push(serializedarray",{"_index":1940,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.push(serializedobject",{"_index":1942,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.push(serializedprimitive",{"_index":1944,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.startswith",{"_index":1982,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.substring(1",{"_index":1983,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["seconds",{"_index":593,"title":{},"body":{"controllers/AuthController.html":{},"classes/ParResponseDto.html":{}}}],["secret",{"_index":575,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"index.html":{}}}],["secretkey",{"_index":1832,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["secretorkey",{"_index":2256,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkeyprovider",{"_index":2224,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":3968,"title":{},"body":{"license.html":{}}}],["sections",{"_index":3836,"title":{},"body":{"index.html":{},"license.html":{}}}],["secure",{"_index":3784,"title":{},"body":{"index.html":{}}}],["securely",{"_index":2858,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["security",{"_index":1021,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["see",{"_index":1030,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"index.html":{},"license.html":{}}}],["select",{"_index":1111,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["selected",{"_index":643,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["selectivly",{"_index":2836,"title":{},"body":{"interfaces/PresentedData.html":{}}}],["self",{"_index":1521,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sell",{"_index":3969,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":3645,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":339,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["sendauthorizationcode",{"_index":781,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationcode(res",{"_index":799,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sendauthorizationresponse",{"_index":782,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse(queries",{"_index":801,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sending",{"_index":939,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WebhookService.html":{}}}],["sends",{"_index":979,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook",{"_index":3516,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhook(session",{"_index":3519,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhooknotification",{"_index":3517,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhooknotification(session",{"_index":3521,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sensitive",{"_index":3087,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields",{"_index":3137,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields.foreach((field",{"_index":3140,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sent",{"_index":315,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"license.html":{}}}],["separable",{"_index":3924,"title":{},"body":{"license.html":{}}}],["separate",{"_index":4036,"title":{},"body":{"license.html":{}}}],["separator",{"_index":2992,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorarrayexplode",{"_index":2983,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorarrayexplode(style",{"_index":2993,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorarraynoexplode",{"_index":2984,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorobjectexplode",{"_index":2986,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorobjectexplode(style",{"_index":3006,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["sequence",{"_index":3474,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["sequence.slice(2",{"_index":3480,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["sequence[1",{"_index":3479,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["serializearrayparam",{"_index":1899,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializedarray",{"_index":1939,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["serializedobject",{"_index":1941,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["serializedprimitive",{"_index":1943,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["serializeformdatapair",{"_index":2870,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializeformdatapair(data",{"_index":2877,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializeobjectparam",{"_index":1900,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeoptions",{"_index":2979,"title":{"interfaces/SerializeOptions.html":{}},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeprimitiveoptions",{"_index":2981,"title":{"interfaces/SerializePrimitiveOptions.html":{}},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeprimitiveparam",{"_index":1901,"title":{"interfaces/SerializePrimitiveParam.html":{}},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeroptions",{"_index":2868,"title":{"interfaces/SerializerOptions.html":{}},"body":{"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializers",{"_index":477,"title":{},"body":{"modules/AppModule.html":{}}}],["serializeurlsearchparamspair",{"_index":2872,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializeurlsearchparamspair(data",{"_index":2883,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializing",{"_index":1023,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["server",{"_index":119,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"controllers/WellKnownController.html":{}}}],["server's",{"_index":2363,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["servers",{"_index":1260,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["servestaticmodule",{"_index":394,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":490,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":132,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"index.html":{},"license.html":{}}}],["service.db",{"_index":1645,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["services",{"_index":336,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["session",{"_index":468,"title":{"entities/Session.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/WebhookService.html":{}}}],["session.auth_queries",{"_index":855,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.authorization_code",{"_index":887,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.controller",{"_index":3203,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.credentialpayload",{"_index":3539,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.credentialpayload!.values",{"_index":3536,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.credentialpayload?.values?.[credentialconfigurationid",{"_index":1362,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["session.credentials",{"_index":915,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.id",{"_index":894,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{}}}],["session.issuanceid",{"_index":924,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.notifications",{"_index":2510,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications.findindex",{"_index":2521,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications.push",{"_index":2508,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications[index",{"_index":2535,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications[index].event",{"_index":2524,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifywebhook",{"_index":2533,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/WebhookService.html":{}}}],["session.service",{"_index":3050,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["session.tenantid",{"_index":1361,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{}}}],["session.vp_nonce",{"_index":2671,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook",{"_index":2669,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook!.auth",{"_index":3524,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.webhook!.auth.config.value",{"_index":3527,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.webhook!.auth.type",{"_index":3525,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.webhook!.auth?.type",{"_index":3532,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.webhook!.url",{"_index":3530,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session/entities/session.entity",{"_index":1352,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{}}}],["session/session.module",{"_index":404,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["session/session.service",{"_index":734,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WebhookService.html":{}}}],["session_id",{"_index":2412,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_logger_key",{"_index":3094,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["session_tidy_up_interval",{"_index":3204,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session_ttl",{"_index":3207,"title":{},"body":{"modules/SessionModule.html":{}}}],["session_validation_schema",{"_index":403,"title":{},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{}}}],["sessioncontroller",{"_index":3037,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["sessionid",{"_index":466,"title":{},"body":{"modules/AppModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["sessionidparam",{"_index":3097,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sessionlogcontext",{"_index":2440,"title":{"interfaces/SessionLogContext.html":{}},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{}}}],["sessionlogger",{"_index":2398,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{}}}],["sessionlogger('notification_id",{"_index":2407,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger('session",{"_index":2555,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["sessionlogger('state",{"_index":2404,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["sessionloggerinterceptor",{"_index":2162,"title":{"injectables/SessionLoggerInterceptor.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"overview.html":{}}}],["sessionloggerservice",{"_index":2163,"title":{"injectables/SessionLoggerService.html":{}},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"overview.html":{}}}],["sessionmodule",{"_index":375,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/SessionModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionrepository",{"_index":3216,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessions",{"_index":3036,"title":{},"body":{"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["sessionservice",{"_index":733,"title":{"injectables/SessionService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/WebhookService.html":{},"overview.html":{}}}],["set",{"_index":106,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/EC_Public.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"changelog.html":{}}}],["set+json",{"_index":3571,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["set+json')@get('jwks.json",{"_index":3556,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["setauthcode",{"_index":783,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["setauthcode(issuer_state",{"_index":803,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["setauthparams",{"_index":1962,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["setconfig",{"_index":1009,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["setentry",{"_index":3354,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setentry(id",{"_index":3337,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["setexpirationtime(expiresin",{"_index":1840,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setglobalconfig",{"_index":2180,"title":{},"body":{"modules/IssuerModule.html":{}}}],["setinterval(callback",{"_index":3247,"title":{},"body":{"injectables/SessionService.html":{}}}],["setissuedat",{"_index":1836,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setissuer(issuer",{"_index":1837,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader",{"_index":1834,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader(header",{"_index":1819,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["setsubject(options.subject",{"_index":1838,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["settimeout",{"_index":172,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["setup",{"_index":3822,"title":{},"body":{"index.html":{}}}],["setupclient",{"_index":1148,"title":{},"body":{"injectables/ClientService.html":{}}}],["setupclient(id",{"_index":985,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["sha",{"_index":1370,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["shall",{"_index":3861,"title":{},"body":{"license.html":{}}}],["shape",{"_index":1054,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["shares",{"_index":3888,"title":{},"body":{"license.html":{}}}],["shell",{"_index":1503,"title":{},"body":{"injectables/CryptoService.html":{}}}],["shouldenableautologging",{"_index":2314,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["shouldlog",{"_index":3156,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["shuffel",{"_index":3301,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["shuffled",{"_index":3295,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["sign",{"_index":1537,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/VaultKeyService.html":{}}}],["sign(privatekeyinstance",{"_index":1820,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["sign(value",{"_index":3420,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["signalg",{"_index":1367,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["signature",{"_index":1412,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"injectables/VaultKeyService.html":{}}}],["signature).catch((err",{"_index":2814,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["signed",{"_index":1522,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signedjwt",{"_index":2644,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwt.length",{"_index":2650,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwtlength",{"_index":2649,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signer",{"_index":891,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/VaultKeyService.html":{}}}],["signer(tenantid",{"_index":1776,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signer.alg",{"_index":1581,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signer.method",{"_index":1577,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signer.publicjwk",{"_index":1580,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signerjwk",{"_index":1582,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signing",{"_index":1383,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["signingcert",{"_index":1550,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signinginput",{"_index":3468,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["signjwt",{"_index":1428,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signjwt(header",{"_index":1449,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signjwt(payload",{"_index":1778,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signjwtcallback",{"_index":1443,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signs",{"_index":3422,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["simple",{"_index":1913,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["simplicity",{"_index":2829,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["singleline",{"_index":457,"title":{},"body":{"modules/AppModule.html":{}}}],["size",{"_index":3298,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["skip",{"_index":3476,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["sleep",{"_index":3722,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sleep(ms",{"_index":3729,"title":{},"body":{"miscellaneous/functions.html":{}}}],["slot",{"_index":1707,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["software",{"_index":3897,"title":{},"body":{"license.html":{}}}],["sole",{"_index":4105,"title":{},"body":{"license.html":{}}}],["solely",{"_index":4065,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":3755,"title":{},"body":{"index.html":{}}}],["solves",{"_index":3759,"title":{},"body":{"index.html":{}}}],["someone",{"_index":278,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["sort",{"_index":3305,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"index.html":{},"license.html":{}}}],["sources",{"_index":3100,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["spacedelimited",{"_index":1908,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["spadded",{"_index":3487,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["special",{"_index":4081,"title":{},"body":{"license.html":{}}}],["specific",{"_index":642,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"index.html":{},"license.html":{}}}],["specification",{"_index":2006,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["specified",{"_index":1105,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["specifies",{"_index":663,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["split",{"_index":3668,"title":{},"body":{"changelog.html":{}}}],["sqlite",{"_index":1622,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["sqlite3",{"_index":3706,"title":{},"body":{"dependencies.html":{}}}],["src/.../main.ts",{"_index":3713,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../presentation",{"_index":3712,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../util.ts",{"_index":3716,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":380,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.controller.ts",{"_index":345,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.controller.ts:8",{"_index":348,"title":{},"body":{"controllers/AppController.html":{}}}],["src/auth/auth.controller.ts",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:60",{"_index":523,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":2190,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:12",{"_index":2198,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:7",{"_index":2195,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":599,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/client.service.ts",{"_index":948,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:16",{"_index":1150,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:23",{"_index":1154,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:35",{"_index":1152,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:45",{"_index":1153,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:61",{"_index":1157,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:74",{"_index":1151,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:82",{"_index":1156,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/dto/client",{"_index":1068,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["src/auth/dto/token",{"_index":3390,"title":{},"body":{"classes/TokenResponse.html":{}}}],["src/auth/jwt.service.ts",{"_index":1822,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:13",{"_index":2211,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:19",{"_index":2214,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:56",{"_index":2216,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:83",{"_index":2212,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:94",{"_index":2215,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":2217,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":2223,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:47",{"_index":2227,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:66",{"_index":2229,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:9",{"_index":2221,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/token.decorator.ts",{"_index":3385,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["src/crypto/crypto.module.ts",{"_index":1417,"title":{},"body":{"modules/CryptoModule.html":{}}}],["src/crypto/crypto.service.ts",{"_index":1420,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:144",{"_index":1436,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:157",{"_index":1452,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:164",{"_index":1450,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:172",{"_index":1454,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:191",{"_index":1433,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:229",{"_index":1442,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:266",{"_index":1437,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:280",{"_index":1440,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:32",{"_index":1431,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:36",{"_index":1457,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:39",{"_index":1446,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:47",{"_index":1448,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:61",{"_index":1445,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/encryption/encryption.service.ts",{"_index":1662,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:11",{"_index":1678,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:12",{"_index":1680,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:13",{"_index":1679,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:14",{"_index":1670,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:19",{"_index":1676,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:23",{"_index":1675,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:58",{"_index":1672,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:63",{"_index":1673,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/key/crypto/crypto",{"_index":1391,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["src/crypto/key/crypto/crypto.service.ts",{"_index":1597,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:10",{"_index":1601,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:17",{"_index":1603,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:21",{"_index":1607,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/entities/key.entity.ts",{"_index":2266,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/key.entity.ts:6",{"_index":2268,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/key.entity.ts:8",{"_index":2267,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/filesystem",{"_index":1756,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["src/crypto/key/key.module.ts",{"_index":2269,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.module.ts:36",{"_index":2271,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.service.ts",{"_index":2292,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:11",{"_index":2298,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:17",{"_index":2299,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:23",{"_index":2294,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:29",{"_index":2295,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:30",{"_index":2296,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:31",{"_index":2297,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:37",{"_index":2301,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/vault",{"_index":3398,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["src/database/database.module.ts",{"_index":1613,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/health/health.controller.ts",{"_index":1859,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:25",{"_index":1866,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1874,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/issuer/authorize/authorize.controller.ts",{"_index":699,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:36",{"_index":713,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:58",{"_index":721,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:82",{"_index":724,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:98",{"_index":710,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.service.ts",{"_index":777,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["src/issuer/authorize/authorize.service.ts:104",{"_index":806,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:210",{"_index":797,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:228",{"_index":789,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:306",{"_index":800,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:320",{"_index":804,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:37",{"_index":788,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:48",{"_index":794,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:55",{"_index":791,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:78",{"_index":802,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/dto/authorize",{"_index":753,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["src/issuer/authorize/dto/par",{"_index":2683,"title":{},"body":{"classes/ParResponseDto.html":{}}}],["src/issuer/credentials",{"_index":1304,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"classes/PresentationDuringIssuance.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{}}}],["src/issuer/credentials/credential",{"_index":1212,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["src/issuer/credentials/credentials.controller.ts",{"_index":1274,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:35",{"_index":1283,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:45",{"_index":1285,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:58",{"_index":1281,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.service.ts",{"_index":1320,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:127",{"_index":1339,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:153",{"_index":1337,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:17",{"_index":1328,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:33",{"_index":1342,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:46",{"_index":1335,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:62",{"_index":1332,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts",{"_index":1161,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:17",{"_index":1188,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:22",{"_index":1199,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:28",{"_index":1178,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:34",{"_index":1171,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:40",{"_index":1182,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:47",{"_index":1200,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:54",{"_index":1198,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:64",{"_index":1194,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/issuance/dto/authentication",{"_index":632,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts",{"_index":2068,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:11",{"_index":2073,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:16",{"_index":2070,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:7",{"_index":2074,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/entities/issuance",{"_index":2027,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["src/issuer/issuance/issuance.controller.ts",{"_index":2051,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:28",{"_index":2057,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:38",{"_index":2060,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:54",{"_index":2055,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.service.ts",{"_index":2076,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:11",{"_index":2081,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:111",{"_index":2084,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:23",{"_index":2086,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:36",{"_index":2088,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:52",{"_index":2091,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuer",{"_index":2111,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["src/issuer/issuer.module.ts",{"_index":2165,"title":{},"body":{"modules/IssuerModule.html":{}}}],["src/issuer/oid4vci/dto/notification",{"_index":2353,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["src/issuer/oid4vci/dto/offer",{"_index":2372,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts",{"_index":2386,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:28",{"_index":2390,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:42",{"_index":2394,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts",{"_index":2413,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:115",{"_index":2421,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:180",{"_index":2423,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:297",{"_index":2425,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:40",{"_index":2432,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:42",{"_index":2418,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:47",{"_index":2430,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:54",{"_index":2429,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:65",{"_index":2428,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/util.ts",{"_index":3732,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/issuer/status",{"_index":3260,"title":{},"body":{"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["src/main.ts",{"_index":3724,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/registrar/generated/client/types.ts",{"_index":1073,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["src/registrar/generated/client/utils.ts",{"_index":1877,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["src/registrar/generated/client/utils.ts:331",{"_index":1883,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:337",{"_index":1885,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:341",{"_index":1891,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:348",{"_index":1889,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:353",{"_index":1887,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:360",{"_index":1894,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:370",{"_index":1896,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/core/auth.ts",{"_index":497,"title":{},"body":{"interfaces/Auth.html":{}}}],["src/registrar/generated/core/bodyserializer.ts",{"_index":2867,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["src/registrar/generated/core/params.ts",{"_index":1703,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["src/registrar/generated/core/pathserializer.ts",{"_index":2980,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["src/registrar/generated/core/types.ts",{"_index":1001,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["src/registrar/registrar",{"_index":2885,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["src/registrar/registrar.module.ts",{"_index":2894,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["src/registrar/registrar.service.ts",{"_index":6,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:109",{"_index":2918,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:117",{"_index":2920,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:129",{"_index":2922,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:144",{"_index":2923,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:161",{"_index":2916,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:186",{"_index":2925,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:204",{"_index":2917,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:231",{"_index":2913,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:272",{"_index":2915,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:329",{"_index":2919,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:352",{"_index":2924,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:53",{"_index":2927,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:57",{"_index":2926,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:61",{"_index":2911,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:78",{"_index":2921,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/session/entities/session.entity.ts",{"_index":3010,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:104",{"_index":3027,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:41",{"_index":3020,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:44",{"_index":3021,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:49",{"_index":3018,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:54",{"_index":3014,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:59",{"_index":3026,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:64",{"_index":3012,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:69",{"_index":3030,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:74",{"_index":3015,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:79",{"_index":3025,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:84",{"_index":3016,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:89",{"_index":3032,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:94",{"_index":3023,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:99",{"_index":3022,"title":{},"body":{"entities/Session.html":{}}}],["src/session/session.controller.ts",{"_index":3038,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:23",{"_index":3042,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:32",{"_index":3045,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:42",{"_index":3049,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.module.ts",{"_index":3202,"title":{},"body":{"modules/SessionModule.html":{}}}],["src/session/session.service.ts",{"_index":3210,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:10",{"_index":3215,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:23",{"_index":3230,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:40",{"_index":3222,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:50",{"_index":3219,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:65",{"_index":3225,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:74",{"_index":3224,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:83",{"_index":3228,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:90",{"_index":3236,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/utils/logger/logger",{"_index":2303,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["src/utils/logger/session",{"_index":3062,"title":{},"body":{"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["src/utils/webhook/webhook.dto.ts",{"_index":305,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:13",{"_index":313,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:19",{"_index":317,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:36",{"_index":3511,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:43",{"_index":3510,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:54",{"_index":3514,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:62",{"_index":3513,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.service.ts",{"_index":3515,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:102",{"_index":3522,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:13",{"_index":3518,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:32",{"_index":3520,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/verifier/oid4vp/dto/authorization",{"_index":695,"title":{},"body":{"classes/AuthorizationResponse.html":{}}}],["src/verifier/oid4vp/dto/presentation",{"_index":2731,"title":{},"body":{"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"miscellaneous/enumerations.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts",{"_index":2539,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:34",{"_index":2546,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:53",{"_index":2549,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.module.ts",{"_index":2566,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts",{"_index":2569,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:19",{"_index":2573,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:218",{"_index":2581,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:267",{"_index":2582,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:40",{"_index":2575,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/presentations/dto/auth",{"_index":618,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["src/verifier/presentations/dto/vp",{"_index":2928,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["src/verifier/presentations/entities/presentation",{"_index":2685,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["src/verifier/presentations/presentations.controller.ts",{"_index":2698,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:111",{"_index":2702,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:121",{"_index":2710,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:137",{"_index":2704,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:79",{"_index":2708,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.module.ts",{"_index":2740,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["src/verifier/presentations/presentations.service.ts",{"_index":2746,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:109",{"_index":2781,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:122",{"_index":2787,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:145",{"_index":2786,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:160",{"_index":2783,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:177",{"_index":2775,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:22",{"_index":2759,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:40",{"_index":2771,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:54",{"_index":2770,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:67",{"_index":2778,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:78",{"_index":2764,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:88",{"_index":2768,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/resolver/dto/issuer",{"_index":2155,"title":{},"body":{"interfaces/IssuerMetadata.html":{}}}],["src/verifier/resolver/resolver.module.ts",{"_index":2935,"title":{},"body":{"modules/ResolverModule.html":{}}}],["src/verifier/resolver/resolver.service.ts",{"_index":2937,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:12",{"_index":2940,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:21",{"_index":2942,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/verifier.module.ts",{"_index":3508,"title":{},"body":{"modules/VerifierModule.html":{}}}],["src/well",{"_index":1244,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{}}}],["stable",{"_index":3827,"title":{},"body":{"index.html":{}}}],["stack",{"_index":3131,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{}}}],["stack—so",{"_index":3766,"title":{},"body":{"index.html":{}}}],["stage",{"_index":2486,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["standardized",{"_index":3742,"title":{},"body":{"index.html":{}}}],["start",{"_index":2578,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"index.html":{}}}],["started",{"_index":3186,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"injectables/SessionLoggerService.html":{}}}],["starting",{"_index":3113,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["starts",{"_index":144,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["startswith('http",{"_index":2187,"title":{},"body":{"modules/IssuerModule.html":{}}}],["starttime",{"_index":3114,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["state",{"_index":621,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"license.html":{}}}],["stated",{"_index":3967,"title":{},"body":{"license.html":{}}}],["statement",{"_index":4025,"title":{},"body":{"license.html":{}}}],["static",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationConfigHelper.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"changelog.html":{},"dependencies.html":{}}}],["stating",{"_index":4004,"title":{},"body":{"license.html":{}}}],["status",{"_index":553,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"dependencies.html":{},"index.html":{}}}],["status_list",{"_index":3336,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuscode",{"_index":486,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["statuslist",{"_index":3280,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslist(file.elements",{"_index":3311,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslist+jwt",{"_index":3315,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistcontroller",{"_index":3259,"title":{"controllers/StatusListController.html":{}},"body":{"controllers/StatusListController.html":{},"modules/StatusListModule.html":{}}}],["statuslistfetcher",{"_index":2751,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["statuslistfile",{"_index":3274,"title":{"interfaces/StatusListFile.html":{}},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistjwtheaderparameters",{"_index":3281,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistmodule",{"_index":2161,"title":{"modules/StatusListModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules.html":{},"overview.html":{}}}],["statuslistservice",{"_index":1326,"title":{"injectables/StatusListService.html":{}},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"overview.html":{}}}],["statusmapping",{"_index":3283,"title":{"entities/StatusMapping.html":{}},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{}}}],["statusmappingrepository",{"_index":3290,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statusupdatedto",{"_index":3047,"title":{"classes/StatusUpdateDto.html":{}},"body":{"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{}}}],["stdio",{"_index":1507,"title":{},"body":{"injectables/CryptoService.html":{}}}],["step",{"_index":746,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/CryptoService.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{}}}],["still",{"_index":214,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["stoppage",{"_index":4088,"title":{},"body":{"license.html":{}}}],["storage",{"_index":3790,"title":{},"body":{"index.html":{}}}],["store",{"_index":240,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{}}}],["store(tenantid",{"_index":1232,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["storeaccesscertificate",{"_index":1429,"title":{},"body":{"injectables/CryptoService.html":{}}}],["storeaccesscertificate(crt",{"_index":1451,"title":{},"body":{"injectables/CryptoService.html":{}}}],["storeconfig",{"_index":3355,"title":{},"body":{"injectables/StatusListService.html":{}}}],["storeconfig(content",{"_index":3323,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["storecredentialconfiguration",{"_index":1278,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{}}}],["storecredentialconfiguration(config",{"_index":1284,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["storecredentialconfiguration(tenantid",{"_index":1341,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["stored",{"_index":1234,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["storeexistingrp",{"_index":2910,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["storeexistingrp(name",{"_index":205,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["storeissuanceconfiguration",{"_index":2054,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["storeissuanceconfiguration(config",{"_index":2058,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["storeissuanceconfiguration(tenantid",{"_index":2090,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["storepresentationconfig",{"_index":2700,"title":{},"body":{"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["storepresentationconfig(config",{"_index":2709,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["storepresentationconfig(vprequest",{"_index":2777,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid",{"_index":2755,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid(registrationcertid",{"_index":2780,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["stores",{"_index":200,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["strategy",{"_index":2232,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1112,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["string",{"_index":18,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["stringified",{"_index":2003,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["strings",{"_index":1063,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["stripemptyslots",{"_index":1728,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["stripemptyslots(params",{"_index":1754,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["structure",{"_index":926,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{}}}],["structured",{"_index":3145,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["style",{"_index":1037,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["sub",{"_index":585,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{}}}],["subj",{"_index":1524,"title":{},"body":{"injectables/CryptoService.html":{}}}],["subject",{"_index":256,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"license.html":{}}}],["subjectaltname=dns:${hostname",{"_index":1527,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sublicense",{"_index":3963,"title":{},"body":{"license.html":{}}}],["submission",{"_index":4027,"title":{},"body":{"license.html":{}}}],["submit",{"_index":3933,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":3931,"title":{},"body":{"license.html":{}}}],["subsequently",{"_index":3950,"title":{},"body":{"license.html":{}}}],["succeeded",{"_index":3196,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["successfully",{"_index":2648,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{}}}],["such",{"_index":1656,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/Session.html":{},"license.html":{}}}],["summary",{"_index":548,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["super",{"_index":2203,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/VaultKeyService.html":{}}}],["super.canactivate(context",{"_index":2208,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["supersede",{"_index":4035,"title":{},"body":{"license.html":{}}}],["support",{"_index":562,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/Session.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{}}}],["supported",{"_index":332,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/CryptoService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{}}}],["supportedauthenticationscheme",{"_index":2435,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["supportedauthenticationscheme.clientattestationjwt",{"_index":850,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["supportedauthenticationscheme.dpop",{"_index":2481,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["supports",{"_index":525,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["svg",{"_index":4137,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1610,"title":{},"body":{"injectables/CryptoService-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["symmetric",{"_index":2258,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["synchronize",{"_index":1633,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["syntax",{"_index":4123,"title":{},"body":{"license.html":{}}}],["system",{"_index":1766,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["systems",{"_index":3941,"title":{},"body":{"license.html":{}}}],["t",{"_index":1143,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/EncryptionService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{}}}],["t['baseurl",{"_index":1085,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["t['throwonerror",{"_index":1121,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tag",{"_index":3477,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["tap",{"_index":3091,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["tap((data",{"_index":3117,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["target",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["tdata",{"_index":1128,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tdata[keyof",{"_index":1127,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tdatashape",{"_index":1144,"title":{"interfaces/TDataShape.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tell",{"_index":2675,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenancy",{"_index":3029,"title":{},"body":{"entities/Session.html":{}}}],["tenant",{"_index":149,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/FileSystemKeyService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"changelog.html":{}}}],["tenant_events",{"_index":66,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["tenantid",{"_index":151,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["tenantid)).uri",{"_index":907,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["tenantid/.well",{"_index":3551,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["tenantid/authorize",{"_index":700,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["tenantid/oid4vp",{"_index":2540,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["tenantid/status",{"_index":3262,"title":{},"body":{"controllers/StatusListController.html":{}}}],["tenantid/vci",{"_index":2387,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["tenanturl",{"_index":2594,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["term",{"_index":3795,"title":{},"body":{"index.html":{}}}],["terminate",{"_index":3991,"title":{},"body":{"license.html":{}}}],["terminusmodule",{"_index":1876,"title":{},"body":{"modules/HealthModule.html":{}}}],["terms",{"_index":3856,"title":{},"body":{"license.html":{}}}],["terror",{"_index":1129,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["terror[keyof",{"_index":1130,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["test",{"_index":2240,"title":{},"body":{"injectables/JwtStrategy.html":{},"changelog.html":{}}}],["test/.../import.ts",{"_index":3715,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../index.ts",{"_index":3717,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../utils.ts",{"_index":3721,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/import/import.ts",{"_index":3725,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/utils.ts",{"_index":3733,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/webhook/src/index.ts",{"_index":2833,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"miscellaneous/functions.html":{}}}],["text",{"_index":1118,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["textencoder().encode(secret",{"_index":1833,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["then((cryptokey",{"_index":3454,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["then((key",{"_index":1697,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["then((res",{"_index":221,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["then((response",{"_index":207,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["then((session",{"_index":854,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["then(async",{"_index":194,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["theory",{"_index":4072,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":3927,"title":{},"body":{"license.html":{}}}],["third",{"_index":4017,"title":{},"body":{"license.html":{}}}],["this._fns",{"_index":2014,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns.indexof(id",{"_index":2016,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns.length",{"_index":2019,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns[id",{"_index":2015,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns[index",{"_index":2018,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this.accesstoken",{"_index":130,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.addaccesscertificate(config",{"_index":218,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.addrp(tenantid",{"_index":156,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.authorizeservice.authorizationchallengeendpoint",{"_index":752,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.authzmetadata",{"_index":3570,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.authorizeservice.sendauthorizationresponse",{"_index":740,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.validatetokenrequest(body",{"_index":751,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authzmetadata(tenantid",{"_index":870,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.authzservice.authzmetadata(tenantid",{"_index":2445,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.client",{"_index":125,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.client.setconfig",{"_index":126,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.clients",{"_index":966,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientservice.validateclient",{"_index":582,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config",{"_index":2338,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enabledebugmode",{"_index":2348,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablehttplogger",{"_index":2347,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablesessionlogger",{"_index":2346,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.level",{"_index":2349,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.logformat",{"_index":2350,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice",{"_index":232,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.get",{"_index":2341,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{}}}],["this.configservice.get('log_level",{"_index":2340,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice.get('oidc",{"_index":1857,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["this.configservice.get('registrar_url",{"_index":140,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.get('vault_url",{"_index":3430,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.configservice.getorthrow",{"_index":971,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{}}}],["this.configservice.getorthrow('auth_client_id",{"_index":970,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.configservice.getorthrow('folder",{"_index":285,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["this.configservice.getorthrow('jwt_expires_in",{"_index":1831,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('jwt_issuer",{"_index":1829,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('jwt_secret",{"_index":1828,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('oidc_client_id",{"_index":114,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('oidc_client_secret",{"_index":116,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('oidc_issuer_url",{"_index":112,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('public_url",{"_index":828,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.configservice.getorthrow('public_url')}${req.url",{"_index":859,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow('public_url')}/${session.tenantid}/credentials/vct/${credentialconfigurationid",{"_index":1379,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow('public_url')}/${tenantid",{"_index":890,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow('public_url')}/${tenantid}/oid4vp/request/${requestid}/${values.session",{"_index":2658,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.configservice.getorthrow('registrar_url",{"_index":128,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('rp_name",{"_index":192,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('session_tidy_up_interval",{"_index":3245,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservice.getorthrow('session_ttl",{"_index":3255,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservie.get('crypto_alg",{"_index":1608,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["this.create(tenantid",{"_index":3435,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.createlist(tenantid",{"_index":3308,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.credentialconfigrepo",{"_index":1359,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findby",{"_index":1355,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findonebyorfail",{"_index":1388,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.save(value",{"_index":1354,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepository.delete",{"_index":1242,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.find",{"_index":1239,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.findone",{"_index":1240,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.save",{"_index":1241,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialsconfigservice.getbyid",{"_index":2100,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsservice.delete(user.sub",{"_index":1302,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.get(user.sub",{"_index":1299,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.getcredential",{"_index":2501,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getcredentialconfiguration",{"_index":2448,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getschema(id",{"_index":1319,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.getvct(id",{"_index":1317,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.store(user.sub",{"_index":1300,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.crpytoservice.getcertchain",{"_index":1382,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.crpytoservice.keyservice.signer",{"_index":1366,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.crypto",{"_index":1793,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.alg",{"_index":1806,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.generatekeypair",{"_index":1800,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.getsigner(keys.privatekey",{"_index":1797,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.cryptoservice.getalg",{"_index":1816,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["this.cryptoservice.getcallbackcontext",{"_index":2442,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.cryptoservice.getcallbackcontext(tenantid",{"_index":826,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.cryptoservice.getcertchain",{"_index":2640,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.cryptoservice.getcertchain('signing",{"_index":3316,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.cryptoservice.getcrypto",{"_index":1794,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.cryptoservice.getjwks(tenantid).then((key",{"_index":3573,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.cryptoservice.keyservice.getpublickey",{"_index":236,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["this.cryptoservice.signjwt",{"_index":2645,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.cryptoservice.signjwt(header",{"_index":3317,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.cryptoservice.storeaccesscertificate",{"_index":242,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.db.pingcheck('database",{"_index":1873,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.dertojwtsignature(res.data.data.signature.split(':')[2",{"_index":3461,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.encryptionservice.decryptjwe",{"_index":2661,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.getencryptionpublickey",{"_index":2615,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.eventemitter.emit(tenant_events.tenant_init",{"_index":999,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.eventemitter.emit(tenant_events.tenant_keys",{"_index":1481,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.filename",{"_index":3297,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.folder",{"_index":1473,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["this.getaccesscertificateid(config",{"_index":157,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.getauthorizationserver",{"_index":829,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getauthorizationserver(tenantid).createaccesstokenresponse",{"_index":889,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getcallbackcontext(tenantid).hash",{"_index":1584,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.getclients",{"_index":962,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.getclients().find((c",{"_index":974,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.getconfig(session.tenantid",{"_index":3329,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getconfig(tenantid",{"_index":3310,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getconfig(tenantid).jwt",{"_index":3320,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getinterceptorindex(id",{"_index":2017,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this.getjwk",{"_index":3452,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getkeys(tenant",{"_index":1795,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkeys(tenantid",{"_index":1796,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkeys(tenantid).then((keys",{"_index":1813,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkid(tenantid",{"_index":3457,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getpublickey('jwk",{"_index":3447,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getpublickey('pem",{"_index":3432,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getsignjwtcallback(tenantid",{"_index":1576,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.hascerts(tenantid",{"_index":1480,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.headers",{"_index":3431,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.health.check",{"_index":1872,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpservice.get",{"_index":2963,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["this.httpservice.post",{"_index":3443,"title":{},"body":{"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["this.init(tenantid",{"_index":1683,"title":{},"body":{"injectables/EncryptionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.isenabled",{"_index":108,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.ishttploggerenabled",{"_index":2351,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.ispresentationduringissuanceauth(config",{"_index":689,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["this.issuanceconfigrepo.create",{"_index":2106,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.delete",{"_index":2109,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.find",{"_index":2095,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.findoneorfail",{"_index":2097,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.save(issuanceconfig",{"_index":2108,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceservice",{"_index":2457,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuanceservice.deleteissuanceconfiguration(user.sub",{"_index":2067,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfiguration(user.sub",{"_index":2064,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfigurationbyid",{"_index":925,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.issuanceservice.storeissuanceconfiguration",{"_index":2065,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuer",{"_index":2443,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.createcredentialissuermetadata",{"_index":2447,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.createcredentialresponse",{"_index":2514,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.parsecredentialrequest",{"_index":2471,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.verifycredentialrequestjwtproof",{"_index":2494,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuermetadata(tenantid",{"_index":2464,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.isusingexternaloidc",{"_index":1826,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.jwtservice.generatetoken(payload",{"_index":587,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.isusingexternaloidc",{"_index":559,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.kbverifier.bind(this",{"_index":2796,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.keyservice.getpublickey",{"_index":1588,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.getpublickey('jwk",{"_index":1558,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.init(tenantid",{"_index":1479,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.signjwt(payload",{"_index":1557,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.loadclients",{"_index":967,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.loadconfig(tenantid",{"_index":154,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.loadconfig(tenantid).id",{"_index":254,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.loadconfiguration",{"_index":2337,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.logger.error",{"_index":3127,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.info",{"_index":3108,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.setcontext('sessionlogger",{"_index":3107,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.logger.setcontext('sessionloggerservice",{"_index":3183,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.oauth2client",{"_index":117,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.oauth2client.clientcredentials().then((token",{"_index":166,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.oid4vciservice.createoffer",{"_index":2146,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.oid4vciservice.getcredential(req",{"_index":2405,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.handlenotification(req",{"_index":2408,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.issuermetadata(tenantid",{"_index":3569,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.oid4vpservice.createauthorizationrequest",{"_index":2558,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.oid4vpservice.createrequest",{"_index":2721,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.oid4vpservice.createrequest('pid",{"_index":906,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.oid4vpservice.getresponse(body",{"_index":2560,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.parsechallengerequest",{"_index":932,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.parseloglevel",{"_index":2339,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.presentationsservice.deletepresentationconfig(id",{"_index":2730,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.getpresentationconfig",{"_index":2596,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.getpresentationconfigs(user.sub",{"_index":2727,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.parseresponse",{"_index":2670,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.storepresentationconfig",{"_index":2728,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.storercid",{"_index":280,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.privateencryptionkey",{"_index":1698,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.privateenncryptionpath",{"_index":1684,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.privatekeypath",{"_index":1798,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.publicencryptionkey",{"_index":1699,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.publicencryptionpath",{"_index":1686,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.publickeypath",{"_index":1799,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.reflector.get",{"_index":3095,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.reflector.getallandoverride",{"_index":2205,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refreshaccesstoken",{"_index":148,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.registrarservice.addregistrationcertificate",{"_index":2602,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.isenabled",{"_index":2599,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.resolverservice.resolvepublickey",{"_index":2811,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.resourceserver",{"_index":2444,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.resourceserver.verifyresourcerequest",{"_index":2476,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sanitizebody(request.body",{"_index":3112,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.saveconfig(config",{"_index":199,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.schedulerregistry.addinterval('tidyupsessions",{"_index":3248,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sdjwtinstance",{"_index":2794,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.sendauthorizationcode",{"_index":916,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sendauthorizationcode(res",{"_index":940,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionlogger.logauthorizationrequest(logcontext",{"_index":2605,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logcredentialissuance",{"_index":2503,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionlogger.logcredentialverification",{"_index":2672,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowcomplete(logcontext",{"_index":2511,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowerror(logcontext",{"_index":2519,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowstart(logcontext",{"_index":2488,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.lognotification(logcontext",{"_index":2526,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionlogger.logsession",{"_index":2647,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsession(logcontext",{"_index":3528,"title":{},"body":{"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsessionerror",{"_index":2536,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/WebhookService.html":{}}}],["this.sessionrepository.delete",{"_index":3256,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.find",{"_index":3251,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail",{"_index":3252,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail(where",{"_index":3253,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.save(session",{"_index":3249,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.update",{"_index":3250,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice",{"_index":852,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add",{"_index":3538,"title":{},"body":{"injectables/WebhookService.html":{}}}],["this.sessionservice.add(auth_session",{"_index":2603,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(body.issuer_state",{"_index":747,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.sessionservice.add(issuer_state",{"_index":947,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(res.state",{"_index":2676,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(session.id",{"_index":2509,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionservice.add(values.session",{"_index":2656,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.create",{"_index":2466,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionservice.get",{"_index":2482,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionservice.get(body.auth_session",{"_index":912,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(body.issuer_state",{"_index":920,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(id",{"_index":3059,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(res.state",{"_index":2665,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.getall",{"_index":3057,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.getby",{"_index":864,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setauthcode",{"_index":945,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setauthcode(values.issuer_state",{"_index":857,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setentry(entry.index",{"_index":3344,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.setupclient(client.id",{"_index":964,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.shouldlog",{"_index":3184,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.sign(input",{"_index":3437,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.sign(signinginput",{"_index":3470,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.signjwt(header",{"_index":1590,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.statuslistfetcher.bind(this",{"_index":2797,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.statuslistservice.createentry",{"_index":1380,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.statuslistservice.getlist(tenantid",{"_index":3273,"title":{},"body":{"controllers/StatusListController.html":{}}}],["this.statuslistservice.updatestatus(value",{"_index":3061,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.statusmappingrepository.findby",{"_index":3340,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.save",{"_index":3335,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.storeconfig(file",{"_index":3319,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.storeexistingrp(name",{"_index":197,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.tidyupsessions",{"_index":3243,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.vaulturl",{"_index":3429,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.vaulturl}/keys/${tenantid",{"_index":3444,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.vaulturl}/sign/${tenantid",{"_index":3458,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.verifier.bind(this",{"_index":2795,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository",{"_index":2804,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.delete",{"_index":2803,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.find",{"_index":2798,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.save(vprequest",{"_index":2802,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.update",{"_index":2806,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.webhookservice.sendwebhook",{"_index":2681,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.webhookservice.sendwebhooknotification",{"_index":2534,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["those",{"_index":3972,"title":{},"body":{"license.html":{}}}],["through",{"_index":3863,"title":{},"body":{"license.html":{}}}],["throw",{"_index":238,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["throwonerror",{"_index":1075,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tidy",{"_index":3232,"title":{},"body":{"injectables/SessionService.html":{}}}],["tidyupsessions",{"_index":3212,"title":{},"body":{"injectables/SessionService.html":{}}}],["time",{"_index":2529,"title":{},"body":{"injectables/Oid4vciService.html":{},"classes/ParResponseDto.html":{}}}],["times",{"_index":2517,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["timestamp",{"_index":2036,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["title",{"_index":4061,"title":{},"body":{"license.html":{}}}],["tmp",{"_index":3605,"title":{},"body":{"changelog.html":{}}}],["todo",{"_index":247,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["together",{"_index":3751,"title":{},"body":{"index.html":{}}}],["token",{"_index":89,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["token(body",{"_index":722,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["token.accesstoken",{"_index":167,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["token.decorator",{"_index":541,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["token_endpoint",{"_index":832,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_endpoint_auth_methods_supported",{"_index":849,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_exchange",{"_index":3197,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["token_type",{"_index":556,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{}}}],["tokenpayload",{"_index":540,"title":{"interfaces/TokenPayload.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"interfaces/TokenPayload.html":{}}}],["tokenpayload.nonce",{"_index":2498,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["tokenpayload.sub",{"_index":2483,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["tokenresponse",{"_index":520,"title":{"classes/TokenResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{}}}],["tokens",{"_index":2260,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["tolowercase",{"_index":1568,"title":{},"body":{"injectables/CryptoService.html":{}}}],["tort",{"_index":4073,"title":{},"body":{"license.html":{}}}],["tostring('ascii",{"_index":574,"title":{},"body":{"controllers/AuthController.html":{}}}],["tostring('base64",{"_index":3501,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["tough",{"_index":3749,"title":{},"body":{"index.html":{}}}],["town",{"_index":2841,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["trace",{"_index":1010,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["tracking",{"_index":2734,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["trade",{"_index":4042,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":4008,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":4040,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":3970,"title":{},"body":{"license.html":{}}}],["transformation",{"_index":3901,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":318,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["transformers",{"_index":1066,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["transforming",{"_index":1057,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["translatetime",{"_index":458,"title":{},"body":{"modules/AppModule.html":{}}}],["translation",{"_index":3902,"title":{},"body":{"license.html":{}}}],["transport",{"_index":452,"title":{},"body":{"modules/AppModule.html":{}}}],["triggered",{"_index":2530,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["true",{"_index":136,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"interfaces/TDataShape.html":{}}}],["true})@isarray",{"_index":2072,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["true})@isobject",{"_index":1170,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{}}}],["true})@isobject()@isoptional",{"_index":1197,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isstring",{"_index":2688,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@jointable",{"_index":1193,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["trust",{"_index":2953,"title":{},"body":{"injectables/ResolverService.html":{}}}],["try",{"_index":565,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["ts",{"_index":3618,"title":{},"body":{"changelog.html":{}}}],["ttl",{"_index":3254,"title":{},"body":{"injectables/SessionService.html":{}}}],["txcode",{"_index":824,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["typ",{"_index":2635,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["type",{"_index":19,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["type(undefined)@isobject",{"_index":3509,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["type(undefined)@isoptional()@isobject",{"_index":3512,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["typeof",{"_index":88,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["typeorm",{"_index":1205,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{}}}],["typeorm/query",{"_index":3240,"title":{},"body":{"injectables/SessionService.html":{}}}],["typeorm/repository/repository",{"_index":2791,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["typeormhealthindicator",{"_index":1868,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":1614,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{}}}],["typeormmodule.forfeature([issuanceconfig",{"_index":2185,"title":{},"body":{"modules/IssuerModule.html":{}}}],["typeormmodule.forfeature([keyentity",{"_index":2290,"title":{},"body":{"modules/KeyModule.html":{}}}],["typeormmodule.forfeature([presentationconfig",{"_index":2745,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["typeormmodule.forfeature([session",{"_index":3209,"title":{},"body":{"modules/SessionModule.html":{}}}],["typeormmodule.forfeature([statusmapping",{"_index":3352,"title":{},"body":{"modules/StatusListModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1630,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":1615,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1903,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"modules/RegistrarModule.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["types.get(this.cryptoservice.getalg",{"_index":3446,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["types.set('ed25519",{"_index":3442,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["types.set('es256",{"_index":3439,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["typescript",{"_index":177,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["typically",{"_index":937,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["unauthorizedexception",{"_index":529,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception('invalid",{"_index":583,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined",{"_index":453,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Auth.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{}}}],["undefined})@apiproduces('application/json",{"_index":2120,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["undefined})@apiresponse({status",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@post('offer",{"_index":2122,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["undefined})@post('request",{"_index":2707,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["under",{"_index":3850,"title":{},"body":{"index.html":{},"license.html":{}}}],["unified",{"_index":3741,"title":{},"body":{"index.html":{}}}],["union",{"_index":666,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"license.html":{}}}],["unique",{"_index":25,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{}}}],["unknown",{"_index":716,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Params.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["unless",{"_index":4029,"title":{},"body":{"license.html":{}}}],["unlinksync",{"_index":1460,"title":{},"body":{"injectables/CryptoService.html":{}}}],["unlinksync(file",{"_index":1548,"title":{},"body":{"injectables/CryptoService.html":{}}}],["unsecure",{"_index":2186,"title":{},"body":{"modules/IssuerModule.html":{}}}],["unsupported",{"_index":943,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["unused",{"_index":2641,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["up",{"_index":352,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/SessionService.html":{}}}],["update",{"_index":1882,"title":{},"body":{"classes/Interceptors.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["update(data",{"_index":1569,"title":{},"body":{"injectables/CryptoService.html":{}}}],["update(id",{"_index":1892,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["update.dto",{"_index":3054,"title":{},"body":{"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["update.dto.ts",{"_index":3377,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:16",{"_index":3379,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:24",{"_index":3382,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:8",{"_index":3380,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["updated",{"_index":2711,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["updatestatus",{"_index":3356,"title":{},"body":{"injectables/StatusListService.html":{}}}],["updatestatus(value",{"_index":3339,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["upload",{"_index":3620,"title":{},"body":{"changelog.html":{}}}],["uri",{"_index":995,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/enumerations.html":{}}}],["url",{"_index":338,"title":{},"body":{"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["url(payload.iss).hostname",{"_index":2958,"title":{},"body":{"injectables/ResolverService.html":{}}}],["url(request.url",{"_index":2843,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["url.pathname",{"_index":2845,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["url.replace",{"_index":1929,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["url.replace(match",{"_index":1933,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["urlsearchparams",{"_index":2873,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["urlsearchparamsbodyserializer",{"_index":2882,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["urn:${randomuuid",{"_index":743,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["use",{"_index":107,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{},"license.html":{}}}],["use(fn",{"_index":1895,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["used",{"_index":202,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["useexternaloidc",{"_index":2236,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":445,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["useful",{"_index":1051,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/TDataShape.html":{}}}],["useguards",{"_index":1286,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["useguards(jwtauthguard",{"_index":1293,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["useinterceptors",{"_index":2395,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["useinterceptors(sessionloggerinterceptor",{"_index":2402,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["user",{"_index":481,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/SessionModule.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{}}}],["user.sub",{"_index":2066,"title":{},"body":{"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["username",{"_index":1639,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["users",{"_index":660,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["uses",{"_index":645,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/HealthController.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionLoggerService.html":{}}}],["using",{"_index":159,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"entities/CredentialConfig.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"index.html":{},"license.html":{}}}],["utf",{"_index":297,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["util",{"_index":2438,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["utility",{"_index":672,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{},"injectables/CryptoService.html":{}}}],["utils",{"_index":1081,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["utils.ts",{"_index":1591,"title":{},"body":{"injectables/CryptoService.html":{}}}],["utils/logger//session",{"_index":2399,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["utils/logger/session",{"_index":2175,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["utils/webhook/webhook.dto",{"_index":656,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{}}}],["utils/webhook/webhook.service",{"_index":2181,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["uuid",{"_index":1789,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"dependencies.html":{}}}],["v",{"_index":1594,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"index.html":{}}}],["v1",{"_index":3834,"title":{},"body":{"index.html":{}}}],["v2",{"_index":3835,"title":{},"body":{"index.html":{}}}],["v4",{"_index":1788,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["valid",{"_index":164,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{}}}],["valid('json",{"_index":438,"title":{},"body":{"modules/AppModule.html":{}}}],["valid('trace",{"_index":426,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":725,"title":{},"body":{"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["validate(payload",{"_index":2228,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateclient",{"_index":1149,"title":{},"body":{"injectables/ClientService.html":{}}}],["validateclient(clientid",{"_index":973,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["validated",{"_index":2496,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["validatejsonfile",{"_index":3723,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validatejsonfile(filepath",{"_index":3731,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validatenested",{"_index":655,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["validatetokenrequest",{"_index":784,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["validatetokenrequest(body",{"_index":805,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["validating",{"_index":1050,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["validation",{"_index":1210,"title":{},"body":{"entities/CredentialConfig.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/RegistrarModule.html":{}}}],["validationschema",{"_index":418,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":322,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["value",{"_index":309,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["value.authenticationconfig",{"_index":2105,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.authenticationconfig.config",{"_index":2104,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.authenticationconfig.method",{"_index":2103,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.config",{"_index":1357,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.credentialconfigs",{"_index":2099,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.credentialconfigurationid",{"_index":3342,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.foreach((v",{"_index":2876,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["value.id",{"_index":2107,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.map((v",{"_index":2988,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["value.sessionid",{"_index":3341,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.status",{"_index":3345,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.tenantid",{"_index":1353,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.toisostring",{"_index":3002,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["value.tostring",{"_index":2881,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["valueonly",{"_index":1930,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["values",{"_index":98,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"entities/CredentialConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{}}}],["values.join",{"_index":3005,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["values.session",{"_index":2653,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["values.uri",{"_index":2724,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["values.webhook",{"_index":2654,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["varchar",{"_index":3371,"title":{},"body":{"entities/StatusMapping.html":{}}}],["variable",{"_index":3235,"title":{},"body":{"injectables/SessionService.html":{}}}],["variables",{"_index":2899,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["various",{"_index":335,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["vars",{"_index":2642,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vault",{"_index":2276,"title":{},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["vault').default('file",{"_index":2282,"title":{},"body":{"modules/KeyModule.html":{}}}],["vault_key_id",{"_index":2288,"title":{},"body":{"modules/KeyModule.html":{}}}],["vault_token",{"_index":2286,"title":{},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["vault_url",{"_index":2284,"title":{},"body":{"modules/KeyModule.html":{}}}],["vaultkeyservice",{"_index":2275,"title":{"injectables/VaultKeyService.html":{}},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["vaulturl",{"_index":3399,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["vc",{"_index":1186,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"dependencies.html":{},"index.html":{}}}],["vcs",{"_index":2748,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vct",{"_index":1167,"title":{"classes/VCT.html":{}},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["vct(@param('id",{"_index":1316,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["vct(id",{"_index":1310,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["vendor",{"_index":3757,"title":{},"body":{"index.html":{}}}],["verbal",{"_index":3935,"title":{},"body":{"license.html":{}}}],["verbose",{"_index":2343,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["verifiable",{"_index":1313,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["verification",{"_index":1846,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verificationresult",{"_index":3017,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verified",{"_index":1565,"title":{},"body":{"injectables/CryptoService.html":{},"entities/Session.html":{}}}],["verifiedproof",{"_index":2493,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["verifiedproof.signer.publicjwk",{"_index":2499,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["verifier",{"_index":1409,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{}}}],["verifier/oid4vp/dto/presentation",{"_index":2130,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["verifier/oid4vp/oid4vp.module",{"_index":2174,"title":{},"body":{"modules/IssuerModule.html":{}}}],["verifier/oid4vp/oid4vp.service",{"_index":816,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifier/presentations/dto/vp",{"_index":50,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["verifier/presentations/presentations.module",{"_index":2897,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["verifier/presentations/presentations.service",{"_index":53,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["verifier/verifier.module",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["verifier_attestations",{"_index":2634,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["verifiermodule",{"_index":376,"title":{"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["verify",{"_index":841,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{}}}],["verify(data",{"_index":2813,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verify(res.vp_token[att",{"_index":2825,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verifyauthorizationcodeaccesstokenrequest",{"_index":885,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifyjwt",{"_index":1430,"title":{},"body":{"injectables/CryptoService.html":{}}}],["verifyjwt(compact",{"_index":1453,"title":{},"body":{"injectables/CryptoService.html":{}}}],["verifypreauthorizedcodeaccesstokenrequest",{"_index":874,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifytoken",{"_index":2210,"title":{},"body":{"injectables/JwtService.html":{}}}],["verifytoken(token",{"_index":1845,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["version",{"_index":3595,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["versions",{"_index":3833,"title":{},"body":{"index.html":{}}}],["via",{"_index":665,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/KeyService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionService.html":{},"index.html":{}}}],["video/'].some((type",{"_index":1959,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["view",{"_index":1049,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["vitest",{"_index":3622,"title":{},"body":{"changelog.html":{}}}],["void",{"_index":1155,"title":{},"body":{"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["vp",{"_index":626,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"changelog.html":{}}}],["vp_formats",{"_index":2616,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vp_nonce",{"_index":2604,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["vp_token",{"_index":622,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["vprequest",{"_index":2779,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequest.tenantid",{"_index":2801,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequestrepository",{"_index":2758,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vps",{"_index":2747,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["wallet",{"_index":900,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"index.html":{},"properties.html":{}}}],["wallets",{"_index":3740,"title":{},"body":{"index.html":{}}}],["want",{"_index":1027,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["warn",{"_index":428,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["warranties",{"_index":4057,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":4052,"title":{},"body":{"license.html":{}}}],["way",{"_index":1139,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["we'll",{"_index":938,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["web",{"_index":1646,"title":{},"body":{"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{}}}],["webhook",{"_index":329,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"entities/Session.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"changelog.html":{}}}],["webhook.auth",{"_index":3544,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhook.auth.config.value",{"_index":3547,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhook.auth.type",{"_index":3545,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhook.auth?.type",{"_index":3549,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhook.url",{"_index":3548,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhookauthconfig",{"_index":330,"title":{"classes/WebHookAuthConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["webhookconfig",{"_index":337,"title":{"classes/WebhookConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["webhookresponse",{"_index":3533,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhookresponse.data",{"_index":3535,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhookresponse.status",{"_index":3541,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhooks",{"_index":307,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{}}}],["webhooksent",{"_index":2682,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookservice",{"_index":2164,"title":{"injectables/WebhookService.html":{}},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{},"overview.html":{}}}],["webhookurl",{"_index":3529,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webook",{"_index":2677,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["welcome",{"_index":3839,"title":{},"body":{"index.html":{}}}],["well",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["wellknowncontroller",{"_index":381,"title":{"controllers/WellKnownController.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["wherever",{"_index":4016,"title":{},"body":{"license.html":{}}}],["whether",{"_index":2369,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"license.html":{}}}],["whole",{"_index":3921,"title":{},"body":{"license.html":{}}}],["within",{"_index":3952,"title":{},"body":{"license.html":{}}}],["without",{"_index":1852,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"license.html":{}}}],["won't",{"_index":1097,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["work",{"_index":3906,"title":{},"body":{"license.html":{}}}],["worker",{"_index":3635,"title":{},"body":{"changelog.html":{}}}],["working",{"_index":674,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["works",{"_index":3914,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":3955,"title":{},"body":{"license.html":{}}}],["write",{"_index":272,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["writefilesync",{"_index":56,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["writefilesync(file",{"_index":3324,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["writefilesync(filepath",{"_index":292,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["writefilesync(join(folder",{"_index":1551,"title":{},"body":{"injectables/CryptoService.html":{}}}],["writefilesync(join(this.folder",{"_index":3433,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["writefilesync(sanext",{"_index":1535,"title":{},"body":{"injectables/CryptoService.html":{}}}],["writing",{"_index":274,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["written",{"_index":3936,"title":{},"body":{"license.html":{}}}],["x",{"_index":1652,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["x509",{"_index":1523,"title":{},"body":{"injectables/CryptoService.html":{}}}],["x509_san_dns",{"_index":2609,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509_san_dns:${hostname",{"_index":2657,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509certificate",{"_index":2947,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x509certificate(buffer.from(cert",{"_index":2955,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x5c",{"_index":1381,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["y",{"_index":1653,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["yes",{"_index":798,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/SessionLoggerService.html":{}}}],["you're",{"_index":1141,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["your_api_key_here",{"_index":325,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["yyyy",{"_index":459,"title":{},"body":{"modules/AppModule.html":{}}}],["zeros",{"_index":3485,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["zoom",{"_index":377,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccessCertificateResponse.html":{"url":"interfaces/AccessCertificateResponse.html","title":"interface - AccessCertificateResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccessCertificateResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Repsonse of access certificate request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            crt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        crt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        crt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The public key in PEM format.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier of the access certificate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if the access certificate is revoked.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { OAuth2Client } from '@badgateway/oauth2-client';\nimport { client } from './generated/client.gen';\nimport {\n    accessCertificateControllerFindOne,\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from './generated';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { RegistrationCertificateRequest } from '../verifier/presentations/dto/vp-request.dto';\nimport { PresentationsService } from '../verifier/presentations/presentations.service';\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs';\nimport { RegistrarConfig } from './registrar-config';\nimport { join } from 'node:path';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\n/**\n * Repsonse of access certificate request.\n */\ninterface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow('OIDC_ISSUER_URL');\n        const clientId =\n            this.configService.getOrThrow('OIDC_CLIENT_ID');\n        const clientSecret =\n            this.configService.getOrThrow('OIDC_CLIENT_SECRET');\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow('REGISTRAR_URL'),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get('REGISTRAR_URL');\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get('REGISTRAR_URL')) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        const config = this.loadConfig(tenantId);\n        if (!config.id) {\n            config.id = await this.addRp(tenantId);\n        }\n        await this.getAccessCertificateId(config, tenantId);\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(tenantId: string): Promise {\n        const name = this.configService.getOrThrow('RP_NAME');\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            const config = this.loadConfig(tenantId);\n            if (response.error) {\n                config.id = await this.storeExistingRp(name);\n            } else {\n                config.id = response.data!['id'];\n            }\n            this.saveConfig(config, tenantId);\n            return response.data!['id'];\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private storeExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id;\n        });\n    }\n\n    /**\n     * Get the access certificate ID from the registrar.\n     * If there is no access certificate ID in the config, it will add a new one.\n     * If there is one, it will check if it is still valid.\n     * If it is revoked, it will add a new one.\n     * @param config\n     */\n    async getAccessCertificateId(config: RegistrarConfig, tenantId: string) {\n        // if there is no access certificate ID in the config, we need to add it\n        if (!config.accessCertificateId) {\n            await this.addAccessCertificate(config, tenantId);\n        }\n        // if there is one, check if it is still valid\n        await accessCertificateControllerFindOne({\n            client: this.client,\n            path: { rp: config.id, id: config.accessCertificateId! },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error finding access certificate:', res.error);\n            }\n            const data = res.data as AccessCertificateResponse;\n            if (data.revoked) {\n                console.warn('Access certificate is revoked, adding a new one');\n                return this.addAccessCertificate(config, tenantId);\n            }\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        config: RegistrarConfig,\n        tenantId: string,\n    ): Promise {\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    'pem',\n                    tenantId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: config.id,\n            },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error adding access certificate:', res.error);\n                throw new Error('Error adding access certificate');\n            }\n            //store the cert\n            this.cryptoService.storeAccessCertificate(\n                res.data!['crt'],\n                tenantId,\n            );\n            config.accessCertificateId = res.data!['id'];\n            this.saveConfig(config, tenantId);\n            return res.data!['id'];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const rp = this.loadConfig(tenantId).id;\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    'Error adding registration certificate:',\n                    res.error,\n                );\n                throw new Error('Error adding registration certificate');\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data!['id'],\n                requestId,\n                tenantId,\n            );\n            return res.data!['jwt'];\n        });\n    }\n\n    /**\n     * Load the registrar configuration from the config file.\n     * @returns\n     */\n    private loadConfig(tenantId: string): RegistrarConfig {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n\n        if (!existsSync(filePath)) {\n            // If the config file does not exist, create an empty config\n            const initialConfig: RegistrarConfig = {};\n            writeFileSync(filePath, JSON.stringify(initialConfig, null, 2));\n            return initialConfig;\n        }\n        const config = JSON.parse(\n            readFileSync(filePath, 'utf-8'),\n        ) as RegistrarConfig;\n        return config;\n    }\n\n    /**\n     * Save the registrar configuration to the config file.\n     * @param config\n     */\n    private saveConfig(config: RegistrarConfig, tenantId: string) {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n        writeFileSync(filePath, JSON.stringify(config, null, 2));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiKeyConfig.html":{"url":"classes/ApiKeyConfig.html","title":"class - ApiKeyConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for API key authentication in webhooks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                headerName\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:13\n                        \n                    \n\n            \n                \n                    The name of the header where the API key will be sent.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:19\n                        \n                    \n\n            \n                \n                    The value of the API key to be sent in the header.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiExcludeController } from '@nestjs/swagger';\n\n@ApiExcludeController()\n@Controller()\nexport class AppController {\n    @Get()\n    getHello(): string {\n        return 'EUDIPLO is up and running, more information at https://cre8.github.io/eudiplo/latest/';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            WellKnownController\n                        \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CryptoModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            KeyModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            VerifierModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as Joi from 'joi';\nimport { CryptoModule } from './crypto/crypto.module';\nimport { WellKnownController } from './well-known/well-known.controller';\nimport { ISSUER_VALIDATION_SCHEMA, IssuerModule } from './issuer/issuer.module';\nimport { VerifierModule } from './verifier/verifier.module';\nimport {\n    REGISTRAR_VALIDATION_SCHEMA,\n    RegistrarModule,\n} from './registrar/registrar.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join, isAbsolute } from 'path';\nimport { KEY_VALIDATION_SCHEMA, KeyModule } from './crypto/key/key.module';\nimport { CRYPTO_VALIDATION_SCHEMA } from './crypto/key/crypto/crypto.module';\nimport { AppController } from './app/app.controller';\nimport {\n    SESSION_VALIDATION_SCHEMA,\n    SessionModule,\n} from './session/session.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { DatabaseModule } from './database/database.module';\nimport { HealthModule } from './health/health.module';\nimport { AUTH_VALIDATION_SCHEMA, AuthModule } from './auth/auth.module';\nimport { EventEmitterModule } from '@nestjs/event-emitter/dist/event-emitter.module';\nimport { LoggerModule } from 'nestjs-pino';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            validationSchema: Joi.object({\n                FOLDER: Joi.string().default('./tmp'),\n                RP_NAME: Joi.string().default('EUDIPLO'),\n                LOG_LEVEL: Joi.string()\n                    .valid('trace', 'debug', 'info', 'warn', 'error', 'fatal')\n                    .default(\n                        process.env.NODE_ENV === 'production'\n                            ? 'warn'\n                            : 'debug',\n                    ),\n                ...AUTH_VALIDATION_SCHEMA,\n                ...REGISTRAR_VALIDATION_SCHEMA,\n                ...KEY_VALIDATION_SCHEMA,\n                ...CRYPTO_VALIDATION_SCHEMA,\n                ...ISSUER_VALIDATION_SCHEMA,\n                ...SESSION_VALIDATION_SCHEMA,\n                LOG_ENABLE_HTTP_LOGGER: Joi.boolean().default(false),\n                LOG_ENABLE_SESSION_LOGGER: Joi.boolean().default(false),\n                LOG_DEBUG_MODE: Joi.boolean().default(false),\n                LOG_FORMAT: Joi.string()\n                    .valid('json', 'pretty')\n                    .default(\n                        process.env.NODE_ENV === 'production'\n                            ? 'json'\n                            : 'pretty',\n                    ),\n            }),\n            isGlobal: true,\n            expandVariables: true,\n        }),\n        LoggerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const enableHttpLogger = configService.get(\n                    'LOG_ENABLE_HTTP_LOGGER',\n                    false,\n                );\n\n                return {\n                    pinoHttp: {\n                        level: configService.get('LOG_LEVEL', 'info'),\n                        autoLogging: enableHttpLogger,\n                        transport:\n                            process.env.NODE_ENV === 'production'\n                                ? undefined\n                                : {\n                                      target: 'pino-pretty',\n                                      options: {\n                                          colorize: true,\n                                          singleLine: false,\n                                          translateTime: 'yyyy-mm-dd HH:MM:ss',\n                                          ignore: 'pid,hostname',\n                                      },\n                                  },\n                        customProps: (req: any) => ({\n                            sessionId:\n                                req.headers['x-session-id'] ||\n                                req.params?.session ||\n                                req.body?.session_id,\n                            tenantId: req.params?.tenantId,\n                            flow: req.url?.includes('/vci')\n                                ? 'OID4VCI'\n                                : req.url?.includes('/oid4vp')\n                                  ? 'OID4VP'\n                                  : undefined,\n                        }),\n                        serializers: {\n                            req: (req: any) => ({\n                                method: req.method,\n                                url: req.url,\n                                headers: {\n                                    'user-agent': req.headers['user-agent'],\n                                    'content-type': req.headers['content-type'],\n                                },\n                                sessionId:\n                                    req.headers['x-session-id'] ||\n                                    req.params?.session,\n                                tenantId: req.params?.tenantId,\n                            }),\n                            res: (res: any) => ({\n                                statusCode: res.statusCode,\n                            }),\n                        },\n                    },\n                };\n            },\n        }),\n        KeyModule.forRoot(),\n        CryptoModule,\n        IssuerModule,\n        VerifierModule,\n        RegistrarModule,\n        ScheduleModule.forRoot(),\n        ServeStaticModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const folder = configService.getOrThrow('FOLDER');\n                const rootPath = isAbsolute(folder)\n                    ? join(folder, 'public')\n                    : join(__dirname, '../', folder, 'public');\n                return [\n                    {\n                        rootPath,\n                    },\n                ];\n            },\n        }),\n        EventEmitterModule.forRoot(),\n        DatabaseModule,\n        SessionModule,\n        DatabaseModule,\n        HealthModule,\n        AuthModule,\n    ],\n    controllers: [WellKnownController, AppController],\n    providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Auth.html":{"url":"interfaces/Auth.html","title":"interface - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/auth.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            in\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scheme\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        in\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        in:     \"header\" | \"query\" | \"cookie\"\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'header'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     \"header\" | \"query\" | \"cookie\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Which part of the request do we use to send the auth?\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'Authorization'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Header or query parameter name.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scheme\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scheme:     \"basic\" | \"bearer\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"basic\" | \"bearer\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"apiKey\" | \"http\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"apiKey\" | \"http\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type AuthToken = string | undefined;\n\nexport interface Auth {\n    /**\n     * Which part of the request do we use to send the auth?\n     *\n     * @default 'header'\n     */\n    in?: 'header' | 'query' | 'cookie';\n    /**\n     * Header or query parameter name.\n     *\n     * @default 'Authorization'\n     */\n    name?: string;\n    scheme?: 'basic' | 'bearer';\n    type: 'apiKey' | 'http';\n}\n\nexport const getAuthToken = async (\n    auth: Auth,\n    callback: ((auth: Auth) => Promise | AuthToken) | AuthToken,\n): Promise => {\n    const token =\n        typeof callback === 'function' ? await callback(auth) : callback;\n\n    if (!token) {\n        return;\n    }\n\n    if (auth.scheme === 'bearer') {\n        return `Bearer ${token}`;\n    }\n\n    if (auth.scheme === 'basic') {\n        return `Basic ${btoa(token)}`;\n    }\n\n    return token;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOAuth2Token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOAuth2Token\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOAuth2Token(body: any, headers: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('oauth2/token')@ApiBody({type: ClientCredentialsDto, examples: undefined})@ApiResponse({status: 200, description: 'OAuth2 token response', type: TokenResponse, example: undefined})@ApiResponse({status: 401, description: 'Invalid client credentials'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:60\n                        \n                    \n\n\n            \n                \n                        OAuth2 Token endpoint - supports client credentials flow only\nAccepts client credentials either in Authorization header (Basic auth) or request body\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Post,\n    Body,\n    UnauthorizedException,\n    Headers,\n} from '@nestjs/common';\nimport { ApiTags, ApiResponse, ApiBody } from '@nestjs/swagger';\nimport { JwtService } from './jwt.service';\nimport { ClientService } from './client.service';\nimport { Public } from './public.decorator';\nimport { ClientCredentialsDto } from './dto/client-credentials.dto';\nimport { TokenPayload } from './token.decorator';\nimport { TokenResponse } from './dto/token-response.dto';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        private jwtService: JwtService,\n        private clientService: ClientService,\n    ) {}\n\n    /**\n     * OAuth2 Token endpoint - supports client credentials flow only\n     * Accepts client credentials either in Authorization header (Basic auth) or request body\n     * @param body\n     * @param headers\n     * @returns\n     */\n    @Public()\n    @Post('oauth2/token')\n    @ApiBody({\n        type: ClientCredentialsDto,\n        examples: {\n            client_credentials: {\n                summary: 'Client Credentials Flow',\n                value: {\n                    grant_type: 'client_credentials',\n                    client_id: 'root',\n                    client_secret: 'root',\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'OAuth2 token response',\n        type: TokenResponse,\n        example: {\n            access_token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n            token_type: 'Bearer',\n            expires_in: 86400,\n        },\n    })\n    @ApiResponse({\n        status: 401,\n        description: 'Invalid client credentials',\n    })\n    async getOAuth2Token(\n        @Body() body: any,\n        @Headers() headers: any,\n    ): Promise {\n        if (this.jwtService.isUsingExternalOIDC()) {\n            throw new UnauthorizedException(\n                'OAuth2 token endpoint is not available when using external OIDC provider. Use your external OIDC provider for authentication.',\n            );\n        }\n\n        // Only support client credentials flow\n        if (body.grant_type !== 'client_credentials') {\n            throw new UnauthorizedException(\n                'Only client_credentials grant type is supported',\n            );\n        }\n\n        let clientId: string;\n        let clientSecret: string;\n\n        // Try to extract credentials from Authorization header (Basic auth)\n        const authHeader = headers.authorization;\n        if (authHeader && authHeader.startsWith('Basic ')) {\n            try {\n                const base64Credentials = authHeader.substring(6);\n                const credentials = Buffer.from(\n                    base64Credentials,\n                    'base64',\n                ).toString('ascii');\n                const [id, secret] = credentials.split(':');\n                clientId = id;\n                clientSecret = secret;\n            } catch {\n                throw new UnauthorizedException(\n                    'Invalid Authorization header format',\n                );\n            }\n        } else {\n            // Fall back to request body\n            clientId = body.client_id;\n            clientSecret = body.client_secret;\n        }\n\n        if (!clientId || !clientSecret) {\n            throw new UnauthorizedException(\n                'Client credentials must be provided either in Authorization header (Basic auth) or request body',\n            );\n        }\n\n        const client = this.clientService.validateClient(\n            clientId,\n            clientSecret,\n        );\n        if (!client) {\n            throw new UnauthorizedException('Invalid client credentials');\n        }\n\n        const payload: TokenPayload = {\n            sub: client.id,\n        };\n\n        const token = await this.jwtService.generateToken(payload, {\n            expiresIn: '24h',\n            audience: 'eudiplo-service',\n        });\n\n        return {\n            access_token: token,\n            token_type: 'Bearer',\n            expires_in: 86400, // 24 hours in seconds\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\n\n\nJwtService \n\nJwtService \n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClientService\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './jwt.strategy';\nimport { JwtAuthGuard } from './auth.guard';\nimport { JwtService } from './jwt.service';\nimport { AuthController } from './auth.controller';\nimport { ClientService } from './client.service';\nimport * as Joi from 'joi';\nimport { ConfigModule } from '@nestjs/config';\n\nexport const AUTH_VALIDATION_SCHEMA = {\n    OIDC: Joi.string().optional(),\n    KEYCLOAK_INTERNAL_ISSUER_URL: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    KEYCLOAK_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    JWT_ISSUER: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default('eudiplo-service'),\n    }),\n    JWT_EXPIRES_IN: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default('24h'),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    AUTH_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n};\n\n@Module({\n    imports: [PassportModule, ConfigModule],\n    providers: [JwtStrategy, JwtAuthGuard, JwtService, ClientService],\n    controllers: [AuthController],\n    exports: [PassportModule, JwtStrategy, JwtAuthGuard, JwtService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponse.html":{"url":"interfaces/AuthResponse.html","title":"interface - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/auth-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResponse DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                        \n                                            vp_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state parameter to maintain state between the request and callback.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vp_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        vp_token:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The VP token containing the presentation data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthResponse {\n    /**\n     * The VP token containing the presentation data.\n     */\n    vp_token: {\n        /**\n         * Key-value pairs representing the VP token data.\n         */\n        [key: string]: string;\n    };\n    /**\n     * The state parameter to maintain state between the request and callback.\n     */\n    state: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationConfigDto.html":{"url":"classes/AuthenticationConfigDto.html","title":"class - AuthenticationConfigDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationConfigDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Base class for authentication configurations\nDetermines which OpenID4VC flow to use for the issuance process\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                config\n                            \n                            \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationUrlConfig | PresentationDuringIssuanceConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:69\n                        \n                    \n\n            \n                \n                    Configuration specific to the selected authentication method\n\nFor 'none': no config needed (undefined) - uses pre-authorized code flow\nFor 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\nFor 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"none\" | \"auth\" | \"presentationDuringIssuance\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:60\n                        \n                    \n\n            \n                \n                    The authentication method to use:\n\n'none': Pre-authorized code flow (no user authentication)\n'auth': OID4VCI authorized code flow (user redirect for authentication)\n'presentationDuringIssuance': OID4VP flow (credential presentation required)\n\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsObject,\n    IsOptional,\n    IsUrl,\n    IsIn,\n    ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { PresentationDuringIssuance } from '../../credentials-metadata/dto/credential-config.dto';\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    authUrl: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Presentation configuration that specifies what credentials need to be presented via OID4VP\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuance)\n    presentation: PresentationDuringIssuance;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n    method: 'none' | 'auth' | 'presentationDuringIssuance';\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: 'none' } // Pre-authorized code flow\n    | { method: 'auth'; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: 'presentationDuringIssuance'; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationConfigHelper.html":{"url":"classes/AuthenticationConfigHelper.html","title":"class - AuthenticationConfigHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationConfigHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.helper.ts\n        \n\n\n            \n                Description\n            \n            \n                Utility functions for working with OpenID4VC authentication configurations\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getPresentationConfig\n                            \n                            \n                                    Static\n                                isAuthUrlAuth\n                            \n                            \n                                    Static\n                                isNoneAuth\n                            \n                            \n                                    Static\n                                isPresentationDuringIssuanceAuth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresentationConfig(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:44\n                        \n                    \n\n\n            \n                \n                        Get the presentation configuration if the method is 'presentationDuringIssuance'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PresentationDuringIssuanceConfig | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isAuthUrlAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthUrlAuth(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:23\n                        \n                    \n\n\n            \n                \n                        Type guard to check if the config uses OID4VCI authorized code flow\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isNoneAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isNoneAuth(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:14\n                        \n                    \n\n\n            \n                \n                        Type guard to check if the config uses pre-authorized code flow\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isPresentationDuringIssuanceAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isPresentationDuringIssuanceAuth(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:32\n                        \n                    \n\n\n            \n                \n                        Type guard to check if the config uses OID4VP flow\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    AuthenticationConfig,\n    AuthenticationUrlConfig,\n    PresentationDuringIssuanceConfig,\n} from './authentication-config.dto';\n\n/**\n * Utility functions for working with OpenID4VC authentication configurations\n */\nexport class AuthenticationConfigHelper {\n    /**\n     * Type guard to check if the config uses pre-authorized code flow\n     */\n    static isNoneAuth(\n        config: AuthenticationConfig,\n    ): config is { method: 'none' } {\n        return config.method === 'none';\n    }\n\n    /**\n     * Type guard to check if the config uses OID4VCI authorized code flow\n     */\n    static isAuthUrlAuth(\n        config: AuthenticationConfig,\n    ): config is { method: 'auth'; config: AuthenticationUrlConfig } {\n        return config.method === 'auth';\n    }\n\n    /**\n     * Type guard to check if the config uses OID4VP flow\n     */\n    static isPresentationDuringIssuanceAuth(\n        config: AuthenticationConfig,\n    ): config is {\n        method: 'presentationDuringIssuance';\n        config: PresentationDuringIssuanceConfig;\n    } {\n        return config.method === 'presentationDuringIssuance';\n    }\n\n    /**\n     * Get the presentation configuration if the method is 'presentationDuringIssuance'\n     */\n    static getPresentationConfig(\n        config: AuthenticationConfig,\n    ): PresentationDuringIssuanceConfig | null {\n        if (this.isPresentationDuringIssuanceAuth(config)) {\n            return config.config;\n        }\n        return null;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationUrlConfig.html":{"url":"classes/AuthenticationUrlConfig.html","title":"class - AuthenticationUrlConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationUrlConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'auth'\nUsed for OID4VCI authorized code flow where the user will be redirected for authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:22\n                        \n                    \n\n            \n                \n                    The URL used in the OID4VCI authorized code flow.\nThis URL is where users will be redirected for authentication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:31\n                        \n                    \n\n            \n                \n                    Optional webhook configuration for authentication callbacks\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsObject,\n    IsOptional,\n    IsUrl,\n    IsIn,\n    ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { PresentationDuringIssuance } from '../../credentials-metadata/dto/credential-config.dto';\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    authUrl: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Presentation configuration that specifies what credentials need to be presented via OID4VP\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuance)\n    presentation: PresentationDuringIssuance;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n    method: 'none' | 'auth' | 'presentationDuringIssuance';\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: 'none' } // Pre-authorized code flow\n    | { method: 'auth'; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: 'presentationDuringIssuance'; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationResponse.html":{"url":"classes/AuthorizationResponse.html","title":"class - AuthorizationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/authorization-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the authorization response containing the VP token.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                response\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The response string containing the authorization details.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\n/**\n * DTO for the authorization response containing the VP token.\n */\nexport class AuthorizationResponse {\n    /**\n     * The response string containing the authorization details.\n     */\n    @IsString()\n    response: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorizeController.html":{"url":"controllers/AuthorizeController.html","title":"controller - AuthorizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/authorize\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI authorization endpoints.\nThis controller handles the authorization requests, token requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorizationChallengeEndpoint\n                            \n                            \n                                    \n                                    Async\n                                authorize\n                            \n                            \n                                    \n                                    \n                                    Async\n                                par\n                            \n                            \n                                    \n                                    Async\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response, body: AuthorizeQueries, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('challenge')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:98\n                        \n                    \n\n\n            \n                \n                        Endpoint for the authorization challenge.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        authorize\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorize(queries: AuthorizeQueries, res: Response, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Authorization Request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        par\n                        \n                    \n                \n            \n            \n                \n                        \n                    par(body: AuthorizeQueries, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'Pushed Authorization Request', type: AuthorizeQueries})@Post('par')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Pushed Authorization Request (PAR).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        token\n                        \n                    \n                \n            \n            \n                \n                        \n                    token(body: any, req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Endpoint to validate the token request.\nThis endpoint is used to exchange the authorization code for an access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport {\n    Body,\n    Controller,\n    Get,\n    Param,\n    Post,\n    Query,\n    Req,\n    Res,\n} from '@nestjs/common';\nimport type { Request, Response } from 'express';\nimport { AuthorizeService } from './authorize.service';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { SessionService } from '../../session/session.service';\nimport { ParResponseDto } from './dto/par-response.dto';\nimport { ApiBody } from '@nestjs/swagger';\n\n/**\n * Controller for the OpenID4VCI authorization endpoints.\n * This controller handles the authorization requests, token requests.\n */\n@Controller(':tenantId/authorize')\nexport class AuthorizeController {\n    constructor(\n        private readonly authorizeService: AuthorizeService,\n        private sessionService: SessionService,\n    ) {}\n\n    /**\n     * Endpoint to handle the Authorization Request.\n     * @param queries\n     * @param res\n     */\n    @Get()\n    async authorize(\n        @Query() queries: AuthorizeQueries,\n        @Res() res: Response,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.authorizeService.sendAuthorizationResponse(\n            queries,\n            res,\n            tenantId,\n        );\n    }\n\n    /**\n     * Endpoint to handle the Pushed Authorization Request (PAR).\n     * @param body\n     * @returns\n     */\n    @ApiBody({\n        description: 'Pushed Authorization Request',\n        type: AuthorizeQueries,\n    })\n    @Post('par')\n    async par(\n        @Body() body: AuthorizeQueries,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        const request_uri = `urn:${randomUUID()}`;\n        // save both so we can retrieve the session also via the request_uri in the authorize step.\n        await this.sessionService.add(body.issuer_state!, tenantId, {\n            request_uri,\n            auth_queries: body,\n        });\n        return {\n            expires_in: 500,\n            request_uri,\n        };\n    }\n\n    /**\n     * Endpoint to validate the token request.\n     * This endpoint is used to exchange the authorization code for an access token.\n     * @param body\n     * @param req\n     * @returns\n     */\n    @Post('token')\n    async token(\n        @Body() body: any,\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        //TODO: define body\n        return this.authorizeService.validateTokenRequest(body, req, tenantId);\n    }\n\n    /**\n     * Endpoint for the authorization challenge.\n     * @param res\n     * @param body\n     * @returns\n     */\n    @Post('challenge')\n    authorizationChallengeEndpoint(\n        @Res() res: Response,\n        @Body() body: AuthorizeQueries,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.authorizeService.authorizationChallengeEndpoint(\n            res,\n            body,\n            tenantId,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizeQueries.html":{"url":"classes/AuthorizeQueries.html","title":"class - AuthorizeQueries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizeQueries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/authorize-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                auth_session\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                client_id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge_method\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dpop_jkt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                issuer_state\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                redirect_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resource\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        auth_session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge_method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dpop_jkt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        issuer_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        redirect_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\n\nexport class AuthorizeQueries {\n    @IsOptional()\n    @IsString()\n    issuer_state?: string;\n    @IsOptional()\n    @IsString()\n    response_type?: string;\n    @IsOptional()\n    @IsString()\n    client_id?: string;\n    @IsOptional()\n    @IsString()\n    redirect_uri?: string;\n    @IsOptional()\n    @IsString()\n    resource?: string;\n    @IsOptional()\n    @IsString()\n    scope?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge_method?: string;\n    @IsOptional()\n    @IsString()\n    dpop_jkt?: string;\n    @IsOptional()\n    @IsString()\n    request_uri?: string;\n    @IsOptional()\n    @IsString()\n    auth_session?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizeService.html":{"url":"injectables/AuthorizeService.html","title":"injectable - AuthorizeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authorizationChallengeEndpoint\n                            \n                            \n                                authzMetadata\n                            \n                            \n                                getAuthorizationServer\n                            \n                            \n                                    Async\n                                parseChallengeRequest\n                            \n                            \n                                    Private\n                                    Async\n                                sendAuthorizationCode\n                            \n                            \n                                    Async\n                                sendAuthorizationResponse\n                            \n                            \n                                    Async\n                                setAuthCode\n                            \n                            \n                                    Async\n                                validateTokenRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, oid4vpService: Oid4vpService, sessionService: SessionService, issuanceService: IssuanceService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/authorize/authorize.service.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vpService\n                                                  \n                                                        \n                                                                        Oid4vpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response>, body: AuthorizeQueries, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:228\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \nauthzMetadata(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AuthorizationServerMetadata\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthorizationServer\n                        \n                    \n                \n            \n            \n                \ngetAuthorizationServer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServer\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        parseChallengeRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseChallengeRequest(body: AuthorizeQueries, tenantId: string, webhook?: WebhookConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:210\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                webhook\n                                            \n                                                            WebhookConfig\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        sendAuthorizationCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationCode(res: Response, issuer_state: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:306\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendAuthorizationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationResponse(queries: AuthorizeQueries, res: Response>, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setAuthCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAuthCode(issuer_state: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:320\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateTokenRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateTokenRequest(body: any, req: Request, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    authorizationCodeGrantIdentifier,\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { SessionService } from '../../session/session.service';\nimport { WebhookConfig } from '../../utils/webhook/webhook.dto';\nimport { IssuanceService } from '../issuance/issuance.service';\nimport { AuthenticationConfigHelper } from '../issuance/dto/authentication-config.helper';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(tenantId: string): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${tenantId}`;\n        return this.getAuthorizationServer(\n            tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n        tenantId: string,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!, tenantId);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        }\n        const authorizationServerMetadata = this.authzMetadata(tenantId);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n\n        const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            cNonce,\n            cNonceExpiresIn: 100,\n            clientId: 'wallet', // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        tenantId: string,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(\n                    res,\n                    body.auth_session,\n                    tenantId,\n                );\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    'Session does not have valid credentials for issuance',\n                );\n            }\n        }\n\n        const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        }\n        const issuanceId = session.issuanceId!;\n        const config = await this.issuanceService.getIssuanceConfigurationById(\n            issuanceId,\n            tenantId,\n        );\n\n        // Use the new authentication configuration structure\n        const authConfig = config.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                'No authentication configuration found for issuance config',\n            );\n        }\n\n        if (\n            AuthenticationConfigHelper.isPresentationDuringIssuanceAuth(\n                authConfig,\n            )\n        ) {\n            // OID4VP flow - credential presentation required\n            const presentationConfig =\n                AuthenticationConfigHelper.getPresentationConfig(authConfig);\n            const webhook = presentationConfig?.presentation.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else if (AuthenticationConfigHelper.isAuthUrlAuth(authConfig)) {\n            // OID4VCI authorized code flow - should not reach here typically in challenge endpoint\n            // But we'll handle it by sending authorization code\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        } else if (AuthenticationConfigHelper.isNoneAuth(authConfig)) {\n            // Pre-authorized code flow (method: 'none') - send authorization code directly\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        } else {\n            throw new Error(\n                `Unsupported authentication method: ${(authConfig as any).method}`,\n            );\n        }\n    }\n\n    private async sendAuthorizationCode(\n        res: Response,\n        issuer_state: string,\n        tenantId: string,\n    ) {\n        const authorization_code = await this.setAuthCode(\n            issuer_state,\n            tenantId,\n        );\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string, tenantId: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, tenantId, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Client.html":{"url":"interfaces/Client.html","title":"interface - Client","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Client\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from './tenant-events';\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private eventEmitter: EventEmitter2,\n    ) {}\n\n    onApplicationBootstrap() {\n        // were are ignoring clients that are not used anymore for now. Need to implement a proper cleanup mechanism later\n        const clients = this.getClients();\n        clients.forEach((client) => {\n            this.setUpClient(client.id);\n        });\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow('AUTH_CLIENT_ID'),\n                secret: this.configService.getOrThrow(\n                    'AUTH_CLIENT_SECRET',\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    setUpClient(id: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            id,\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n\n        const displayInfo = [\n            {\n                name: 'EUDI Wallet dev',\n                locale: 'de-DE',\n                logo: {\n                    uri: '/issuer.png',\n                    url: '/issuer.png',\n                },\n            },\n        ];\n        writeFileSync(\n            join(folder, 'display.json'),\n            JSON.stringify(displayInfo, null, 2),\n        );\n\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_INIT, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Client-1.html":{"url":"interfaces/Client-1.html","title":"interface - Client-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Client\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            buildUrl\n                                        \n                                \n                                \n                                        \n                                            connect\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            get\n                                        \n                                \n                                \n                                        \n                                            getConfig\n                                        \n                                \n                                \n                                        \n                                            head\n                                        \n                                \n                                \n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            patch\n                                        \n                                \n                                \n                                        \n                                            post\n                                        \n                                \n                                \n                                        \n                                            put\n                                        \n                                \n                                \n                                        \n                                            request\n                                        \n                                \n                                \n                                        \n                                            setConfig\n                                        \n                                \n                                \n                                        \n                                            trace\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buildUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buildUrl:         BuildUrlFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BuildUrlFn\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Returns the final request URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        connect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        connect:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        get\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        get:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getConfig:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        head\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        head:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        patch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        patch:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        post\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        post:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        put\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        put:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        request\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        request:         RequestFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RequestFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setConfig:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trace\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trace:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth, AuthToken } from './auth';\nimport type {\n    BodySerializer,\n    QuerySerializer,\n    QuerySerializerOptions,\n} from './bodySerializer';\n\nexport interface Client {\n    /**\n     * Returns the final request URL.\n     */\n    buildUrl: BuildUrlFn;\n    connect: MethodFn;\n    delete: MethodFn;\n    get: MethodFn;\n    getConfig: () => Config;\n    head: MethodFn;\n    options: MethodFn;\n    patch: MethodFn;\n    post: MethodFn;\n    put: MethodFn;\n    request: RequestFn;\n    setConfig: (config: Config) => Config;\n    trace: MethodFn;\n}\n\nexport interface Config {\n    /**\n     * Auth token or a function returning auth token. The resolved value will be\n     * added to the request payload as defined by its `security` array.\n     */\n    auth?: ((auth: Auth) => Promise | AuthToken) | AuthToken;\n    /**\n     * A function for serializing request body parameter. By default,\n     * {@link JSON.stringify()} will be used.\n     */\n    bodySerializer?: BodySerializer | null;\n    /**\n     * An object containing any HTTP headers that you want to pre-populate your\n     * `Headers` object with.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/Headers/Headers#init See more}\n     */\n    headers?:\n        | RequestInit['headers']\n        | Record;\n    /**\n     * The request method.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#method See more}\n     */\n    method?:\n        | 'CONNECT'\n        | 'DELETE'\n        | 'GET'\n        | 'HEAD'\n        | 'OPTIONS'\n        | 'PATCH'\n        | 'POST'\n        | 'PUT'\n        | 'TRACE';\n    /**\n     * A function for serializing request query parameters. By default, arrays\n     * will be exploded in form style, objects will be exploded in deepObject\n     * style, and reserved characters are percent-encoded.\n     *\n     * This method will have no effect if the native `paramsSerializer()` Axios\n     * API function is used.\n     *\n     * {@link https://swagger.io/docs/specification/serialization/#query View examples}\n     */\n    querySerializer?: QuerySerializer | QuerySerializerOptions;\n    /**\n     * A function validating request data. This is useful if you want to ensure\n     * the request conforms to the desired shape, so it can be safely sent to\n     * the server.\n     */\n    requestValidator?: (data: unknown) => Promise;\n    /**\n     * A function transforming response data before it's returned. This is useful\n     * for post-processing data, e.g. converting ISO strings into Date objects.\n     */\n    responseTransformer?: (data: unknown) => Promise;\n    /**\n     * A function validating response data. This is useful if you want to ensure\n     * the response conforms to the desired shape, so it can be safely passed to\n     * the transformers and returned to the user.\n     */\n    responseValidator?: (data: unknown) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientCredentialsDto.html":{"url":"classes/ClientCredentialsDto.html","title":"class - ClientCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                client_id\n                            \n                            \n                                    \n                                client_secret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class ClientCredentialsDto {\n    @IsString()\n    client_id: string;\n    @IsString()\n    client_secret: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClientOptions.html":{"url":"interfaces/ClientOptions.html","title":"interface - ClientOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ClientOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            baseUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseStyle\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            throwOnError\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseStyle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseStyle:         ResponseStyle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ResponseStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        throwOnError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        throwOnError:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clients\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findClientById\n                            \n                            \n                                    Private\n                                getClients\n                            \n                            \n                                    Private\n                                loadClients\n                            \n                            \n                                onApplicationBootstrap\n                            \n                            \n                                setUpClient\n                            \n                            \n                                validateClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/auth/client.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findClientById\n                        \n                    \n                \n            \n            \n                \nfindClientById(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Find client by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Get clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Load clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUpClient\n                        \n                    \n                \n            \n            \n                \nsetUpClient(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Sends an event to set up a client, allowing all other services to listen and react accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateClient\n                        \n                    \n                \n            \n            \n                \nvalidateClient(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Validate client credentials (OAuth2 Client Credentials flow)\nThis is the primary authentication method for service integration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Client[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/auth/client.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from './tenant-events';\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private eventEmitter: EventEmitter2,\n    ) {}\n\n    onApplicationBootstrap() {\n        // were are ignoring clients that are not used anymore for now. Need to implement a proper cleanup mechanism later\n        const clients = this.getClients();\n        clients.forEach((client) => {\n            this.setUpClient(client.id);\n        });\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow('AUTH_CLIENT_ID'),\n                secret: this.configService.getOrThrow(\n                    'AUTH_CLIENT_SECRET',\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    setUpClient(id: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            id,\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n\n        const displayInfo = [\n            {\n                name: 'EUDI Wallet dev',\n                locale: 'de-DE',\n                logo: {\n                    uri: '/issuer.png',\n                    url: '/issuer.png',\n                },\n            },\n        ];\n        writeFileSync(\n            join(folder, 'display.json'),\n            JSON.stringify(displayInfo, null, 2),\n        );\n\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_INIT, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config.html":{"url":"interfaces/Config.html","title":"interface - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Omit\n                            CoreConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            baseUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fetch\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            next\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            parseAs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseStyle\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            throwOnError\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseUrl:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Base URL for all requests made by this client.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fetch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fetch:         function\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : globalThis.fetch\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Fetch API implementation. You can use this option to provide a custom\nfetch instance.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        next\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        next:     never\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     never\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Please don't use the Fetch client for Next.js applications. The next\noptions won't have any effect.\nInstall @hey-api/client-next instead.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parseAs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parseAs:     \"arrayBuffer\" | \"auto\" | \"blob\" | \"formData\" | \"json\" | \"stream\" | \"text\"\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'auto'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     \"arrayBuffer\" | \"auto\" | \"blob\" | \"formData\" | \"json\" | \"stream\" | \"text\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Return the response data parsed in a specified format. By default, auto\nwill infer the appropriate method from the Content-Type response header.\nYou can override this behavior with any of the Body methods.\nSelect stream if you don't want to parse response data at all.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseStyle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseStyle:         ResponseStyle\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'fields'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         ResponseStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Should we return only data or multiple fields (data, error, response, etc.)?\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        throwOnError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        throwOnError:     T\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : false\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Throw an error instead of returning it in the response?\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config-1.html":{"url":"interfaces/Config-1.html","title":"interface - Config-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            auth\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            bodySerializer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            method\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            querySerializer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            requestValidator\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseTransformer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseValidator\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        auth\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        auth:          | AuthToken\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :          | AuthToken\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Auth token or a function returning auth token. The resolved value will be\nadded to the request payload as defined by its security array.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bodySerializer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bodySerializer:         BodySerializer | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BodySerializer | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function for serializing request body parameter. By default,\nJSON.stringify() will be used.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:      | Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An object containing any HTTP headers that you want to pre-populate your\nHeaders object with.\nSee more\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:     \"CONNECT\" | \"DELETE\" | \"GET\" | \"HEAD\" | \"OPTIONS\" | \"PATCH\" | \"POST\" | \"PUT\" | \"TRACE\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"CONNECT\" | \"DELETE\" | \"GET\" | \"HEAD\" | \"OPTIONS\" | \"PATCH\" | \"POST\" | \"PUT\" | \"TRACE\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The request method.\nSee more\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        querySerializer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        querySerializer:     QuerySerializer | QuerySerializerOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     QuerySerializer | QuerySerializerOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function for serializing request query parameters. By default, arrays\nwill be exploded in form style, objects will be exploded in deepObject\nstyle, and reserved characters are percent-encoded.\nThis method will have no effect if the native paramsSerializer() Axios\nAPI function is used.\nView examples\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestValidator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        requestValidator:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function validating request data. This is useful if you want to ensure\nthe request conforms to the desired shape, so it can be safely sent to\nthe server.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseTransformer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseTransformer:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function transforming response data before it's returned. This is useful\nfor post-processing data, e.g. converting ISO strings into Date objects.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseValidator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseValidator:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function validating response data. This is useful if you want to ensure\nthe response conforms to the desired shape, so it can be safely passed to\nthe transformers and returned to the user.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import type { Auth, AuthToken } from './auth';\nimport type {\n    BodySerializer,\n    QuerySerializer,\n    QuerySerializerOptions,\n} from './bodySerializer';\n\nexport interface Client {\n    /**\n     * Returns the final request URL.\n     */\n    buildUrl: BuildUrlFn;\n    connect: MethodFn;\n    delete: MethodFn;\n    get: MethodFn;\n    getConfig: () => Config;\n    head: MethodFn;\n    options: MethodFn;\n    patch: MethodFn;\n    post: MethodFn;\n    put: MethodFn;\n    request: RequestFn;\n    setConfig: (config: Config) => Config;\n    trace: MethodFn;\n}\n\nexport interface Config {\n    /**\n     * Auth token or a function returning auth token. The resolved value will be\n     * added to the request payload as defined by its `security` array.\n     */\n    auth?: ((auth: Auth) => Promise | AuthToken) | AuthToken;\n    /**\n     * A function for serializing request body parameter. By default,\n     * {@link JSON.stringify()} will be used.\n     */\n    bodySerializer?: BodySerializer | null;\n    /**\n     * An object containing any HTTP headers that you want to pre-populate your\n     * `Headers` object with.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/Headers/Headers#init See more}\n     */\n    headers?:\n        | RequestInit['headers']\n        | Record;\n    /**\n     * The request method.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#method See more}\n     */\n    method?:\n        | 'CONNECT'\n        | 'DELETE'\n        | 'GET'\n        | 'HEAD'\n        | 'OPTIONS'\n        | 'PATCH'\n        | 'POST'\n        | 'PUT'\n        | 'TRACE';\n    /**\n     * A function for serializing request query parameters. By default, arrays\n     * will be exploded in form style, objects will be exploded in deepObject\n     * style, and reserved characters are percent-encoded.\n     *\n     * This method will have no effect if the native `paramsSerializer()` Axios\n     * API function is used.\n     *\n     * {@link https://swagger.io/docs/specification/serialization/#query View examples}\n     */\n    querySerializer?: QuerySerializer | QuerySerializerOptions;\n    /**\n     * A function validating request data. This is useful if you want to ensure\n     * the request conforms to the desired shape, so it can be safely sent to\n     * the server.\n     */\n    requestValidator?: (data: unknown) => Promise;\n    /**\n     * A function transforming response data before it's returned. This is useful\n     * for post-processing data, e.g. converting ISO strings into Date objects.\n     */\n    responseTransformer?: (data: unknown) => Promise;\n    /**\n     * A function validating response data. This is useful if you want to ensure\n     * the response conforms to the desired shape, so it can be safely passed to\n     * the transformers and returned to the user.\n     */\n    responseValidator?: (data: unknown) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CredentialConfig.html":{"url":"entities/CredentialConfig.html","title":"entity - CredentialConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CredentialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage a credential configuration\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                claims\n                            \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                disclosureFrame\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                issuanceConfig\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:34\n                        \n                    \n\n            \n                \n                    Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfigurationSupported\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:28\n                        \n                    \n\n            \n                \n                    OID4VCI issuer metadata crddential configuration element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        disclosureFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:40\n                        \n                    \n\n            \n                \n                    Disclosure frame for the sd jwt vc.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:17\n                        \n                    \n\n            \n                \n                    Unique identifier for the configuration to reference it.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        issuanceConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IssuanceConfig[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, issuanceConfig => issuanceConfig.credentialConfigs, {cascade: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:64\n                        \n                    \n\n            \n                \n                    Link to all the issuance configs that are using this credential.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SchemaResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:22\n                        \n                    \n\n            \n                \n                    Tenant ID for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VCT\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:47\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { CredentialConfigurationSupported } from '@openid4vc/openid4vci';\nimport { IsObject, IsOptional } from 'class-validator';\nimport { Column, Entity, JoinTable, ManyToMany } from 'typeorm';\nimport { VCT } from '../../credentials-metadata/dto/credential-config.dto';\nimport { SchemaResponse } from '../../credentials-metadata/dto/schema-response.dto';\nimport { IssuanceConfig } from '../../issuance/entities/issuance-config.entity';\n\n/**\n * Entity to manage a credential configuration\n */\n@Entity()\nexport class CredentialConfig {\n    /**\n     * Unique identifier for the configuration to reference it.\n     */\n    @Column('varchar', { primary: true })\n    id: string;\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @Column('varchar', { primary: true })\n    tenantId: string;\n    /**\n     * OID4VCI issuer metadata crddential configuration element.\n     */\n    @Column('json')\n    @IsObject()\n    config: CredentialConfigurationSupported;\n    /**\n     * Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.\n     */\n    @Column('json', { nullable: true })\n    @IsObject()\n    claims: Record;\n    /**\n     * Disclosure frame for the sd jwt vc.\n     */\n    @Column('json', { nullable: true })\n    @IsObject()\n    disclosureFrame: Record;\n    @Column('json', { nullable: true })\n    /**\n     * VCT values that are hosted by this service.\n     */\n    @IsObject()\n    @IsOptional()\n    vct?: VCT;\n    @Column('json', { nullable: true })\n    /**\n     * json schema that is used during issuance for the validation of the claims.\n     */\n    @IsObject()\n    @IsOptional()\n    schema?: SchemaResponse;\n    /**\n     * Link to all the issuance configs that are using this credential.\n     */\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuanceConfig) => issuanceConfig.credentialConfigs,\n        { cascade: true },\n    )\n    @JoinTable()\n    issuanceConfig: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialConfigService.html":{"url":"injectables/CredentialConfigService.html","title":"injectable - CredentialConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credential-config/credential-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credential configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getById\n                            \n                            \n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(credentialConfigRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credential-config/credential-config.service.ts:10\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialConfigService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        credentialConfigRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for CredentialConfig entity.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the CredentialConfig entity to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the result of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves all credential configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CredentialConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Retrieves a credential configuration by its ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore(tenantId: string, config: CredentialConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Stores a credential configuration for a given tenant.\nIf the configuration already exists, it will be overwritten.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                config\n                                            \n                                                            CredentialConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CredentialConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored CredentialConfig entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CredentialConfig } from '../entities/credential.entity';\n\n/**\n * Service for managing credential configurations.\n */\n@Injectable()\nexport class CredentialConfigService {\n    /**\n     * Constructor for CredentialConfigService.\n     * @param credentialConfigRepository - Repository for CredentialConfig entity.\n     */\n    constructor(\n        @InjectRepository(CredentialConfig)\n        private readonly credentialConfigRepository: Repository,\n    ) {}\n\n    /**\n     * Retrieves all credential configurations for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @returns A promise that resolves to an array of CredentialConfig entities.\n     */\n    get(tenantId: string) {\n        return this.credentialConfigRepository.find({\n            where: { tenantId },\n        });\n    }\n\n    /**\n     * Retrieves a credential configuration by its ID for a given tenant.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    getById(tenantId: string, id: string) {\n        return this.credentialConfigRepository.findOne({\n            where: { id, tenantId },\n        });\n    }\n\n    /**\n     * Stores a credential configuration for a given tenant.\n     * If the configuration already exists, it will be overwritten.\n     * @param tenantId - The ID of the tenant.\n     * @param config - The CredentialConfig entity to store.\n     * @returns A promise that resolves to the stored CredentialConfig entity.\n     */\n    store(tenantId: string, config: CredentialConfig) {\n        return this.credentialConfigRepository.save({\n            ...config,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a credential configuration for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @param id - The ID of the CredentialConfig entity to delete.\n     * @returns A promise that resolves to the result of the delete operation.\n     */\n    delete(tenantId: string, id: string) {\n        return this.credentialConfigRepository.delete({\n            id,\n            tenantId,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuerMetadataDto.html":{"url":"classes/CredentialIssuerMetadataDto.html","title":"class - CredentialIssuerMetadataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuerMetadataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/credential-issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the metadata for a credential issuer.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_server\n                            \n                            \n                                authorization_servers\n                            \n                            \n                                batch_credential_issuance\n                            \n                            \n                                credential_configurations_supported\n                            \n                            \n                                credential_endpoint\n                            \n                            \n                                credential_issuer\n                            \n                            \n                                display\n                            \n                            \n                                notification_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:41\n                        \n                    \n\n            \n                \n                    The URL of the preferred authorization server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_servers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:12\n                        \n                    \n\n            \n                \n                    List of authorization servers that support the credential issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        batch_credential_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:24\n                        \n                    \n\n            \n                \n                    Information about batch credential issuance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_configurations_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:37\n                        \n                    \n\n            \n                \n                    Object of credentials configurations supported by the issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:16\n                        \n                    \n\n            \n                \n                    The URL of the credential issuance endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:8\n                        \n                    \n\n            \n                \n                    The issuer identifier, typically a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:33\n                        \n                    \n\n            \n                \n                    Display information for the credentials that are getting issued.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notification_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:20\n                        \n                    \n\n            \n                \n                    The URL of the notification endpoint for credential issuance.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CredentialIssuerMetadataDto {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    credential_issuer: string;\n    /**\n     * List of authorization servers that support the credential issuer.\n     */\n    authorization_servers: string[];\n    /**\n     * The URL of the credential issuance endpoint.\n     */\n    credential_endpoint: string;\n    /**\n     * The URL of the notification endpoint for credential issuance.\n     */\n    notification_endpoint: string;\n    /**\n     * Information about batch credential issuance.\n     */\n    batch_credential_issuance: {\n        /**\n         * Amount of elements in a batch.\n         */\n        batch_size: number;\n    };\n    /**\n     * Display information for the credentials that are getting issued.\n     */\n    display: Array;\n    /**\n     * Object of credentials configurations supported by the issuer.\n     */\n    credential_configurations_supported: any;\n    /**\n     * The URL of the preferred authorization server.\n     */\n    authorization_server: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsController.html":{"url":"controllers/CredentialsController.html","title":"controller - CredentialsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/credentials\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing credential configurations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getConfigs\n                            \n                            \n                                    \n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Deletes an credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getConfigs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfigs(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Returns the credential configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(config: CredentialConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Stores the credential configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            CredentialConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Body,\n    UseGuards,\n} from '@nestjs/common';\nimport { ApiSecurity, ApiTags } from '@nestjs/swagger';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { CredentialConfigService } from './credential-config/credential-config.service';\nimport { CredentialConfig } from './entities/credential.entity';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\n\n/**\n * Controller for managing credential configurations.\n */\n@ApiTags('Issuer management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('issuer-management/credentials')\nexport class CredentialsController {\n    /**\n     * Initializes the CredentialsController with the CredentialConfigService.\n     * @param credentialsService\n     */\n    constructor(private readonly credentialsService: CredentialConfigService) {}\n\n    /**\n     * Returns the credential configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getConfigs(@Token() user: TokenPayload) {\n        return this.credentialsService.get(user.sub);\n    }\n\n    /**\n     * Stores the credential configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeCredentialConfiguration(\n        @Body() config: CredentialConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.store(user.sub, config);\n    }\n\n    /**\n     * Deletes an credential configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteIssuanceConfiguration(\n        @Param('id') id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.delete(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsMetadataController.html":{"url":"controllers/CredentialsMetadataController.html","title":"controller - CredentialsMetadataController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsMetadataController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/credentials-metadata.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                credentials-metadata\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n            \n                \n                        \n                    schema(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('schema/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:23\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n            \n                \n                        \n                    vct(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('vct/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:13\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the credential configuration.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { CredentialsService } from '../credentials/credentials.service';\n\n@Controller('credentials-metadata')\nexport class CredentialsMetadataController {\n    constructor(private readonly credentialsService: CredentialsService) {}\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n     * @param id - The identifier of the credential configuration.\n     */\n    @Get('vct/:id')\n    vct(@Param('id') id: string, @Param('tenantId') tenantId: string) {\n        return this.credentialsService.getVCT(id, tenantId);\n    }\n\n    /**\n     * Retrieves the schema for a specific credential\n     * @param id\n     * @returns\n     */\n    @Get('schema/:id')\n    schema(@Param('id') id: string, @Param('tenantId') tenantId: string) {\n        return this.credentialsService.getSchema(id, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialsService.html":{"url":"injectables/CredentialsService.html","title":"injectable - CredentialsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                getCredentialConfiguration\n                            \n                            \n                                    Async\n                                getSchema\n                            \n                            \n                                    Async\n                                getVCT\n                            \n                            \n                                    Async\n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(crpytoService: CryptoService, configService: ConfigService, statusListService: StatusListService, credentialConfigRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credentials.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        crpytoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(credentialConfigurationId: string, cnf: Jwk, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cnf\n                                            \n                                                        Jwk\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredentialConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration that is required for oid4vci\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSchema(credentialConfigurationId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:153\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVCT\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVCT(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(tenantId: string, value: CredentialConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            CredentialConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport type { Jwk } from '@openid4vc/oauth2';\nimport { digest, generateSalt } from '@sd-jwt/crypto-nodejs';\nimport { SDJwtVcInstance } from '@sd-jwt/sd-jwt-vc';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { StatusListService } from '../status-list/status-list.service';\nimport { CredentialConfigurationSupported } from '@openid4vc/openid4vci';\nimport { Session } from '../../session/entities/session.entity';\nimport { SchemaResponse } from '../credentials-metadata/dto/schema-response.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CredentialConfig } from './entities/credential.entity';\nimport { VCT } from '../credentials-metadata/dto/credential-config.dto';\n\n@Injectable()\nexport class CredentialsService {\n    constructor(\n        private crpytoService: CryptoService,\n        private configService: ConfigService,\n        private statusListService: StatusListService,\n\n        @InjectRepository(CredentialConfig)\n        private credentialConfigRepo: Repository,\n    ) {}\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeCredentialConfiguration(\n        tenantId: string,\n        value: CredentialConfig,\n    ) {\n        value.tenantId = tenantId;\n        return this.credentialConfigRepo.save(value);\n    }\n\n    /**\n     * Returns the credential configuration that is required for oid4vci\n     * @param tenantId\n     * @returns\n     */\n    async getCredentialConfiguration(\n        tenantId: string,\n    ): Promise> {\n        const credential_configurations_supported: Record = {};\n\n        const configs = await this.credentialConfigRepo.findBy({ tenantId });\n\n        for (const value of configs) {\n            credential_configurations_supported[value.id] = value.config;\n        }\n        return credential_configurations_supported;\n    }\n\n    async getCredential(\n        credentialConfigurationId: string,\n        cnf: Jwk,\n        session: Session,\n    ) {\n        const credentialConfiguration = await this.credentialConfigRepo\n            .findOneByOrFail({\n                id: credentialConfigurationId,\n                tenantId: session.tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialConfigurationId} not found`,\n                );\n            });\n\n        const claims =\n            session.credentialPayload?.values?.[credentialConfigurationId] ??\n            credentialConfiguration.claims;\n        const disclosureFrame = credentialConfiguration.disclosureFrame;\n\n        const sdjwt = new SDJwtVcInstance({\n            signer: await this.crpytoService.keyService.signer(\n                session.tenantId,\n            ),\n            signAlg: 'ES256',\n            hasher: digest,\n            hashAlg: 'sha-256',\n            saltGenerator: generateSalt,\n            loadTypeMetadataFormat: true,\n        });\n\n        return sdjwt.issue(\n            {\n                iss: this.configService.getOrThrow('PUBLIC_URL'),\n                iat: Math.round(new Date().getTime() / 1000),\n                vct: `${this.configService.getOrThrow('PUBLIC_URL')}/${session.tenantId}/credentials/vct/${credentialConfigurationId}`,\n                cnf: {\n                    jwk: cnf,\n                },\n                ...(await this.statusListService.createEntry(\n                    session,\n                    credentialConfigurationId,\n                )),\n                ...claims,\n            },\n            disclosureFrame,\n            {\n                header: {\n                    x5c: this.crpytoService.getCertChain(\n                        'signing',\n                        session.tenantId,\n                    ),\n                    alg: 'ES256',\n                },\n            },\n        );\n    }\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n     * @param credentialId\n     * @param tenantId\n     * @returns\n     */\n    async getVCT(credentialId: string, tenantId: string): Promise {\n        const credentialConfig = await this.credentialConfigRepo\n            .findOneByOrFail({\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialId} not found`,\n                );\n            });\n        if (!credentialConfig.vct) {\n            throw new ConflictException(\n                `VCT for credential configuration with id ${credentialId} not found`,\n            );\n        }\n        const host = this.configService.getOrThrow('PUBLIC_URL');\n        credentialConfig.vct.vct = `${host}/${tenantId}/credentials-metadata/vct/${credentialConfig.id}`;\n        return credentialConfig.vct;\n    }\n\n    /**\n     * Retrieves the schema for a specific credential configuration.\n     * @param id\n     * @param tenantId\n     * @returns\n     */\n    async getSchema(\n        credentialConfigurationId: string,\n        tenantId: string,\n    ): Promise {\n        const credentialConfig =\n            await this.credentialConfigRepo.findOneByOrFail({\n                tenantId,\n            });\n        if (!credentialConfig) {\n            throw new ConflictException(\n                `Credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        if (!credentialConfig.schema) {\n            throw new ConflictException(\n                `Schema for credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        return credentialConfig.schema;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoImplementation.html":{"url":"interfaces/CryptoImplementation.html","title":"interface - CryptoImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto/crypto-implementation.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface to imeplement different algorithms.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alg\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        generateKeyPair\n                                    \n                                \n                                \n                                    \n                                        getSigner\n                                    \n                                \n                                \n                                    \n                                        getVerifier\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyPair\n                        \n                    \n                \n            \n            \n                \ngenerateKeyPair()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a new keypair\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSigner\n                        \n                    \n                \n            \n            \n                \ngetSigner(privateKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:24\n                        \n                    \n\n\n            \n                \n                        creates a signer based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKeyJWK\n                                            \n                                                        JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVerifier\n                        \n                    \n                \n            \n            \n                \ngetVerifier(publicKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:29\n                        \n                    \n\n\n            \n                \n                        creates a verifier based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                publicKeyJWK\n                                            \n                                                        JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type KeyPair = {\n    publicKey: JsonWebKey;\n    privateKey: JsonWebKey;\n};\n\ntype Signer = (data: string) => Promise;\n\ntype Verifier = (data: string, signature: string) => Promise;\n\n/**\n * Generic interface to imeplement different algorithms.\n */\nexport interface CryptoImplementation {\n    //name of the algorithm\n    alg: string;\n    /**\n     * Generates a new keypair\n     */\n    generateKeyPair(): Promise;\n    /**\n     * creates a signer based on the passed key.\n     * @param privateKeyJWK\n     */\n    getSigner(privateKeyJWK: JsonWebKey): Promise;\n    /**\n     * creates a verifier based on the passed key.\n     * @param publicKeyJWK\n     */\n    getVerifier(publicKeyJWK: JsonWebKey): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoModule.html":{"url":"modules/CryptoModule.html","title":"module - CryptoModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\n\nCryptoService \n\nCryptoService \n\n\n\nEncryptionService \n\nEncryptionService \n\n\n\nCryptoModule\n\nCryptoModule\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/crypto.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CryptoService } from './crypto.service';\nimport { EncryptionService } from './encryption/encryption.service';\n\n@Module({\n    imports: [],\n    providers: [CryptoService, EncryptionService],\n    exports: [CryptoService, EncryptionService],\n})\nexport class CryptoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoService.html":{"url":"injectables/CryptoService.html","title":"injectable - CryptoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/crypto.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                folder\n                            \n                            \n                                    \n                                    Public\n                                    Readonly\n                                keyService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCallbackContext\n                            \n                            \n                                getCertChain\n                            \n                            \n                                getHeadersFromRequest\n                            \n                            \n                                getJwks\n                            \n                            \n                                getSignJwtCallback\n                            \n                            \n                                hasCerts\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                signJwt\n                            \n                            \n                                storeAccessCertificate\n                            \n                            \n                                    Async\n                                verifyJwt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, keyService: KeyService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/crypto.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keyService\n                                                  \n                                                        \n                                                                        KeyService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCallbackContext\n                        \n                    \n                \n            \n            \n                \ngetCallbackContext(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:191\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Omit\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCertChain\n                        \n                    \n                \n            \n            \n                \ngetCertChain(type: certificateType, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:144\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            certificateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'signing'\n                                            \n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:266\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwks\n                        \n                    \n                \n            \n            \n                \ngetJwks(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:280\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSignJwtCallback\n                        \n                    \n                \n            \n            \n                \ngetSignJwtCallback(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:229\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SignJwtCallback\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasCerts\n                        \n                    \n                \n            \n            \n                \nhasCerts(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Checks if there is a signing certificate and access certificate available.\nIf not it will be created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_INIT, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJwt(header: any, payload: any, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                header\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storeAccessCertificate\n                        \n                    \n                \n            \n            \n                \nstoreAccessCertificate(crt: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                crt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyJwt(compact: string, tenantId: string, payload?: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:172\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                compact\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        folder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/crypto.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Readonly\n                        keyService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KeyService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject('KeyService')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/crypto.service.ts:36\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { createHash, randomBytes } from 'node:crypto';\nimport {\n    existsSync,\n    mkdirSync,\n    readFileSync,\n    unlinkSync,\n    writeFileSync,\n} from 'node:fs';\nimport { Inject, Injectable, OnModuleInit } from '@nestjs/common';\nimport {\n    type CallbackContext,\n    HashAlgorithm,\n    type Jwk,\n    SignJwtCallback,\n    calculateJwkThumbprint,\n    clientAuthenticationNone,\n} from '@openid4vc/oauth2';\nimport type { Request } from 'express';\nimport { type JWK, importJWK, jwtVerify } from 'jose';\nimport { ConfigService } from '@nestjs/config';\nimport { join } from 'node:path';\nimport { KeyService } from './key/key.service';\nimport { EC_Public } from '../well-known/dto/jwks-response.dto';\nimport { execSync } from 'node:child_process';\nimport { EventEmitter2, OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\ntype certificateType = 'access' | 'signing';\n\n@Injectable()\nexport class CryptoService implements OnModuleInit {\n    folder: string;\n\n    constructor(\n        private readonly configService: ConfigService,\n        @Inject('KeyService') public readonly keyService: KeyService,\n        private readonly eventEmitter: EventEmitter2,\n    ) {}\n    onModuleInit() {\n        this.folder = join(this.configService.getOrThrow('FOLDER'));\n        if (!existsSync(this.folder)) {\n            mkdirSync(this.folder, { recursive: true });\n        }\n    }\n\n    @OnEvent(TENANT_EVENTS.TENANT_INIT, { async: true })\n    async onTenantInit(tenantId: string) {\n        const folder = join(this.folder, tenantId, 'keys');\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n        await this.keyService.init(tenantId);\n        this.hasCerts(tenantId);\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_KEYS, tenantId);\n    }\n\n    /**\n     * Checks if there is a signing certificate and access certificate available.\n     * If not it will be created.\n     */\n    hasCerts(tenantId: string) {\n        const folder = join(this.folder, tenantId, 'keys');\n        const pubkey = join(folder, 'public-key.pem');\n        const dummyKey = join(folder, 'dummy_key.pem');\n        const dummyCsr = join(folder, 'dummy.csr');\n        const issuerKey = join(folder, 'issuer_key.pem');\n        const issuerCert = join(folder, 'issuer_cert.pem');\n        const certOut = join(folder, 'signing-certificate.pem');\n        const sanExt = join(folder, 'san.ext');\n        if (!existsSync(certOut)) {\n            // === Configurable parameters (you can parameterize these when calling the script) ===\n            const subject = this.configService.getOrThrow('RP_NAME');\n            const hostname = new URL(\n                this.configService.getOrThrow('PUBLIC_URL'),\n            ).hostname; // Use URL to parse and get hostname\n\n            // === Helper to run shell commands ===\n            const run = (cmd) => {\n                execSync(cmd, { stdio: 'inherit' });\n            };\n\n            // === Step-by-step ===\n            mkdirSync(this.folder, { recursive: true });\n\n            // Step 1: Create dummy key pair if public key is missing\n            if (!existsSync(dummyKey)) {\n                // Generate private key (PKCS#8)\n                run(\n                    `openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:prime256v1 -out \"${dummyKey}\"`,\n                );\n            } else {\n                if (!existsSync(dummyKey)) {\n                    throw new Error(\n                        `Public key exists but ${dummyKey} is missing.`,\n                    );\n                }\n            }\n\n            // Step 2: Generate issuer key\n            run(\n                `openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:prime256v1 -out \"${issuerKey}\"`,\n            );\n\n            // Step 3: Create self-signed issuer cert\n            run(\n                `openssl req -x509 -new -key \"${issuerKey}\" -subj \"/CN=${subject}\" -addext \"subjectAltName=DNS:${hostname}\" -days 365 -out \"${issuerCert}\"`,\n            );\n\n            // Step 4: Create dummy CSR\n            run(\n                `openssl req -new -key \"${dummyKey}\" -subj \"/CN=${subject}\" -addext \"subjectAltName=DNS:${hostname}\" -out \"${dummyCsr}\"`,\n            );\n\n            // Step 5: Create SAN extension file\n            writeFileSync(sanExt, `subjectAltName=DNS:${hostname}`);\n\n            // Step 6: Sign certificate using issuer\n            run(\n                `openssl x509 -req -in \"${dummyCsr}\" -force_pubkey \"${pubkey}\" -CA \"${issuerCert}\" -CAkey \"${issuerKey}\" -CAcreateserial -days 365 -extfile \"${sanExt}\" -out \"${certOut}\"`,\n            );\n\n            // Step 7: Clean up\n            [\n                issuerKey,\n                issuerCert,\n                dummyCsr,\n                dummyKey,\n                join(folder, 'issuer_cert.srl'),\n                sanExt,\n            ].forEach((file) => {\n                if (existsSync(file)) unlinkSync(file);\n            });\n        }\n        if (!existsSync(join(folder, 'access-certificate.pem'))) {\n            // Create access certificate from signing certificate\n            const signingCert = readFileSync(\n                join(folder, 'signing-certificate.pem'),\n                'utf-8',\n            );\n            writeFileSync(join(folder, 'access-certificate.pem'), signingCert);\n        }\n    }\n\n    getCertChain(type: certificateType = 'signing', tenantId: string) {\n        const cert = readFileSync(\n            join(this.folder, tenantId, 'keys', `${type}-certificate.pem`),\n            'utf-8',\n        );\n\n        const chain = cert\n            .replace('-----BEGIN CERTIFICATE-----', '')\n            .replace('-----END CERTIFICATE-----', '')\n            .replace(/\\r?\\n|\\r/g, '');\n        return [chain];\n    }\n\n    storeAccessCertificate(crt: string, tenantId: string) {\n        writeFileSync(\n            join(this.folder, tenantId, 'keys', `access-certificate.pem`),\n            crt,\n        );\n    }\n\n    async signJwt(\n        header: any,\n        payload: any,\n        tenantId: string,\n    ): Promise {\n        return this.keyService.signJWT(payload, header, tenantId);\n    }\n\n    async verifyJwt(\n        compact: string,\n        tenantId: string,\n        payload?: Record,\n    ): Promise {\n        const publicJwk = await this.keyService.getPublicKey('jwk', tenantId);\n        const publicCryptoKey = await importJWK(publicJwk, 'ES256');\n\n        try {\n            await jwtVerify(compact, publicCryptoKey, {\n                currentDate: payload?.exp\n                    ? new Date((payload.exp - 300) * 1000)\n                    : undefined,\n            });\n            return { verified: true };\n        } catch {\n            return { verified: false };\n        }\n    }\n    getCallbackContext(\n        tenantId: string,\n    ): Omit {\n        return {\n            hash: (data, alg) =>\n                createHash(alg.replace('-', '').toLowerCase())\n                    .update(data)\n                    .digest(),\n            generateRandom: (bytes) => randomBytes(bytes),\n            clientAuthentication: clientAuthenticationNone({\n                clientId: 'some-random',\n            }),\n            //clientId: 'some-random-client-id', // TODO: Replace with your real clientId if necessary\n            signJwt: this.getSignJwtCallback(tenantId),\n            verifyJwt: async (signer, { compact, payload }) => {\n                if (signer.method !== 'jwk') {\n                    throw new Error('Signer method not supported');\n                }\n\n                const josePublicKey = await importJWK(\n                    signer.publicJwk as JWK,\n                    signer.alg,\n                );\n                try {\n                    await jwtVerify(compact, josePublicKey, {\n                        currentDate: payload?.exp\n                            ? new Date((payload.exp - 300) * 1000)\n                            : undefined,\n                    });\n                    return { verified: true, signerJwk: signer.publicJwk };\n                } catch {\n                    return { verified: false };\n                }\n            },\n        };\n    }\n\n    // Helper to generate signJwt callback\n    getSignJwtCallback(tenantId: string): SignJwtCallback {\n        return async (signer, { header, payload }) => {\n            if (signer.method !== 'jwk') {\n                throw new Error('Signer method not supported');\n            }\n            const hashCallback = this.getCallbackContext(tenantId).hash;\n            const jwkThumbprint = await calculateJwkThumbprint({\n                jwk: signer.publicJwk,\n                hashAlgorithm: HashAlgorithm.Sha256,\n                hashCallback,\n            });\n\n            const privateThumbprint = await calculateJwkThumbprint({\n                jwk: (await this.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n                hashAlgorithm: HashAlgorithm.Sha256,\n                hashCallback,\n            });\n\n            if (jwkThumbprint !== privateThumbprint) {\n                throw new Error(\n                    `No private key available for public jwk \\n${JSON.stringify(signer.publicJwk, null, 2)}`,\n                );\n            }\n\n            const jwt = await this.signJwt(header, payload, tenantId);\n\n            return {\n                jwt,\n                signerJwk: signer.publicJwk,\n            };\n        };\n    }\n\n    // Utility method like in your utils.ts\n    getHeadersFromRequest(req: Request): globalThis.Headers {\n        const headers = new Headers();\n        for (const [key, value] of Object.entries(req.headers)) {\n            if (Array.isArray(value)) {\n                for (const v of value) {\n                    headers.append(key, v);\n                }\n            } else if (value !== undefined) {\n                headers.set(key, value);\n            }\n        }\n        return headers;\n    }\n\n    getJwks(tenantId: string) {\n        return this.keyService.getPublicKey(\n            'jwk',\n            tenantId,\n        ) as Promise;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoService-1.html":{"url":"injectables/CryptoService-1.html","title":"injectable - CryptoService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto/crypto.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlg\n                            \n                            \n                                getCrypto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configServie: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/crypto/crypto.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configServie\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAlg\n                        \n                    \n                \n            \n            \n                \ngetAlg()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Return the algorithm that is used for the crypto operations like signing.\n\n\n                        \n                            Returns :         CryptoType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCrypto\n                        \n                    \n                \n            \n            \n                \ngetCrypto(alg)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                alg\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.configServie.get('CRYPTO_ALG')\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CryptoImplementation\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { ES256 } from '@sd-jwt/crypto-nodejs';\nimport { ED25519 } from './ed25519';\nimport { CryptoImplementation } from './crypto-implementation';\nimport { Injectable } from '@nestjs/common';\n\nexport type CryptoType = 'ES256' | 'Ed25519';\n\n@Injectable()\nexport class CryptoService {\n    constructor(private configServie: ConfigService) {}\n\n    /**\n     * Return the algorithm that is used for the crypto operations like signing.\n     * @returns\n     */\n    getAlg(): CryptoType {\n        return this.configServie.get('CRYPTO_ALG') as CryptoType;\n    }\n\n    getCrypto(\n        alg = this.configServie.get('CRYPTO_ALG'),\n    ): CryptoImplementation {\n        switch (alg) {\n            case 'Ed25519':\n                return ED25519;\n            case 'ES256':\n                return ES256;\n            default:\n                throw new Error(`Unsupported algorithm ${alg}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { join } from 'path';\nimport * as Joi from 'joi';\n\nexport const DB_VALIDATION_SCHEMA = {\n    DB_TYPE: Joi.string().valid('sqlite', 'postgres').default('sqlite'),\n    DB_HOST: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n};\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (\n                configService: ConfigService,\n            ): TypeOrmModuleOptions => {\n                const dbType = configService.get(\n                    'DB_TYPE',\n                );\n\n                const commonOptions = {\n                    synchronize: true,\n                    autoLoadEntities: true,\n                };\n\n                if (dbType === 'postgres') {\n                    return {\n                        type: 'postgres',\n                        host: configService.getOrThrow('DB_HOST'),\n                        port: configService.getOrThrow('DB_PORT'),\n                        username:\n                            configService.getOrThrow('DB_USERNAME'),\n                        password:\n                            configService.getOrThrow('DB_PASSWORD'),\n                        database:\n                            configService.getOrThrow('DB_DATABASE'),\n                        ...commonOptions,\n                    };\n                }\n\n                return {\n                    type: 'sqlite',\n                    database: join(\n                        configService.getOrThrow('FOLDER'),\n                        'service.db',\n                    ),\n                    ...commonOptions,\n                };\n            },\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EC_Public.html":{"url":"classes/EC_Public.html","title":"class - EC_Public","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EC_Public\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\nThis class is used to define the structure of EC public keys in JWK format.\n\n            \n\n\n            \n                Implements\n            \n            \n                            JWK_EC_Public\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crv\n                            \n                            \n                                kty\n                            \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The algorithm intended for use with the key, such as 'ES256'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        kty\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The key type, which is always 'EC' for Elliptic Curve keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:19\n                        \n                    \n\n            \n                \n                    The x coordinate of the EC public key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    The y coordinate of the EC public key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from 'jose';\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: 'EC';\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/encryption/encryption.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                privateEncryptionKey\n                            \n                            \n                                    Private\n                                privateEnncryptionPath\n                            \n                            \n                                    Private\n                                publicEncryptionKey\n                            \n                            \n                                    Private\n                                publicEncryptionPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decryptJwe\n                            \n                            \n                                getEncryptionPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/encryption/encryption.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decryptJwe\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptJwe(response: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:58\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEncryptionPublicKey\n                        \n                    \n                \n            \n            \n                \ngetEncryptionPublicKey()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     JWK\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_INIT, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateEncryptionKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CryptoKey\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateEnncryptionPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicEncryptionKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JWK\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicEncryptionPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport { importJWK, exportJWK, generateKeyPair, jwtDecrypt, JWK } from 'jose';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\nimport { OnEvent } from '@nestjs/event-emitter';\n\n@Injectable()\nexport class EncryptionService {\n    private privateEncryptionKey: CryptoKey;\n    private publicEncryptionKey: JWK;\n    private privateEnncryptionPath: string;\n    private publicEncryptionPath: string;\n\n    constructor(private configService: ConfigService) {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_INIT, { async: true })\n    async onTenantInit(tenantId: string) {\n        await this.init(tenantId);\n    }\n\n    async init(tenantId: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'keys',\n        );\n        this.privateEnncryptionPath = join(folder, 'private-encryption.json');\n        this.publicEncryptionPath = join(folder, 'public-encryption.json');\n        if (!existsSync(this.privateEnncryptionPath)) {\n            await generateKeyPair('ECDH-ES', {\n                crv: 'P-256',\n                extractable: true,\n            }).then(async (secret) => {\n                writeFileSync(\n                    this.privateEnncryptionPath,\n                    JSON.stringify(await exportJWK(secret.privateKey), null, 2),\n                );\n                writeFileSync(\n                    this.publicEncryptionPath,\n                    JSON.stringify(await exportJWK(secret.publicKey), null, 2),\n                );\n            });\n        }\n\n        await importJWK(\n            JSON.parse(readFileSync(this.privateEnncryptionPath, 'utf-8')),\n            'ECDH-ES',\n        ).then((key) => {\n            this.privateEncryptionKey = key as CryptoKey;\n        });\n        this.publicEncryptionKey = JSON.parse(\n            readFileSync(this.publicEncryptionPath, 'utf-8'),\n        ) as JWK;\n    }\n\n    async decryptJwe(response: string): Promise {\n        const res = await jwtDecrypt(response, this.privateEncryptionKey);\n        return res.payload;\n    }\n\n    getEncryptionPublicKey() {\n        return this.publicEncryptionKey;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Fields.html":{"url":"interfaces/Fields.html","title":"interface - Fields","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Fields\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/params.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowExtra\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            args\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowExtra\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowExtra:         Partial>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Partial>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        args\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        args:         ReadonlyArray\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ReadonlyArray\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type Slot = 'body' | 'headers' | 'path' | 'query';\n\nexport type Field =\n    | {\n          in: Exclude;\n          key: string;\n          map?: string;\n      }\n    | {\n          in: Extract;\n          key?: string;\n          map?: string;\n      };\n\nexport interface Fields {\n    allowExtra?: Partial>;\n    args?: ReadonlyArray;\n}\n\nexport type FieldsConfig = ReadonlyArray;\n\nconst extraPrefixesMap: Record = {\n    $body_: 'body',\n    $headers_: 'headers',\n    $path_: 'path',\n    $query_: 'query',\n};\nconst extraPrefixes = Object.entries(extraPrefixesMap);\n\ntype KeyMap = Map;\n\nconst buildKeyMap = (fields: FieldsConfig, map?: KeyMap): KeyMap => {\n    if (!map) {\n        map = new Map();\n    }\n\n    for (const config of fields) {\n        if ('in' in config) {\n            if (config.key) {\n                map.set(config.key, {\n                    in: config.in,\n                    map: config.map,\n                });\n            }\n        } else if (config.args) {\n            buildKeyMap(config.args, map);\n        }\n    }\n\n    return map;\n};\n\ninterface Params {\n    body: unknown;\n    headers: Record;\n    path: Record;\n    query: Record;\n}\n\nconst stripEmptySlots = (params: Params) => {\n    for (const [slot, value] of Object.entries(params)) {\n        if (value && typeof value === 'object' && !Object.keys(value).length) {\n            delete params[slot as Slot];\n        }\n    }\n};\n\nexport const buildClientParams = (\n    args: ReadonlyArray,\n    fields: FieldsConfig,\n) => {\n    const params: Params = {\n        body: {},\n        headers: {},\n        path: {},\n        query: {},\n    };\n\n    const map = buildKeyMap(fields);\n\n    let config: FieldsConfig[number] | undefined;\n\n    for (const [index, arg] of args.entries()) {\n        if (fields[index]) {\n            config = fields[index];\n        }\n\n        if (!config) {\n            continue;\n        }\n\n        if ('in' in config) {\n            if (config.key) {\n                const field = map.get(config.key)!;\n                const name = field.map || config.key;\n                (params[field.in] as Record)[name] = arg;\n            } else {\n                params.body = arg;\n            }\n        } else {\n            for (const [key, value] of Object.entries(arg ?? {})) {\n                const field = map.get(key);\n\n                if (field) {\n                    const name = field.map || key;\n                    (params[field.in] as Record)[name] = value;\n                } else {\n                    const extra = extraPrefixes.find(([prefix]) =>\n                        key.startsWith(prefix),\n                    );\n\n                    if (extra) {\n                        const [prefix, slot] = extra;\n                        (params[slot] as Record)[\n                            key.slice(prefix.length)\n                        ] = value;\n                    } else {\n                        for (const [slot, allowed] of Object.entries(\n                            config.allowExtra ?? {},\n                        )) {\n                            if (allowed) {\n                                (\n                                    params[slot as Slot] as Record\n                                )[key] = value;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    stripEmptySlots(params);\n\n    return params;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileSystemKeyService.html":{"url":"injectables/FileSystemKeyService.html","title":"injectable - FileSystemKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileSystemKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/filesystem-key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The key service is responsible for managing the keys of the issuer.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                crypto\n                            \n                            \n                                    Private\n                                privateKeyPath\n                            \n                            \n                                    Private\n                                publicKeyPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getKeys\n                            \n                            \n                                getKid\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/filesystem-key.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeys(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Get the keys from the file system or generate them if they do not exist\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:131\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenant: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JWTHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        crypto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateKeyPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'private-key.pem'\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicKeyPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'public-key.pem'\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:32\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { existsSync, mkdirSync, writeFileSync, readFileSync } from 'node:fs';\nimport {\n    JWK,\n    JWTHeaderParameters,\n    JWTPayload,\n    CryptoKey,\n    SignJWT,\n    importJWK,\n    exportPKCS8,\n    exportSPKI,\n    importPKCS8,\n    importSPKI,\n    exportJWK,\n} from 'jose';\nimport { v4 } from 'uuid';\nimport { KeyService } from './key.service';\nimport { Injectable } from '@nestjs/common';\nimport { Signer } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoImplementation } from './crypto/crypto-implementation';\nimport { CryptoService } from './crypto/crypto.service';\nimport { join } from 'node:path';\n\n/**\n * The key service is responsible for managing the keys of the issuer.\n */\n@Injectable()\nexport class FileSystemKeyService implements KeyService {\n    private crypto: CryptoImplementation;\n\n    private privateKeyPath = 'private-key.pem';\n    private publicKeyPath = 'public-key.pem';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n    ) {\n        this.crypto = this.cryptoService.getCrypto();\n    }\n\n    async onModuleInit(): Promise {}\n    async init(tenant: string) {\n        // Initialize the key service for a specific tenant\n        // This will create the keys if they do not exist\n        await this.getKeys(tenant);\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    async signer(tenantId: string): Promise {\n        const keys = await this.getKeys(tenantId);\n        return this.crypto.getSigner(keys.privateKey);\n    }\n\n    /**\n     * Get the keys from the file system or generate them if they do not exist\n     * @returns\n     */\n    private async getKeys(tenantId: string) {\n        let privateKey: JWK;\n        let publicKey: JWK;\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'keys',\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n        if (\n            !existsSync(join(folder, this.privateKeyPath)) &&\n            !existsSync(join(folder, this.publicKeyPath))\n        ) {\n            const keys = await this.crypto.generateKeyPair();\n            privateKey = keys.privateKey as JWK;\n            publicKey = keys.publicKey as JWK;\n            //add a random key id for reference\n            publicKey.kid = v4();\n            privateKey.kid = publicKey.kid;\n            privateKey.alg = this.crypto.alg;\n            publicKey.alg = this.crypto.alg;\n            writeFileSync(\n                join(folder, this.privateKeyPath),\n                await exportPKCS8((await importJWK(privateKey)) as CryptoKey),\n            );\n            writeFileSync(\n                join(folder, this.publicKeyPath),\n                await exportSPKI((await importJWK(publicKey)) as CryptoKey),\n            );\n            return { privateKey, publicKey };\n        }\n\n        privateKey = await exportJWK(\n            await importPKCS8(\n                readFileSync(join(folder, this.privateKeyPath), 'utf-8'),\n                this.crypto.alg,\n                {\n                    extractable: true,\n                },\n            ),\n        );\n        //should be stored the cert\n        privateKey.alg = this.crypto.alg;\n        publicKey = await exportJWK(\n            await importSPKI(\n                readFileSync(join(folder, this.publicKeyPath), 'utf-8'),\n                this.crypto.alg,\n            ),\n        );\n        return { privateKey, publicKey };\n    }\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    getKid(tenantId: string): Promise {\n        return this.getKeys(tenantId).then((keys) => {\n            if (keys.publicKey.kid) {\n                return keys.publicKey.kid;\n            }\n            throw new Error('Key id not found');\n        });\n    }\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    getPublicKey(type: 'jwk', tenantId: string): Promise;\n    getPublicKey(type: 'pem', tenantId: string): Promise;\n    async getPublicKey(\n        type: 'pem' | 'jwk',\n        tenantId: string,\n    ): Promise {\n        const keys = await this.getKeys(tenantId);\n        if (type === 'pem') {\n            return exportSPKI(\n                (await importJWK(\n                    keys.publicKey,\n                    this.cryptoService.getAlg(),\n                )) as CryptoKey,\n            );\n        } else {\n            return Promise.resolve(keys.publicKey);\n        }\n    }\n\n    async signJWT(\n        payload: JWTPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n    ): Promise {\n        const keys = await this.getKeys(tenantId);\n        const privateKeyInstance = (await importJWK(\n            keys.privateKey,\n        )) as CryptoKey;\n        return new SignJWT(payload)\n            .setProtectedHeader(header)\n            .sign(privateKeyInstance);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GenerateTokenOptions.html":{"url":"interfaces/GenerateTokenOptions.html","title":"interface - GenerateTokenOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GenerateTokenOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            audience\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SignJWT, jwtVerify, decodeJwt } from 'jose';\nimport { TokenPayload } from './token.decorator';\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow('JWT_EXPIRES_IN');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: 'HS256' })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token verification is handled by external OIDC provider.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: ['HS256'],\n            });\n\n            return payload as TokenPayload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get('OIDC') !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                HealthController is responsible for providing health check endpoints.\nIt uses the HealthCheckService to perform checks on the database connection.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Endpoint to check the health of the service.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n    HealthCheck,\n    HealthCheckService,\n    TypeOrmHealthIndicator,\n} from '@nestjs/terminus';\n\n/**\n * HealthController is responsible for providing health check endpoints.\n * It uses the HealthCheckService to perform checks on the database connection.\n */\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private db: TypeOrmHealthIndicator,\n    ) {}\n\n    /**\n     * Endpoint to check the health of the service.\n     * @returns\n     */\n    @Get()\n    @HealthCheck()\n    check() {\n        return this.health.check([() => this.db.pingCheck('database')]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HealthController } from './health.controller';\nimport { TerminusModule } from '@nestjs/terminus';\n\n@Module({\n    imports: [TerminusModule],\n    controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Interceptors.html":{"url":"classes/Interceptors.html","title":"class - Interceptors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Interceptors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/utils.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _fns\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                eject\n                            \n                            \n                                exists\n                            \n                            \n                                getInterceptorIndex\n                            \n                            \n                                update\n                            \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/registrar/generated/client/utils.ts:331\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _fns\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (Interceptor | null)[]\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/generated/client/utils.ts:331\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:337\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eject\n                        \n                    \n                \n            \n            \n                \neject(id: number | Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:353\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(id: number | Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:348\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInterceptorIndex\n                        \n                    \n                \n            \n            \n                \ngetInterceptorIndex(id: number | Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:341\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number | Interceptor, fn: Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:360\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fn\n                                            \n                                                        Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     number | false | Interceptor\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(fn: Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:370\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                        Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { getAuthToken } from '../core/auth';\nimport type {\n    QuerySerializer,\n    QuerySerializerOptions,\n} from '../core/bodySerializer';\nimport { jsonBodySerializer } from '../core/bodySerializer';\nimport {\n    serializeArrayParam,\n    serializeObjectParam,\n    serializePrimitiveParam,\n} from '../core/pathSerializer';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n    path: Record;\n    url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n    let url = _url;\n    const matches = _url.match(PATH_PARAM_RE);\n    if (matches) {\n        for (const match of matches) {\n            let explode = false;\n            let name = match.substring(1, match.length - 1);\n            let style: ArraySeparatorStyle = 'simple';\n\n            if (name.endsWith('*')) {\n                explode = true;\n                name = name.substring(0, name.length - 1);\n            }\n\n            if (name.startsWith('.')) {\n                name = name.substring(1);\n                style = 'label';\n            } else if (name.startsWith(';')) {\n                name = name.substring(1);\n                style = 'matrix';\n            }\n\n            const value = path[name];\n\n            if (value === undefined || value === null) {\n                continue;\n            }\n\n            if (Array.isArray(value)) {\n                url = url.replace(\n                    match,\n                    serializeArrayParam({ explode, name, style, value }),\n                );\n                continue;\n            }\n\n            if (typeof value === 'object') {\n                url = url.replace(\n                    match,\n                    serializeObjectParam({\n                        explode,\n                        name,\n                        style,\n                        value: value as Record,\n                        valueOnly: true,\n                    }),\n                );\n                continue;\n            }\n\n            if (style === 'matrix') {\n                url = url.replace(\n                    match,\n                    `;${serializePrimitiveParam({\n                        name,\n                        value: value as string,\n                    })}`,\n                );\n                continue;\n            }\n\n            const replaceValue = encodeURIComponent(\n                style === 'label' ? `.${value as string}` : (value as string),\n            );\n            url = url.replace(match, replaceValue);\n        }\n    }\n    return url;\n};\n\nexport const createQuerySerializer = ({\n    allowReserved,\n    array,\n    object,\n}: QuerySerializerOptions = {}) => {\n    const querySerializer = (queryParams: T) => {\n        const search: string[] = [];\n        if (queryParams && typeof queryParams === 'object') {\n            for (const name in queryParams) {\n                const value = queryParams[name];\n\n                if (value === undefined || value === null) {\n                    continue;\n                }\n\n                if (Array.isArray(value)) {\n                    const serializedArray = serializeArrayParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'form',\n                        value,\n                        ...array,\n                    });\n                    if (serializedArray) search.push(serializedArray);\n                } else if (typeof value === 'object') {\n                    const serializedObject = serializeObjectParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'deepObject',\n                        value: value as Record,\n                        ...object,\n                    });\n                    if (serializedObject) search.push(serializedObject);\n                } else {\n                    const serializedPrimitive = serializePrimitiveParam({\n                        allowReserved,\n                        name,\n                        value: value as string,\n                    });\n                    if (serializedPrimitive) search.push(serializedPrimitive);\n                }\n            }\n        }\n        return search.join('&');\n    };\n    return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n    contentType: string | null,\n): Exclude => {\n    if (!contentType) {\n        // If no Content-Type header is provided, the best we can do is return the raw response body,\n        // which is effectively the same as the 'stream' option.\n        return 'stream';\n    }\n\n    const cleanContent = contentType.split(';')[0]?.trim();\n\n    if (!cleanContent) {\n        return;\n    }\n\n    if (\n        cleanContent.startsWith('application/json') ||\n        cleanContent.endsWith('+json')\n    ) {\n        return 'json';\n    }\n\n    if (cleanContent === 'multipart/form-data') {\n        return 'formData';\n    }\n\n    if (\n        ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n            cleanContent.startsWith(type),\n        )\n    ) {\n        return 'blob';\n    }\n\n    if (cleanContent.startsWith('text/')) {\n        return 'text';\n    }\n\n    return;\n};\n\nexport const setAuthParams = async ({\n    security,\n    ...options\n}: Pick, 'security'> &\n    Pick & {\n        headers: Headers;\n    }) => {\n    for (const auth of security) {\n        const token = await getAuthToken(auth, options.auth);\n\n        if (!token) {\n            continue;\n        }\n\n        const name = auth.name ?? 'Authorization';\n\n        switch (auth.in) {\n            case 'query':\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[name] = token;\n                break;\n            case 'cookie':\n                options.headers.append('Cookie', `${name}=${token}`);\n                break;\n            case 'header':\n            default:\n                options.headers.set(name, token);\n                break;\n        }\n\n        return;\n    }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n    const url = getUrl({\n        baseUrl: options.baseUrl as string,\n        path: options.path,\n        query: options.query,\n        querySerializer:\n            typeof options.querySerializer === 'function'\n                ? options.querySerializer\n                : createQuerySerializer(options.querySerializer),\n        url: options.url,\n    });\n    return url;\n};\n\nexport const getUrl = ({\n    baseUrl,\n    path,\n    query,\n    querySerializer,\n    url: _url,\n}: {\n    baseUrl?: string;\n    path?: Record;\n    query?: Record;\n    querySerializer: QuerySerializer;\n    url: string;\n}) => {\n    const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n    let url = (baseUrl ?? '') + pathUrl;\n    if (path) {\n        url = defaultPathSerializer({ path, url });\n    }\n    let search = query ? querySerializer(query) : '';\n    if (search.startsWith('?')) {\n        search = search.substring(1);\n    }\n    if (search) {\n        url += `?${search}`;\n    }\n    return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n    const config = { ...a, ...b };\n    if (config.baseUrl?.endsWith('/')) {\n        config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n    }\n    config.headers = mergeHeaders(a.headers, b.headers);\n    return config;\n};\n\nexport const mergeHeaders = (\n    ...headers: Array['headers'] | undefined>\n): Headers => {\n    const mergedHeaders = new Headers();\n    for (const header of headers) {\n        if (!header || typeof header !== 'object') {\n            continue;\n        }\n\n        const iterator =\n            header instanceof Headers\n                ? header.entries()\n                : Object.entries(header);\n\n        for (const [key, value] of iterator) {\n            if (value === null) {\n                mergedHeaders.delete(key);\n            } else if (Array.isArray(value)) {\n                for (const v of value) {\n                    mergedHeaders.append(key, v as string);\n                }\n            } else if (value !== undefined) {\n                // assume object headers are meant to be JSON stringified, i.e. their\n                // content value in OpenAPI specification is 'application/json'\n                mergedHeaders.set(\n                    key,\n                    typeof value === 'object'\n                        ? JSON.stringify(value)\n                        : (value as string),\n                );\n            }\n        }\n    }\n    return mergedHeaders;\n};\n\ntype ErrInterceptor = (\n    error: Err,\n    response: Res,\n    request: Req,\n    options: Options,\n) => Err | Promise;\n\ntype ReqInterceptor = (\n    request: Req,\n    options: Options,\n) => Req | Promise;\n\ntype ResInterceptor = (\n    response: Res,\n    request: Req,\n    options: Options,\n) => Res | Promise;\n\nclass Interceptors {\n    _fns: (Interceptor | null)[];\n\n    constructor() {\n        this._fns = [];\n    }\n\n    clear() {\n        this._fns = [];\n    }\n\n    getInterceptorIndex(id: number | Interceptor): number {\n        if (typeof id === 'number') {\n            return this._fns[id] ? id : -1;\n        } else {\n            return this._fns.indexOf(id);\n        }\n    }\n    exists(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        return !!this._fns[index];\n    }\n\n    eject(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = null;\n        }\n    }\n\n    update(id: number | Interceptor, fn: Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = fn;\n            return id;\n        } else {\n            return false;\n        }\n    }\n\n    use(fn: Interceptor) {\n        this._fns = [...this._fns, fn];\n        return this._fns.length - 1;\n    }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware {\n    error: Pick>,\n        'eject' | 'use'\n    >;\n    request: Pick>, 'eject' | 'use'>;\n    response: Pick>,\n        'eject' | 'use'\n    >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = () => ({\n    error: new Interceptors>(),\n    request: new Interceptors>(),\n    response: new Interceptors>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: 'form',\n    },\n    object: {\n        explode: true,\n        style: 'deepObject',\n    },\n});\n\nconst defaultHeaders = {\n    'Content-Type': 'application/json',\n};\n\nexport const createConfig = (\n    override: Config & T> = {},\n): Config & T> => ({\n    ...jsonBodySerializer,\n    headers: defaultHeaders,\n    parseAs: 'auto',\n    querySerializer: defaultQuerySerializer,\n    ...override,\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/IssuanceConfig.html":{"url":"entities/IssuanceConfig.html","title":"entity - IssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  IssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/entities/issuance-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage issuance configs\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                authenticationConfig\n                            \n                            \n                                    \n                                    Optional\n                                createdAt\n                            \n                            \n                                    \n                                credentialConfigs\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        authenticationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:44\n                        \n                    \n\n            \n                \n                    Authentication configuration for the issuance process.\nThis determines which OpenID4VC flow to use:\n\n'none': Pre-authorized code flow (no user authentication required)\n'auth': OID4VCI authorized code flow (user will be redirected for authentication)\n'presentationDuringIssuance': OID4VP request is sent (credential presentation required)\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:50\n                        \n                    \n\n            \n                \n                    The timestamp when the issuance configuration was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfig[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, credentialConfig => credentialConfig.issuanceConfig)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:33\n                        \n                    \n\n            \n                \n                    Links to all credential configs that are included in this issuance config.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:17\n                        \n                    \n\n            \n                \n                    Unique identifier for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:24\n                        \n                    \n\n            \n                \n                    Tenant ID for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:56\n                        \n                    \n\n            \n                \n                    Webhook to send the result of the notification response\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsObject } from 'class-validator';\nimport { Column, Entity, ManyToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { ApiHideProperty } from '@nestjs/swagger';\nimport { CredentialConfig } from '../../credentials/entities/credential.entity';\nimport type { AuthenticationConfig } from '../dto/authentication-config.dto';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\n/**\n * Entity to manage issuance configs\n */\n@Entity()\nexport class IssuanceConfig {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @PrimaryGeneratedColumn('uuid')\n    id: string;\n\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @ApiHideProperty()\n    @Column('varchar')\n    tenantId: string;\n\n    /**\n     * Links to all credential configs that are included in this issuance config.\n     */\n    @ManyToMany(\n        () => CredentialConfig,\n        (credentialConfig) => credentialConfig.issuanceConfig,\n    )\n    credentialConfigs: CredentialConfig[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     * This determines which OpenID4VC flow to use:\n     * - 'none': Pre-authorized code flow (no user authentication required)\n     * - 'auth': OID4VCI authorized code flow (user will be redirected for authentication)\n     * - 'presentationDuringIssuance': OID4VP request is sent (credential presentation required)\n     */\n    @IsObject()\n    @Column('json')\n    authenticationConfig: AuthenticationConfig;\n\n    /**\n     * The timestamp when the issuance configuration was created.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt?: Date;\n\n    /**\n     * Webhook to send the result of the notification response\n     */\n    @Column('json', { nullable: true })\n    webhook: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuanceController.html":{"url":"controllers/IssuanceController.html","title":"controller - IssuanceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuanceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/issuance\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getIssuanceConfigurations\n                            \n                            \n                                    \n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Deletes an issuance configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getIssuanceConfigurations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfigurations(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(config: IssuanceDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Stores the issuance configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n    Body,\n} from '@nestjs/common';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { ApiTags, ApiSecurity } from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { IssuanceService } from './issuance.service';\nimport { IssuanceDto } from './dto/issuance.dto';\n\n@ApiTags('Issuer management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('issuer-management/issuance')\nexport class IssuanceController {\n    constructor(private readonly issuanceService: IssuanceService) {}\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getIssuanceConfigurations(@Token() user: TokenPayload) {\n        return this.issuanceService.getIssuanceConfiguration(user.sub);\n    }\n\n    /**\n     * Stores the issuance configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeIssuanceConfiguration(\n        @Body() config: IssuanceDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.storeIssuanceConfiguration(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes an issuance configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteIssuanceConfiguration(\n        @Param('id') id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.deleteIssuanceConfiguration(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IssuanceDto.html":{"url":"classes/IssuanceDto.html","title":"class - IssuanceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IssuanceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authenticationConfig\n                            \n                            \n                                    \n                                    \n                                credentialConfigs\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authenticationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationConfigDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credentialConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsObject, IsString, ValidateNested } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { AuthenticationConfigDto } from './authentication-config.dto';\n\nexport class IssuanceDto {\n    @IsString()\n    id: string;\n\n    @IsString({ each: true })\n    @IsArray()\n    credentialConfigs: string[];\n\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationConfigDto)\n    authenticationConfig: AuthenticationConfigDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssuanceService.html":{"url":"injectables/IssuanceService.html","title":"injectable - IssuanceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IssuanceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    Public\n                                    Async\n                                getIssuanceConfiguration\n                            \n                            \n                                    Async\n                                getIssuanceConfigurationById\n                            \n                            \n                                    Async\n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(issuanceConfigRepo: Repository, credentialsConfigService: CredentialConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/issuance/issuance.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        issuanceConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsConfigService\n                                                  \n                                                        \n                                                                        CredentialConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \ndeleteIssuanceConfiguration(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:111\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIssuanceConfigurationById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfigurationById(issuanceConfigId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configuration by ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuanceConfigId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(tenantId: string, value: IssuanceDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { IssuanceConfig } from './entities/issuance-config.entity';\nimport { CredentialConfigService } from '../credentials/credential-config/credential-config.service';\nimport { IssuanceDto } from './dto/issuance.dto';\nimport { CredentialConfig } from '../credentials/entities/credential.entity';\nimport { AuthenticationConfig } from './dto/authentication-config.dto';\n\n@Injectable()\nexport class IssuanceService {\n    constructor(\n        @InjectRepository(IssuanceConfig)\n        private issuanceConfigRepo: Repository,\n        private credentialsConfigService: CredentialConfigService,\n    ) {}\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @param tenantId\n     * @returns\n     */\n    public async getIssuanceConfiguration(tenantId: string) {\n        return this.issuanceConfigRepo.find({\n            where: { tenantId },\n            relations: ['credentialConfigs'],\n        });\n    }\n\n    /**\n     * Returns the issuance configuration by ID for a given tenant.\n     * @param issuanceConfigId\n     * @param tenantId\n     * @returns\n     */\n    async getIssuanceConfigurationById(\n        issuanceConfigId: string,\n        tenantId: string,\n    ): Promise {\n        return this.issuanceConfigRepo.findOneOrFail({\n            where: { id: issuanceConfigId, tenantId },\n            relations: ['credentialConfigs'],\n        });\n    }\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeIssuanceConfiguration(tenantId: string, value: IssuanceDto) {\n        const credentials: CredentialConfig[] = [];\n        for (const credentialConfigId of value.credentialConfigs) {\n            const credential = await this.credentialsConfigService.getById(\n                tenantId,\n                credentialConfigId,\n            );\n            if (credential) {\n                credentials.push(credential);\n            }\n        }\n\n        // Convert AuthenticationConfigDto to AuthenticationConfig union type\n        let authenticationConfig: AuthenticationConfig;\n        if (value.authenticationConfig.method === 'none') {\n            authenticationConfig = { method: 'none' };\n        } else if (value.authenticationConfig.method === 'auth') {\n            if (!value.authenticationConfig.config) {\n                throw new Error(\n                    'AuthenticationConfig is required for auth method',\n                );\n            }\n            authenticationConfig = {\n                method: 'auth',\n                config: value.authenticationConfig.config as any,\n            };\n        } else if (\n            value.authenticationConfig.method === 'presentationDuringIssuance'\n        ) {\n            if (!value.authenticationConfig.config) {\n                throw new Error(\n                    'AuthenticationConfig is required for presentationDuringIssuance method',\n                );\n            }\n            authenticationConfig = {\n                method: 'presentationDuringIssuance',\n                config: value.authenticationConfig.config as any,\n            };\n        } else {\n            throw new Error(\n                `Invalid authentication method: ${(value.authenticationConfig as any).method}`,\n            );\n        }\n\n        const issuanceConfig = this.issuanceConfigRepo.create({\n            id: value.id,\n            tenantId,\n            credentialConfigs: credentials,\n            authenticationConfig,\n        });\n        return this.issuanceConfigRepo.save(issuanceConfig);\n    }\n\n    /**\n     * Deletes a credential configuration.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    deleteIssuanceConfiguration(tenantId: string, id: string) {\n        return this.issuanceConfigRepo.delete({ tenantId, id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuerManagementController.html":{"url":"controllers/IssuerManagementController.html","title":"controller - IssuerManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuerManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuer-management/issuer-management.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: OfferRequestDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@ApiBody({type: OfferRequestDto, examples: undefined})@Post('offer')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:63\n                        \n                    \n\n\n            \n                \n                        Create an offer for a credential. This endpoint may be protected\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            OfferRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Res, UseGuards } from '@nestjs/common';\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { Oid4vciService } from '../../issuer/oid4vci/oid4vci.service';\nimport {\n    OfferResponse,\n    OfferRequestDto,\n} from '../oid4vci/dto/offer-request.dto';\nimport { ResponseType } from '../../verifier/oid4vp/dto/presentation-request.dto';\nimport * as QRCode from 'qrcode';\nimport { Response } from 'express';\n\n@ApiTags('Issuer management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('issuer-management')\nexport class IssuerManagementController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Create an offer for a credential. This endpoint may be protected\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: 'JSON response',\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            'application/json': { schema: { type: 'object' } },\n            'image/png': { schema: { type: 'string', format: 'binary' } },\n        },\n    })\n    @ApiProduces('application/json', 'image/png')\n    @ApiBody({\n        type: OfferRequestDto,\n        examples: {\n            qrcode: {\n                summary: 'QR-Code Example',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: 'pid',\n                } as OfferRequestDto,\n            },\n            uri: {\n                summary: 'URI',\n                value: {\n                    response_type: ResponseType.URI,\n                    issuanceId: 'pid',\n                } as OfferRequestDto,\n            },\n        },\n    })\n    @Post('offer')\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: OfferRequestDto,\n        @Token() user: TokenPayload,\n    ) {\n        // For now, we'll just pass the body to the service as before\n        // You can modify the service later to accept user information if needed\n        const values = await this.oid4vciService.createOffer(\n            body,\n            user,\n            user.sub,\n        );\n\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader('Content-Type', 'image/png');\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IssuerMetadata.html":{"url":"interfaces/IssuerMetadata.html","title":"interface - IssuerMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IssuerMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/dto/issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the issuer metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            jwks\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The issuer identifier, typically a URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { JWK } from 'jose';\n\n/**\n * Interface representing the issuer metadata.\n */\nexport interface IssuerMetadata {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    issuer: string;\n    /**\n     * The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n     */\n    jwks: {\n        /**\n         * List of keys in the JWKS.\n         */\n        keys: JWK[];\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssuerModule.html":{"url":"modules/IssuerModule.html","title":"module - IssuerModule","body":"\n                   \n\n\n\n\n    Modules\n    IssuerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/issuer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialConfigService\n                        \n                        \n                            CredentialsService\n                        \n                        \n                            IssuanceService\n                        \n                        \n                            Oid4vciService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vciController\n                        \n                        \n                            AuthorizeController\n                        \n                        \n                            CredentialsController\n                        \n                        \n                            IssuerManagementController\n                        \n                        \n                            IssuanceController\n                        \n                        \n                            CredentialsMetadataController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            Oid4vciService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthorizeService } from './authorize/authorize.service';\nimport { CredentialsService } from './credentials/credentials.service';\nimport { Oid4vciService } from './oid4vci/oid4vci.service';\nimport { Oid4vciController } from './oid4vci/oid4vci.controller';\nimport { AuthorizeController } from './authorize/authorize.controller';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport { StatusListModule } from './status-list/status-list.module';\nimport { CredentialsController } from './credentials/credentials.controller';\nimport * as Joi from 'joi';\nimport { SessionModule } from '../session/session.module';\nimport { IssuerManagementController } from './issuer-management/issuer-management.controller';\nimport { Oid4vpModule } from '../verifier/oid4vp/oid4vp.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { IssuanceConfig } from './issuance/entities/issuance-config.entity';\nimport { SessionLoggerService } from '../utils/logger/session-logger.service';\nimport { SessionLoggerInterceptor } from '../utils/logger/session-logger.interceptor';\nimport { CredentialConfig } from './credentials/entities/credential.entity';\nimport { IssuanceController } from './issuance/issuance.controller';\nimport { CredentialsMetadataController } from './credentials-metadata/credentials-metadata.controller';\nimport { IssuanceService } from './issuance/issuance.service';\nimport { CredentialConfigService } from './credentials/credential-config/credential-config.service';\nimport { setGlobalConfig } from '@openid4vc/openid4vci';\nimport { ConfigService } from '@nestjs/config';\nimport { WebhookService } from '../utils/webhook/webhook.service';\nimport { HttpModule } from '@nestjs/axios';\n\nexport const ISSUER_VALIDATION_SCHEMA = {\n    PUBLIC_URL: Joi.string(),\n};\n\n@Module({\n    imports: [\n        CryptoModule,\n        StatusListModule,\n        Oid4vpModule,\n        SessionModule,\n        HttpModule,\n        TypeOrmModule.forFeature([IssuanceConfig, CredentialConfig]),\n    ],\n    controllers: [\n        Oid4vciController,\n        AuthorizeController,\n        CredentialsController,\n        IssuerManagementController,\n        IssuanceController,\n        CredentialsMetadataController,\n    ],\n    providers: [\n        AuthorizeService,\n        CredentialsService,\n        Oid4vciService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        IssuanceService,\n        CredentialConfigService,\n        WebhookService,\n    ],\n    exports: [AuthorizeService, Oid4vciService],\n})\nexport class IssuerModule {\n    constructor(configService: ConfigService) {\n        const unsecure = configService\n            .getOrThrow('PUBLIC_URL')\n            .startsWith('http://');\n        setGlobalConfig({ allowInsecureUrls: unsecure });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwksResponseDto.html":{"url":"classes/JwksResponseDto.html","title":"class - JwksResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwksResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    An array of EC public keys in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from 'jose';\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: 'EC';\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            IS_PUBLIC_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) {\n            return true;\n        }\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtService.html":{"url":"injectables/JwtService.html","title":"injectable - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decodeToken\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                isUsingExternalOIDC\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        decodeToken\n                        \n                    \n                \n            \n            \n                \ndecodeToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Decode token without verification (for debugging)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TokenPayload | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(payload: TokenPayload, options: GenerateTokenOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:19\n                        \n                    \n\n\n            \n                \n                        Generate a JWT token for integrated OAuth2 server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            GenerateTokenOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsingExternalOIDC\n                        \n                    \n                \n            \n            \n                \nisUsingExternalOIDC()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Check if the service is using external OIDC provider\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Verify a JWT token (for additional validation if needed)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SignJWT, jwtVerify, decodeJwt } from 'jose';\nimport { TokenPayload } from './token.decorator';\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow('JWT_EXPIRES_IN');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: 'HS256' })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token verification is handled by external OIDC provider.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: ['HS256'],\n            });\n\n            return payload as TokenPayload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get('OIDC') !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                getExternalOIDCConfig\n                            \n                            \n                                    Private\n                                    Static\n                                getIntegratedOAuth2Config\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getExternalOIDCConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExternalOIDCConfig(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { secretOrKeyProvider: any; jwtFromRequest: any; algorithms: {}; issuer: any; audience: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getIntegratedOAuth2Config\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntegratedOAuth2Config(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { passportJwtSecret } from 'jwks-rsa';\nimport { ConfigService } from '@nestjs/config';\nimport { TokenPayload } from './token.decorator';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n    constructor(private configService: ConfigService) {\n        const useExternalOIDC = configService.get('OIDC');\n\n        super(\n            useExternalOIDC\n                ? JwtStrategy.getExternalOIDCConfig(configService)\n                : JwtStrategy.getIntegratedOAuth2Config(configService),\n        );\n    }\n\n    private static getExternalOIDCConfig(configService: ConfigService) {\n        //TODO: test it\n        return {\n            secretOrKeyProvider: passportJwtSecret({\n                cache: true,\n                rateLimit: true,\n                jwksRequestsPerMinute: 5,\n                jwksUri: `${configService.get('KEYCLOAK_INTERNAL_ISSUER_URL')}/protocol/openid-connect/certs`,\n                handleSigningKeyError: (err, cb) => {\n                    console.log('Keycloak JWKS error:', err);\n                    if (err instanceof Error) {\n                        return cb(err);\n                    }\n                    return cb(\n                        new Error(\n                            'Could not get the signing key from Keycloak',\n                        ),\n                    );\n                },\n            }),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: ['RS256'],\n            issuer: configService.get('KEYCLOAK_INTERNAL_ISSUER_URL'),\n            audience: configService.get('KEYCLOAK_CLIENT_ID'), // You may want to add this to validation schema\n        };\n    }\n\n    private static getIntegratedOAuth2Config(\n        configService: ConfigService,\n    ): any {\n        const config = {\n            secretOrKey: configService.get('JWT_SECRET'),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: ['HS256'], // Using symmetric key for integrated OAuth2\n            ignoreExpiration: false, // Ensure tokens expire\n        };\n\n        // Add issuer validation only if JWT_ISSUER is configured\n        const issuer = configService.get('JWT_ISSUER');\n        if (issuer) {\n            (config as any).issuer = issuer;\n        }\n\n        return config;\n    }\n\n    validate(payload: TokenPayload): unknown {\n        const useExternalOIDC =\n            this.configService.get('OIDC') !== undefined;\n\n        if (useExternalOIDC) {\n            // External OIDC: Extract user info from external provider token\n            return payload;\n        } else {\n            // Integrated OAuth2: Use integrated server token validation\n            return payload;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/KeyEntity.html":{"url":"entities/KeyEntity.html","title":"entity - KeyEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  KeyEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/key.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                privateKey\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JsonWebKey\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/key.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/key.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\n\n@Entity()\nexport class KeyEntity {\n    @Column('varchar', { primary: true })\n    tenantId: string;\n    @Column('json')\n    privateKey: JsonWebKey;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeyModule.html":{"url":"modules/KeyModule.html","title":"module - KeyModule","body":"\n                   \n\n\n\n\n    Modules\n    KeyModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/key.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.module.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Global, Module } from '@nestjs/common';\nimport { FileSystemKeyService } from './filesystem-key.service';\nimport { VaultKeyService } from './vault-key.service';\nimport { CryptoModule } from './crypto/crypto.module';\nimport { CryptoService } from './crypto/crypto.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { HttpModule, HttpService } from '@nestjs/axios';\nimport * as Joi from 'joi';\nimport { TypeOrmModule } from '@nestjs/typeorm/dist/typeorm.module';\nimport { KeyEntity } from './entities/key.entity';\n\nexport const KEY_VALIDATION_SCHEMA = {\n    KM_TYPE: Joi.string().valid('file', 'vault').default('file'),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_KEY_ID: Joi.string().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.string().default('key-id'),\n        otherwise: Joi.optional(),\n    }),\n};\n\n@Global()\n@Module({})\nexport class KeyModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: KeyModule,\n            imports: [\n                HttpModule,\n                ConfigModule,\n                CryptoModule,\n                TypeOrmModule.forFeature([KeyEntity]),\n            ],\n            providers: [\n                {\n                    provide: 'KeyService',\n                    useFactory: (\n                        configService: ConfigService,\n                        httpService: HttpService,\n                        cryptoService: CryptoService,\n                    ) => {\n                        const kmType = configService.get(\n                            'KM_TYPE',\n                        );\n                        if (kmType === 'vault') {\n                            return new VaultKeyService(\n                                httpService,\n                                configService,\n                                cryptoService,\n                            );\n                        }\n\n                        return new FileSystemKeyService(\n                            configService,\n                            cryptoService,\n                        );\n                    },\n                    inject: [ConfigService, HttpService, CryptoService],\n                },\n            ],\n            exports: ['KeyService'],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyService.html":{"url":"classes/KeyService.html","title":"class - KeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface for a key service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                getKid\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                init\n                            \n                            \n                                    Abstract\n                                signer\n                            \n                            \n                                    Abstract\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:11\n                        \n                    \n\n\n            \n                \n                        Initialize the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Get the callback for the signer function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JoseHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JoseHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Signer } from '@sd-jwt/types';\nimport { JWK, JWTPayload, JoseHeaderParameters } from 'jose';\n\n/**\n * Generic interface for a key service\n */\nexport abstract class KeyService {\n    /**\n     * Initialize the key service\n     */\n    abstract init(tenantId): Promise;\n\n    /**\n     * Get the callback for the signer function\n     * @param tenantId\n     */\n    abstract signer(tenantId: string): Promise;\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    abstract getKid(tenantId: string): Promise;\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    abstract getPublicKey(type: 'jwk', tenantId: string): Promise;\n    abstract getPublicKey(type: 'pem', tenantId: string): Promise;\n    abstract getPublicKey(\n        type: 'pem' | 'jwk',\n        tenantId: string,\n    ): Promise;\n\n    //TODO: this can be handled via the signer callback\n    abstract signJWT(\n        payload: JWTPayload,\n        header: JoseHeaderParameters,\n        tenantId: string,\n    ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerConfigService.html":{"url":"injectables/LoggerConfigService.html","title":"injectable - LoggerConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing logger configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConfiguration\n                            \n                            \n                                getLogFormat\n                            \n                            \n                                getLogLevel\n                            \n                            \n                                isDebugModeEnabled\n                            \n                            \n                                isHttpLoggerEnabled\n                            \n                            \n                                isSessionLoggerEnabled\n                            \n                            \n                                    Private\n                                loadConfiguration\n                            \n                            \n                                    Private\n                                parseLogLevel\n                            \n                            \n                                reloadConfiguration\n                            \n                            \n                                shouldEnableAutoLogging\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConfiguration\n                        \n                    \n                \n            \n            \n                \ngetConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         LoggerConfiguration\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogFormat\n                        \n                    \n                \n            \n            \n                \ngetLogFormat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     \"json\" | \"pretty\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogLevel\n                        \n                    \n                \n            \n            \n                \ngetLogLevel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     LogLevel\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDebugModeEnabled\n                        \n                    \n                \n            \n            \n                \nisDebugModeEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHttpLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisHttpLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSessionLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisSessionLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseLogLevel\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLogLevel(level: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                level\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     LogLevel\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reloadConfiguration\n                        \n                    \n                \n            \n            \n                \nreloadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Hot reload configuration from environment\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shouldEnableAutoLogging\n                        \n                    \n                \n            \n            \n                \nshouldEnableAutoLogging()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Check if automatic HTTP request/response logging should be enabled\nThis is used by the LoggerModule configuration\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoggerConfiguration\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LogLevel } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: 'json' | 'pretty';\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get('LOG_LEVEL', 'info'),\n            ),\n            enableSessionLogger: this.configService.get(\n                'LOG_ENABLE_SESSION_LOGGER',\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                'LOG_ENABLE_HTTP_LOGGER',\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                'LOG_DEBUG_MODE',\n                false,\n            ),\n            logFormat: this.configService.get(\n                'LOG_FORMAT',\n                'pretty',\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: 'verbose',\n            debug: 'debug',\n            log: 'log',\n            warn: 'warn',\n            error: 'error',\n            fatal: 'fatal',\n        };\n        return levels[level.toLowerCase()] || 'log';\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): 'json' | 'pretty' {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerConfiguration.html":{"url":"interfaces/LoggerConfiguration.html","title":"interface - LoggerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoggerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            enableDebugMode\n                                        \n                                \n                                \n                                        \n                                            enableHttpLogger\n                                        \n                                \n                                \n                                        \n                                            enableSessionLogger\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            logFormat\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableDebugMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDebugMode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableHttpLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableHttpLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableSessionLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableSessionLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:     LogLevel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     LogLevel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logFormat:     \"json\" | \"pretty\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"json\" | \"pretty\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, LogLevel } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: 'json' | 'pretty';\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get('LOG_LEVEL', 'info'),\n            ),\n            enableSessionLogger: this.configService.get(\n                'LOG_ENABLE_SESSION_LOGGER',\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                'LOG_ENABLE_HTTP_LOGGER',\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                'LOG_DEBUG_MODE',\n                false,\n            ),\n            logFormat: this.configService.get(\n                'LOG_FORMAT',\n                'pretty',\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: 'verbose',\n            debug: 'debug',\n            log: 'log',\n            warn: 'warn',\n            error: 'error',\n            fatal: 'fatal',\n        };\n        return levels[level.toLowerCase()] || 'log';\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): 'json' | 'pretty' {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Middleware.html":{"url":"interfaces/Middleware.html","title":"interface - Middleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Middleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/utils.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            request\n                                        \n                                \n                                \n                                        \n                                            response\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         Pick> | \"eject\" | \"use\">\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Pick> | \"eject\" | \"use\">\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        request\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        request:         Pick> | \"eject\" | \"use\">\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Pick> | \"eject\" | \"use\">\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        response:         Pick> | \"eject\" | \"use\">\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Pick> | \"eject\" | \"use\">\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { getAuthToken } from '../core/auth';\nimport type {\n    QuerySerializer,\n    QuerySerializerOptions,\n} from '../core/bodySerializer';\nimport { jsonBodySerializer } from '../core/bodySerializer';\nimport {\n    serializeArrayParam,\n    serializeObjectParam,\n    serializePrimitiveParam,\n} from '../core/pathSerializer';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n    path: Record;\n    url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n    let url = _url;\n    const matches = _url.match(PATH_PARAM_RE);\n    if (matches) {\n        for (const match of matches) {\n            let explode = false;\n            let name = match.substring(1, match.length - 1);\n            let style: ArraySeparatorStyle = 'simple';\n\n            if (name.endsWith('*')) {\n                explode = true;\n                name = name.substring(0, name.length - 1);\n            }\n\n            if (name.startsWith('.')) {\n                name = name.substring(1);\n                style = 'label';\n            } else if (name.startsWith(';')) {\n                name = name.substring(1);\n                style = 'matrix';\n            }\n\n            const value = path[name];\n\n            if (value === undefined || value === null) {\n                continue;\n            }\n\n            if (Array.isArray(value)) {\n                url = url.replace(\n                    match,\n                    serializeArrayParam({ explode, name, style, value }),\n                );\n                continue;\n            }\n\n            if (typeof value === 'object') {\n                url = url.replace(\n                    match,\n                    serializeObjectParam({\n                        explode,\n                        name,\n                        style,\n                        value: value as Record,\n                        valueOnly: true,\n                    }),\n                );\n                continue;\n            }\n\n            if (style === 'matrix') {\n                url = url.replace(\n                    match,\n                    `;${serializePrimitiveParam({\n                        name,\n                        value: value as string,\n                    })}`,\n                );\n                continue;\n            }\n\n            const replaceValue = encodeURIComponent(\n                style === 'label' ? `.${value as string}` : (value as string),\n            );\n            url = url.replace(match, replaceValue);\n        }\n    }\n    return url;\n};\n\nexport const createQuerySerializer = ({\n    allowReserved,\n    array,\n    object,\n}: QuerySerializerOptions = {}) => {\n    const querySerializer = (queryParams: T) => {\n        const search: string[] = [];\n        if (queryParams && typeof queryParams === 'object') {\n            for (const name in queryParams) {\n                const value = queryParams[name];\n\n                if (value === undefined || value === null) {\n                    continue;\n                }\n\n                if (Array.isArray(value)) {\n                    const serializedArray = serializeArrayParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'form',\n                        value,\n                        ...array,\n                    });\n                    if (serializedArray) search.push(serializedArray);\n                } else if (typeof value === 'object') {\n                    const serializedObject = serializeObjectParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'deepObject',\n                        value: value as Record,\n                        ...object,\n                    });\n                    if (serializedObject) search.push(serializedObject);\n                } else {\n                    const serializedPrimitive = serializePrimitiveParam({\n                        allowReserved,\n                        name,\n                        value: value as string,\n                    });\n                    if (serializedPrimitive) search.push(serializedPrimitive);\n                }\n            }\n        }\n        return search.join('&');\n    };\n    return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n    contentType: string | null,\n): Exclude => {\n    if (!contentType) {\n        // If no Content-Type header is provided, the best we can do is return the raw response body,\n        // which is effectively the same as the 'stream' option.\n        return 'stream';\n    }\n\n    const cleanContent = contentType.split(';')[0]?.trim();\n\n    if (!cleanContent) {\n        return;\n    }\n\n    if (\n        cleanContent.startsWith('application/json') ||\n        cleanContent.endsWith('+json')\n    ) {\n        return 'json';\n    }\n\n    if (cleanContent === 'multipart/form-data') {\n        return 'formData';\n    }\n\n    if (\n        ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n            cleanContent.startsWith(type),\n        )\n    ) {\n        return 'blob';\n    }\n\n    if (cleanContent.startsWith('text/')) {\n        return 'text';\n    }\n\n    return;\n};\n\nexport const setAuthParams = async ({\n    security,\n    ...options\n}: Pick, 'security'> &\n    Pick & {\n        headers: Headers;\n    }) => {\n    for (const auth of security) {\n        const token = await getAuthToken(auth, options.auth);\n\n        if (!token) {\n            continue;\n        }\n\n        const name = auth.name ?? 'Authorization';\n\n        switch (auth.in) {\n            case 'query':\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[name] = token;\n                break;\n            case 'cookie':\n                options.headers.append('Cookie', `${name}=${token}`);\n                break;\n            case 'header':\n            default:\n                options.headers.set(name, token);\n                break;\n        }\n\n        return;\n    }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n    const url = getUrl({\n        baseUrl: options.baseUrl as string,\n        path: options.path,\n        query: options.query,\n        querySerializer:\n            typeof options.querySerializer === 'function'\n                ? options.querySerializer\n                : createQuerySerializer(options.querySerializer),\n        url: options.url,\n    });\n    return url;\n};\n\nexport const getUrl = ({\n    baseUrl,\n    path,\n    query,\n    querySerializer,\n    url: _url,\n}: {\n    baseUrl?: string;\n    path?: Record;\n    query?: Record;\n    querySerializer: QuerySerializer;\n    url: string;\n}) => {\n    const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n    let url = (baseUrl ?? '') + pathUrl;\n    if (path) {\n        url = defaultPathSerializer({ path, url });\n    }\n    let search = query ? querySerializer(query) : '';\n    if (search.startsWith('?')) {\n        search = search.substring(1);\n    }\n    if (search) {\n        url += `?${search}`;\n    }\n    return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n    const config = { ...a, ...b };\n    if (config.baseUrl?.endsWith('/')) {\n        config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n    }\n    config.headers = mergeHeaders(a.headers, b.headers);\n    return config;\n};\n\nexport const mergeHeaders = (\n    ...headers: Array['headers'] | undefined>\n): Headers => {\n    const mergedHeaders = new Headers();\n    for (const header of headers) {\n        if (!header || typeof header !== 'object') {\n            continue;\n        }\n\n        const iterator =\n            header instanceof Headers\n                ? header.entries()\n                : Object.entries(header);\n\n        for (const [key, value] of iterator) {\n            if (value === null) {\n                mergedHeaders.delete(key);\n            } else if (Array.isArray(value)) {\n                for (const v of value) {\n                    mergedHeaders.append(key, v as string);\n                }\n            } else if (value !== undefined) {\n                // assume object headers are meant to be JSON stringified, i.e. their\n                // content value in OpenAPI specification is 'application/json'\n                mergedHeaders.set(\n                    key,\n                    typeof value === 'object'\n                        ? JSON.stringify(value)\n                        : (value as string),\n                );\n            }\n        }\n    }\n    return mergedHeaders;\n};\n\ntype ErrInterceptor = (\n    error: Err,\n    response: Res,\n    request: Req,\n    options: Options,\n) => Err | Promise;\n\ntype ReqInterceptor = (\n    request: Req,\n    options: Options,\n) => Req | Promise;\n\ntype ResInterceptor = (\n    response: Res,\n    request: Req,\n    options: Options,\n) => Res | Promise;\n\nclass Interceptors {\n    _fns: (Interceptor | null)[];\n\n    constructor() {\n        this._fns = [];\n    }\n\n    clear() {\n        this._fns = [];\n    }\n\n    getInterceptorIndex(id: number | Interceptor): number {\n        if (typeof id === 'number') {\n            return this._fns[id] ? id : -1;\n        } else {\n            return this._fns.indexOf(id);\n        }\n    }\n    exists(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        return !!this._fns[index];\n    }\n\n    eject(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = null;\n        }\n    }\n\n    update(id: number | Interceptor, fn: Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = fn;\n            return id;\n        } else {\n            return false;\n        }\n    }\n\n    use(fn: Interceptor) {\n        this._fns = [...this._fns, fn];\n        return this._fns.length - 1;\n    }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware {\n    error: Pick>,\n        'eject' | 'use'\n    >;\n    request: Pick>, 'eject' | 'use'>;\n    response: Pick>,\n        'eject' | 'use'\n    >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = () => ({\n    error: new Interceptors>(),\n    request: new Interceptors>(),\n    response: new Interceptors>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: 'form',\n    },\n    object: {\n        explode: true,\n        style: 'deepObject',\n    },\n});\n\nconst defaultHeaders = {\n    'Content-Type': 'application/json',\n};\n\nexport const createConfig = (\n    override: Config & T> = {},\n): Config & T> => ({\n    ...jsonBodySerializer,\n    headers: defaultHeaders,\n    parseAs: 'auto',\n    querySerializer: defaultQuerySerializer,\n    ...override,\n});\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationRequestDto.html":{"url":"classes/NotificationRequestDto.html","title":"class - NotificationRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/notification-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                event\n                            \n                            \n                                    \n                                notification_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEvent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['credential_accepted', 'credential_revoked'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notification_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotificationEvent } from '@openid4vc/openid4vci';\nimport { IsEnum, IsString } from 'class-validator';\n\nexport class NotificationRequestDto {\n    @IsString()\n    notification_id: string;\n\n    @IsEnum(['credential_accepted', 'credential_revoked'])\n    event: NotificationEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Oauth2AuthorizationServerResponse.html":{"url":"classes/Oauth2AuthorizationServerResponse.html","title":"class - Oauth2AuthorizationServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Oauth2AuthorizationServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/oauth-authorization-server-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response from an OAuth2 authorization server.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_challenge_endpoint\n                            \n                            \n                                authorization_endpoint\n                            \n                            \n                                code_challenge_methods_supported\n                            \n                            \n                                dpop_signing_alg_values_supported\n                            \n                            \n                                issuer\n                            \n                            \n                                jwks_uri\n                            \n                            \n                                pushed_authorization_request_endpoint\n                            \n                            \n                                require_pushed_authorization_requests\n                            \n                            \n                                token_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_challenge_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:37\n                        \n                    \n\n            \n                \n                    The URL of the authorization challenge endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's authorization endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code_challenge_methods_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    List of supported algorithms to sign the challenge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dpop_signing_alg_values_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    List of supported algorithms for DPoP signing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwks_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:17\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushed_authorization_request_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The URL of the pushed authorization request endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require_pushed_authorization_requests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:29\n                        \n                    \n\n            \n                \n                    Indicates whether the server requires pushed authorization requests.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's token endpoint.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Oauth2AuthorizationServerResponse {\n    issuer: string;\n    /**\n     * The URL of the OAuth2 authorization server's token endpoint.\n     */\n    token_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's authorization endpoint.\n     */\n    authorization_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n     */\n    jwks_uri: string;\n    /**\n     * List of supported algorithms to sign the challenge\n     */\n    code_challenge_methods_supported: string[];\n    /**\n     * List of supported algorithms for DPoP signing.\n     */\n    dpop_signing_alg_values_supported: string[];\n    /**\n     * Indicates whether the server requires pushed authorization requests.\n     */\n    require_pushed_authorization_requests: boolean;\n    /**\n     * The URL of the pushed authorization request endpoint.\n     */\n    pushed_authorization_request_endpoint: string;\n    /**\n     * The URL of the authorization challenge endpoint.\n     */\n    authorization_challenge_endpoint: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferRequestDto.html":{"url":"classes/OfferRequestDto.html","title":"class - OfferRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationIds\n                            \n                            \n                                    \n                                issuanceId\n                            \n                            \n                                    \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:33\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'qrcode', description: 'The type of response expected for the offer request.'})@IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:20\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n} from 'class-validator';\nimport { ResponseType } from '../../../verifier/oid4vp/dto/presentation-request.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class OfferRequestDto {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: 'qrcode',\n        description: 'The type of response expected for the offer request.',\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * @example \"pid\"\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * @example [\"pid\"]\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    @IsObject()\n    @IsOptional()\n    values?: { [key: string]: Record };\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferResponse.html":{"url":"classes/OfferResponse.html","title":"class - OfferResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                session\n                            \n                            \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n} from 'class-validator';\nimport { ResponseType } from '../../../verifier/oid4vp/dto/presentation-request.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class OfferRequestDto {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: 'qrcode',\n        description: 'The type of response expected for the offer request.',\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * @example \"pid\"\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * @example [\"pid\"]\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    @IsObject()\n    @IsOptional()\n    values?: { [key: string]: Record };\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vciController.html":{"url":"controllers/Oid4vciController.html","title":"controller - Oid4vciController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vciController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/vci\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credential\n                            \n                            \n                                    \n                                    \n                                notifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credential\n                        \n                    \n                \n            \n            \n                \n                        \n                    credential(req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('credential')@SessionLogger('state', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Endpoint to issue credentials\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        notifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    notifications(body: NotificationRequestDto, req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('notification')@SessionLogger('notification_id', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        Notification endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Param,\n    Post,\n    Req,\n    UseInterceptors,\n} from '@nestjs/common';\nimport type { CredentialResponse } from '@openid4vc/openid4vci';\nimport type { Request } from 'express';\nimport { Oid4vciService } from '../../issuer/oid4vci/oid4vci.service';\nimport { NotificationRequestDto } from './dto/notification-request.dto';\nimport { SessionLogger } from '../../utils/logger//session-logger.decorator';\nimport { SessionLoggerInterceptor } from '../../utils/logger/session-logger.interceptor';\n\n@Controller(':tenantId/vci')\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vciController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Endpoint to issue credentials\n     * @param req\n     * @returns\n     */\n    @Post('credential')\n    @SessionLogger('state', 'OID4VCI')\n    credential(\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        return this.oid4vciService.getCredential(req, tenantId);\n    }\n\n    /**\n     * Notification endpoint\n     * @param body\n     * @returns\n     */\n    @Post('notification')\n    @SessionLogger('notification_id', 'OID4VCI')\n    notifications(\n        @Body() body: NotificationRequestDto,\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.oid4vciService.handleNotification(req, body, tenantId);\n    }\n\n    //TODO: this endpoint may be relevant for the wallet attestation.\n    /* @Get('session')\n  session() {\n    console.log('Session requested');\n    //TODO store session and created at\n    const session = randomUUID();\n    return {\n      session_id: session,\n    };\n  } */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vciService.html":{"url":"injectables/Oid4vciService.html","title":"injectable - Oid4vciService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vciService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                credentialsService\n                            \n                            \n                                    Private\n                                issuer\n                            \n                            \n                                resourceServer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOffer\n                            \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                handleNotification\n                            \n                            \n                                    Async\n                                issuerMetadata\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authzService: AuthorizeService, cryptoService: CryptoService, credentialsService: CredentialsService, configService: ConfigService, sessionService: SessionService, sessionLogger: SessionLoggerService, issuanceService: IssuanceService, webhookService: WebhookService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authzService\n                                                  \n                                                        \n                                                                        AuthorizeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsService\n                                                  \n                                                        \n                                                                        CredentialsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webhookService\n                                                  \n                                                        \n                                                                        WebhookService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOffer(body: OfferRequestDto, user: TokenPayload, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            OfferRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(req: Request, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:180\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNotification(req: Request, body: NotificationRequestDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:297\n                        \n                    \n\n\n            \n                \n                        Store the notification in the session based on the notitification id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        credentialsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialsService\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Openid4vciIssuer\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resourceServer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Oauth2ResourceServer\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:42\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    ConflictException,\n    Injectable,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type HttpMethod,\n    Oauth2ResourceServer,\n    SupportedAuthenticationScheme,\n    authorizationCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport {\n    type CredentialResponse,\n    type IssuerMetadataResult,\n    Openid4vciDraftVersion,\n    Openid4vciIssuer,\n} from '@openid4vc/openid4vci';\nimport type { Request } from 'express';\nimport { CredentialsService } from '../credentials/credentials.service';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { AuthorizeService } from '../authorize/authorize.service';\nimport { getHeadersFromRequest } from './util';\nimport { readFileSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { SessionService } from '../../session/session.service';\nimport { v4 } from 'uuid';\nimport { OfferRequestDto, OfferResponse } from './dto/offer-request.dto';\nimport { NotificationRequestDto } from './dto/notification-request.dto';\nimport { SessionLoggerService } from '../../utils/logger/session-logger.service';\nimport { SessionLogContext } from '../../utils/logger/session-logger-context';\nimport { TokenPayload } from '../../auth/token.decorator';\nimport { IssuanceService } from '../issuance/issuance.service';\nimport { WebhookService } from '../../utils/webhook/webhook.service';\n\n@Injectable()\nexport class Oid4vciService implements OnModuleInit {\n    private issuer: Openid4vciIssuer;\n\n    resourceServer: Oauth2ResourceServer;\n\n    constructor(\n        private readonly authzService: AuthorizeService,\n        private readonly cryptoService: CryptoService,\n        public readonly credentialsService: CredentialsService,\n        private readonly configService: ConfigService,\n        private readonly sessionService: SessionService,\n        private readonly sessionLogger: SessionLoggerService,\n        private readonly issuanceService: IssuanceService,\n        private readonly webhookService: WebhookService,\n    ) {}\n    onModuleInit() {\n        //TODO: align for tenant\n        const callbacks = this.cryptoService.getCallbackContext('');\n        this.issuer = new Openid4vciIssuer({\n            callbacks,\n        });\n        this.resourceServer = new Oauth2ResourceServer({\n            callbacks,\n        });\n    }\n\n    async issuerMetadata(tenantId: string): Promise {\n        const credential_issuer = `${this.configService.getOrThrow(\n            'PUBLIC_URL',\n        )}/${tenantId}`;\n\n        const display = JSON.parse(\n            readFileSync(\n                join(\n                    this.configService.getOrThrow('FOLDER'),\n                    tenantId,\n                    'display.json',\n                ),\n                'utf-8',\n            ),\n        );\n\n        const authorizationServerMetadata =\n            this.authzService.authzMetadata(tenantId);\n\n        let credentialIssuer = this.issuer.createCredentialIssuerMetadata({\n            credential_issuer,\n            credential_configurations_supported:\n                await this.credentialsService.getCredentialConfiguration(\n                    tenantId,\n                ),\n            credential_endpoint: `${credential_issuer}/vci/credential`,\n            authorization_servers: [authorizationServerMetadata.issuer],\n            authorization_server: authorizationServerMetadata.issuer,\n            notification_endpoint: `${credential_issuer}/vci/notification`,\n            batch_credential_issuance: {\n                batch_size: 1,\n            },\n            display,\n        });\n\n        //replace placeholders in the issuer metadata\n        credentialIssuer = JSON.parse(\n            JSON.stringify(credentialIssuer).replace(\n                //g,\n                this.configService.getOrThrow('PUBLIC_URL'),\n            ),\n        );\n\n        return {\n            credentialIssuer,\n            authorizationServers: [authorizationServerMetadata],\n            originalDraftVersion: Openid4vciDraftVersion.Draft14,\n        } as const satisfies IssuerMetadataResult;\n    }\n\n    async createOffer(\n        body: OfferRequestDto,\n        user: TokenPayload,\n        tenantId: string,\n    ): Promise {\n        const issuanceConfig = await this.issuanceService\n            .getIssuanceConfigurationById(body.issuanceId, tenantId)\n            .catch(() => {\n                throw new BadRequestException(\n                    `Issuance configuration with ID ${body.issuanceId} not found`,\n                );\n            });\n        const credentialConfigurationIds =\n            body.credentialConfigurationIds ||\n            issuanceConfig.credentialConfigs.map((config) => config.id);\n\n        let authorization_code: string | undefined;\n        let grants: any;\n        const issuer_state = v4();\n        if (issuanceConfig.authenticationConfig.method === 'none') {\n            authorization_code = v4();\n            grants = {\n                [preAuthorizedCodeGrantIdentifier]: {\n                    'pre-authorized_code': authorization_code,\n                },\n            };\n        } else {\n            grants = {\n                [authorizationCodeGrantIdentifier]: {\n                    issuer_state,\n                },\n            };\n        }\n\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n\n        return this.issuer\n            .createCredentialOffer({\n                credentialConfigurationIds,\n                grants,\n                issuerMetadata,\n            })\n            .then(\n                async (offer) => {\n                    await this.sessionService.create({\n                        id: issuer_state,\n                        offer: offer.credentialOfferObject,\n                        credentialPayload: body,\n                        tenantId: user.sub,\n                        issuanceId: body.issuanceId,\n                        authorization_code,\n                    });\n                    return {\n                        session: issuer_state,\n                        uri: offer.credentialOffer,\n                    } as OfferResponse;\n                },\n                () => {\n                    throw new ConflictException(\n                        `Invalid credential configuration ID`,\n                    );\n                },\n            );\n    }\n\n    async getCredential(\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n        const parsedCredentialRequest = this.issuer.parseCredentialRequest({\n            issuerMetadata,\n            credentialRequest: req.body as Record,\n        });\n\n        if (parsedCredentialRequest?.proofs?.jwt === undefined) {\n            throw new Error('Invalid credential request');\n        }\n\n        const protocol = new URL(\n            this.configService.getOrThrow('PUBLIC_URL'),\n        ).protocol;\n\n        const headers = getHeadersFromRequest(req);\n        const { tokenPayload } =\n            await this.resourceServer.verifyResourceRequest({\n                authorizationServers: issuerMetadata.authorizationServers,\n                request: {\n                    url: `${protocol}//${req.host}${req.url}`,\n                    method: req.method as HttpMethod,\n                    headers,\n                },\n                resourceServer:\n                    issuerMetadata.credentialIssuer.credential_issuer,\n                allowedAuthenticationSchemes: [\n                    SupportedAuthenticationScheme.DPoP,\n                ],\n            });\n\n        const session = await this.sessionService.get(\n            tokenPayload.sub as string,\n        );\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId,\n            flowType: 'OID4VCI',\n            stage: 'credential_request',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            credentialConfigurationId:\n                parsedCredentialRequest.credentialConfigurationId,\n            proofCount: parsedCredentialRequest.proofs?.jwt?.length || 0,\n        });\n\n        try {\n            const credentials: string[] = [];\n            for (const jwt of parsedCredentialRequest.proofs.jwt) {\n                const verifiedProof =\n                    await this.issuer.verifyCredentialRequestJwtProof({\n                        //check if this is correct or if the passed nonce is validated.\n                        expectedNonce: tokenPayload.nonce as string,\n                        issuerMetadata: await this.issuerMetadata(tenantId),\n                        jwt,\n                    });\n                const cnf = verifiedProof.signer.publicJwk;\n                const cred = await this.credentialsService.getCredential(\n                    parsedCredentialRequest.credentialConfigurationId as string,\n                    cnf as any,\n                    session,\n                );\n                credentials.push(cred);\n\n                this.sessionLogger.logCredentialIssuance(\n                    logContext,\n                    parsedCredentialRequest.credentialConfigurationId as string,\n                    {\n                        credentialSize: cred.length,\n                        proofVerified: true,\n                    },\n                );\n            }\n\n            const notificationId = v4();\n            session.notifications.push({\n                id: notificationId,\n                credentialConfigurationId:\n                    parsedCredentialRequest.credentialConfigurationId as string,\n            });\n            await this.sessionService.add(session.id, tenantId, {\n                notifications: session.notifications,\n            });\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialsIssued: credentials.length,\n                notificationId,\n            });\n\n            return this.issuer.createCredentialResponse({\n                credentials,\n                credentialRequest: parsedCredentialRequest,\n                cNonce: tokenPayload.nonce as string,\n                cNonceExpiresInSeconds: 3600,\n                //this should be stored in the session in case this endpoint is requested multiple times, but the response is differnt.\n                notificationId,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                credentialConfigurationId:\n                    parsedCredentialRequest.credentialConfigurationId,\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Store the notification in the session based on the notitification id.\n     * @param req\n     * @param body\n     */\n    async handleNotification(\n        req: Request,\n        body: NotificationRequestDto,\n        tenantId: string,\n    ) {\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n        const headers = getHeadersFromRequest(req);\n        const protocol = new URL(\n            this.configService.getOrThrow('PUBLIC_URL'),\n        ).protocol;\n        const { tokenPayload } =\n            await this.resourceServer.verifyResourceRequest({\n                authorizationServers: issuerMetadata.authorizationServers,\n                request: {\n                    url: `${protocol}//${req.host}${req.url}`,\n                    method: req.method as HttpMethod,\n                    headers,\n                },\n                resourceServer:\n                    issuerMetadata.credentialIssuer.credential_issuer,\n                allowedAuthenticationSchemes: [\n                    SupportedAuthenticationScheme.DPoP,\n                ],\n            });\n\n        const session = await this.sessionService.get(\n            tokenPayload.sub as string,\n        );\n        if (session === undefined) {\n            throw new BadRequestException('Session not found');\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId,\n            flowType: 'OID4VCI',\n            stage: 'notification',\n        };\n\n        try {\n            const index = session.notifications.findIndex(\n                (notification) => notification.id === body.notification_id,\n            );\n            if (index === -1) {\n                throw new BadRequestException(\n                    'No notifications found in session',\n                );\n            }\n\n            session.notifications[index].event = body.event;\n            await this.sessionService.add(session.id, tenantId, {\n                notifications: session.notifications,\n            });\n\n            this.sessionLogger.logNotification(logContext, body.event || '', {\n                notificationId: body.notification_id,\n                notificationIndex: index,\n            });\n\n            //check for the webhook and send it.\n            //TODO: in case multiple batches are included, check if each time the notification endpoint is triggered. Also when multiple credentials got offered in the request, try to bundle them maybe?\n            if (session.notifyWebhook) {\n                await this.webhookService.sendWebhookNotification(\n                    session,\n                    logContext,\n                    session.notifications[index],\n                );\n            }\n        } catch (error) {\n            this.sessionLogger.logSessionError(\n                logContext,\n                error as Error,\n                'Failed to handle notification',\n                {\n                    notificationId: body.notification_id,\n                },\n            );\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vpController.html":{"url":"controllers/Oid4vpController.html","title":"controller - Oid4vpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/oid4vp\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getRequestWithSession\n                            \n                            \n                                    \n                                    \n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getRequestWithSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRequestWithSession(tenantId: string, requestId: string, session: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('request/:requestId/:session')@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:34\n                        \n                    \n\n\n            \n                \n                        Returns the authorization request for a given requestId and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('response')@SessionLogger('state', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Endpoint to receive the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Param,\n    Post,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { Oid4vpService } from './oid4vp.service';\nimport { AuthorizationResponse } from './dto/authorization-response.dto';\nimport { SessionLogger } from '../../utils/logger/session-logger.decorator';\nimport { SessionLoggerInterceptor } from '../../utils/logger/session-logger.interceptor';\n\n/**\n * Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n */\n@Controller(':tenantId/oid4vp')\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vpController {\n    /**\n     * Constructor for the Oid4vpController.\n     * @param oid4vpService - Instance of Oid4vpService for handling OID4VP operations.\n     */\n    constructor(private readonly oid4vpService: Oid4vpService) {}\n\n    /**\n     * Returns the authorization request for a given requestId and session.\n     * @param requestId\n     * @param session\n     * @returns\n     */\n    @Get('request/:requestId/:session')\n    @SessionLogger('session', 'OID4VP')\n    getRequestWithSession(\n        @Param('tenantId') tenantId: string,\n        @Param('requestId') requestId: string,\n        @Param('session') session: string,\n    ) {\n        return this.oid4vpService.createAuthorizationRequest(\n            requestId,\n            tenantId,\n            session,\n        );\n    }\n\n    /**\n     * Endpoint to receive the response from the wallet.\n     * @param body\n     * @returns\n     */\n    @Post('response')\n    @SessionLogger('state', 'OID4VP')\n    getResponse(\n        @Body() body: AuthorizationResponse,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.oid4vpService.getResponse(body, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/Oid4vpModule.html":{"url":"modules/Oid4vpModule.html","title":"module - Oid4vpModule","body":"\n                   \n\n\n\n\n    Modules\n    Oid4vpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nOid4vpModule -->\n\nPresentationsModule->Oid4vpModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nOid4vpModule -->\n\nRegistrarModule->Oid4vpModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Oid4vpService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Oid4vpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { Oid4vpService } from './oid4vp.service';\nimport { Oid4vpController } from './oid4vp.controller';\nimport { CryptoModule } from '../../crypto/crypto.module';\nimport { RegistrarModule } from '../../registrar/registrar.module';\nimport { PresentationsModule } from '../presentations/presentations.module';\nimport { SessionModule } from '../../session/session.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { SessionLoggerInterceptor } from '../../utils/logger/session-logger.interceptor';\nimport { SessionLoggerService } from '../../utils/logger/session-logger.service';\nimport { WebhookService } from '../../utils/webhook/webhook.service';\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        PresentationsModule,\n        SessionModule,\n        HttpModule,\n    ],\n    controllers: [Oid4vpController],\n    providers: [\n        Oid4vpService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        WebhookService,\n    ],\n    exports: [Oid4vpService],\n})\nexport class Oid4vpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vpService.html":{"url":"injectables/Oid4vpService.html","title":"injectable - Oid4vpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuthorizationRequest\n                            \n                            \n                                    Async\n                                createRequest\n                            \n                            \n                                    Async\n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, encryptionService: EncryptionService, configService: ConfigService, registrarService: RegistrarService, presentationsService: PresentationsService, sessionService: SessionService, sessionLogger: SessionLoggerService, webhookService: WebhookService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/oid4vp/oid4vp.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webhookService\n                                                  \n                                                        \n                                                                        WebhookService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAuthorizationRequest(requestId: string, tenantId: string, auth_session: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Creates an authorization request for the OID4VP flow.\nThis method generates a JWT that includes the necessary parameters for the authorization request.\nIt initializes the session logging context and logs the start of the flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                auth_session\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRequest(requestId: string, values: PresentationRequestOptions, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:218\n                        \n                    \n\n\n            \n                \n                        Creates a request for the OID4VP flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            PresentationRequestOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:267\n                        \n                    \n\n\n            \n                \n                        Processes the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { randomUUID } from 'node:crypto';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { AuthorizationResponse } from './dto/authorization-response.dto';\nimport { RegistrarService } from '../../registrar/registrar.service';\nimport { PresentationsService } from '../presentations/presentations.service';\nimport { AuthResponse } from '../presentations/dto/auth-response.dto';\nimport { EncryptionService } from '../../crypto/encryption/encryption.service';\nimport { v4 } from 'uuid';\nimport { SessionService } from '../../session/session.service';\nimport { OfferResponse } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport { PresentationRequestOptions } from './dto/presentation-request-options.dto';\nimport { WebhookService } from '../../utils/webhook/webhook.service';\nimport { SessionLoggerService } from '../../utils/logger/session-logger.service';\nimport { SessionLogContext } from '../../utils/logger/session-logger-context';\n\n@Injectable()\nexport class Oid4vpService {\n    constructor(\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private configService: ConfigService,\n        private registrarService: RegistrarService,\n        private presentationsService: PresentationsService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n        private webhookService: WebhookService,\n    ) {}\n\n    /**\n     * Creates an authorization request for the OID4VP flow.\n     * This method generates a JWT that includes the necessary parameters for the authorization request.\n     * It initializes the session logging context and logs the start of the flow.\n     * @param requestId\n     * @param tenantId\n     * @param auth_session\n     * @returns\n     */\n    async createAuthorizationRequest(\n        requestId: string,\n        tenantId: string,\n        auth_session: string,\n    ): Promise {\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: auth_session,\n            tenantId,\n            flowType: 'OID4VP',\n            stage: 'authorization_request',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            requestId,\n            action: 'create_authorization_request',\n        });\n\n        try {\n            const host = this.configService.getOrThrow('PUBLIC_URL');\n            const tenantUrl = `${host}/${tenantId}`;\n\n            const values =\n                await this.presentationsService.getPresentationConfig(\n                    requestId,\n                    tenantId,\n                );\n            let regCert: string | undefined = undefined;\n\n            const dcql_query = JSON.parse(\n                JSON.stringify(values.dcql_query).replace(\n                    //g,\n                    tenantUrl,\n                ),\n            );\n\n            if (this.registrarService.isEnabled()) {\n                const registrationCert = JSON.parse(\n                    JSON.stringify(values.registrationCert).replace(\n                        //g,\n                        tenantUrl,\n                    ),\n                );\n                regCert =\n                    await this.registrarService.addRegistrationCertificate(\n                        registrationCert,\n                        dcql_query,\n                        requestId,\n                        tenantId,\n                    );\n            }\n            const nonce = randomUUID();\n            await this.sessionService.add(auth_session, tenantId, {\n                vp_nonce: nonce,\n            });\n\n            this.sessionLogger.logAuthorizationRequest(logContext, {\n                requestId,\n                nonce,\n                regCert,\n                dcqlQueryCount: Array.isArray(dcql_query)\n                    ? dcql_query.length\n                    : 1,\n            });\n\n            const hostname = new URL(\n                this.configService.getOrThrow('PUBLIC_URL'),\n            ).hostname;\n\n            const request = {\n                payload: {\n                    response_type: 'vp_token',\n                    client_id: 'x509_san_dns:' + hostname,\n                    response_uri: `${host}/${tenantId}/oid4vp/response`,\n                    response_mode: 'direct_post.jwt',\n                    nonce,\n                    dcql_query,\n                    client_metadata: {\n                        jwks: {\n                            keys: [\n                                this.encryptionService.getEncryptionPublicKey(),\n                            ],\n                        },\n                        vp_formats: {\n                            mso_mdoc: {\n                                alg: ['EdDSA', 'ES256', 'ES384'],\n                            },\n                            'dc+sd-jwt': {\n                                'kb-jwt_alg_values': [\n                                    'EdDSA',\n                                    'ES256',\n                                    'ES384',\n                                    'ES256K',\n                                ],\n                                'sd-jwt_alg_values': [\n                                    'EdDSA',\n                                    'ES256',\n                                    'ES384',\n                                    'ES256K',\n                                ],\n                            },\n                        },\n                        authorization_encrypted_response_alg: 'ECDH-ES',\n                        authorization_encrypted_response_enc: 'A128GCM',\n                        client_name:\n                            this.configService.getOrThrow('RP_NAME'),\n                        response_types_supported: ['vp_token'],\n                    },\n                    state: auth_session,\n                    aud: host,\n                    exp: Math.floor(Date.now() / 1000) + 60 * 5,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    verifier_attestations: regCert\n                        ? [\n                              {\n                                  format: 'jwt',\n                                  data: regCert,\n                              },\n                          ]\n                        : undefined,\n                },\n                header: {\n                    typ: 'oauth-authz-req+jwt',\n                },\n            };\n\n            let accessCert: string[] | undefined = undefined;\n            try {\n                accessCert = this.cryptoService.getCertChain(\n                    'access',\n                    tenantId,\n                );\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            } catch (err: any) {\n                accessCert = this.cryptoService.getCertChain(\n                    'signing',\n                    tenantId,\n                );\n            }\n\n            const header = {\n                ...request.header,\n                alg: 'ES256',\n                x5c: accessCert,\n            };\n\n            const signedJwt = await this.cryptoService.signJwt(\n                header,\n                request.payload,\n                tenantId,\n            );\n\n            this.sessionLogger.logSession(\n                logContext,\n                'Authorization request created successfully',\n                {\n                    signedJwtLength: signedJwt.length,\n                    certificateChainLength: accessCert?.length || 0,\n                },\n            );\n\n            return signedJwt;\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                requestId,\n                action: 'create_authorization_request',\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Creates a request for the OID4VP flow.\n     * @param requestId\n     * @param values\n     * @param tenantId\n     * @returns\n     */\n    async createRequest(\n        requestId: string,\n        values: PresentationRequestOptions,\n        tenantId: string,\n    ): Promise {\n        const presentationConfig =\n            await this.presentationsService.getPresentationConfig(\n                requestId,\n                tenantId,\n            );\n\n        if (!values.session) {\n            values.session = v4();\n            await this.sessionService.create({\n                id: values.session,\n                webhook: values.webhook ?? presentationConfig.webhook,\n                tenantId,\n            });\n        } else {\n            await this.sessionService.add(values.session, tenantId, {\n                webhook: values.webhook ?? presentationConfig.webhook,\n            });\n        }\n\n        const hostname = new URL(\n            this.configService.getOrThrow('PUBLIC_URL'),\n        ).hostname;\n        const params = {\n            client_id: `x509_san_dns:${hostname}`,\n            request_uri: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}/oid4vp/request/${requestId}/${values.session}`,\n        };\n        const queryString = Object.entries(params)\n            .map(\n                ([key, value]) =>\n                    `${encodeURIComponent(key)}=${encodeURIComponent(value)}`,\n            )\n            .join('&');\n\n        return {\n            uri: queryString,\n            session: values.session,\n        };\n    }\n\n    /**\n     * Processes the response from the wallet.\n     * @param body\n     * @param tenantId\n     */\n    async getResponse(body: AuthorizationResponse, tenantId: string) {\n        const res = await this.encryptionService.decryptJwe(\n            body.response,\n        );\n        if (!res.state) {\n            throw new ConflictException('No state found in the response');\n        }\n        const session = await this.sessionService.get(res.state);\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: res.state,\n            tenantId,\n            flowType: 'OID4VP',\n            stage: 'response_processing',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            action: 'process_presentation_response',\n            hasWebhook: !!session.webhook,\n        });\n\n        try {\n            //TODO: load required fields from the config\n            const credentials = await this.presentationsService.parseResponse(\n                res,\n                [],\n                session.vp_nonce as string,\n            );\n\n            this.sessionLogger.logCredentialVerification(\n                logContext,\n                !!credentials && credentials.length > 0,\n                {\n                    credentialCount: credentials?.length || 0,\n                    nonce: session.vp_nonce,\n                },\n            );\n\n            //tell the auth server the result of the session.\n            await this.sessionService.add(res.state, tenantId, {\n                //TODO: not clear why it has to be any\n                credentials: credentials as any,\n            });\n            // if there a a webook URL, send the response there\n            //TODO: move to dedicated service to reuse it also in the oid4vci flow.\n            if (session.webhook) {\n                await this.webhookService.sendWebhook(\n                    session,\n                    logContext,\n                    credentials,\n                );\n            }\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialCount: credentials?.length || 0,\n                webhookSent: !!session.webhook,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                action: 'process_presentation_response',\n            });\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParResponseDto.html":{"url":"classes/ParResponseDto.html","title":"class - ParResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/par-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expires_in\n                            \n                            \n                                request_uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The expiration time for the request URI in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:5\n                        \n                    \n\n            \n                \n                    The request URI for the Pushed Authorization Request.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParResponseDto {\n    /**\n     * The request URI for the Pushed Authorization Request.\n     */\n    request_uri: string;\n    /**\n     * The expiration time for the request URI in seconds.\n     */\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Params.html":{"url":"interfaces/Params.html","title":"interface - Params","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Params\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/params.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            headers\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            query\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type Slot = 'body' | 'headers' | 'path' | 'query';\n\nexport type Field =\n    | {\n          in: Exclude;\n          key: string;\n          map?: string;\n      }\n    | {\n          in: Extract;\n          key?: string;\n          map?: string;\n      };\n\nexport interface Fields {\n    allowExtra?: Partial>;\n    args?: ReadonlyArray;\n}\n\nexport type FieldsConfig = ReadonlyArray;\n\nconst extraPrefixesMap: Record = {\n    $body_: 'body',\n    $headers_: 'headers',\n    $path_: 'path',\n    $query_: 'query',\n};\nconst extraPrefixes = Object.entries(extraPrefixesMap);\n\ntype KeyMap = Map;\n\nconst buildKeyMap = (fields: FieldsConfig, map?: KeyMap): KeyMap => {\n    if (!map) {\n        map = new Map();\n    }\n\n    for (const config of fields) {\n        if ('in' in config) {\n            if (config.key) {\n                map.set(config.key, {\n                    in: config.in,\n                    map: config.map,\n                });\n            }\n        } else if (config.args) {\n            buildKeyMap(config.args, map);\n        }\n    }\n\n    return map;\n};\n\ninterface Params {\n    body: unknown;\n    headers: Record;\n    path: Record;\n    query: Record;\n}\n\nconst stripEmptySlots = (params: Params) => {\n    for (const [slot, value] of Object.entries(params)) {\n        if (value && typeof value === 'object' && !Object.keys(value).length) {\n            delete params[slot as Slot];\n        }\n    }\n};\n\nexport const buildClientParams = (\n    args: ReadonlyArray,\n    fields: FieldsConfig,\n) => {\n    const params: Params = {\n        body: {},\n        headers: {},\n        path: {},\n        query: {},\n    };\n\n    const map = buildKeyMap(fields);\n\n    let config: FieldsConfig[number] | undefined;\n\n    for (const [index, arg] of args.entries()) {\n        if (fields[index]) {\n            config = fields[index];\n        }\n\n        if (!config) {\n            continue;\n        }\n\n        if ('in' in config) {\n            if (config.key) {\n                const field = map.get(config.key)!;\n                const name = field.map || config.key;\n                (params[field.in] as Record)[name] = arg;\n            } else {\n                params.body = arg;\n            }\n        } else {\n            for (const [key, value] of Object.entries(arg ?? {})) {\n                const field = map.get(key);\n\n                if (field) {\n                    const name = field.map || key;\n                    (params[field.in] as Record)[name] = value;\n                } else {\n                    const extra = extraPrefixes.find(([prefix]) =>\n                        key.startsWith(prefix),\n                    );\n\n                    if (extra) {\n                        const [prefix, slot] = extra;\n                        (params[slot] as Record)[\n                            key.slice(prefix.length)\n                        ] = value;\n                    } else {\n                        for (const [slot, allowed] of Object.entries(\n                            config.allowExtra ?? {},\n                        )) {\n                            if (allowed) {\n                                (\n                                    params[slot as Slot] as Record\n                                )[key] = value;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    stripEmptySlots(params);\n\n    return params;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html","title":"interface - ParsedAccessTokenAuthorizationCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenAuthorizationCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            grantType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:         AuthorizationCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthorizationCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    authorizationCodeGrantIdentifier,\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { SessionService } from '../../session/session.service';\nimport { WebhookConfig } from '../../utils/webhook/webhook.dto';\nimport { IssuanceService } from '../issuance/issuance.service';\nimport { AuthenticationConfigHelper } from '../issuance/dto/authentication-config.helper';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(tenantId: string): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${tenantId}`;\n        return this.getAuthorizationServer(\n            tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n        tenantId: string,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!, tenantId);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        }\n        const authorizationServerMetadata = this.authzMetadata(tenantId);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n\n        const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            cNonce,\n            cNonceExpiresIn: 100,\n            clientId: 'wallet', // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        tenantId: string,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(\n                    res,\n                    body.auth_session,\n                    tenantId,\n                );\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    'Session does not have valid credentials for issuance',\n                );\n            }\n        }\n\n        const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        }\n        const issuanceId = session.issuanceId!;\n        const config = await this.issuanceService.getIssuanceConfigurationById(\n            issuanceId,\n            tenantId,\n        );\n\n        // Use the new authentication configuration structure\n        const authConfig = config.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                'No authentication configuration found for issuance config',\n            );\n        }\n\n        if (\n            AuthenticationConfigHelper.isPresentationDuringIssuanceAuth(\n                authConfig,\n            )\n        ) {\n            // OID4VP flow - credential presentation required\n            const presentationConfig =\n                AuthenticationConfigHelper.getPresentationConfig(authConfig);\n            const webhook = presentationConfig?.presentation.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else if (AuthenticationConfigHelper.isAuthUrlAuth(authConfig)) {\n            // OID4VCI authorized code flow - should not reach here typically in challenge endpoint\n            // But we'll handle it by sending authorization code\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        } else if (AuthenticationConfigHelper.isNoneAuth(authConfig)) {\n            // Pre-authorized code flow (method: 'none') - send authorization code directly\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        } else {\n            throw new Error(\n                `Unsupported authentication method: ${(authConfig as any).method}`,\n            );\n        }\n    }\n\n    private async sendAuthorizationCode(\n        res: Response,\n        issuer_state: string,\n        tenantId: string,\n    ) {\n        const authorization_code = await this.setAuthCode(\n            issuer_state,\n            tenantId,\n        );\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string, tenantId: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, tenantId, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html","title":"interface - ParsedAccessTokenPreAuthorizedCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenPreAuthorizedCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            grantType\n                                        \n                                \n                                \n                                        \n                                            preAuthorizedCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            txCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:         PreAuthorizedCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PreAuthorizedCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        preAuthorizedCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        preAuthorizedCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        txCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        txCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    authorizationCodeGrantIdentifier,\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { SessionService } from '../../session/session.service';\nimport { WebhookConfig } from '../../utils/webhook/webhook.dto';\nimport { IssuanceService } from '../issuance/issuance.service';\nimport { AuthenticationConfigHelper } from '../issuance/dto/authentication-config.helper';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(tenantId: string): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${tenantId}`;\n        return this.getAuthorizationServer(\n            tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n        tenantId: string,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!, tenantId);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        }\n        const authorizationServerMetadata = this.authzMetadata(tenantId);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n\n        const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            cNonce,\n            cNonceExpiresIn: 100,\n            clientId: 'wallet', // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        tenantId: string,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(\n                    res,\n                    body.auth_session,\n                    tenantId,\n                );\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    'Session does not have valid credentials for issuance',\n                );\n            }\n        }\n\n        const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        }\n        const issuanceId = session.issuanceId!;\n        const config = await this.issuanceService.getIssuanceConfigurationById(\n            issuanceId,\n            tenantId,\n        );\n\n        // Use the new authentication configuration structure\n        const authConfig = config.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                'No authentication configuration found for issuance config',\n            );\n        }\n\n        if (\n            AuthenticationConfigHelper.isPresentationDuringIssuanceAuth(\n                authConfig,\n            )\n        ) {\n            // OID4VP flow - credential presentation required\n            const presentationConfig =\n                AuthenticationConfigHelper.getPresentationConfig(authConfig);\n            const webhook = presentationConfig?.presentation.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else if (AuthenticationConfigHelper.isAuthUrlAuth(authConfig)) {\n            // OID4VCI authorized code flow - should not reach here typically in challenge endpoint\n            // But we'll handle it by sending authorization code\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        } else if (AuthenticationConfigHelper.isNoneAuth(authConfig)) {\n            // Pre-authorized code flow (method: 'none') - send authorization code directly\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        } else {\n            throw new Error(\n                `Unsupported authentication method: ${(authConfig as any).method}`,\n            );\n        }\n    }\n\n    private async sendAuthorizationCode(\n        res: Response,\n        issuer_state: string,\n        tenantId: string,\n    ) {\n        const authorization_code = await this.setAuthCode(\n            issuer_state,\n            tenantId,\n        );\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string, tenantId: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, tenantId, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PathSerializer.html":{"url":"interfaces/PathSerializer.html","title":"interface - PathSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PathSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/utils.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { getAuthToken } from '../core/auth';\nimport type {\n    QuerySerializer,\n    QuerySerializerOptions,\n} from '../core/bodySerializer';\nimport { jsonBodySerializer } from '../core/bodySerializer';\nimport {\n    serializeArrayParam,\n    serializeObjectParam,\n    serializePrimitiveParam,\n} from '../core/pathSerializer';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n    path: Record;\n    url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n    let url = _url;\n    const matches = _url.match(PATH_PARAM_RE);\n    if (matches) {\n        for (const match of matches) {\n            let explode = false;\n            let name = match.substring(1, match.length - 1);\n            let style: ArraySeparatorStyle = 'simple';\n\n            if (name.endsWith('*')) {\n                explode = true;\n                name = name.substring(0, name.length - 1);\n            }\n\n            if (name.startsWith('.')) {\n                name = name.substring(1);\n                style = 'label';\n            } else if (name.startsWith(';')) {\n                name = name.substring(1);\n                style = 'matrix';\n            }\n\n            const value = path[name];\n\n            if (value === undefined || value === null) {\n                continue;\n            }\n\n            if (Array.isArray(value)) {\n                url = url.replace(\n                    match,\n                    serializeArrayParam({ explode, name, style, value }),\n                );\n                continue;\n            }\n\n            if (typeof value === 'object') {\n                url = url.replace(\n                    match,\n                    serializeObjectParam({\n                        explode,\n                        name,\n                        style,\n                        value: value as Record,\n                        valueOnly: true,\n                    }),\n                );\n                continue;\n            }\n\n            if (style === 'matrix') {\n                url = url.replace(\n                    match,\n                    `;${serializePrimitiveParam({\n                        name,\n                        value: value as string,\n                    })}`,\n                );\n                continue;\n            }\n\n            const replaceValue = encodeURIComponent(\n                style === 'label' ? `.${value as string}` : (value as string),\n            );\n            url = url.replace(match, replaceValue);\n        }\n    }\n    return url;\n};\n\nexport const createQuerySerializer = ({\n    allowReserved,\n    array,\n    object,\n}: QuerySerializerOptions = {}) => {\n    const querySerializer = (queryParams: T) => {\n        const search: string[] = [];\n        if (queryParams && typeof queryParams === 'object') {\n            for (const name in queryParams) {\n                const value = queryParams[name];\n\n                if (value === undefined || value === null) {\n                    continue;\n                }\n\n                if (Array.isArray(value)) {\n                    const serializedArray = serializeArrayParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'form',\n                        value,\n                        ...array,\n                    });\n                    if (serializedArray) search.push(serializedArray);\n                } else if (typeof value === 'object') {\n                    const serializedObject = serializeObjectParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'deepObject',\n                        value: value as Record,\n                        ...object,\n                    });\n                    if (serializedObject) search.push(serializedObject);\n                } else {\n                    const serializedPrimitive = serializePrimitiveParam({\n                        allowReserved,\n                        name,\n                        value: value as string,\n                    });\n                    if (serializedPrimitive) search.push(serializedPrimitive);\n                }\n            }\n        }\n        return search.join('&');\n    };\n    return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n    contentType: string | null,\n): Exclude => {\n    if (!contentType) {\n        // If no Content-Type header is provided, the best we can do is return the raw response body,\n        // which is effectively the same as the 'stream' option.\n        return 'stream';\n    }\n\n    const cleanContent = contentType.split(';')[0]?.trim();\n\n    if (!cleanContent) {\n        return;\n    }\n\n    if (\n        cleanContent.startsWith('application/json') ||\n        cleanContent.endsWith('+json')\n    ) {\n        return 'json';\n    }\n\n    if (cleanContent === 'multipart/form-data') {\n        return 'formData';\n    }\n\n    if (\n        ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n            cleanContent.startsWith(type),\n        )\n    ) {\n        return 'blob';\n    }\n\n    if (cleanContent.startsWith('text/')) {\n        return 'text';\n    }\n\n    return;\n};\n\nexport const setAuthParams = async ({\n    security,\n    ...options\n}: Pick, 'security'> &\n    Pick & {\n        headers: Headers;\n    }) => {\n    for (const auth of security) {\n        const token = await getAuthToken(auth, options.auth);\n\n        if (!token) {\n            continue;\n        }\n\n        const name = auth.name ?? 'Authorization';\n\n        switch (auth.in) {\n            case 'query':\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[name] = token;\n                break;\n            case 'cookie':\n                options.headers.append('Cookie', `${name}=${token}`);\n                break;\n            case 'header':\n            default:\n                options.headers.set(name, token);\n                break;\n        }\n\n        return;\n    }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n    const url = getUrl({\n        baseUrl: options.baseUrl as string,\n        path: options.path,\n        query: options.query,\n        querySerializer:\n            typeof options.querySerializer === 'function'\n                ? options.querySerializer\n                : createQuerySerializer(options.querySerializer),\n        url: options.url,\n    });\n    return url;\n};\n\nexport const getUrl = ({\n    baseUrl,\n    path,\n    query,\n    querySerializer,\n    url: _url,\n}: {\n    baseUrl?: string;\n    path?: Record;\n    query?: Record;\n    querySerializer: QuerySerializer;\n    url: string;\n}) => {\n    const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n    let url = (baseUrl ?? '') + pathUrl;\n    if (path) {\n        url = defaultPathSerializer({ path, url });\n    }\n    let search = query ? querySerializer(query) : '';\n    if (search.startsWith('?')) {\n        search = search.substring(1);\n    }\n    if (search) {\n        url += `?${search}`;\n    }\n    return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n    const config = { ...a, ...b };\n    if (config.baseUrl?.endsWith('/')) {\n        config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n    }\n    config.headers = mergeHeaders(a.headers, b.headers);\n    return config;\n};\n\nexport const mergeHeaders = (\n    ...headers: Array['headers'] | undefined>\n): Headers => {\n    const mergedHeaders = new Headers();\n    for (const header of headers) {\n        if (!header || typeof header !== 'object') {\n            continue;\n        }\n\n        const iterator =\n            header instanceof Headers\n                ? header.entries()\n                : Object.entries(header);\n\n        for (const [key, value] of iterator) {\n            if (value === null) {\n                mergedHeaders.delete(key);\n            } else if (Array.isArray(value)) {\n                for (const v of value) {\n                    mergedHeaders.append(key, v as string);\n                }\n            } else if (value !== undefined) {\n                // assume object headers are meant to be JSON stringified, i.e. their\n                // content value in OpenAPI specification is 'application/json'\n                mergedHeaders.set(\n                    key,\n                    typeof value === 'object'\n                        ? JSON.stringify(value)\n                        : (value as string),\n                );\n            }\n        }\n    }\n    return mergedHeaders;\n};\n\ntype ErrInterceptor = (\n    error: Err,\n    response: Res,\n    request: Req,\n    options: Options,\n) => Err | Promise;\n\ntype ReqInterceptor = (\n    request: Req,\n    options: Options,\n) => Req | Promise;\n\ntype ResInterceptor = (\n    response: Res,\n    request: Req,\n    options: Options,\n) => Res | Promise;\n\nclass Interceptors {\n    _fns: (Interceptor | null)[];\n\n    constructor() {\n        this._fns = [];\n    }\n\n    clear() {\n        this._fns = [];\n    }\n\n    getInterceptorIndex(id: number | Interceptor): number {\n        if (typeof id === 'number') {\n            return this._fns[id] ? id : -1;\n        } else {\n            return this._fns.indexOf(id);\n        }\n    }\n    exists(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        return !!this._fns[index];\n    }\n\n    eject(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = null;\n        }\n    }\n\n    update(id: number | Interceptor, fn: Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = fn;\n            return id;\n        } else {\n            return false;\n        }\n    }\n\n    use(fn: Interceptor) {\n        this._fns = [...this._fns, fn];\n        return this._fns.length - 1;\n    }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware {\n    error: Pick>,\n        'eject' | 'use'\n    >;\n    request: Pick>, 'eject' | 'use'>;\n    response: Pick>,\n        'eject' | 'use'\n    >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = () => ({\n    error: new Interceptors>(),\n    request: new Interceptors>(),\n    response: new Interceptors>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: 'form',\n    },\n    object: {\n        explode: true,\n        style: 'deepObject',\n    },\n});\n\nconst defaultHeaders = {\n    'Content-Type': 'application/json',\n};\n\nexport const createConfig = (\n    override: Config & T> = {},\n): Config & T> => ({\n    ...jsonBodySerializer,\n    headers: defaultHeaders,\n    parseAs: 'auto',\n    querySerializer: defaultQuerySerializer,\n    ...override,\n});\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PresentationConfig.html":{"url":"entities/PresentationConfig.html","title":"entity - PresentationConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PresentationConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a configuration for a Verifiable Presentation (VP) request.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                dcql_query\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                registrationCert\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:50\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        dcql_query\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:32\n                        \n                    \n\n            \n                \n                    The DCQL query to be used for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:17\n                        \n                    \n\n            \n                \n                    Unique identifier for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        registrationCert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:38\n                        \n                    \n\n            \n                \n                    The registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:24\n                        \n                    \n\n            \n                \n                    The tenant ID for which the VP request is made.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:44\n                        \n                    \n\n            \n                \n                    Optional webhook URL to receive the response.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsString, IsObject } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { RegistrationCertificateRequest } from '../dto/vp-request.dto';\nimport { Column, Entity } from 'typeorm';\nimport { ApiHideProperty } from '@nestjs/swagger';\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column('varchar', { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column('varchar', { primary: true })\n    tenantId: string;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column('json')\n    @IsObject()\n    //TODO: define the structure of the DCQL query\n    dcql_query: any;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    @Column('json')\n    registrationCert: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column('json', { nullable: true })\n    @IsObject()\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuance.html":{"url":"classes/PresentationDuringIssuance.html","title":"class - PresentationDuringIssuance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\nexport class VCT {\n    @IsString()\n    vct: string;\n    @IsString()\n    name?: string;\n    @IsString()\n    description?: string;\n    @IsString()\n    extends?: string;\n    @IsString()\n    'extends#integrity'?: string;\n    @IsString()\n    schema_uri?: string;\n    @IsString()\n    'schema_uri#integrity'?: string;\n}\n\nexport class PresentationDuringIssuance {\n    @IsString()\n    type: string;\n    @IsObject()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuanceConfig.html":{"url":"classes/PresentationDuringIssuanceConfig.html","title":"class - PresentationDuringIssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'presentationDuringIssuance'\nUsed for OID4VP flow where a credential presentation request is sent\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                presentation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        presentation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationDuringIssuance\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:45\n                        \n                    \n\n            \n                \n                    Presentation configuration that specifies what credentials need to be presented via OID4VP\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsObject,\n    IsOptional,\n    IsUrl,\n    IsIn,\n    ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { PresentationDuringIssuance } from '../../credentials-metadata/dto/credential-config.dto';\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    authUrl: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Presentation configuration that specifies what credentials need to be presented via OID4VP\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuance)\n    presentation: PresentationDuringIssuance;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n    method: 'none' | 'auth' | 'presentationDuringIssuance';\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: 'none' } // Pre-authorized code flow\n    | { method: 'auth'; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: 'presentationDuringIssuance'; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PresentationManagementController.html":{"url":"controllers/PresentationManagementController.html","title":"controller - PresentationManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PresentationManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                presentation-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storePresentationConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Returns the presentation request configurations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:137\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation request configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: PresentationRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@UseGuards(JwtAuthGuard)@ApiSecurity('oauth2')@ApiBody({type: PresentationRequest, examples: undefined})@Post('request')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:79\n                        \n                    \n\n\n            \n                \n                        Create an presentation request that can be sent to the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PresentationRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storePresentationConfig(config: PresentationConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:121\n                        \n                    \n\n\n            \n                \n                        Store a presentation request configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Res,\n    UseGuards,\n} from '@nestjs/common';\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from '@nestjs/swagger';\nimport { PresentationsService } from './presentations.service';\nimport { PresentationConfig } from './entities/presentation-config.entity';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { OfferResponse } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport {\n    PresentationRequest,\n    ResponseType,\n} from '../oid4vp/dto/presentation-request.dto';\nimport { Oid4vpService } from '../oid4vp/oid4vp.service';\nimport * as QRCode from 'qrcode';\nimport { Response } from 'express';\n\n@ApiTags('Presentation management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2', ['api:read', 'api:write'])\n@Controller('presentation-management')\nexport class PresentationManagementController {\n    constructor(\n        private readonly presentationsService: PresentationsService,\n        private readonly oid4vpService: Oid4vpService,\n    ) {}\n\n    /**\n     * Create an presentation request that can be sent to the user\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: 'JSON response',\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            'application/json': { schema: { type: 'object' } },\n            'image/png': { schema: { type: 'string', format: 'binary' } },\n        },\n    })\n    @ApiProduces('application/json', 'image/png')\n    @UseGuards(JwtAuthGuard)\n    @ApiSecurity('oauth2')\n    @ApiBody({\n        type: PresentationRequest,\n        examples: {\n            qrcode: {\n                summary: 'QR-Code Example',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    requestId: 'pid',\n                },\n            },\n            uri: {\n                summary: 'URI',\n                value: {\n                    response_type: ResponseType.URI,\n                    requestId: 'pid',\n                },\n            },\n        },\n    })\n    @Post('request')\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: PresentationRequest,\n        @Token() user: TokenPayload,\n    ) {\n        const values = await this.oid4vpService.createRequest(\n            body.requestId,\n            {\n                webhook: body.webhook,\n            },\n            user.sub,\n        );\n        values.uri = `openid4vp://?${values.uri}`;\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader('Content-Type', 'image/png');\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the presentation request configurations.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.presentationsService.getPresentationConfigs(user.sub);\n    }\n\n    /**\n     * Store a presentation request configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storePresentationConfig(\n        @Body() config: PresentationConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.presentationsService.storePresentationConfig(\n            config,\n            user.sub,\n        );\n    }\n\n    /**\n     * Deletes a presentation request configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteConfiguration(@Param('id') id: string, @Token() user: TokenPayload) {\n        return this.presentationsService.deletePresentationConfig(id, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationRequest.html":{"url":"classes/PresentationRequest.html","title":"class - PresentationRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the presentation request containing the response type and request ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                requestId\n                            \n                            \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:33\n                        \n                    \n\n            \n                \n                    Identifier of the presentation configuration\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:41\n                        \n                    \n\n            \n                \n                    Webhook configuration to receive the response.\nIf not provided, the configured webhook from the configuration will be used.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsObject, IsOptional, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\n/**\n * Enum for the type of response expected from the presentation request.\n */\nexport enum ResponseType {\n    /**\n     * Response type indicating a QR code will be returned.\n     */\n    QRCode = 'qrcode',\n    /**\n     * Response type indicating a URI will be returned.\n     */\n    URI = 'uri',\n}\n\n/**\n * DTO for the presentation request containing the response type and request ID.\n */\nexport class PresentationRequest {\n    /**\n     * @example qrcode\n     */\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Identifier of the presentation configuration\n     * @example pid\n     */\n    @IsString()\n    requestId: string;\n\n    /**\n     * Webhook configuration to receive the response.\n     * If not provided, the configured webhook from the configuration will be used.\n     */\n    @IsObject()\n    @IsOptional()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentationRequestOptions.html":{"url":"interfaces/PresentationRequestOptions.html","title":"interface - PresentationRequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentationRequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PresentationRequestOptions DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            session\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webhook\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional session identifier for tracking the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webhook\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webhook:         WebhookConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WebhookConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional webhook configuration to receive the response.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\n/**\n * PresentationRequestOptions DTO\n */\nexport interface PresentationRequestOptions {\n    /**\n     * Optional session identifier for tracking the request.\n     */\n    session?: string;\n    /**\n     * Optional webhook configuration to receive the response.\n     */\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PresentationsModule.html":{"url":"modules/PresentationsModule.html","title":"module - PresentationsModule","body":"\n                   \n\n\n\n\n    Modules\n    PresentationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/presentations/presentations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PresentationManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ResolverModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { PresentationManagementController } from './presentations.controller';\nimport { PresentationsService } from './presentations.service';\nimport { ResolverModule } from '../resolver/resolver.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { Oid4vpModule } from '../oid4vp/oid4vp.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PresentationConfig } from './entities/presentation-config.entity';\n\n@Module({\n    imports: [\n        ResolverModule,\n        HttpModule,\n        forwardRef(() => Oid4vpModule),\n        TypeOrmModule.forFeature([PresentationConfig]),\n    ],\n    controllers: [PresentationManagementController],\n    providers: [PresentationsService],\n    exports: [PresentationsService],\n})\nexport class PresentationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PresentationsService.html":{"url":"injectables/PresentationsService.html","title":"injectable - PresentationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PresentationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kbVerifier\n                            \n                            \n                                sdjwtInstance\n                            \n                            \n                                    Private\n                                statusListFetcher\n                            \n                            \n                                verifier\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deletePresentationConfig\n                            \n                            \n                                    Async\n                                getPresentationConfig\n                            \n                            \n                                getPresentationConfigs\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                parseResponse\n                            \n                            \n                                storePresentationConfig\n                            \n                            \n                                    Public\n                                storeRCID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, resolverService: ResolverService, vpRequestRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/presentations/presentations.service.ts:22\n                            \n                        \n\n                \n                    \n                            Constructor for the PresentationsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of HttpService for making HTTP requests.\n\n\n                                                        \n                                                \n                                                \n                                                        resolverService\n                                                  \n                                                        \n                                                                        ResolverService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ResolverService for resolving DID documents.\n\n\n                                                        \n                                                \n                                                \n                                                        vpRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for managing VP request configurations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deletePresentationConfig\n                        \n                    \n                \n            \n            \n                \ndeletePresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to delete.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the deletion is complete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Retrieves a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the requested PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfigs\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfigs(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Retrieves all presentation configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve configurations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of PresentationConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Initializes the SDJwtVcInstance with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseResponse\n                        \n                    \n                \n            \n            \n                \nparseResponse(res: AuthResponse, requiredFields: string[], keyBindingNonce: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            AuthResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requiredFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyBindingNonce\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \nstorePresentationConfig(vprequest: PresentationConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Stores a new presentation configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                vprequest\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe PresentationConfig entity to store.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        storeRCID\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRCID(registrationCertId: string, id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Stores the new registration certificate.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registrationCertId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the registration certificate to store.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to update.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the registration certificate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kbVerifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KbVerifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:160\n                        \n                    \n\n            \n                \n                    Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                            \n                                            \n                                                    signature\n                                            \n                                            \n                                                    payload\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sdjwtInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SDJwtVcInstance\n\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:22\n                        \n                    \n\n            \n                \n                    Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statusListFetcher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:145\n                        \n                    \n\n            \n                \n                    Fetch the status list from the uri.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    uri\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Verifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:122\n                        \n                    \n\n            \n                \n                    Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                                    \n                                                            \nThe data part of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                            \n                                                    signature\n                                                    \n                                                            \nThe signature of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { digest, ES256 } from '@sd-jwt/crypto-nodejs';\nimport { SDJwtVcInstance } from '@sd-jwt/sd-jwt-vc';\nimport { KbVerifier, Verifier } from '@sd-jwt/types';\nimport { importJWK, JWK, JWTPayload, jwtVerify } from 'jose';\nimport { firstValueFrom } from 'rxjs';\nimport { ResolverService } from '../resolver/resolver.service';\nimport { PresentationConfig } from './entities/presentation-config.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm/repository/Repository';\nimport { AuthResponse } from './dto/auth-response.dto';\n\n/**\n * Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n */\n@Injectable()\nexport class PresentationsService implements OnModuleInit {\n    /**\n     * Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n     */\n    sdjwtInstance: SDJwtVcInstance;\n\n    /**\n     * Constructor for the PresentationsService.\n     * @param httpService - Instance of HttpService for making HTTP requests.\n     * @param resolverService - Instance of ResolverService for resolving DID documents.\n     * @param vpRequestRepository - Repository for managing VP request configurations.\n     */\n    constructor(\n        private httpService: HttpService,\n        private resolverService: ResolverService,\n        @InjectRepository(PresentationConfig)\n        private vpRequestRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the SDJwtVcInstance with the necessary configurations.\n     */\n    onModuleInit() {\n        this.sdjwtInstance = new SDJwtVcInstance({\n            hasher: digest,\n            verifier: this.verifier.bind(this),\n            kbVerifier: this.kbVerifier.bind(this),\n            statusListFetcher: this.statusListFetcher.bind(this),\n        });\n    }\n\n    /**\n     * Retrieves all presentation configurations for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve configurations.\n     * @returns A promise that resolves to an array of PresentationConfig entities.\n     */\n    getPresentationConfigs(tenantId: string): Promise {\n        return this.vpRequestRepository.find({\n            where: { tenantId },\n            order: { createdAt: 'DESC' },\n        });\n    }\n\n    /**\n     * Stores a new presentation configuration.\n     * @param vprequest - The PresentationConfig entity to store.\n     * @param tenantId - The ID of the tenant for which to store the configuration.\n     * @returns A promise that resolves to the stored PresentationConfig entity.\n     */\n    storePresentationConfig(vprequest: PresentationConfig, tenantId: string) {\n        vprequest.tenantId = tenantId;\n        return this.vpRequestRepository.save(vprequest);\n    }\n\n    /**\n     * Deletes a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to delete.\n     * @param tenantId - The ID of the tenant for which to delete the configuration.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    deletePresentationConfig(id: string, tenantId: string) {\n        return this.vpRequestRepository.delete({ id, tenantId });\n    }\n\n    /**\n     * Retrieves a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to retrieve.\n     * @param tenantId - The ID of the tenant for which to retrieve the configuration.\n     * @returns A promise that resolves to the requested PresentationConfig entity.\n     */\n    async getPresentationConfig(\n        id: string,\n        tenantId: string,\n    ): Promise {\n        return this.vpRequestRepository\n            .findOneByOrFail({\n                id,\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException('Request ID invalid not found');\n            });\n    }\n\n    /**\n     * Stores the new registration certificate.\n     * @param registrationCertId - The ID of the registration certificate to store.\n     * @param id - The ID of the presentation configuration to update.\n     * @param tenantId - The ID of the tenant for which to store the registration certificate.\n     * @returns\n     */\n    public storeRCID(registrationCertId: string, id: string, tenantId: string) {\n        return this.vpRequestRepository.update(\n            { id, tenantId },\n            { registrationCert: { id: registrationCertId } },\n        );\n    }\n\n    /**\n     * Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n     * @param data - The data part of the SD-JWT-VC.\n     * @param signature - The signature of the SD-JWT-VC.\n     * @returns\n     */\n    verifier: Verifier = async (data, signature) => {\n        const instance = new SDJwtVcInstance({\n            hasher: digest,\n        });\n        const decodedVC = await instance.decode(`${data}.${signature}`);\n        const payload = decodedVC.jwt?.payload as JWTPayload;\n        const header = decodedVC.jwt?.header as JWK;\n        const publicKey = await this.resolverService.resolvePublicKey(\n            payload,\n            header,\n        );\n        const verify = await ES256.getVerifier(publicKey);\n        return verify(data, signature).catch((err) => {\n            console.log(err);\n            return false;\n        });\n    };\n\n    /**\n     * Fetch the status list from the uri.\n     * @param uri\n     * @returns\n     */\n    private statusListFetcher: (uri: string) => Promise = async (\n        uri: string,\n    ) => {\n        return firstValueFrom(this.httpService.get(uri)).then(\n            (res) => res.data,\n        );\n    };\n\n    /**\n     * Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n     * @param data\n     * @param signature\n     * @param payload\n     * @returns\n     */\n    private kbVerifier: KbVerifier = async (data, signature, payload) => {\n        if (!payload.cnf) {\n            throw new Error('No cnf found in the payload');\n        }\n        const key = await importJWK(payload.cnf.jwk as JWK, 'ES256');\n        return jwtVerify(`${data}.${signature}`, key).then(\n            () => true,\n            () => false,\n        );\n    };\n\n    /**\n     * Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n     * @param res\n     * @param requiredFields\n     * @returns\n     */\n    parseResponse(\n        res: AuthResponse,\n        requiredFields: string[],\n        keyBindingNonce: string,\n    ) {\n        const attestations = Object.keys(res.vp_token);\n        const att = attestations.map((att) =>\n            this.sdjwtInstance\n                .verify(res.vp_token[att], {\n                    requiredClaimKeys: requiredFields,\n                    keyBindingNonce,\n                })\n                .then(\n                    (result) => {\n                        return {\n                            id: att,\n                            values: {\n                                ...result.payload,\n                                cnf: undefined, // remove cnf for simplicity\n                                status: undefined, // remove status for simplicity\n                            },\n                        };\n                    },\n                    /* (err) => {\n                        throw new Error\n                        //(console.log(err);\n                        return {\n                            id: att,\n                            error: err.message,\n                        };\n                    }, */\n                ),\n        );\n        return Promise.all(att);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentedData.html":{"url":"interfaces/PresentedData.html","title":"interface - PresentedData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentedData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/webhook/src/index.ts\n        \n\n\n            \n                Description\n            \n            \n                Assuming we receive a PID credentials with the address selectivly disclosed\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            credentials\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        credentials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        credentials:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PresentedData {\n\tcredentials: {\n\t\tid: string;\n\t\tvalues: {\n\t\t\taddress: {\n\t\t\t\tlocality: string;\n\t\t\t};\n\t\t};\n\t}[];\n}\n\n/**\n * Response for the citizen credential.\n */\ninterface ProcessResponse {\n\tcitizen: {\n\t\ttown: string;\n\t};\n}\n\nasync function handleRequest(request: Request): Promise {\n\tconst url = new URL(request.url);\n\n\tif (request.method === 'POST' && url.pathname === '/notify') {\n\t\tconst presented: PresentedData = await request.json();\n\t\tconsole.log('Received notification:');\n\t\tconsole.log(JSON.stringify(presented, null, 2));\n\t}\n\n\tif (request.method === 'POST' && url.pathname === '/process') {\n\t\tconst presented: PresentedData = await request.json();\n\t\tconsole.log(presented);\n\t\tconst res: ProcessResponse = {\n\t\t\tcitizen: {\n\t\t\t\ttown: `You live in ${presented.credentials[0].values.address.locality}`,\n\t\t\t},\n\t\t};\n\t\treturn Response.json(res, { status: 200 });\n\t}\n\n\tif (request.method === 'POST' && url.pathname === '/consume') {\n\t\tconst expextedApiKey = 'foo-bar'; // This should be securely stored and retrieved\n\t\tconsole.log(request.headers);\n\t\tconst apiKey = request.headers.get('x-api-key');\n\t\tif (apiKey !== expextedApiKey) {\n\t\t\treturn new Response('Unauthorized', { status: 401 });\n\t\t}\n\n\t\tconst presented = await request.json();\n\t\tconsole.log('Received consume webhook:');\n\t\tconsole.log(JSON.stringify(presented, null, 2));\n\t\treturn new Response(null, { status: 200 });\n\t}\n\n\treturn new Response('Not found', { status: 404 });\n}\n\nexport default {\n\tfetch: handleRequest,\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProcessResponse.html":{"url":"interfaces/ProcessResponse.html","title":"interface - ProcessResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProcessResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/webhook/src/index.ts\n        \n\n\n            \n                Description\n            \n            \n                Response for the citizen credential.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            citizen\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        citizen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        citizen:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PresentedData {\n\tcredentials: {\n\t\tid: string;\n\t\tvalues: {\n\t\t\taddress: {\n\t\t\t\tlocality: string;\n\t\t\t};\n\t\t};\n\t}[];\n}\n\n/**\n * Response for the citizen credential.\n */\ninterface ProcessResponse {\n\tcitizen: {\n\t\ttown: string;\n\t};\n}\n\nasync function handleRequest(request: Request): Promise {\n\tconst url = new URL(request.url);\n\n\tif (request.method === 'POST' && url.pathname === '/notify') {\n\t\tconst presented: PresentedData = await request.json();\n\t\tconsole.log('Received notification:');\n\t\tconsole.log(JSON.stringify(presented, null, 2));\n\t}\n\n\tif (request.method === 'POST' && url.pathname === '/process') {\n\t\tconst presented: PresentedData = await request.json();\n\t\tconsole.log(presented);\n\t\tconst res: ProcessResponse = {\n\t\t\tcitizen: {\n\t\t\t\ttown: `You live in ${presented.credentials[0].values.address.locality}`,\n\t\t\t},\n\t\t};\n\t\treturn Response.json(res, { status: 200 });\n\t}\n\n\tif (request.method === 'POST' && url.pathname === '/consume') {\n\t\tconst expextedApiKey = 'foo-bar'; // This should be securely stored and retrieved\n\t\tconsole.log(request.headers);\n\t\tconst apiKey = request.headers.get('x-api-key');\n\t\tif (apiKey !== expextedApiKey) {\n\t\t\treturn new Response('Unauthorized', { status: 401 });\n\t\t}\n\n\t\tconst presented = await request.json();\n\t\tconsole.log('Received consume webhook:');\n\t\tconsole.log(JSON.stringify(presented, null, 2));\n\t\treturn new Response(null, { status: 200 });\n\t}\n\n\treturn new Response('Not found', { status: 404 });\n}\n\nexport default {\n\tfetch: handleRequest,\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuerySerializerOptions.html":{"url":"interfaces/QuerySerializerOptions.html","title":"interface - QuerySerializerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuerySerializerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/bodySerializer.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowReserved\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            array\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            object\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowReserved\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowReserved:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        array\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        array:         SerializerOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SerializerOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        object\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        object:         SerializerOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SerializerOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type {\n    ArrayStyle,\n    ObjectStyle,\n    SerializerOptions,\n} from './pathSerializer';\n\nexport type QuerySerializer = (query: Record) => string;\n\nexport type BodySerializer = (body: any) => any;\n\nexport interface QuerySerializerOptions {\n    allowReserved?: boolean;\n    array?: SerializerOptions;\n    object?: SerializerOptions;\n}\n\nconst serializeFormDataPair = (\n    data: FormData,\n    key: string,\n    value: unknown,\n): void => {\n    if (typeof value === 'string' || value instanceof Blob) {\n        data.append(key, value);\n    } else {\n        data.append(key, JSON.stringify(value));\n    }\n};\n\nconst serializeUrlSearchParamsPair = (\n    data: URLSearchParams,\n    key: string,\n    value: unknown,\n): void => {\n    if (typeof value === 'string') {\n        data.append(key, value);\n    } else {\n        data.append(key, JSON.stringify(value));\n    }\n};\n\nexport const formDataBodySerializer = {\n    bodySerializer:  | Array>,\n    >(\n        body: T,\n    ): FormData => {\n        const data = new FormData();\n\n        Object.entries(body).forEach(([key, value]) => {\n            if (value === undefined || value === null) {\n                return;\n            }\n            if (Array.isArray(value)) {\n                value.forEach((v) => serializeFormDataPair(data, key, v));\n            } else {\n                serializeFormDataPair(data, key, value);\n            }\n        });\n\n        return data;\n    },\n};\n\nexport const jsonBodySerializer = {\n    bodySerializer: (body: T): string =>\n        JSON.stringify(body, (_key, value) =>\n            typeof value === 'bigint' ? value.toString() : value,\n        ),\n};\n\nexport const urlSearchParamsBodySerializer = {\n    bodySerializer:  | Array>,\n    >(\n        body: T,\n    ): string => {\n        const data = new URLSearchParams();\n\n        Object.entries(body).forEach(([key, value]) => {\n            if (value === undefined || value === null) {\n                return;\n            }\n            if (Array.isArray(value)) {\n                value.forEach((v) =>\n                    serializeUrlSearchParamsPair(data, key, v),\n                );\n            } else {\n                serializeUrlSearchParamsPair(data, key, value);\n            }\n        });\n\n        return data.toString();\n    },\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrarConfig.html":{"url":"classes/RegistrarConfig.html","title":"class - RegistrarConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrarConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar-config.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarConfig class represents the configuration for the registrar service.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accessCertificateId\n                            \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accessCertificateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar-config.ts:12\n                        \n                    \n\n            \n                \n                    ID of the access certificate.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar-config.ts:8\n                        \n                    \n\n            \n                \n                    ID of the relying party.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RegistrarConfig {\n    /**\n     * ID of the relying party.\n     */\n    id?: string;\n    /**\n     * ID of the access certificate.\n     */\n    accessCertificateId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RegistrarModule.html":{"url":"modules/RegistrarModule.html","title":"module - RegistrarModule","body":"\n                   \n\n\n\n\n    Modules\n    RegistrarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/registrar/registrar.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            RegistrarModule is responsible for managing the registrar service.\nIt provides the RegistrarService and imports necessary modules.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RegistrarService } from './registrar.service';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport * as Joi from 'joi';\nimport { PresentationsModule } from '../verifier/presentations/presentations.module';\n\n/**\n * Validation schema for the registrar module.\n * Defines the required environment variables and their types.\n */\nexport const REGISTRAR_VALIDATION_SCHEMA = {\n    REGISTRAR_URL: Joi.string(),\n    OIDC_ISSUER_URL: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    OIDC_CLIENT_ID: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    OIDC_CLIENT_SECRET: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n};\n\n/**\n * RegistrarModule is responsible for managing the registrar service.\n * It provides the RegistrarService and imports necessary modules.\n */\n@Module({\n    imports: [CryptoModule, PresentationsModule],\n    providers: [RegistrarService],\n    exports: [RegistrarService],\n})\nexport class RegistrarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegistrarService.html":{"url":"injectables/RegistrarService.html","title":"injectable - RegistrarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegistrarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarService is responsible for managing the interaction with the registrar,\nincluding adding relying parties, access certificates, and registration certificates.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessToken\n                            \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                oauth2Client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addAccessCertificate\n                            \n                            \n                                    Async\n                                addRegistrationCertificate\n                            \n                            \n                                addRp\n                            \n                            \n                                    Async\n                                getAccessCertificateId\n                            \n                            \n                                isEnabled\n                            \n                            \n                                    Private\n                                loadConfig\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                            \n                                    Private\n                                saveConfig\n                            \n                            \n                                    Private\n                                storeExistingRp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, presentationsService: PresentationsService)\n                    \n                \n                        \n                            \n                                Defined in src/registrar/registrar.service.ts:61\n                            \n                        \n\n                \n                    \n                            Constructor for the RegistrarService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ConfigService for accessing configuration values.\n\n\n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of CryptoService for cryptographic operations.\n\n\n                                                        \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of PresentationsService for handling presentations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        addAccessCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addAccessCertificate(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:231\n                        \n                    \n\n\n            \n                \n                        Add a new access certificate to the registrar.\nThis is only needed once, when the access certificate is created.\nIf the access certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addRegistrationCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRegistrationCertificate(req: RegistrationCertificateRequest, dcql_query: any, requestId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:272\n                        \n                    \n\n\n            \n                \n                        Add a new registration certificate to the registrar.\nThis is only needed once, when the registration certificate is created.\nIf the registration certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RegistrationCertificateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dcql_query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addRp\n                        \n                    \n                \n            \n            \n                \naddRp(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:161\n                        \n                    \n\n\n            \n                \n                        Adds a new relying party to the registrar.\nThis is only needed once, when the relying party is created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAccessCertificateId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccessCertificateId(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:204\n                        \n                    \n\n\n            \n                \n                        Get the access certificate ID from the registrar.\nIf there is no access certificate ID in the config, it will add a new one.\nIf there is one, it will check if it is still valid.\nIf it is revoked, it will add a new one.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnabled\n                        \n                    \n                \n            \n            \n                \nisEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Checks if the registrar service is enabled based on the configuration.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the registrar service is enabled, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfig(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:329\n                        \n                    \n\n\n            \n                \n                        Load the registrar configuration from the config file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RegistrarConfig\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:117\n                        \n                    \n\n\n            \n                \n                        This function is called when the application starts.\nIt will refresh the access token for the registrar.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Initializes the OAuth2 client and registrar client with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_KEYS, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:129\n                        \n                    \n\n\n            \n                \n                        This function is called when a tenant is initialized.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshAccessToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:144\n                        \n                    \n\n\n            \n                \n                        Refreshes the access token for the registrar using client credentials.\nThis method is called periodically to ensure the access token is valid.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saveConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveConfig(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:352\n                        \n                    \n\n\n            \n                \n                        Save the registrar configuration to the config file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storeExistingRp\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeExistingRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:186\n                        \n                    \n\n\n            \n                \n                        Stores the existing relying party ID based on the name.\nThis is used when the relying party already exists in the registrar.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the relying party.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The ID of the existing relying party.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:61\n                        \n                    \n\n            \n                \n                    Access token for authenticating requests to the registrar.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:57\n                        \n                    \n\n            \n                \n                    Client for interacting with the registrar API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauth2Client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:53\n                        \n                    \n\n            \n                \n                    OAuth2 client for interacting with the OIDC provider.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { OAuth2Client } from '@badgateway/oauth2-client';\nimport { client } from './generated/client.gen';\nimport {\n    accessCertificateControllerFindOne,\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from './generated';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { RegistrationCertificateRequest } from '../verifier/presentations/dto/vp-request.dto';\nimport { PresentationsService } from '../verifier/presentations/presentations.service';\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs';\nimport { RegistrarConfig } from './registrar-config';\nimport { join } from 'node:path';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\n/**\n * Repsonse of access certificate request.\n */\ninterface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow('OIDC_ISSUER_URL');\n        const clientId =\n            this.configService.getOrThrow('OIDC_CLIENT_ID');\n        const clientSecret =\n            this.configService.getOrThrow('OIDC_CLIENT_SECRET');\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow('REGISTRAR_URL'),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get('REGISTRAR_URL');\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get('REGISTRAR_URL')) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        const config = this.loadConfig(tenantId);\n        if (!config.id) {\n            config.id = await this.addRp(tenantId);\n        }\n        await this.getAccessCertificateId(config, tenantId);\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(tenantId: string): Promise {\n        const name = this.configService.getOrThrow('RP_NAME');\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            const config = this.loadConfig(tenantId);\n            if (response.error) {\n                config.id = await this.storeExistingRp(name);\n            } else {\n                config.id = response.data!['id'];\n            }\n            this.saveConfig(config, tenantId);\n            return response.data!['id'];\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private storeExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id;\n        });\n    }\n\n    /**\n     * Get the access certificate ID from the registrar.\n     * If there is no access certificate ID in the config, it will add a new one.\n     * If there is one, it will check if it is still valid.\n     * If it is revoked, it will add a new one.\n     * @param config\n     */\n    async getAccessCertificateId(config: RegistrarConfig, tenantId: string) {\n        // if there is no access certificate ID in the config, we need to add it\n        if (!config.accessCertificateId) {\n            await this.addAccessCertificate(config, tenantId);\n        }\n        // if there is one, check if it is still valid\n        await accessCertificateControllerFindOne({\n            client: this.client,\n            path: { rp: config.id, id: config.accessCertificateId! },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error finding access certificate:', res.error);\n            }\n            const data = res.data as AccessCertificateResponse;\n            if (data.revoked) {\n                console.warn('Access certificate is revoked, adding a new one');\n                return this.addAccessCertificate(config, tenantId);\n            }\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        config: RegistrarConfig,\n        tenantId: string,\n    ): Promise {\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    'pem',\n                    tenantId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: config.id,\n            },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error adding access certificate:', res.error);\n                throw new Error('Error adding access certificate');\n            }\n            //store the cert\n            this.cryptoService.storeAccessCertificate(\n                res.data!['crt'],\n                tenantId,\n            );\n            config.accessCertificateId = res.data!['id'];\n            this.saveConfig(config, tenantId);\n            return res.data!['id'];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const rp = this.loadConfig(tenantId).id;\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    'Error adding registration certificate:',\n                    res.error,\n                );\n                throw new Error('Error adding registration certificate');\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data!['id'],\n                requestId,\n                tenantId,\n            );\n            return res.data!['jwt'];\n        });\n    }\n\n    /**\n     * Load the registrar configuration from the config file.\n     * @returns\n     */\n    private loadConfig(tenantId: string): RegistrarConfig {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n\n        if (!existsSync(filePath)) {\n            // If the config file does not exist, create an empty config\n            const initialConfig: RegistrarConfig = {};\n            writeFileSync(filePath, JSON.stringify(initialConfig, null, 2));\n            return initialConfig;\n        }\n        const config = JSON.parse(\n            readFileSync(filePath, 'utf-8'),\n        ) as RegistrarConfig;\n        return config;\n    }\n\n    /**\n     * Save the registrar configuration to the config file.\n     * @param config\n     */\n    private saveConfig(config: RegistrarConfig, tenantId: string) {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n        writeFileSync(filePath, JSON.stringify(config, null, 2));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrationCertificateRequest.html":{"url":"classes/RegistrationCertificateRequest.html","title":"class - RegistrationCertificateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrationCertificateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/vp-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrationCertificateRequest DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateCreation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:17\n                        \n                    \n\n            \n                \n                    The body of the registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:12\n                        \n                    \n\n            \n                \n                    Identifier of the registration certificate that got issued.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { RegistrationCertificateCreation } from '../../../registrar/generated';\n\n/**\n * RegistrationCertificateRequest DTO\n */\nexport class RegistrationCertificateRequest {\n    /**\n     * Identifier of the registration certificate that got issued.\n     */\n    @IsString()\n    id?: string;\n    /**\n     * The body of the registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    body: RegistrationCertificateCreation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestOptions.html":{"url":"interfaces/RequestOptions.html","title":"interface - RequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Config\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            body\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            query\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            security\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Any body that you want to add to your request.\nhttps://developer.mozilla.org/docs/Web/API/fetch#body\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        security\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        security:         ReadonlyArray\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ReadonlyArray\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Security mechanism(s) to use for the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:     Url\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Url\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResolverModule.html":{"url":"modules/ResolverModule.html","title":"module - ResolverModule","body":"\n                   \n\n\n\n\n    Modules\n    ResolverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\n\nResolverService \n\nResolverService \n\n\n\nResolverModule\n\nResolverModule\n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/resolver/resolver.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ResolverService } from './resolver.service';\nimport { HttpModule } from '@nestjs/axios';\n\n@Module({\n    imports: [HttpModule],\n    providers: [ResolverService],\n    exports: [ResolverService],\n})\nexport class ResolverModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolverService.html":{"url":"injectables/ResolverService.html","title":"injectable - ResolverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/resolver.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for resolving public keys from JWT payloads and headers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resolvePublicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/resolver/resolver.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resolvePublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolvePublicKey(payload: JWTPayload, header: JWK)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/resolver/resolver.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWK\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { JWK, JWTPayload } from 'jose';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { X509Certificate } from 'node:crypto';\nimport { IssuerMetadata } from './dto/issuer-metadata.dto';\n\n/**\n * Service for resolving public keys from JWT payloads and headers.\n */\n@Injectable()\nexport class ResolverService {\n    constructor(private httpService: HttpService) {}\n\n    /**\n     * Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n     * @param payload\n     * @param header\n     * @returns\n     */\n    async resolvePublicKey(payload: JWTPayload, header: JWK): Promise {\n        if (!payload.iss) {\n            throw new Error('Issuer not found');\n        }\n\n        if (header.x5c) {\n            //TODO: validate the certificate and the chain of trust!\n            const certs = header.x5c.map(\n                (cert) => new X509Certificate(Buffer.from(cert, 'base64')),\n            );\n            const cert = certs[0];\n            if (!cert.subjectAltName?.includes(new URL(payload.iss).hostname)) {\n                throw new Error('Subject and issuer do not match');\n            }\n            return cert.publicKey.export({ format: 'jwk' }) as JWK;\n        }\n        //checl if the key is in the header as jwk\n        if (header['jwk']) {\n            return header['jwk'] as JWK;\n        }\n\n        const response = await firstValueFrom(\n            this.httpService.get(\n                `${payload.iss}/.well-known/jwt-vc-issuer`,\n            ),\n        ).then(\n            (r) => r.data,\n            () => {\n                throw new ConflictException('Issuer not reachable');\n            },\n        );\n        const key = response.jwks.keys.find((key) => key.kid === header.kid);\n        if (!key) {\n            throw new Error('Key not found');\n        }\n        return key;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SchemaResponse.html":{"url":"classes/SchemaResponse.html","title":"class - SchemaResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/schema-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                $schema\n                            \n                            \n                                properties\n                            \n                            \n                                required\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        $schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'https://json-schema.org/draft/2020-12/schema'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'object'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class SchemaResponse {\n    '$schema' = 'https://json-schema.org/draft/2020-12/schema';\n    type = 'object';\n    properties: Record;\n    required: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializeOptions.html":{"url":"interfaces/SerializeOptions.html","title":"interface - SerializeOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializeOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            SerializePrimitiveOptions\n                            SerializerOptions\n            \n\n\n\n\n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializePrimitiveOptions.html":{"url":"interfaces/SerializePrimitiveOptions.html","title":"interface - SerializePrimitiveOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializePrimitiveOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowReserved\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowReserved\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowReserved:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializePrimitiveParam.html":{"url":"interfaces/SerializePrimitiveParam.html","title":"interface - SerializePrimitiveParam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializePrimitiveParam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            SerializePrimitiveOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializerOptions.html":{"url":"interfaces/SerializerOptions.html","title":"interface - SerializerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            explode\n                                        \n                                \n                                \n                                        \n                                            style\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        explode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        explode:         boolean\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : true\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        style:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user session in the application.\nIt includes various properties such as credentials, authorization code,\nrequest URI, authorization queries, and more.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                auth_queries\n                            \n                            \n                                    \n                                    Optional\n                                authorization_code\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                credentialPayload\n                            \n                            \n                                    \n                                    Optional\n                                credentials\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                issuanceId\n                            \n                            \n                                    \n                                notifications\n                            \n                            \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                    Optional\n                                offer\n                            \n                            \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    Optional\n                                vp_nonce\n                            \n                            \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        auth_queries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthorizeQueries\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:64\n                        \n                    \n\n            \n                \n                    Authorization queries associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        authorization_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:54\n                        \n                    \n\n            \n                \n                    Authorization code for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:74\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentialPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OfferRequestDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:84\n                        \n                    \n\n            \n                \n                    Credential payload containing the offer request details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VerificationResult[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:49\n                        \n                    \n\n            \n                \n                    Verified credentials from the verification process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:41\n                        \n                    \n\n            \n                \n                    Unique identifier for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:99\n                        \n                    \n\n            \n                \n                    Notifications associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:94\n                        \n                    \n\n            \n                \n                    Webhook configuration to send the result of the notification response.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialOfferObject\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:79\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:59\n                        \n                    \n\n            \n                \n                    Request URI from the authorization request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:104\n                        \n                    \n\n            \n                \n                    Tenant ID for multi-tenancy support.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        vp_nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:69\n                        \n                    \n\n            \n                \n                    Noncce from the Verifiable Presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:89\n                        \n                    \n\n            \n                \n                    Webhook configuration to send result and may receive further information.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    CredentialOfferObject,\n    NotificationEvent,\n} from '@openid4vc/openid4vci';\nimport { VerificationResult } from '@sd-jwt/sd-jwt-vc';\nimport { AuthorizeQueries } from '../../issuer/authorize/dto/authorize-request.dto';\nimport { OfferRequestDto } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport { Column, Entity, PrimaryColumn } from 'typeorm';\nimport { WebhookConfig } from '../../utils/webhook/webhook.dto';\n\n/**\n * Represents a session entity for managing user sessions in the application.\n */\nexport type Notification = {\n    /**\n     * Unique identifier for the notification.\n     */\n    id: string;\n    /**\n     * The type of notification.\n     */\n    event?: NotificationEvent;\n\n    /**\n     * The credential ID associated with the notification.\n     */\n    credentialConfigurationId: string;\n};\n\n/**\n * Entity representing a user session in the application.\n * It includes various properties such as credentials, authorization code,\n * request URI, authorization queries, and more.\n */\n@Entity()\nexport class Session {\n    /**\n     * Unique identifier for the session.\n     */\n    @PrimaryColumn('uuid')\n    id: string;\n\n    @Column('varchar', { nullable: true })\n    issuanceId?: string;\n    /**\n     * Verified credentials from the verification process.\n     */\n    @Column('json', { nullable: true })\n    credentials?: VerificationResult[];\n    /**\n     * Authorization code for the session.\n     */\n    @Column('varchar', { nullable: true })\n    authorization_code?: string;\n    /**\n     * Request URI from the authorization request.\n     */\n    @Column('varchar', { nullable: true })\n    request_uri?: string;\n    /**\n     * Authorization queries associated with the session.\n     */\n    @Column('json', { nullable: true })\n    auth_queries?: AuthorizeQueries;\n    /**\n     * Noncce from the Verifiable Presentation request.\n     */\n    @Column('varchar', { nullable: true })\n    vp_nonce?: string;\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column('json', { nullable: true })\n    offer?: CredentialOfferObject;\n    /**\n     * Credential payload containing the offer request details.\n     */\n    @Column('json', { nullable: true })\n    credentialPayload?: OfferRequestDto;\n    /**\n     * Webhook configuration to send result and may receive further information.\n     */\n    @Column('json', { nullable: true })\n    webhook?: WebhookConfig;\n    /**\n     * Webhook configuration to send the result of the notification response.\n     */\n    @Column('json', { nullable: true })\n    notifyWebhook?: WebhookConfig;\n    /**\n     * Notifications associated with the session.\n     */\n    @Column('json', { default: JSON.stringify([]) })\n    notifications: Notification[];\n    /**\n     * Tenant ID for multi-tenancy support.\n     */\n    @Column('varchar')\n    tenantId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getAllSessions\n                            \n                            \n                                    \n                                getSession\n                            \n                            \n                                    \n                                revokeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllSessions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:23\n                        \n                    \n\n\n            \n                \n                        Retrieves all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Retrieves the session information for a given session ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the session.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revokeAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeAll(value: StatusUpdateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('revoke')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        Update the status of the credentials of a specific session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post, UseGuards, Body } from '@nestjs/common';\nimport { ApiSecurity, ApiTags } from '@nestjs/swagger';\nimport { SessionService } from './session.service';\nimport { Session } from './entities/session.entity';\nimport { JwtAuthGuard } from '../auth/auth.guard';\nimport { Token, TokenPayload } from '../auth/token.decorator';\nimport { StatusUpdateDto } from '../issuer/status-list/dto/status-update.dto';\nimport { StatusListService } from '../issuer/status-list/status-list.service';\n\n@ApiTags('Session management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('session')\nexport class SessionController {\n    constructor(\n        private readonly sessionService: SessionService,\n        private readonly statusListService: StatusListService,\n    ) {}\n\n    /**\n     * Retrieves all sessions.\n     */ @Get()\n    getAllSessions(): Promise {\n        return this.sessionService.getAll();\n    }\n\n    /**\n     * Retrieves the session information for a given session ID.\n     * @param id - The identifier of the session.\n     */\n    @Get(':id')\n    getSession(@Param('id') id: string): Promise {\n        return this.sessionService.get(id);\n    }\n\n    /**\n     * Update the status of the credentials of a specific session.\n     * @param value\n     * @returns\n     */\n    @Post('revoke')\n    revokeAll(@Body() value: StatusUpdateDto, @Token() user: TokenPayload) {\n        return this.statusListService.updateStatus(value, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionLogContext.html":{"url":"interfaces/SessionLogContext.html","title":"interface - SessionLogContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionLogContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Context for session logging, including session ID, tenant ID, flow type, and optional stage.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flowType\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stage\n                                        \n                                \n                                \n                                        \n                                            tenantId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger-context.ts:21\n                            \n                        \n                \n                    \n                        Additional context information for the session.\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flowType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flowType:     \"OID4VCI\" | \"OID4VP\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"OID4VCI\" | \"OID4VP\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of flow being logged (e.g., OID4VCI, OID4VP).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for the session.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional stage of the flow, useful for tracking progress.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenantId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tenantId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier for the tenant associated with the session.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SessionLogContext {\n    /**\n     * Unique identifier for the session.\n     */\n    sessionId: string;\n    /**\n     * Identifier for the tenant associated with the session.\n     */\n    tenantId: string;\n    /**\n     * Type of flow being logged (e.g., OID4VCI, OID4VP).\n     */\n    flowType: 'OID4VCI' | 'OID4VP';\n    /**\n     * Optional stage of the flow, useful for tracking progress.\n     */\n    stage?: string;\n    /**\n     * Additional context information for the session.\n     */\n    [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerInterceptor.html":{"url":"injectables/SessionLoggerInterceptor.html","title":"injectable - SessionLoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for logging session-related requests and responses.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerInterceptor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReflector instance for accessing metadata.\n\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:44\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and logs session-related information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCall handler to proceed with the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits the response data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:141\n                        \n                    \n\n\n            \n                \n                        Sanitizes the request body to remove sensitive information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request body to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Sanitized body.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ConfigService } from '@nestjs/config';\nimport { Observable } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { PinoLogger } from 'nestjs-pino';\nimport { SESSION_LOGGER_KEY } from './session-logger.decorator';\n\n/**\n * Interceptor for logging session-related requests and responses.\n */\n@Injectable()\nexport class SessionLoggerInterceptor implements NestInterceptor {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerInterceptor.\n     * @param reflector - Reflector instance for accessing metadata.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing configuration.\n     */\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.isEnabled = this.configService.get(\n            'LOG_ENABLE_SESSION_LOGGER',\n            false,\n        );\n    }\n\n    /**\n     * Intercepts the request and logs session-related information.\n     * @param context - Execution context of the request.\n     * @param next - Call handler to proceed with the request.\n     * @returns An observable that emits the response data.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const metadata = this.reflector.get(\n            SESSION_LOGGER_KEY,\n            context.getHandler(),\n        );\n\n        if (!metadata || !this.isEnabled) {\n            return next.handle();\n        }\n\n        const { sessionIdParam, flowType } = metadata;\n        const request = context.switchToHttp().getRequest();\n        const response = context.switchToHttp().getResponse();\n\n        // Extract session ID from various sources\n        const sessionId =\n            request.params?.[sessionIdParam] ||\n            request.body?.[sessionIdParam] ||\n            request.headers['x-session-id'] ||\n            request.query?.[sessionIdParam];\n\n        const tenantId = request.params?.tenantId;\n        const method = request.method;\n        const url = request.url;\n\n        // Set context for this logger instance\n        this.logger.setContext('SessionLogger');\n\n        // Create log context\n        const logContext = {\n            sessionId,\n            tenantId,\n            flowType,\n            endpoint: `${method} ${url}`,\n        };\n\n        // Log the start of the request\n        this.logger.info(\n            {\n                ...logContext,\n                event: 'request_start',\n                method,\n                url,\n                headers: {\n                    'user-agent': request.headers['user-agent'],\n                    'content-type': request.headers['content-type'],\n                },\n                body: this.sanitizeBody(request.body),\n            },\n            `[${flowType}] Starting ${method} ${url} for session ${sessionId}`,\n        );\n\n        const startTime = Date.now();\n\n        return next.handle().pipe(\n            tap((data) => {\n                const duration = Date.now() - startTime;\n                this.logger.info(\n                    {\n                        ...logContext,\n                        event: 'request_success',\n                        method,\n                        url,\n                        statusCode: response.statusCode,\n                        duration,\n                        responseSize: JSON.stringify(data || {}).length,\n                    },\n                    `[${flowType}] Completed ${method} ${url} for session ${sessionId} in ${duration}ms`,\n                );\n            }),\n            catchError((error) => {\n                const duration = Date.now() - startTime;\n                this.logger.error(\n                    {\n                        ...logContext,\n                        event: 'request_error',\n                        method,\n                        url,\n                        error: {\n                            name: error.name,\n                            message: error.message,\n                            stack: error.stack,\n                        },\n                        duration,\n                    },\n                    `[${flowType}] Error in ${method} ${url} for session ${sessionId}: ${error.message}`,\n                );\n                throw error;\n            }),\n        );\n    }\n\n    /**\n     * Sanitizes the request body to remove sensitive information.\n     * @param body - The request body to sanitize.\n     * @returns Sanitized body.\n     */\n    private sanitizeBody(body: any): any {\n        if (!body) return body;\n\n        // Create a copy to avoid modifying the original\n        const sanitized = { ...body };\n\n        // Remove sensitive fields\n        const sensitiveFields = [\n            'password',\n            'token',\n            'secret',\n            'key',\n            'private_key',\n            'access_token',\n            'refresh_token',\n        ];\n\n        sensitiveFields.forEach((field) => {\n            if (sanitized[field]) {\n                sanitized[field] = '[REDACTED]';\n            }\n        });\n\n        return sanitized;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerService.html":{"url":"injectables/SessionLoggerService.html","title":"injectable - SessionLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for logging session-related events and errors.\nUses PinoLogger for structured logging.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logAuthorizationRequest\n                            \n                            \n                                logCredentialIssuance\n                            \n                            \n                                logCredentialVerification\n                            \n                            \n                                logFlowComplete\n                            \n                            \n                                logFlowError\n                            \n                            \n                                logFlowStart\n                            \n                            \n                                logNotification\n                            \n                            \n                                logSession\n                            \n                            \n                                logSessionError\n                            \n                            \n                                logTokenExchange\n                            \n                            \n                                    Private\n                                shouldLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing environment configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \nlogAuthorizationRequest(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Log authorization request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialIssuance\n                        \n                    \n                \n            \n            \n                \nlogCredentialIssuance(context: SessionLogContext, credentialType: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Log credential issuance step\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialVerification\n                        \n                    \n                \n            \n            \n                \nlogCredentialVerification(context: SessionLogContext, verificationResult: boolean, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Log credential presentation verification\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                verificationResult\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowComplete\n                        \n                    \n                \n            \n            \n                \nlogFlowComplete(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Log session flow completion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowError\n                        \n                    \n                \n            \n            \n                \nlogFlowError(context: SessionLogContext, error: Error, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Log session flow error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowStart\n                        \n                    \n                \n            \n            \n                \nlogFlowStart(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Log session flow start\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logNotification\n                        \n                    \n                \n            \n            \n                \nlogNotification(context: SessionLogContext, notificationEvent: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Log notification events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notificationEvent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSession\n                        \n                    \n                \n            \n            \n                \nlogSession(context: SessionLogContext, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Generic session log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSessionError\n                        \n                    \n                \n            \n            \n                \nlogSessionError(context: SessionLogContext, error: Error, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Generic session error log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logTokenExchange\n                        \n                    \n                \n            \n            \n                \nlogTokenExchange(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Log token exchange\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    shouldLog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PinoLogger } from 'nestjs-pino';\nimport { ConfigService } from '@nestjs/config';\nimport { SessionLogContext } from './session-logger-context';\n\n/**\n * Service for logging session-related events and errors.\n * Uses PinoLogger for structured logging.\n */\n@Injectable()\nexport class SessionLoggerService {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerService.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing environment configuration.\n     */\n    constructor(\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.logger.setContext('SessionLoggerService');\n        this.isEnabled = this.configService.get(\n            'LOG_ENABLE_SESSION_LOGGER',\n            false,\n        );\n    }\n\n    private shouldLog(): boolean {\n        return this.isEnabled;\n    }\n\n    /**\n     * Log session flow start\n     */\n    logFlowStart(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow started for session ${context.sessionId} in tenant ${context.tenantId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'flow_start',\n                stage: 'initialization',\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow completion\n     */\n    logFlowComplete(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow completed for session ${context.sessionId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'flow_complete',\n                stage: 'completion',\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow error\n     */\n    logFlowError(\n        context: SessionLogContext,\n        error: Error,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow error for session ${context.sessionId}: ${error.message}`;\n\n        this.logger.error(\n            {\n                ...context,\n                event: 'flow_error',\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log credential issuance step\n     */\n    logCredentialIssuance(\n        context: SessionLogContext,\n        credentialType: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'credential_issuance',\n                stage: 'credential_creation',\n                credentialType,\n                ...additionalData,\n            },\n            `[${context.flowType}] Issuing credential of type ${credentialType} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log credential presentation verification\n     */\n    logCredentialVerification(\n        context: SessionLogContext,\n        verificationResult: boolean,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'credential_verification',\n                stage: 'verification',\n                verificationResult,\n                ...additionalData,\n            },\n            `[${context.flowType}] Credential verification ${verificationResult ? 'succeeded' : 'failed'} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log authorization request\n     */\n    logAuthorizationRequest(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'authorization_request',\n                stage: 'authorization',\n                ...additionalData,\n            },\n            `[${context.flowType}] Authorization request created for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log token exchange\n     */\n    logTokenExchange(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'token_exchange',\n                stage: 'token_exchange',\n                ...additionalData,\n            },\n            `[${context.flowType}] Token exchange for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log notification events\n     */\n    logNotification(\n        context: SessionLogContext,\n        notificationEvent: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'notification',\n                stage: 'notification',\n                notificationEvent,\n                ...additionalData,\n            },\n            `[${context.flowType}] Notification ${notificationEvent} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Generic session log method\n     */\n    logSession(\n        context: SessionLogContext,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}`,\n        );\n    }\n\n    /**\n     * Generic session error log method\n     */\n    logSessionError(\n        context: SessionLogContext,\n        error: Error,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.error(\n            {\n                ...context,\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}: ${error.message}`,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_imports\n\n\n\ncluster_SessionModule_providers\n\n\n\n\nStatusListModule\n\nStatusListModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            SessionModule is responsible for managing user sessions.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SessionService } from './session.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Session } from './entities/session.entity';\nimport { SessionController } from './session.controller';\nimport * as Joi from 'joi';\nimport { StatusListModule } from '../issuer/status-list/status-list.module';\n\n/**\n * Module for managing user sessions.\n */\nexport const SESSION_VALIDATION_SCHEMA = {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n};\n\n/**\n * SessionModule is responsible for managing user sessions.\n */\n@Module({\n    imports: [TypeOrmModule.forFeature([Session]), StatusListModule],\n    providers: [SessionService],\n    exports: [SessionService],\n    controllers: [SessionController],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                create\n                            \n                            \n                                get\n                            \n                            \n                                getAll\n                            \n                            \n                                getBy\n                            \n                            \n                                onApplicationBootstrap\n                            \n                            \n                                tidyUpSessions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionRepository: Repository, configService: ConfigService, schedulerRegistry: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(issuer_state: string, tenantId: string, values: QueryDeepPartialEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Update an existing session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            QueryDeepPartialEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(session: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Create a new session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Get a session by its state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Get all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBy\n                        \n                    \n                \n            \n            \n                \ngetBy(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Get a session by a specific condition.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Register the tidy up cron job on application bootstrap.\nThis will run every hour by default, but can be configured via the SESSION_TIDY_UP_INTERVAL config variable.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tidyUpSessions\n                        \n                    \n                \n            \n            \n                \ntidyUpSessions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Tidy up sessions that are older than 1 day.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { Session } from './entities/session.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeepPartial, FindOptionsWhere, LessThan, Repository } from 'typeorm';\nimport { QueryDeepPartialEntity } from 'typeorm/query-builder/QueryPartialEntity';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class SessionService implements OnApplicationBootstrap {\n    constructor(\n        @InjectRepository(Session)\n        private sessionRepository: Repository,\n        private readonly configService: ConfigService,\n        private readonly schedulerRegistry: SchedulerRegistry,\n    ) {}\n\n    /**\n     * Register the tidy up cron job on application bootstrap.\n     * This will run every hour by default, but can be configured via the `SESSION_TIDY_UP_INTERVAL` config variable.\n     * @returns\n     */\n    onApplicationBootstrap() {\n        const callback = () => {\n            void this.tidyUpSessions();\n        };\n        const intervalTime =\n            this.configService.getOrThrow('SESSION_TIDY_UP_INTERVAL') *\n            1000;\n        const interval = setInterval(callback, intervalTime);\n        this.schedulerRegistry.addInterval('tidyUpSessions', interval);\n        return this.tidyUpSessions();\n    }\n\n    /**\n     * Create a new session.\n     * @param session\n     * @returns\n     */\n    create(session: DeepPartial) {\n        return this.sessionRepository.save(session);\n    }\n\n    /**\n     * Update an existing session.\n     * @param issuer_state\n     * @param values\n     * @returns\n     */\n    add(\n        issuer_state: string,\n        tenantId: string,\n        values: QueryDeepPartialEntity,\n    ) {\n        return this.sessionRepository.update(\n            { id: issuer_state, tenantId },\n            values,\n        );\n    }\n\n    /**\n     * Get all sessions.\n     * @returns\n     */\n    getAll(): Promise {\n        return this.sessionRepository.find();\n    }\n\n    /**\n     * Get a session by its state.\n     * @param state\n     * @returns\n     */\n    get(state: string) {\n        return this.sessionRepository.findOneByOrFail({ id: state });\n    }\n\n    /**\n     * Get a session by a specific condition.\n     * @param where\n     * @returns\n     */\n    getBy(where: FindOptionsWhere) {\n        return this.sessionRepository.findOneByOrFail(where);\n    }\n\n    /**\n     * Tidy up sessions that are older than 1 day.\n     */\n    tidyUpSessions() {\n        const ttl = this.configService.getOrThrow('SESSION_TTL') * 1000;\n        return this.sessionRepository.delete({\n            createdAt: LessThan(new Date(Date.now() - ttl)),\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatusListController.html":{"url":"controllers/StatusListController.html","title":"controller - StatusListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatusListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/status-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status-list')@Header('Content-Type', 'application/statuslist+jwt')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.controller.ts:16\n                        \n                    \n\n\n            \n                \n                        Get the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from '@nestjs/common';\nimport { StatusListService } from './status-list.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Status management')\n@Controller(':tenantId/status-management')\nexport class StatusListController {\n    constructor(private statusListService: StatusListService) {}\n\n    /**\n     * Get the status list\n     * @returns\n     */\n    @Get('status-list')\n    @Header('Content-Type', 'application/statuslist+jwt')\n    getList(@Param('tenantId') tenantId: string) {\n        return this.statusListService.getList(tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StatusListFile.html":{"url":"interfaces/StatusListFile.html","title":"interface - StatusListFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StatusListFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bits\n                                        \n                                \n                                \n                                        \n                                            elements\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            jwt\n                                        \n                                \n                                \n                                        \n                                            stack\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bits:     BitsPerStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BitsPerStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elements\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elements:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stack\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stack:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { join } from 'path';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport {\n    BitsPerStatus,\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from '@sd-jwt/jwt-status-list';\nimport { JwtPayload } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\nimport { Repository } from 'typeorm';\nimport { StatusUpdateDto } from './dto/status-update.dto';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Session } from '../../session/entities/session.entity';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\n\ninterface StatusListFile {\n    elements: number[];\n    stack: number[];\n    bits: BitsPerStatus;\n    jwt?: string;\n}\n\n@Injectable()\nexport class StatusListService implements OnModuleInit {\n    private fileName: string = 'status-list.json';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n    ) {}\n    onModuleInit() {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    onTenantInit(tenantId: string) {\n        return this.init(tenantId);\n    }\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    private async init(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        if (!existsSync(file)) {\n            const size = 10000;\n            // create an empty array with the size of 1000\n            const elements = new Array(size).fill(0).map(() => 0);\n            // create a list of 1000 indexes and shuffel them\n            const stack = new Array(size)\n                .fill(0)\n                .map((_, i) => i)\n                .sort(() => 0.5 - Math.random());\n\n            writeFileSync(\n                file,\n                JSON.stringify({ elements, stack, bits: 1 } as StatusListFile),\n            );\n            await this.createList(tenantId);\n        }\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(tenantId: string) {\n        const file = this.getConfig(tenantId);\n        const list = new StatusList(file.elements, file.bits);\n        const iss = `${this.configService.getOrThrow('PUBLIC_URL')}`;\n\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            tenantId,\n            'status-management',\n            'status-list',\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: 'ES256',\n            typ: 'statuslist+jwt',\n            x5c: this.cryptoService.getCertChain('signing', tenantId),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(header, payload, tenantId);\n        file.jwt = jwt;\n        this.storeConfig(file, tenantId);\n    }\n\n    getList(tenantId: string) {\n        return this.getConfig(tenantId).jwt;\n    }\n\n    private getConfig(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        return JSON.parse(readFileSync(file, 'utf-8')) as StatusListFile;\n    }\n\n    private storeConfig(content: StatusListFile, tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        writeFileSync(file, JSON.stringify(content));\n    }\n\n    /**\n     * Get the next free entry in the status list\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = this.getConfig(session.tenantId);\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error('Stack for status list is empty!!!');\n        }\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            session.tenantId,\n            'status-management',\n            'status-list',\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n        this.storeConfig(file, session.tenantId);\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private setEntry(id: number, value: number, tenantId: string) {\n        const file = this.getConfig(tenantId);\n        file.elements[id] = value;\n        this.storeConfig(file, tenantId);\n        return this.createList(tenantId);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatusListModule.html":{"url":"modules/StatusListModule.html","title":"module - StatusListModule","body":"\n                   \n\n\n\n\n    Modules\n    StatusListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_providers\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/status-list/status-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatusListController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StatusListController } from './status-list.controller';\nimport { StatusListService } from './status-list.service';\nimport { CryptoModule } from '../../crypto/crypto.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\n\n@Module({\n    imports: [CryptoModule, TypeOrmModule.forFeature([StatusMapping])],\n    controllers: [StatusListController],\n    providers: [StatusListService],\n    exports: [StatusListService],\n})\nexport class StatusListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatusListService.html":{"url":"injectables/StatusListService.html","title":"injectable - StatusListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatusListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fileName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntry\n                            \n                            \n                                    Async\n                                createList\n                            \n                            \n                                    Private\n                                getConfig\n                            \n                            \n                                getList\n                            \n                            \n                                    Private\n                                    Async\n                                init\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                onTenantInit\n                            \n                            \n                                    Private\n                                setEntry\n                            \n                            \n                                    Private\n                                storeConfig\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, statusMappingRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/status-list/status-list.service.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusMappingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEntry(session: Session, credentialConfigurationId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Get the next free entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                        \n                    createList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Create a new status list and stored it in the file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfig(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         StatusListFile\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getList\n                        \n                    \n                \n            \n            \n                \ngetList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Initialize the status list service by checking if the status list file exists.\nIf it does not exist, create a new status list with 10,000 entries and a stack\nof 10,000 indexes. The stack is shuffled to ensure randomness in the order of\nentries. The status list is stored in the file system as a JSON file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_KEYS, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    setEntry(id: number, value: number, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:178\n                        \n                    \n\n\n            \n                \n                        Update the value of an entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storeConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeConfig(content: StatusListFile, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                content\n                                            \n                                                            StatusListFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(value: StatusUpdateDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:189\n                        \n                    \n\n\n            \n                \n                        Update the status of a session and its credential configuration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'status-list.json'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/status-list.service.ts:31\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { join } from 'path';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport {\n    BitsPerStatus,\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from '@sd-jwt/jwt-status-list';\nimport { JwtPayload } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\nimport { Repository } from 'typeorm';\nimport { StatusUpdateDto } from './dto/status-update.dto';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Session } from '../../session/entities/session.entity';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\n\ninterface StatusListFile {\n    elements: number[];\n    stack: number[];\n    bits: BitsPerStatus;\n    jwt?: string;\n}\n\n@Injectable()\nexport class StatusListService implements OnModuleInit {\n    private fileName: string = 'status-list.json';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n    ) {}\n    onModuleInit() {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    onTenantInit(tenantId: string) {\n        return this.init(tenantId);\n    }\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    private async init(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        if (!existsSync(file)) {\n            const size = 10000;\n            // create an empty array with the size of 1000\n            const elements = new Array(size).fill(0).map(() => 0);\n            // create a list of 1000 indexes and shuffel them\n            const stack = new Array(size)\n                .fill(0)\n                .map((_, i) => i)\n                .sort(() => 0.5 - Math.random());\n\n            writeFileSync(\n                file,\n                JSON.stringify({ elements, stack, bits: 1 } as StatusListFile),\n            );\n            await this.createList(tenantId);\n        }\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(tenantId: string) {\n        const file = this.getConfig(tenantId);\n        const list = new StatusList(file.elements, file.bits);\n        const iss = `${this.configService.getOrThrow('PUBLIC_URL')}`;\n\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            tenantId,\n            'status-management',\n            'status-list',\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: 'ES256',\n            typ: 'statuslist+jwt',\n            x5c: this.cryptoService.getCertChain('signing', tenantId),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(header, payload, tenantId);\n        file.jwt = jwt;\n        this.storeConfig(file, tenantId);\n    }\n\n    getList(tenantId: string) {\n        return this.getConfig(tenantId).jwt;\n    }\n\n    private getConfig(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        return JSON.parse(readFileSync(file, 'utf-8')) as StatusListFile;\n    }\n\n    private storeConfig(content: StatusListFile, tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        writeFileSync(file, JSON.stringify(content));\n    }\n\n    /**\n     * Get the next free entry in the status list\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = this.getConfig(session.tenantId);\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error('Stack for status list is empty!!!');\n        }\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            session.tenantId,\n            'status-management',\n            'status-list',\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n        this.storeConfig(file, session.tenantId);\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private setEntry(id: number, value: number, tenantId: string) {\n        const file = this.getConfig(tenantId);\n        file.elements[id] = value;\n        this.storeConfig(file, tenantId);\n        return this.createList(tenantId);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusMapping.html":{"url":"entities/StatusMapping.html","title":"entity - StatusMapping","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-mapping.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigurationId\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                list\n                            \n                            \n                                    \n                                sessionId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\n\n@Entity()\nexport class StatusMapping {\n    @Column({ type: 'varchar', primary: true })\n    sessionId: string;\n\n    @Column({ type: 'varchar', primary: true })\n    list: string;\n\n    @Column({ type: 'int', primary: true })\n    index: number;\n\n    @Column({ type: 'varchar', primary: true })\n    credentialConfigurationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusUpdateDto.html":{"url":"classes/StatusUpdateDto.html","title":"class - StatusUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/dto/status-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationId\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:16\n                        \n                    \n\n            \n                \n                    The ID of the credential configuration\nThis is optional, if not provided, all credentials will be revoked of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:8\n                        \n                    \n\n            \n                \n                    The session ID of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsIn(['0', '1'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:24\n                        \n                    \n\n            \n                \n                    The status of the credential\n0 = valid, 1 = revoked\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class StatusUpdateDto {\n    /**\n     * The session ID of the user\n     */\n    @IsString()\n    sessionId: string;\n\n    /**\n     * The ID of the credential configuration\n     * This is optional, if not provided, all credentials will be revoked of the session.\n     */\n    @IsString()\n    @IsOptional()\n    credentialConfigurationId?: string;\n\n    /**\n     * The status of the credential\n     * 0 = valid, 1 = revoked\n     */\n    @IsNumber()\n    @IsIn([0, 1])\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TDataShape.html":{"url":"interfaces/TDataShape.html","title":"interface - TDataShape","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TDataShape\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            body\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            query\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Values of the user token\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\nexport const Token = createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n);\n\n/**\n * Values of the user token\n */\nexport interface TokenPayload {\n    sub: string; // Subject (client_id for client credentials)\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponse.html":{"url":"classes/TokenResponse.html","title":"class - TokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                expires_in\n                            \n                            \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenResponse {\n    access_token: string;\n    token_type: 'Bearer';\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VCT.html":{"url":"classes/VCT.html","title":"class - VCT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VCT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                extends\n                            \n                            \n                                    \n                                    Optional\n                                extends#integrity\n                            \n                            \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri#integrity\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\nexport class VCT {\n    @IsString()\n    vct: string;\n    @IsString()\n    name?: string;\n    @IsString()\n    description?: string;\n    @IsString()\n    extends?: string;\n    @IsString()\n    'extends#integrity'?: string;\n    @IsString()\n    schema_uri?: string;\n    @IsString()\n    'schema_uri#integrity'?: string;\n}\n\nexport class PresentationDuringIssuance {\n    @IsString()\n    type: string;\n    @IsObject()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VaultKeyService.html":{"url":"injectables/VaultKeyService.html","title":"injectable - VaultKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VaultKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/vault-key.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            KeyService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                folder\n                            \n                            \n                                    Private\n                                headers\n                            \n                            \n                                    Private\n                                vaultUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                derToJwtSignature\n                            \n                            \n                                    Private\n                                getJWK\n                            \n                            \n                                getKid\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                sign\n                            \n                            \n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/vault-key.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair in the vault.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        derToJwtSignature\n                        \n                    \n                \n            \n            \n                \nderToJwtSignature(derSignature: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:185\n                        \n                    \n\n\n            \n                \n                        Converts a DER signature to a JWT signature.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                derSignature\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getJWK\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJWK(key: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:90\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:100\n\n                        \n                    \n\n\n            \n                \n                        Gets the public key and converts it to a KeyLike object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"jwk\" | \"pem\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"jwk\" | \"pem\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:45\n\n                        \n                    \n\n\n            \n                \n                        Check if the vault has a key with the given id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sign\n                        \n                    \n                \n            \n            \n                \nsign(value: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:137\n                        \n                    \n\n\n            \n                \n                        Signs a value with a key in the vault.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signer\n                        \n                    \n                \n            \n            \n                \nsigner(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:57\n\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JwtPayload, header: JWTHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:156\n\n                        \n                    \n\n\n            \n                \n                        Creates a proof of possession jwt.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        folder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        vaultUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { KeyService } from './key.service';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { importSPKI, exportJWK, JWTHeaderParameters, JWK } from 'jose';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtPayload, Signer } from '@sd-jwt/types';\nimport { CryptoService, CryptoType } from './crypto/crypto.service';\nimport { writeFileSync } from 'fs';\nimport { join } from 'path';\n\n@Injectable()\nexport class VaultKeyService extends KeyService {\n    // url to the vault instance\n    private vaultUrl: string;\n    // headers for the vault api\n    private headers: { headers: { 'X-Vault-Token': string } };\n\n    private folder: string;\n\n    constructor(\n        private httpService: HttpService,\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n    ) {\n        super();\n        this.folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            'keys',\n        );\n\n        this.vaultUrl = this.configService.get('VAULT_URL') as string;\n        this.headers = {\n            headers: {\n                'X-Vault-Token': this.configService.get(\n                    'VAULT_TOKEN',\n                ) as string,\n            },\n        };\n    }\n\n    /**\n     * Check if the vault has a key with the given id\n     */\n    async init(tenantId: string) {\n        //TODO: need to update this since signing cert is not created by the vault\n        await this.getPublicKey('pem', tenantId)\n            .then((res) => {\n                writeFileSync(join(this.folder, 'public-key.pem'), res);\n            })\n            .catch(async () => this.create(tenantId));\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    signer(tenantId: string): Promise {\n        //TODO: validate if this is correct.\n        return Promise.resolve((input: string) => this.sign(input, tenantId));\n    }\n\n    /**\n     * Creates a new keypair in the vault.\n     * @param createKeyDto\n     * @param user\n     * @returns\n     */\n    async create(tenantId: string) {\n        const types: Map = new Map();\n        types.set('ES256', 'ecdsa-p256');\n        types.set('Ed25519', 'ed25519');\n\n        const res = await firstValueFrom(\n            this.httpService.post(\n                `${this.vaultUrl}/keys/${tenantId}`,\n                {\n                    exportable: false,\n                    type: types.get(this.cryptoService.getAlg()),\n                },\n                this.headers,\n            ),\n        );\n        const jwk = await this.getPublicKey('jwk', tenantId);\n        return {\n            id: res.data.id,\n            publicKey: jwk,\n        };\n    }\n\n    getKid(tenantId: string): Promise {\n        //TODO: check if this is the right way to get the key id.\n        return Promise.resolve(tenantId);\n    }\n\n    /**\n     * Gets the public key and converts it to a KeyLike object.\n     * @param id\n     * @returns\n     */\n    async getPublicKey(type: 'pem', tenantId: string): Promise;\n    async getPublicKey(type: 'jwk', tenantId: string): Promise;\n    async getPublicKey(\n        type: 'jwk' | 'pem',\n        tenantId: string,\n    ): Promise {\n        return firstValueFrom(\n            this.httpService.get(\n                `${this.vaultUrl}/keys/${tenantId}`,\n                this.headers,\n            ),\n        ).then(async (res) => {\n            return type === 'pem'\n                ? (res.data.data.keys['1'].public_key as string)\n                : await this.getJWK(\n                      res.data.data.keys['1'].public_key,\n                      tenantId,\n                  );\n        });\n    }\n\n    private getJWK(key: string, tenantId: string): Promise {\n        return importSPKI(key, this.cryptoService.getAlg())\n            .then((cryptoKey) => exportJWK(cryptoKey))\n            .then(async (jwk) => {\n                jwk.kid = await this.getKid(tenantId);\n                return jwk;\n            });\n    }\n\n    /**\n     * Signs a value with a key in the vault.\n     * @param id\n     * @param user\n     * @param value\n     * @returns\n     */\n    sign(value: string, tenantId: string): Promise {\n        return firstValueFrom(\n            this.httpService.post(\n                `${this.vaultUrl}/sign/${tenantId}`,\n                {\n                    input: Buffer.from(value).toString('base64'),\n                },\n                this.headers,\n            ),\n        ).then((res) =>\n            this.derToJwtSignature(res.data.data.signature.split(':')[2]),\n        );\n    }\n\n    /**\n     * Creates a proof of possession jwt.\n     * @param user\n     * @param value\n     */\n    async signJWT(\n        payload: JwtPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n    ): Promise {\n        // Convert header and payload to Base64 to prepare for Vault\n        const encodedHeader = Buffer.from(JSON.stringify(header)).toString(\n            'base64url',\n        );\n        const encodedPayload = Buffer.from(JSON.stringify(payload)).toString(\n            'base64url',\n        );\n        const signingInput = `${encodedHeader}.${encodedPayload}`;\n\n        // Request to Vault for signing\n        try {\n            const signature = await this.sign(signingInput, tenantId);\n            return `${encodedHeader}.${encodedPayload}.${signature}`;\n        } catch (error) {\n            console.error('Error signing JWT with Vault:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Converts a DER signature to a JWT signature.\n     * @param derSignature\n     * @returns\n     */\n    derToJwtSignature(derSignature: string) {\n        // Step 1: Extract r and s from DER signature\n        const der = Buffer.from(derSignature, 'base64');\n        const sequence = der.slice(2); // Skip the sequence tag and length\n        const rLength = sequence[1];\n        const r = sequence.slice(2, 2 + rLength);\n        const s = sequence.slice(2 + rLength + 2); // Skip r, its tag and length byte, and s's tag and length byte\n\n        // Step 2: Ensure r and s are 32 bytes each (pad with zeros if necessary)\n        // Ensure r and s are 32 bytes each\n        let rPadded: Buffer;\n        let sPadded: Buffer;\n        if (r.length > 32) {\n            if (r.length === 33 && r[0] === 0x00) {\n                rPadded = r.slice(1);\n            } else {\n                throw new Error('Invalid r length in DER signature');\n            }\n        } else {\n            rPadded = Buffer.concat([Buffer.alloc(32 - r.length), r]);\n        }\n        if (s.length > 32) {\n            if (s.length === 33 && s[0] === 0x00) {\n                sPadded = s.slice(1);\n            } else {\n                throw new Error('Invalid s length in DER signature');\n            }\n        } else {\n            sPadded = Buffer.concat([Buffer.alloc(32 - s.length), s]);\n        }\n\n        // Step 3: Concatenate r and s to form the raw signature\n        const rawSignature = Buffer.concat([rPadded, sPadded]);\n\n        // Step 4: Base64url encode the raw signature\n        return rawSignature\n            .toString('base64')\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_')\n            .replace(/=/g, '');\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VerifierModule.html":{"url":"modules/VerifierModule.html","title":"module - VerifierModule","body":"\n                   \n\n\n\n\n    Modules\n    VerifierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VerifierModule\n\n\n\ncluster_VerifierModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/verifier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport { RegistrarModule } from '../registrar/registrar.module';\nimport { SessionModule } from '../session/session.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { PresentationsModule } from './presentations/presentations.module';\nimport { Oid4vpModule } from './oid4vp/oid4vp.module';\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        SessionModule,\n        HttpModule,\n        PresentationsModule,\n        Oid4vpModule,\n    ],\n})\nexport class VerifierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfig.html":{"url":"classes/WebHookAuthConfig.html","title":"class - WebHookAuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhook authentication.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApiKeyConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:43\n                        \n                    \n\n            \n                \n                    Configuration for API key authentication.\nThis is required if the type is 'apiKey'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['apiKey'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:36\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\nCurrently, only 'apiKey' is supported.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookConfig.html":{"url":"classes/WebhookConfig.html","title":"class - WebhookConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhooks used in various services.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                auth\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebHookAuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:62\n                        \n                    \n\n            \n                \n                    Optional authentication configuration for the webhook.\nIf not provided, no authentication will be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:54\n                        \n                    \n\n            \n                \n                    The URL to which the webhook will send notifications.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebhookService.html":{"url":"injectables/WebhookService.html","title":"injectable - WebhookService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WebhookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling webhooks in the application.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendWebhook\n                            \n                            \n                                    Async\n                                sendWebhookNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, sessionService: SessionService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor for WebhookService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendWebhook\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWebhook(session: Session, logContext: SessionLogContext, credentials: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Sends a webhook with the provided credentials, also return the response data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentials\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendWebhookNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWebhookNotification(session: Session, logContext: SessionLogContext, notification: Notification)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Sends a webhook notification for a session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notification\n                                            \n                                                            Notification\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Injectable } from '@nestjs/common';\nimport { firstValueFrom } from 'rxjs';\nimport { SessionService } from '../../session/session.service';\nimport { SessionLoggerService } from '../logger/session-logger.service';\nimport { Notification, Session } from '../../session/entities/session.entity';\nimport { SessionLogContext } from '../logger/session-logger-context';\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the provided credentials, also return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     */\n    async sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials: any[],\n    ) {\n        const headers: Record = {};\n        if (session.webhook!.auth && session.webhook!.auth.type === 'apiKey') {\n            headers[session.webhook!.auth.config.headerName] =\n                session.webhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, 'Sending webhook', {\n            webhookUrl: session.webhook!.url,\n            authType: session.webhook!.auth?.type || 'none',\n        });\n\n        await firstValueFrom(\n            this.httpService.post(\n                session.webhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.values = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(\n                        session.id,\n                        session.tenantId,\n                        {\n                            credentialPayload: session.credentialPayload,\n                        },\n                    );\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    'Webhook sent successfully',\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    'Error sending webhook',\n                    {\n                        webhookUrl: session.webhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === 'apiKey') {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            'Sending webhook notification',\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || 'none',\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.values = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(\n                        session.id,\n                        session.tenantId,\n                        {\n                            credentialPayload: session.credentialPayload,\n                        },\n                    );\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    'Webhook notification sent successfully',\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    'Error sending webhook',\n                    {\n                        webhookUrl: session.webhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WellKnownController.html":{"url":"controllers/WellKnownController.html","title":"controller - WellKnownController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WellKnownController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/.well-known\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI well-known endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authzMetadata\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getJwks\n                            \n                            \n                                    \n                                    \n                                    Async\n                                issuerMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    authzMetadata(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('oauth-authorization-server')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Authorization Server Metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJwks(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Header('Content-Type', 'application/jwk-set+json')@Get('jwks.json')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:50\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for the authorization server.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get OpenID4VCI issuer metadata', description: 'Returns the OpenID4VCI issuer metadata.'})@Get('openid-credential-issuer')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from '@nestjs/common';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { AuthorizeService } from '../issuer/authorize/authorize.service';\nimport { Oid4vciService } from '../issuer/oid4vci/oid4vci.service';\nimport { JwksResponseDto } from './dto/jwks-response.dto';\nimport { Oauth2AuthorizationServerResponse } from './dto/oauth-authorization-server-response.dto';\nimport { CredentialIssuerMetadataDto } from './dto/credential-issuer-metadata.dto';\nimport { ApiOperation } from '@nestjs/swagger';\n\n/**\n * Controller for the OpenID4VCI well-known endpoints.\n */\n@Controller(':tenantId/.well-known')\nexport class WellKnownController {\n    constructor(\n        private readonly oid4vciService: Oid4vciService,\n        private readonly authorizeService: AuthorizeService,\n        private readonly cryptoService: CryptoService,\n    ) {}\n\n    @ApiOperation({\n        summary: 'Get OpenID4VCI issuer metadata',\n        description: 'Returns the OpenID4VCI issuer metadata.',\n    })\n    @Get('openid-credential-issuer')\n    async issuerMetadata(@Param('tenantId') tenantId: string) {\n        return (await this.oid4vciService.issuerMetadata(tenantId))\n            .credentialIssuer as unknown as Promise;\n    }\n\n    /**\n     * Authorization Server Metadata\n     * @returns\n     */\n    @Get('oauth-authorization-server')\n    authzMetadata(\n        @Param('tenantId') tenantId: string,\n    ): Oauth2AuthorizationServerResponse {\n        return this.authorizeService.authzMetadata(\n            tenantId,\n        ) as Oauth2AuthorizationServerResponse;\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for the authorization server.\n     * @returns\n     */\n    @Header('Content-Type', 'application/jwk-set+json')\n    @Get('jwks.json')\n    async getJwks(\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        return this.cryptoService.getJwks(tenantId).then((key) => ({\n            keys: [key],\n        }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n1.3.0 (2025-07-28)\nBug Fixes\n\nadd documentation (1912bb8)\nadd more granular logging (53804b0)\nuse oidc for all flows (#12) (f15f6ab)\n\nFeatures\n\nimprove issuance config (#13) (b99786b)\n\n1.2.3 (2025-07-20)\nBug Fixes\n\nci deploy with version generation (259ab39)\nrelease pipeline (7a6a69c)\nset correct way for deployment (2aa727a)\nuse oidc url instead of keycloak one (2913417)\n\n1.2.2 (2025-07-19)\nBug Fixes\n\nadd tmp logger (6bb4aa9)\nset correct url for vp (295428b)\n\n1.2.1 (2025-07-18)\nBug Fixes\n\nci (8f9498a)\nci (905e17c)\n\n1.2.1 (2025-07-18)\nBug Fixes\n\nci (905e17c)\n\n1.2.0 (2025-07-18)\nBug Fixes\n\nadd codecov (#2) (9104df3)\nadd test for presentation (#6) (e3e5971)\nremove console logs (32fbd8e)\nremove ts file from root (b989c6c)\nupload test results (#3) (f75298f)\nvitest config (beef4d2)\n\nFeatures\n\nadd multi tenant support (#7) (46c9ce6)\n\n1.1.0 (2025-07-11)\nBug Fixes\n\nset correct version (91b5499)\nupdate db env (35f4d1e)\n\nFeatures\n\nadd deployment options (937603a)\n\n1.0.1 (2025-07-10)\nBug Fixes\n\nadd auth to webhook (c3b1b48)\nadd cloudflare worker example (6d31de0)\ngeneral improvements (f7e7505)\nmake key folder static (6a6cdb6)\nwebhook handling (df29d1e)\n\n1.0.0 (2025-07-09)\nBug Fixes\n\nadd semantic release (c805439)\nadjust release pipeline (3ac47ec)\nci (892b30e)\nci (40ccd32)\nci (12395c8)\nci (45f3f7f)\nci (4be0171)\nci (2f07af2)\nci (2a71850)\nci nameing (33ac2c7)\nci, install pnpm (ac4ee24)\nci, remove version (54e8a4e)\ndocker deploy (98303c1)\nmain (d6205da)\npage build (b3abd57)\nsplit jobs (2742ec4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @badgateway/oauth2-client : ^3.2.0\n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/common : ^11.1.3\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.3\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.3\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/serve-static : ^5.0.3\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @openid4vc/oauth2 : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/openid4vci : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/openid4vp : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/utils : ^0.3.0-alpha-20250602121005\n        \n            @sd-jwt/crypto-nodejs : ^0.14.0\n        \n            @sd-jwt/jwt-status-list : ^0.14.0\n        \n            @sd-jwt/sd-jwt-vc : ^0.14.0\n        \n            @sd-jwt/types : ^0.14.0\n        \n            axios : ^1.10.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            joi : ^17.13.3\n        \n            jose : ^6.0.11\n        \n            jwks-rsa : ^3.2.0\n        \n            mysql2 : ^3.14.1\n        \n            nestjs-pino : ^4.4.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.16.3\n        \n            pino-http : ^10.5.0\n        \n            pino-pretty : ^13.0.0\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            sqlite3 : ^5.1.7\n        \n            typeorm : ^0.3.25\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ResponseType   (src/.../presentation-request.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/verifier/oid4vp/dto/presentation-request.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ResponseType\n                    \n                \n                    \n                        \n                            Enum for the type of response expected from the presentation request.\n\n                        \n                    \n                        \n                            \n                                 QRCode\n                            \n                        \n                        \n                            \n                                Value : qrcode\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n                        \n                            \n                                Value : uri\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getAccessToken   (test/.../import.ts)\n                        \n                        \n                            getHeadersFromRequest   (src/.../util.ts)\n                        \n                        \n                            handleRequest   (test/.../index.ts)\n                        \n                        \n                            importDirectory   (test/.../import.ts)\n                        \n                        \n                            importFileWithRetry   (test/.../import.ts)\n                        \n                        \n                            preparePresentation   (test/.../utils.ts)\n                        \n                        \n                            run   (test/.../import.ts)\n                        \n                        \n                            sleep   (test/.../import.ts)\n                        \n                        \n                            validateJsonFile   (test/.../import.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function to initialize the NestJS application.\n\n\n                \n            \n        \n    \n    test/import/import.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getAccessToken\n                        \n                    \n                \n            \n            \n                \ngetAccessToken()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        importDirectory\n                        \n                    \n                \n            \n            \n                \nimportDirectory(config: ImportConfig, accessToken: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            ImportConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        importFileWithRetry\n                        \n                    \n                \n            \n            \n                \nimportFileWithRetry(filePath: string, endpoint: string, accessToken: string, fileName: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filePath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endpoint\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        run\n                        \n                    \n                \n            \n            \n                \nrun()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sleep\n                        \n                    \n                \n            \n            \n                \nsleep(ms: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ms\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateJsonFile\n                        \n                    \n                \n            \n            \n                \nvalidateJsonFile(filePath: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filePath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/issuer/oid4vci/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    test/webhook/src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(request: Request)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    test/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        preparePresentation\n                        \n                    \n                \n            \n            \n                \npreparePresentation(kb: Omit)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                kb\n                                            \n                                                        Omit\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\nEUDIPLO\nYour Diplomatic Layer for EUDI Wallet Integration\nEUDIPLO is an open-source middleware that bridges your backend and EUDI Wallets\nusing a unified API and standardized protocols.\n\n🧭 Overview\nOrganizations joining the EUDI Wallet ecosystem face a tough choice: patch\ntogether protocol libraries that may not exist for their stack, or rely on\nproprietary solutions that risk vendor lock-in.\nEUDIPLO solves this by providing a lightweight, source-available, protocol\nabstraction layer. It communicates over HTTP and integrates easily with your\nexisting backend stack—so you can focus on your business logic, not\ncryptographic plumbing.\nIt supports all core flows of electronic attribute attestations—issuing,\nrequesting, and even requesting during issuance—and is already\ncompatible with production-grade EUDI Wallets like Animo.\nWhile still in early development, EUDIPLO is built for production: secure key\nmanagement, scalable database support, and clean API boundaries.\n\n🧩 Features\n\n✅ Supports OID4VCI, OID4VP, SD-JWT VC, and OAuth Token Status\nList\n✅ JSON-based credential configuration\n✅ Client credentials authentication for easy service integration\n✅ Runs via Docker with .env config\n✅ HTTP-based integration with any backend\n✅ Secure key management & pluggable storage\n✅ Privacy-friendly: no external calls, no long-term storage\n\n\n🚀 Quick Start\nExample :# Clone and configure\ngit clone https://github.com/cre8/eudiplo.git\ncd eudiplo\ncp .env.example .env\n\n# Configure authentication\necho \"JWT_SECRET=$(openssl rand -base64 32)\" >> .env\necho \"AUTH_CLIENT_SECRET=$(openssl rand -base64 24)\" >> .env\n\n# Start with Docker\ndocker run -p 3000:3000 \\\n  -e PUBLIC_URL=https://example.com \\\n  -e JWT_SECRET=your-32-character-secret \\\n  -e AUTH_CLIENT_SECRET=your-issuer-secret \\\n  -v $(pwd)/config:/app/config \\\n  ghcr.io/cre8/eudiplo:latest\n\n# Get a token and start using the API\ncurl -X POST http://localhost:3000/auth/oauth2/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"client_id\": \"root\",\n    \"client_secret\": \"root\"\n  }'📚 API:\nhttps://cre8.github.io/eudiplo/latest/api/📦\nFull setup:\nQuickstart Guide\n\n📚 Documentation\nChoose your documentation version:\n\n🚀 Latest Stable (recommended):\nhttps://cre8.github.io/eudiplo/latest/ -\nDocumentation for the most recent major release\n🔬 Development:\nhttps://cre8.github.io/eudiplo/main/ -\nLatest features from the main branch\n📚 Specific Major Versions: v1,\nv2, etc.\n\nKey sections:\n\nArchitecture\nSupported Protocols\nAPI Reference\nCode Documentation\n\n\n🤝 Contributing\nWe welcome PRs from wallet developers, institutions, and contributors interested\nin advancing the EUDI Wallet ecosystem.\nSee CONTRIBUTING.md for guidelines.\n\n📝 License\nLicensed under the Apache 2.0 License\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nExample :                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\n\n\n   END OF TERMS AND CONDITIONS\n   APPENDIX: How to apply the Apache License to your work.\nExample :  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.   Copyright [2025] [Mirko Mollik]\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\nExample :   http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssuerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeyModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        Oid4vpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PresentationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegistrarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResolverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatusListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VerifierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nCryptoService \n\nCryptoService \n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\nOid4vpModule -->\n\nRegistrarModule->Oid4vpModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\nOid4vpModule -->\n\nPresentationsModule->Oid4vpModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nResolverModule\n\nResolverModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nResolverService \n\nResolverService \n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        15 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    14 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    24 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    29 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    31 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : a middleware to interact with the EUDI Wallet\n        \n            Bugs : https://github.com/cre8/eudiplo/issues\n        \n            License : Apache-2.0\n        \n            Repository : https://github.com/cre8/eudiplo.git\n        \n            Author : Mirko Mollik \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
