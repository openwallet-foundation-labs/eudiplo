{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is EUDIPLO","text":""},{"location":"#what-is-eudiplo","title":"What is EUDIPLO?","text":"<p>EUDIPLO is a lightweight, open-source middleware layer that bridges your IT systems with the European Digital Identity Wallet (EUDI Wallet) ecosystem.</p> <p>Whether you're building services for government, education, healthcare, or the private sector\u2014EUDIPLO lets you interact with EUDI Wallets using simple JSON-based APIs, without having to implement complex identity protocols yourself.</p> <p>EUDIPLO stands for EUDI Protocol Liaison Operator</p> <p>The name EUDIPLO is inspired by diplomat \u2014 because this middleware acts as a translator and trusted go-between. It speaks fluent EUDI specs on one side and down-to-earth JSON on the other, making sure your backend doesn't have to become a protocol expert overnight.</p>"},{"location":"#why-eudiplo","title":"Why EUDIPLO?","text":"<p>Connecting to the EUDI Wallet ecosystem is technically demanding:</p> <ul> <li>You must understand OID4VCI, OID4VP, SD-JWT VC, and OAuth-based   status protocols.</li> <li>Libraries are scattered, often incomplete or language-specific.</li> <li>Hosted services can lead to vendor lock-in or obscure how your data is   processed.</li> </ul> <p>EUDIPLO solves these problems by acting as a protocol abstraction layer you can run yourself, integrate over HTTP, and configure via JSON.</p>"},{"location":"#key-capabilities","title":"Key Capabilities","text":"Capability Description \ud83d\udec2 Issuance Issue credentials to users through the EUDI Wallet \ud83e\uddfe Presentation Request credentials from users and verify them \ud83d\udd04 Cross-Flow Support Request credentials as part of an issuance flow \ud83d\udd10 Secure by Default Built-in support for secure key handling and OAuth-based status checking \ud83e\uddf1 Plug and Play Integrates with your backend over HTTP; no requirement to use a specific programming language \ud83d\udda5\ufe0f Web Client Included Comes with a ready-to-use web interface for easy testing and interaction \u2699\ufe0f JSON Configurable Set up templates, trust roots, and issuers through JSON files \ud83c\uddea\ud83c\uddfa Wallet Compatible Works with multiple wallets \ud83d\udc65 Multi-Tenant Support Isolate configurations for different tenants or clients"},{"location":"#where-does-it-fit","title":"Where Does It Fit?","text":"<p>Here\u2019s how EUDIPLO fits into your infrastructure:</p> <p></p>"},{"location":"#how-do-i-use-it","title":"How Do I Use It?","text":"<p>EUDIPLO is distributed as a Docker container and can be configured in minutes.</p> <pre><code>docker run -p 3000:3000 \\\n  -e PUBLIC_URL=https://example.com \\\n  -e JWT_SECRET=your-secret-key-here-minimum-32-characters \\\n  -e AUTH_CLIENT_ID=your-tenant-id \\\n  -e AUTH_CLIENT_SECRET=your-tenant-secret \\\n  -v $(pwd)/config:/app/config \\\n  ghcr.io/openwallet-foundation-labs/eudiplo:latest\n</code></pre> <p>\u27a1\ufe0f Read the Quickstart Guide \ud83d\udcd8 Learn how to configure credentials or verify them</p>"},{"location":"#who-is-it-for","title":"Who is it For?","text":"<p>EUDIPLO is built for:</p> <ul> <li>\ud83c\udfdb\ufe0f Government services that need to verify official documents.</li> <li>\ud83c\udf93 Universities and schools that issue or validate diplomas.</li> <li>\ud83c\udfe5 Health systems managing patient identity or insurance.</li> <li>\ud83c\udfe2 Private sector apps that want to integrate trustable identity with   minimal complexity.</li> </ul> <p>If your organization needs to connect to the EUDI Wallet ecosystem\u2014without reinventing the wheel\u2014EUDIPLO is your gateway.</p>"},{"location":"api/","title":"API Reference","text":"<p>EUDIPLO exposes a REST API based on the OpenAPI 3.0 standard. This interface allows systems to issue credentials, verify presentations, manage keys, and configure credential behavior through standard HTTP endpoints.</p> <p>A rendered openapi overview can be found here.</p>"},{"location":"api/#openapi-endpoints","title":"OpenAPI Endpoints","text":"<p>When running EUDIPLO, the following endpoints are available:</p> <ul> <li>Swagger UI: http://localhost:3000/api</li> <li>OpenAPI Spec (JSON):   http://localhost:3000/api-json</li> </ul> <p>Info</p> <p>By default it will only include the endpoints that are relevant to interact with it from the server side (it is excluding the routes that are relevant for e.g. OID4VCI and OID4VP). To generate the full OpenAPI specification, you can set the environment variable <code>SWAGGER_ALL</code> to <code>true</code> when starting the service like <code>SWAGGER_ALL=true pnpm run start:dev</code>.</p> <p>You can use this OpenAPI specification to generate client libraries with e.g the OpenAPI Generator.</p>"},{"location":"api/authentication/","title":"API Authentication","text":"<p>EUDIPLO uses OAuth 2.0 Client Credentials flow for API authentication, designed for service-to-service communication without user interaction.</p>"},{"location":"api/authentication/#authentication-architecture","title":"Authentication Architecture","text":""},{"location":"api/authentication/#design-principles","title":"Design Principles","text":"<ul> <li>Service-to-Service: No user interaction required</li> <li>Tenant Isolation: JWT <code>sub</code> claim identifies and isolates tenants</li> <li>Pluggable Identity: Support for both built-in and external OIDC providers</li> <li>Stateless: JWT tokens enable horizontal scaling</li> </ul>"},{"location":"api/authentication/#security-model","title":"Security Model","text":"<ul> <li>All management endpoints require authentication</li> <li>Tenant data is isolated using JWT subject claims</li> <li>Tokens are signed and validated for integrity</li> <li>Support for token expiration and rotation</li> </ul> <p>Related Architecture: For multi-tenant configuration and session management, see Tenant-Based Architecture and Sessions.</p>"},{"location":"api/authentication/#oauth2-client-credentials-authentication","title":"OAuth2 Client Credentials Authentication","text":"<p>This API exclusively uses the OAuth2 client credentials flow, which is designed for service-to-service authentication where no user interaction is required.</p>"},{"location":"api/authentication/#built-in-oauth2-server-recommended-for-getting-started","title":"Built-in OAuth2 Server (Recommended for Getting Started)","text":"<p>EUDIPLO includes a built-in OAuth2 server for simple deployments:</p> <ol> <li> <p>Swagger UI Authentication:</p> </li> <li> <p>Navigate to the Swagger UI at <code>/api</code></p> </li> <li>Click the \"Authorize\" button</li> <li>Select \"oauth2\"</li> <li>Enter client ID and secret (configured via environment variables)</li> <li> <p>Click \"Authorize\"</p> </li> <li> <p>Programmatic Access:</p> </li> </ol> <p>Option 1: Credentials in Authorization Header (OAuth2 Standard):</p> <pre><code>curl -X POST http://localhost:3000/oauth2/token \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Basic $(echo -n 'client_id:client_secret' | base64)\" \\\n  -d '{\n    \"grant_type\": \"client_credentials\"\n  }'\n</code></pre> <p>Option 2: Credentials in Request Body:</p> <pre><code>curl -X POST http://localhost:3000/oauth2/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"grant_type\": \"client_credentials\",\n    \"client_id\": \"your-client-id\",\n    \"client_secret\": \"your-client-secret\"\n  }'\n</code></pre>"},{"location":"api/authentication/#external-oidc-provider","title":"External OIDC Provider","text":"<p>For enterprise deployments with existing identity infrastructure, EUDIPLO can integrate with external OIDC providers like Keycloak, Auth0, or Azure AD.</p> <p>Configuration:</p> <pre><code>OIDC=https://your-keycloak.example.com/realms/your-realm\nPUBLIC_URL=https://your-api.example.com\n</code></pre> <p>Authentication Flow:</p> <ol> <li>Use your OIDC provider's token endpoint with client credentials flow</li> <li>Include the access token in API requests: <code>Authorization: Bearer &lt;token&gt;</code></li> </ol>"},{"location":"api/authentication/#configuration","title":"Configuration","text":""},{"location":"api/authentication/#external-oidc-provider_1","title":"External OIDC Provider","text":"<pre><code># Enable external OIDC\nOIDC=true\nKEYCLOAK_INTERNAL_ISSUER_URL=https://your-keycloak.example.com/realms/your-realm\nPUBLIC_URL=https://your-api.example.com\n</code></pre>"},{"location":"api/authentication/#integrated-oauth2-server","title":"Integrated OAuth2 Server","text":"<pre><code># Leave OIDC undefined for integrated OAuth2 server\nPUBLIC_URL=https://your-api.example.com\nJWT_SECRET=your-secret-key-here-minimum-32-characters\nAUTH_CLIENT_ID=root\nAUTH_CLIENT_SECRET=root\n</code></pre> <p>Configuration Reference: For complete configuration options and environment variables, see Key Management and Database Configuration.</p>"},{"location":"api/authentication/#protected-endpoints","title":"Protected Endpoints","text":"<p>All administrative endpoints require OAuth2 authentication:</p> <ul> <li>Issuer Management (<code>/issuer-management/*</code>) - Credential issuance   management</li> <li>Presentation Management (<code>/presentation-management/*</code>) - Presentation   verification management</li> <li>Session Management (<code>/session/*</code>) - Session lifecycle management</li> </ul>"},{"location":"api/authentication/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/authentication/#token-validation-errors","title":"Token Validation Errors","text":"<ol> <li>Verify that tokens include the correct audience (<code>eudiplo-service</code>)</li> <li>Ensure clock synchronization between client and server</li> <li>Check token expiration times</li> </ol>"},{"location":"api/authentication/#integrated-oauth2-server-issues","title":"Integrated OAuth2 Server Issues","text":"<ol> <li>Verify <code>JWT_SECRET</code> is at least 32 characters</li> <li>Ensure client credentials (<code>AUTH_CLIENT_ID</code>/<code>AUTH_CLIENT_SECRET</code>) are    configured correctly</li> <li>Check that <code>PUBLIC_URL</code> is accessible for OAuth2 flows</li> </ol>"},{"location":"api/authentication/#security-considerations","title":"Security Considerations","text":"<ul> <li>Token Lifetime: Tokens expire after 24 hours for client credentials flow</li> <li>Secure Storage: Store client credentials and tokens securely and never   expose them in logs or URLs</li> <li>Service-to-Service: This API is designed for service-to-service   authentication without user interaction</li> </ul>"},{"location":"api/authentication/#related-documentation","title":"Related Documentation","text":""},{"location":"api/authentication/#architecture-design","title":"Architecture &amp; Design","text":"<ul> <li>Tenant-Based Architecture - Multi-tenant   isolation and configuration</li> <li>Sessions - Session lifecycle and management</li> <li>Key Management - Cryptographic key   handling and security</li> </ul>"},{"location":"api/authentication/#implementation-guides","title":"Implementation Guides","text":"<ul> <li>Quick Start - Get authentication   working in 5 minutes</li> <li>API Overview - Complete API reference and endpoints</li> </ul>"},{"location":"api/authentication/#operations","title":"Operations","text":"<ul> <li>Development Setup - Local development   authentication setup</li> </ul>"},{"location":"api/openapi/","title":"OpenApi","text":""},{"location":"api/openapi/#eudiplo-service-api-main","title":"EUDIPLO Service API main","text":"<p>This is the API documentation for the EUDIPLO Service, which provides credential issuance and verification services</p>"},{"location":"api/openapi/#key","title":"Key","text":""},{"location":"api/openapi/#get-key","title":"GET /key","text":"<p>Get all keys for the tenant.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p> Response 200 OK </p> application/json <p><pre><code>[\n    {\n        \"id\": \"string\",\n        \"tenantId\": \"string\",\n        \"crt\": \"string\",\n        \"type\": {},\n        \"description\": \"string\",\n        \"createdAt\": \"2022-04-13T15:42:05.901Z\",\n        \"updatedAt\": \"2022-04-13T15:42:05.901Z\"\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/CertEntity\"\n    }\n}\n</code></pre>"},{"location":"api/openapi/#post-key","title":"POST /key","text":"<p>Add a new key to the key service.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p>Request body</p> application/json <p><pre><code>{\n    \"privateKey\": null,\n    \"crt\": \"string\",\n    \"description\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"privateKey\": {\n            \"description\": \"The private key in JWK format.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Key\"\n                }\n            ]\n        },\n        \"crt\": {\n            \"type\": \"string\",\n            \"description\": \"Optional certificate in PEM format.\"\n        },\n        \"description\": {\n            \"type\": \"string\",\n            \"description\": \"Description of the key.\"\n        }\n    },\n    \"required\": [\n        \"privateKey\"\n    ]\n}\n</code></pre> <p> Response 201 Created </p>"},{"location":"api/openapi/#put-keyid","title":"PUT /key/{id}","text":"<p>Updates an existing key in the key service.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <code>id</code> path string No <p>Request body</p> application/json <p><pre><code>{\n    \"crt\": \"string\",\n    \"description\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"crt\": {\n            \"type\": \"string\",\n            \"description\": \"Optional certificate in PEM format.\"\n        },\n        \"description\": {\n            \"type\": \"string\",\n            \"description\": \"Description of the key.\"\n        }\n    }\n}\n</code></pre> <p> Response 200 OK </p>"},{"location":"api/openapi/#delete-keyid","title":"DELETE /key/{id}","text":"<p>Delete a key from the key service.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <code>id</code> path string No <p> Response 200 OK </p>"},{"location":"api/openapi/#issuer-management","title":"Issuer management","text":""},{"location":"api/openapi/#get-issuer-managementcredentials","title":"GET /issuer-management/credentials","text":"<p>Returns the credential configurations for this tenant.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p> Response 200 OK </p> application/json <p><pre><code>[\n    {\n        \"embeddedDisclosurePolicy\": null,\n        \"id\": \"string\",\n        \"description\": \"string\",\n        \"config\": {},\n        \"claims\": {},\n        \"disclosureFrame\": {},\n        \"vct\": {\n            \"vct\": \"string\",\n            \"name\": \"string\",\n            \"description\": \"string\",\n            \"extends\": \"string\",\n            \"extends#integrity\": \"string\",\n            \"schema_uri\": \"string\",\n            \"schema_uri#integrity\": \"string\"\n        },\n        \"keyBinding\": true,\n        \"keyId\": \"string\",\n        \"key\": {\n            \"id\": \"string\",\n            \"tenantId\": \"string\",\n            \"crt\": \"string\",\n            \"type\": {},\n            \"description\": \"string\",\n            \"createdAt\": \"2022-04-13T15:42:05.901Z\",\n            \"updatedAt\": \"2022-04-13T15:42:05.901Z\"\n        },\n        \"statusManagement\": true,\n        \"lifeTime\": 10.12,\n        \"schema\": {\n            \"$schema\": \"string\",\n            \"type\": \"string\",\n            \"properties\": {},\n            \"required\": [\n                \"string\"\n            ],\n            \"title\": \"string\",\n            \"description\": \"string\"\n        },\n        \"issuanceConfigs\": [\n            {\n                \"authenticationConfig\": null,\n                \"id\": \"string\",\n                \"description\": \"string\",\n                \"credentialConfigs\": null,\n                \"createdAt\": \"2022-04-13T15:42:05.901Z\",\n                \"updatedAt\": \"2022-04-13T15:42:05.901Z\",\n                \"claimsWebhook\": null,\n                \"notifyWebhook\": null,\n                \"batch_size\": 10.12\n            }\n        ]\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/CredentialConfig\"\n    }\n}\n</code></pre>"},{"location":"api/openapi/#post-issuer-managementcredentials","title":"POST /issuer-management/credentials","text":"<p>Stores the credential configuration for this tenant.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p>Request body</p> application/json <p><pre><code>{\n    \"embeddedDisclosurePolicy\": null,\n    \"id\": \"string\",\n    \"description\": \"string\",\n    \"config\": {},\n    \"claims\": {},\n    \"disclosureFrame\": {},\n    \"vct\": {\n        \"vct\": \"string\",\n        \"name\": \"string\",\n        \"description\": \"string\",\n        \"extends\": \"string\",\n        \"extends#integrity\": \"string\",\n        \"schema_uri\": \"string\",\n        \"schema_uri#integrity\": \"string\"\n    },\n    \"keyBinding\": true,\n    \"keyId\": \"string\",\n    \"statusManagement\": true,\n    \"lifeTime\": 10.12,\n    \"schema\": {\n        \"$schema\": \"string\",\n        \"type\": \"string\",\n        \"properties\": {},\n        \"required\": [\n            \"string\"\n        ],\n        \"title\": \"string\",\n        \"description\": \"string\"\n    },\n    \"issuanceConfigs\": [\n        {\n            \"authenticationConfig\": null,\n            \"id\": \"string\",\n            \"description\": \"string\",\n            \"credentialConfigs\": [\n                {\n                    \"embeddedDisclosurePolicy\": null,\n                    \"id\": \"string\",\n                    \"description\": \"string\",\n                    \"config\": {},\n                    \"claims\": {},\n                    \"disclosureFrame\": {},\n                    \"vct\": null,\n                    \"keyBinding\": true,\n                    \"keyId\": \"string\",\n                    \"key\": {\n                        \"id\": \"string\",\n                        \"tenantId\": \"string\",\n                        \"crt\": \"string\",\n                        \"type\": {},\n                        \"description\": \"string\",\n                        \"createdAt\": \"2022-04-13T15:42:05.901Z\",\n                        \"updatedAt\": \"2022-04-13T15:42:05.901Z\"\n                    },\n                    \"statusManagement\": true,\n                    \"lifeTime\": 10.12,\n                    \"schema\": null,\n                    \"issuanceConfigs\": null\n                }\n            ],\n            \"createdAt\": \"2022-04-13T15:42:05.901Z\",\n            \"updatedAt\": \"2022-04-13T15:42:05.901Z\",\n            \"claimsWebhook\": null,\n            \"notifyWebhook\": null,\n            \"batch_size\": 10.12\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"embeddedDisclosurePolicy\": {\n            \"description\": \"Embedded disclosure policy (discriminated union by `policy`).\\nThe discriminator makes class-transformer instantiate the right subclass,\\nand then class-validator runs that subclass\u2019s rules.\",\n            \"oneOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AttestationBasedPolicy\"\n                },\n                {\n                    \"$ref\": \"#/components/schemas/NoneTrustPolicy\"\n                },\n                {\n                    \"$ref\": \"#/components/schemas/AllowListPolicy\"\n                },\n                {\n                    \"$ref\": \"#/components/schemas/RootOfTrustPolicy\"\n                }\n            ],\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EmbeddedDisclosurePolicy\"\n                }\n            ]\n        },\n        \"id\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"config\": {\n            \"type\": \"object\"\n        },\n        \"claims\": {\n            \"type\": \"object\"\n        },\n        \"disclosureFrame\": {\n            \"type\": \"object\"\n        },\n        \"vct\": {\n            \"$ref\": \"#/components/schemas/VCT\"\n        },\n        \"keyBinding\": {\n            \"type\": \"boolean\"\n        },\n        \"keyId\": {\n            \"type\": \"string\"\n        },\n        \"statusManagement\": {\n            \"type\": \"boolean\"\n        },\n        \"lifeTime\": {\n            \"type\": \"number\"\n        },\n        \"schema\": {\n            \"$ref\": \"#/components/schemas/SchemaResponse\"\n        },\n        \"issuanceConfigs\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/IssuanceConfig\"\n            }\n        }\n    },\n    \"required\": [\n        \"id\",\n        \"config\",\n        \"issuanceConfigs\"\n    ]\n}\n</code></pre> <p> Response 201 Created </p> application/json Schema of the response body <pre><code>{\n    \"type\": \"object\"\n}\n</code></pre>"},{"location":"api/openapi/#delete-issuer-managementcredentialsid","title":"DELETE /issuer-management/credentials/{id}","text":"<p>Deletes an credential configuration.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <code>id</code> path string No <p> Response 200 OK </p>"},{"location":"api/openapi/#post-issuer-managementoffer","title":"POST /issuer-management/offer","text":"<p>Create an offer for a credential.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p>Request body</p> application/json <pre><code>{\n    \"response_type\": \"qrcode\",\n    \"issuanceId\": \"pid\"\n}\n</code></pre> <pre><code>{\n    \"response_type\": \"uri\",\n    \"issuanceId\": \"pid\"\n}\n</code></pre> <pre><code>{\n    \"response_type\": \"qrcode\",\n    \"issuanceId\": \"pid\",\n    \"session\": \"fd3ebf28-8ad6-4909-8a7a-a739c2c412c0\"\n}\n</code></pre> <pre><code>{\n    \"response_type\": \"qrcode\",\n    \"issuanceId\": \"pid-none\",\n    \"claims\": {\n        \"pid\": {\n            \"given_name\": \"Max\"\n        }\n    }\n}\n</code></pre> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"response_type\": {\n            \"enum\": [\n                \"qrcode\",\n                \"uri\"\n            ],\n            \"type\": \"string\",\n            \"examples\": [\n                {\n                    \"value\": \"qrcode\"\n                }\n            ],\n            \"description\": \"The type of response expected for the offer request.\"\n        },\n        \"claims\": {\n            \"type\": \"object\",\n            \"description\": \"Override the default values for the credential claims.\",\n            \"properties\": {},\n            \"examples\": [\n                {\n                    \"pid\": {\n                        \"given_name\": \"ERIKA\",\n                        \"family_name\": \"MUSTERMANN\"\n                    }\n                }\n            ]\n        },\n        \"issuanceId\": {\n            \"type\": \"string\",\n            \"description\": \"Issuance config id to reference the issuance configuration.\"\n        },\n        \"credentialConfigurationIds\": {\n            \"description\": \"Overrides the default values for the credential ids.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\"\n            }\n        },\n        \"claimsWebhook\": {\n            \"description\": \"Webhook configuration for claims\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/WebhookConfig\"\n                }\n            ]\n        },\n        \"session\": {\n            \"type\": \"string\",\n            \"description\": \"Pre defined session id\",\n            \"format\": \"uuid\"\n        }\n    },\n    \"required\": [\n        \"response_type\",\n        \"issuanceId\"\n    ]\n}\n</code></pre> <p> Response 201 Created </p> application/jsonimage/png <p><pre><code>{\n    \"uri\": \"string\",\n    \"session\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"uri\": {\n            \"type\": \"string\"\n        },\n        \"session\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\n        \"uri\",\n        \"session\"\n    ]\n}\n</code></pre> <p><pre><code>{\n    \"uri\": \"string\",\n    \"session\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"uri\": {\n            \"type\": \"string\"\n        },\n        \"session\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\n        \"uri\",\n        \"session\"\n    ]\n}\n</code></pre>"},{"location":"api/openapi/#get-issuer-managementissuance","title":"GET /issuer-management/issuance","text":"<p>Returns the issuance configurations for this tenant.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p> Response 200 OK </p> application/json <p><pre><code>[\n    {\n        \"authenticationConfig\": null,\n        \"id\": \"string\",\n        \"description\": \"string\",\n        \"credentialConfigs\": [\n            {\n                \"embeddedDisclosurePolicy\": null,\n                \"id\": \"string\",\n                \"description\": \"string\",\n                \"config\": {},\n                \"claims\": {},\n                \"disclosureFrame\": {},\n                \"vct\": {\n                    \"vct\": \"string\",\n                    \"name\": \"string\",\n                    \"description\": \"string\",\n                    \"extends\": \"string\",\n                    \"extends#integrity\": \"string\",\n                    \"schema_uri\": \"string\",\n                    \"schema_uri#integrity\": \"string\"\n                },\n                \"keyBinding\": true,\n                \"keyId\": \"string\",\n                \"key\": {\n                    \"id\": \"string\",\n                    \"tenantId\": \"string\",\n                    \"crt\": \"string\",\n                    \"type\": {},\n                    \"description\": \"string\",\n                    \"createdAt\": \"2022-04-13T15:42:05.901Z\",\n                    \"updatedAt\": \"2022-04-13T15:42:05.901Z\"\n                },\n                \"statusManagement\": true,\n                \"lifeTime\": 10.12,\n                \"schema\": {\n                    \"$schema\": \"string\",\n                    \"type\": \"string\",\n                    \"properties\": {},\n                    \"required\": [\n                        \"string\"\n                    ],\n                    \"title\": \"string\",\n                    \"description\": \"string\"\n                },\n                \"issuanceConfigs\": null\n            }\n        ],\n        \"createdAt\": \"2022-04-13T15:42:05.901Z\",\n        \"updatedAt\": \"2022-04-13T15:42:05.901Z\",\n        \"claimsWebhook\": null,\n        \"notifyWebhook\": null,\n        \"batch_size\": 10.12\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/IssuanceConfig\"\n    }\n}\n</code></pre>"},{"location":"api/openapi/#post-issuer-managementissuance","title":"POST /issuer-management/issuance","text":"<p>Stores the issuance configuration for this tenant.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p>Request body</p> application/json <p><pre><code>{\n    \"authenticationConfig\": null,\n    \"credentialConfigIds\": [\n        \"string\"\n    ],\n    \"id\": \"string\",\n    \"description\": \"string\",\n    \"claimsWebhook\": null,\n    \"notifyWebhook\": null,\n    \"batch_size\": 10.12\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"authenticationConfig\": {\n            \"description\": \"Authentication configuration for the issuance process.\",\n            \"oneOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AuthenticationMethodNone\"\n                },\n                {\n                    \"$ref\": \"#/components/schemas/AuthenticationMethodAuth\"\n                },\n                {\n                    \"$ref\": \"#/components/schemas/AuthenticationMethodPresentation\"\n                }\n            ]\n        },\n        \"credentialConfigIds\": {\n            \"description\": \"Ids of the credential configurations associated with this issuance configuration.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\"\n            }\n        },\n        \"id\": {\n            \"type\": \"string\",\n            \"description\": \"Unique identifier for the issuance configuration.\"\n        },\n        \"description\": {\n            \"type\": \"string\",\n            \"description\": \"Description of the issuance configuration.\"\n        },\n        \"claimsWebhook\": {\n            \"description\": \"Webhook to receive claims for the issuance process.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/WebhookConfig\"\n                }\n            ]\n        },\n        \"notifyWebhook\": {\n            \"description\": \"Webhook to send the result of the notification response\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/WebhookConfig\"\n                }\n            ]\n        },\n        \"batch_size\": {\n            \"type\": \"number\",\n            \"description\": \"Value to determine the amount of credentials that are issued in a batch.\\nDefault is 1.\"\n        }\n    },\n    \"required\": [\n        \"authenticationConfig\",\n        \"credentialConfigIds\",\n        \"id\"\n    ]\n}\n</code></pre> <p> Response 201 Created </p> application/json Schema of the response body <pre><code>{\n    \"type\": \"object\"\n}\n</code></pre>"},{"location":"api/openapi/#delete-issuer-managementissuanceid","title":"DELETE /issuer-management/issuance/{id}","text":"<p>Deletes an issuance configuration.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <code>id</code> path string No <p> Response 200 OK </p>"},{"location":"api/openapi/#presentation-management","title":"Presentation management","text":""},{"location":"api/openapi/#post-presentation-managementrequest","title":"POST /presentation-management/request","text":"<p>Create an presentation request that can be sent to the user</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <code>oauth2</code> header string N/A No <p>Request body</p> application/json <pre><code>{\n    \"response_type\": \"qrcode\",\n    \"requestId\": \"pid\"\n}\n</code></pre> <pre><code>{\n    \"response_type\": \"uri\",\n    \"requestId\": \"pid\"\n}\n</code></pre> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"response_type\": {\n            \"type\": \"string\",\n            \"description\": \"The type of response expected from the presentation request.\",\n            \"enum\": [\n                \"qrcode\",\n                \"uri\"\n            ]\n        },\n        \"requestId\": {\n            \"type\": \"string\",\n            \"description\": \"Identifier of the presentation configuration\"\n        },\n        \"webhook\": {\n            \"description\": \"Webhook configuration to receive the response.\\nIf not provided, the configured webhook from the configuration will be used.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/WebhookConfig\"\n                }\n            ]\n        }\n    },\n    \"required\": [\n        \"response_type\",\n        \"requestId\"\n    ]\n}\n</code></pre> <p> Response 201 Created </p> application/jsonimage/png <p><pre><code>{\n    \"uri\": \"string\",\n    \"session\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"uri\": {\n            \"type\": \"string\"\n        },\n        \"session\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\n        \"uri\",\n        \"session\"\n    ]\n}\n</code></pre> <p><pre><code>{\n    \"uri\": \"string\",\n    \"session\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"uri\": {\n            \"type\": \"string\"\n        },\n        \"session\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\n        \"uri\",\n        \"session\"\n    ]\n}\n</code></pre>"},{"location":"api/openapi/#get-presentation-management","title":"GET /presentation-management","text":"<p>Returns the presentation request configurations.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p> Response 200 OK </p> application/json <p><pre><code>[\n    {\n        \"id\": \"string\",\n        \"description\": \"string\",\n        \"lifeTime\": 10.12,\n        \"dcql_query\": null,\n        \"registrationCert\": null,\n        \"webhook\": null,\n        \"createdAt\": \"2022-04-13T15:42:05.901Z\",\n        \"updatedAt\": \"2022-04-13T15:42:05.901Z\",\n        \"attached\": [\n            {\n                \"format\": \"string\",\n                \"data\": {},\n                \"credential_ids\": [\n                    \"string\"\n                ]\n            }\n        ]\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/PresentationConfig\"\n    }\n}\n</code></pre>"},{"location":"api/openapi/#post-presentation-management","title":"POST /presentation-management","text":"<p>Store a presentation request configuration. If it already exists, it will be updated.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p>Request body</p> application/json <p><pre><code>{\n    \"id\": \"string\",\n    \"description\": \"string\",\n    \"lifeTime\": 10.12,\n    \"dcql_query\": null,\n    \"registrationCert\": null,\n    \"webhook\": null,\n    \"attached\": [\n        {\n            \"format\": \"string\",\n            \"data\": {},\n            \"credential_ids\": [\n                \"string\"\n            ]\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\",\n            \"description\": \"Unique identifier for the VP request.\"\n        },\n        \"description\": {\n            \"type\": \"string\",\n            \"description\": \"Description of the presentation configuration.\"\n        },\n        \"lifeTime\": {\n            \"type\": \"number\",\n            \"description\": \"Lifetime how long the presentation request is valid after creation, in seconds.\"\n        },\n        \"dcql_query\": {\n            \"description\": \"The DCQL query to be used for the VP request.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/DCQL\"\n                }\n            ]\n        },\n        \"registrationCert\": {\n            \"description\": \"The registration certificate request containing the necessary details.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/RegistrationCertificateRequest\"\n                }\n            ]\n        },\n        \"webhook\": {\n            \"description\": \"Optional webhook URL to receive the response.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/WebhookConfig\"\n                }\n            ]\n        },\n        \"attached\": {\n            \"description\": \"Attestation that should be attached\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/PresentationAttachment\"\n            }\n        }\n    },\n    \"required\": [\n        \"id\",\n        \"dcql_query\"\n    ]\n}\n</code></pre> <p> Response 201 Created </p> application/json Schema of the response body <pre><code>{\n    \"type\": \"object\"\n}\n</code></pre>"},{"location":"api/openapi/#delete-presentation-managementid","title":"DELETE /presentation-management/{id}","text":"<p>Deletes a presentation request configuration by its ID.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <code>id</code> path string No <p> Response 200 OK </p>"},{"location":"api/openapi/#session-management","title":"Session management","text":""},{"location":"api/openapi/#get-session","title":"GET /session","text":"<p>Retrieves all sessions.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p> Response 200 OK </p> application/json <p><pre><code>[\n    {\n        \"status\": \"active\",\n        \"id\": \"string\",\n        \"issuanceId\": \"string\",\n        \"requestId\": \"string\",\n        \"requestUrl\": \"string\",\n        \"credentials\": [\n            {}\n        ],\n        \"authorization_code\": \"string\",\n        \"request_uri\": \"string\",\n        \"auth_queries\": null,\n        \"vp_nonce\": \"string\",\n        \"nonce\": \"string\",\n        \"createdAt\": \"2022-04-13T15:42:05.901Z\",\n        \"updatedAt\": \"2022-04-13T15:42:05.901Z\",\n        \"expiresAt\": \"2022-04-13T15:42:05.901Z\",\n        \"offer\": {},\n        \"offerUrl\": \"string\",\n        \"credentialPayload\": null,\n        \"claimsWebhook\": null,\n        \"notifyWebhook\": null,\n        \"notifications\": [\n            {}\n        ],\n        \"tenantId\": \"string\"\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/Session\"\n    }\n}\n</code></pre>"},{"location":"api/openapi/#get-sessionid","title":"GET /session/{id}","text":"<p>Retrieves the session information for a given session ID.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <code>id</code> path string No <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"status\": \"active\",\n    \"id\": \"string\",\n    \"issuanceId\": \"string\",\n    \"requestId\": \"string\",\n    \"requestUrl\": \"string\",\n    \"credentials\": [\n        {}\n    ],\n    \"authorization_code\": \"string\",\n    \"request_uri\": \"string\",\n    \"auth_queries\": null,\n    \"vp_nonce\": \"string\",\n    \"nonce\": \"string\",\n    \"createdAt\": \"2022-04-13T15:42:05.901Z\",\n    \"updatedAt\": \"2022-04-13T15:42:05.901Z\",\n    \"expiresAt\": \"2022-04-13T15:42:05.901Z\",\n    \"offer\": {},\n    \"offerUrl\": \"string\",\n    \"credentialPayload\": null,\n    \"claimsWebhook\": null,\n    \"notifyWebhook\": null,\n    \"notifications\": [\n        {}\n    ],\n    \"tenantId\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"description\": \"Status of the session.\",\n            \"enum\": [\n                \"active\",\n                \"fetched\",\n                \"completed\",\n                \"expired\",\n                \"failed\"\n            ],\n            \"type\": \"string\"\n        },\n        \"id\": {\n            \"type\": \"string\",\n            \"description\": \"Unique identifier for the session.\"\n        },\n        \"issuanceId\": {\n            \"type\": \"string\"\n        },\n        \"requestId\": {\n            \"type\": \"string\",\n            \"description\": \"The ID of the presentation configuration associated with the session.\"\n        },\n        \"requestUrl\": {\n            \"type\": \"string\",\n            \"description\": \"The URL of the presentation auth request.\"\n        },\n        \"credentials\": {\n            \"description\": \"Verified credentials from the verification process.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\"\n            }\n        },\n        \"authorization_code\": {\n            \"type\": \"string\",\n            \"description\": \"Authorization code for the session.\"\n        },\n        \"request_uri\": {\n            \"type\": \"string\",\n            \"description\": \"Request URI from the authorization request.\"\n        },\n        \"auth_queries\": {\n            \"description\": \"Authorization queries associated with the session.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AuthorizeQueries\"\n                }\n            ]\n        },\n        \"vp_nonce\": {\n            \"type\": \"string\",\n            \"description\": \"Noncce from the Verifiable Presentation request.\"\n        },\n        \"nonce\": {\n            \"type\": \"string\",\n            \"description\": \"Nonce used for the OID4VCI flow.\"\n        },\n        \"createdAt\": {\n            \"format\": \"date-time\",\n            \"type\": \"string\",\n            \"description\": \"The timestamp when the VP request was created.\"\n        },\n        \"updatedAt\": {\n            \"format\": \"date-time\",\n            \"type\": \"string\",\n            \"description\": \"The timestamp when the VP request was last updated.\"\n        },\n        \"expiresAt\": {\n            \"format\": \"date-time\",\n            \"type\": \"string\"\n        },\n        \"offer\": {\n            \"type\": \"object\",\n            \"description\": \"Credential offer object containing details about the credential offer or presentation request.\"\n        },\n        \"offerUrl\": {\n            \"type\": \"string\",\n            \"description\": \"Offer URL for the credential offer.\"\n        },\n        \"credentialPayload\": {\n            \"description\": \"Credential payload containing the offer request details.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/OfferRequestDto\"\n                }\n            ]\n        },\n        \"claimsWebhook\": {\n            \"description\": \"Webhook configuration to send result and may receive further information.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/WebhookConfig\"\n                }\n            ]\n        },\n        \"notifyWebhook\": {\n            \"description\": \"Webhook configuration to send the result of the notification response.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/WebhookConfig\"\n                }\n            ]\n        },\n        \"notifications\": {\n            \"description\": \"Notifications associated with the session.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\"\n            }\n        },\n        \"tenantId\": {\n            \"type\": \"string\",\n            \"description\": \"Tenant ID for multi-tenancy support.\"\n        }\n    },\n    \"required\": [\n        \"status\",\n        \"id\",\n        \"createdAt\",\n        \"updatedAt\",\n        \"notifications\",\n        \"tenantId\"\n    ]\n}\n</code></pre>"},{"location":"api/openapi/#delete-sessionid","title":"DELETE /session/{id}","text":"<p>Deletes a session by its ID.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <code>id</code> path string No <p> Response 200 OK </p>"},{"location":"api/openapi/#post-sessionrevoke","title":"POST /session/revoke","text":"<p>Update the status of the credentials of a specific session.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p>Request body</p> application/json <p><pre><code>{\n    \"sessionId\": \"string\",\n    \"credentialConfigurationId\": \"string\",\n    \"status\": 10.12\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"sessionId\": {\n            \"type\": \"string\",\n            \"description\": \"The session ID of the user\"\n        },\n        \"credentialConfigurationId\": {\n            \"type\": \"string\",\n            \"description\": \"The ID of the credential configuration\\nThis is optional, if not provided, all credentials will be revoked of the session.\"\n        },\n        \"status\": {\n            \"type\": \"number\",\n            \"description\": \"The status of the credential\\n0 = valid, 1 = revoked\",\n            \"enum\": [\n                0,\n                1\n            ]\n        }\n    },\n    \"required\": [\n        \"sessionId\",\n        \"status\"\n    ]\n}\n</code></pre> <p> Response 201 Created </p>"},{"location":"api/openapi/#health","title":"Health","text":""},{"location":"api/openapi/#get-health","title":"GET /health","text":"<p>Endpoint to check the health of the service.</p> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"status\": \"ok\",\n    \"info\": {\n        \"database\": {\n            \"status\": \"up\"\n        }\n    },\n    \"error\": {},\n    \"details\": {\n        \"database\": {\n            \"status\": \"up\"\n        }\n    }\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\",\n            \"example\": \"ok\"\n        },\n        \"info\": {\n            \"type\": \"object\",\n            \"example\": {\n                \"database\": {\n                    \"status\": \"up\"\n                }\n            },\n            \"additionalProperties\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"status\"\n                ],\n                \"properties\": {\n                    \"status\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": true\n            },\n            \"nullable\": true\n        },\n        \"error\": {\n            \"type\": \"object\",\n            \"example\": {},\n            \"additionalProperties\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"status\"\n                ],\n                \"properties\": {\n                    \"status\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": true\n            },\n            \"nullable\": true\n        },\n        \"details\": {\n            \"type\": \"object\",\n            \"example\": {\n                \"database\": {\n                    \"status\": \"up\"\n                }\n            },\n            \"additionalProperties\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"status\"\n                ],\n                \"properties\": {\n                    \"status\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": true\n            }\n        }\n    }\n}\n</code></pre> <p> Response 503 Service Unavailable </p> application/json <p><pre><code>{\n    \"status\": \"error\",\n    \"info\": {\n        \"database\": {\n            \"status\": \"up\"\n        }\n    },\n    \"error\": {\n        \"redis\": {\n            \"status\": \"down\",\n            \"message\": \"Could not connect\"\n        }\n    },\n    \"details\": {\n        \"database\": {\n            \"status\": \"up\"\n        },\n        \"redis\": {\n            \"status\": \"down\",\n            \"message\": \"Could not connect\"\n        }\n    }\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\",\n            \"example\": \"error\"\n        },\n        \"info\": {\n            \"type\": \"object\",\n            \"example\": {\n                \"database\": {\n                    \"status\": \"up\"\n                }\n            },\n            \"additionalProperties\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"status\"\n                ],\n                \"properties\": {\n                    \"status\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": true\n            },\n            \"nullable\": true\n        },\n        \"error\": {\n            \"type\": \"object\",\n            \"example\": {\n                \"redis\": {\n                    \"status\": \"down\",\n                    \"message\": \"Could not connect\"\n                }\n            },\n            \"additionalProperties\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"status\"\n                ],\n                \"properties\": {\n                    \"status\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": true\n            },\n            \"nullable\": true\n        },\n        \"details\": {\n            \"type\": \"object\",\n            \"example\": {\n                \"database\": {\n                    \"status\": \"up\"\n                },\n                \"redis\": {\n                    \"status\": \"down\",\n                    \"message\": \"Could not connect\"\n                }\n            },\n            \"additionalProperties\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"status\"\n                ],\n                \"properties\": {\n                    \"status\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": true\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"api/openapi/#prometheus","title":"Prometheus","text":""},{"location":"api/openapi/#get-metrics","title":"GET /metrics","text":"<p> Response 200 OK </p>"},{"location":"api/openapi/#schemas","title":"Schemas","text":""},{"location":"api/openapi/#allowlistpolicy","title":"AllowListPolicy","text":""},{"location":"api/openapi/#apikeyconfig","title":"ApiKeyConfig","text":"Name Type <code>headerName</code> string <code>value</code> string"},{"location":"api/openapi/#attestationbasedpolicy","title":"AttestationBasedPolicy","text":""},{"location":"api/openapi/#authenticationmethodauth","title":"AuthenticationMethodAuth","text":"Name Type <code>config</code> AuthenticationUrlConfig <code>method</code> string"},{"location":"api/openapi/#authenticationmethodnone","title":"AuthenticationMethodNone","text":"Name Type <code>method</code> string"},{"location":"api/openapi/#authenticationmethodpresentation","title":"AuthenticationMethodPresentation","text":"Name Type <code>config</code> PresentationDuringIssuanceConfig <code>method</code> string"},{"location":"api/openapi/#authenticationurlconfig","title":"AuthenticationUrlConfig","text":"Name Type <code>url</code> string <code>webhook</code>"},{"location":"api/openapi/#authorizequeries","title":"AuthorizeQueries","text":"Name Type <code>auth_session</code> string <code>client_id</code> string <code>code_challenge</code> string <code>code_challenge_method</code> string <code>dpop_jkt</code> string <code>issuer_state</code> string <code>redirect_uri</code> string <code>request_uri</code> string <code>resource</code> string <code>response_type</code> string <code>scope</code> string"},{"location":"api/openapi/#certentity","title":"CertEntity","text":"Name Type <code>createdAt</code> string(date-time) <code>crt</code> string <code>description</code> string <code>id</code> string <code>tenantId</code> string <code>type</code> <code>updatedAt</code> string(date-time)"},{"location":"api/openapi/#credentialconfig","title":"CredentialConfig","text":"Name Type <code>claims</code> <code>config</code> <code>description</code> string <code>disclosureFrame</code> <code>embeddedDisclosurePolicy</code> <code>id</code> string <code>issuanceConfigs</code> Array&lt;IssuanceConfig&gt; <code>key</code> CertEntity <code>keyBinding</code> boolean <code>keyId</code> string <code>lifeTime</code> number <code>schema</code> SchemaResponse <code>statusManagement</code> boolean <code>vct</code> VCT"},{"location":"api/openapi/#credentialconfigcreate","title":"CredentialConfigCreate","text":"Name Type <code>claims</code> <code>config</code> <code>description</code> string <code>disclosureFrame</code> <code>embeddedDisclosurePolicy</code> <code>id</code> string <code>issuanceConfigs</code> Array&lt;IssuanceConfig&gt; <code>keyBinding</code> boolean <code>keyId</code> string <code>lifeTime</code> number <code>schema</code> SchemaResponse <code>statusManagement</code> boolean <code>vct</code> VCT"},{"location":"api/openapi/#credentialquery","title":"CredentialQuery","text":"Name Type <code>format</code> string <code>id</code> string <code>meta</code> <code>multiple</code> boolean <code>trusted_authorities</code> Array&lt;&gt;"},{"location":"api/openapi/#credentialsetquery","title":"CredentialSetQuery","text":"Name Type <code>id</code> string <code>path</code> Array&lt;&gt;"},{"location":"api/openapi/#dcql","title":"DCQL","text":"Name Type <code>credential_set</code> Array&lt;CredentialSetQuery&gt; <code>credentials</code> Array&lt;CredentialQuery&gt;"},{"location":"api/openapi/#embeddeddisclosurepolicy","title":"EmbeddedDisclosurePolicy","text":""},{"location":"api/openapi/#issuanceconfig","title":"IssuanceConfig","text":"Name Type <code>authenticationConfig</code> <code>batch_size</code> number <code>claimsWebhook</code> <code>createdAt</code> string(date-time) <code>credentialConfigs</code> Array&lt;CredentialConfig&gt; <code>description</code> string <code>id</code> string <code>notifyWebhook</code> <code>updatedAt</code> string(date-time)"},{"location":"api/openapi/#issuancedto","title":"IssuanceDto","text":"Name Type <code>authenticationConfig</code> <code>batch_size</code> number <code>claimsWebhook</code> <code>credentialConfigIds</code> Array&lt;string&gt; <code>description</code> string <code>id</code> string <code>notifyWebhook</code>"},{"location":"api/openapi/#key_1","title":"Key","text":"Name Type <code>alg</code> string <code>crv</code> string <code>d</code> string <code>kid</code> string <code>kty</code> string <code>x</code> string <code>y</code> string"},{"location":"api/openapi/#keyimportdto","title":"KeyImportDto","text":"Name Type <code>crt</code> string <code>description</code> string <code>privateKey</code>"},{"location":"api/openapi/#nonetrustpolicy","title":"NoneTrustPolicy","text":""},{"location":"api/openapi/#offerrequestdto","title":"OfferRequestDto","text":"Name Type <code>claims</code> <code>claimsWebhook</code> <code>credentialConfigurationIds</code> Array&lt;string&gt; <code>issuanceId</code> string <code>response_type</code> string <code>session</code> string(uuid)"},{"location":"api/openapi/#offerresponse","title":"OfferResponse","text":"Name Type <code>session</code> string <code>uri</code> string"},{"location":"api/openapi/#presentationattachment","title":"PresentationAttachment","text":"Name Type <code>credential_ids</code> Array&lt;string&gt; <code>data</code> <code>format</code> string"},{"location":"api/openapi/#presentationconfig","title":"PresentationConfig","text":"Name Type <code>attached</code> Array&lt;PresentationAttachment&gt; <code>createdAt</code> string(date-time) <code>dcql_query</code> <code>description</code> string <code>id</code> string <code>lifeTime</code> number <code>registrationCert</code> <code>updatedAt</code> string(date-time) <code>webhook</code>"},{"location":"api/openapi/#presentationconfigcreatedto","title":"PresentationConfigCreateDto","text":"Name Type <code>attached</code> Array&lt;PresentationAttachment&gt; <code>dcql_query</code> <code>description</code> string <code>id</code> string <code>lifeTime</code> number <code>registrationCert</code> <code>webhook</code>"},{"location":"api/openapi/#presentationduringissuanceconfig","title":"PresentationDuringIssuanceConfig","text":"Name Type <code>type</code> string"},{"location":"api/openapi/#presentationrequest","title":"PresentationRequest","text":"Name Type <code>requestId</code> string <code>response_type</code> string <code>webhook</code>"},{"location":"api/openapi/#registrationcertificaterequest","title":"RegistrationCertificateRequest","text":"Name Type <code>body</code> <code>id</code> string"},{"location":"api/openapi/#rootoftrustpolicy","title":"RootOfTrustPolicy","text":""},{"location":"api/openapi/#schemaresponse","title":"SchemaResponse","text":"Name Type <code>$schema</code> string <code>description</code> string <code>properties</code> <code>required</code> Array&lt;string&gt; <code>title</code> string <code>type</code> string"},{"location":"api/openapi/#session","title":"Session","text":"Name Type <code>auth_queries</code> <code>authorization_code</code> string <code>claimsWebhook</code> <code>createdAt</code> string(date-time) <code>credentialPayload</code> <code>credentials</code> Array&lt;&gt; <code>expiresAt</code> string(date-time) <code>id</code> string <code>issuanceId</code> string <code>nonce</code> string <code>notifications</code> Array&lt;&gt; <code>notifyWebhook</code> <code>offer</code> <code>offerUrl</code> string <code>request_uri</code> string <code>requestId</code> string <code>requestUrl</code> string <code>status</code> string <code>tenantId</code> string <code>updatedAt</code> string(date-time) <code>vp_nonce</code> string"},{"location":"api/openapi/#statusupdatedto","title":"StatusUpdateDto","text":"Name Type <code>credentialConfigurationId</code> string <code>sessionId</code> string <code>status</code> number"},{"location":"api/openapi/#updatekeydto","title":"UpdateKeyDto","text":"Name Type <code>crt</code> string <code>description</code> string"},{"location":"api/openapi/#vct","title":"VCT","text":"Name Type <code>description</code> string <code>extends</code> string <code>extends#integrity</code> string <code>name</code> string <code>schema_uri</code> string <code>schema_uri#integrity</code> string <code>vct</code> string"},{"location":"api/openapi/#webhookauthconfigheader","title":"WebHookAuthConfigHeader","text":"Name Type <code>config</code> <code>type</code> string"},{"location":"api/openapi/#webhookauthconfignone","title":"WebHookAuthConfigNone","text":"Name Type <code>type</code> string"},{"location":"api/openapi/#webhookconfig","title":"WebhookConfig","text":"Name Type <code>auth</code> <code>url</code> string"},{"location":"api/openapi/#security-schemes","title":"Security schemes","text":"Name Type Scheme Description oauth2 oauth2"},{"location":"api/openapi/#more-documentation","title":"More documentation","text":"<p>Documentation</p> For more information: https://openwallet-foundation-labs.github.io/eudiplo/latest/"},{"location":"architecture/configuration-import/","title":"Configuration Import","text":"<p>EUDIPLO supports importing configurations from JSON files on application startup. This feature allows you to pre-configure credentials, issuance workflows, and presentation verification rules without using the API.</p>"},{"location":"architecture/configuration-import/#overview","title":"Overview","text":"<p>The configuration import system automatically loads and validates JSON configuration files from the <code>config/config/</code> directory when the application starts. This is particularly useful for:</p> <ul> <li>Development environments - Pre-load test configurations</li> <li>Production deployments - Bootstrap with standard configurations</li> <li>CI/CD pipelines - Automated environment setup</li> <li>Multi-tenant scenarios - Bulk import tenant-specific configurations</li> </ul> <p>When running locally with nodejs, the default directory is <code>assets/config/</code>.</p>"},{"location":"architecture/configuration-import/#environment-variables","title":"Environment Variables","text":"<p>Configure the import behavior using these environment variables:</p> Variable Type Default Description <code>CONFIG_IMPORT</code> boolean <code>false</code> Enable configuration import on startup <code>CONFIG_IMPORT_FORCE</code> boolean <code>false</code> Overwrite existing configurations with same ID <code>CONFIG_FOLDER</code> string <code>assets/config/</code> Directory containing configuration files. Will be set in the Dockerfile to <code>app/config/config/</code>"},{"location":"architecture/configuration-import/#examples","title":"Examples","text":"<pre><code># Enable import (skip existing configs)\nCONFIG_IMPORT=true\n\n# Enable import and overwrite existing configs\nCONFIG_IMPORT=true\nCONFIG_IMPORT_FORCE=true\n</code></pre>"},{"location":"architecture/configuration-import/#directory-structure","title":"Directory Structure","text":"<p>The configuration import follows a specific directory structure:</p> <pre><code>assets/\n\u2514\u2500\u2500 config/\n    \u251c\u2500\u2500 tenant1/\n    \u2502   \u251c\u2500\u2500 keys/\n    \u2502   \u2502   \u251c\u2500\u2500 039af178-3ca0-48f4-a2e4-7b1209f30376.json  # Key ID: \"039af178-3ca0-48f4-a2e4-7b1209f30376\"\n    \u2502   \u2502   \u251c\u2500\u2500 7d8e9f10-1234-5678-9abc-def012345678.json  # Key ID: \"7d8e9f10-1234-5678-9abc-def012345678\"\n    \u2502   \u2502   \u2514\u2500\u2500 a1b2c3d4-e5f6-7890-abcd-ef1234567890.json  # Key ID: \"a1b2c3d4-e5f6-7890-abcd-ef1234567890\"\n    \u2502   \u251c\u2500\u2500 issuance/\n    \u2502   \u2502   \u251c\u2500\u2500 credentials/\n    \u2502   \u2502   \u2502   \u251c\u2500\u2500 employee-badge.json\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500 student-id.json\n    \u2502   \u2502   \u2514\u2500\u2500 issuance/\n    \u2502   \u2502       \u251c\u2500\u2500 employee-onboarding.json\n    \u2502   \u2502       \u2514\u2500\u2500 student-enrollment.json\n    \u2502   \u2514\u2500\u2500 presentation/\n    \u2502       \u251c\u2500\u2500 age-verification.json\n    \u2502       \u2514\u2500\u2500 identity-check.json\n    \u251c\u2500\u2500 tenant2/\n    \u2502   \u251c\u2500\u2500 keys/\n    \u2502   \u2502   \u2514\u2500\u2500 f8e7d6c5-b4a3-9281-7065-432109876543.json  # Key ID: \"f8e7d6c5-b4a3-9281-7065-432109876543\"\n    \u2502   \u251c\u2500\u2500 issuance/\n    \u2502   \u2502   \u251c\u2500\u2500 credentials/\n    \u2502   \u2502   \u2514\u2500\u2500 issuance/\n    \u2502   \u2514\u2500\u2500 presentation/\n    \u2514\u2500\u2500 company-xyz/\n        \u251c\u2500\u2500 keys/\n        \u2502   \u251c\u2500\u2500 12345678-abcd-ef12-3456-789012345678.json  # Key ID: \"12345678-abcd-ef12-3456-789012345678\"\n        \u2502   \u2514\u2500\u2500 98765432-fedc-ba98-7654-321098765432.json  # Key ID: \"98765432-fedc-ba98-7654-321098765432\"\n        \u251c\u2500\u2500 issuance/\n        \u2502   \u251c\u2500\u2500 credentials/\n        \u2502   \u2514\u2500\u2500 issuance/\n        \u2514\u2500\u2500 presentation/\n</code></pre>"},{"location":"architecture/configuration-import/#key-points","title":"Key Points","text":"<ul> <li>Tenant isolation: Each tenant has its own folder (e.g., <code>tenant1</code>,   <code>company-xyz</code>)</li> <li>Configuration types: Four types of configurations are supported</li> <li>File naming: JSON file names become the configuration ID (without <code>.json</code>   extension)</li> <li>Key ID mapping: For keys, the id is based on the <code>kid</code> field in the JSON   file and not based on the filename.</li> <li>Nested structure: Credentials and issuance configs are grouped under   <code>issuance/</code></li> <li>Key management: Cryptographic keys are stored in the <code>keys/</code> directory and   will be imported automatically. After the import, the keys can be removed from   the import folder.</li> </ul>"},{"location":"architecture/configuration-import/#configuration-types","title":"Configuration Types","text":""},{"location":"architecture/configuration-import/#1-cryptographic-keys","title":"1. Cryptographic Keys","text":"<p>Location: <code>config/config/{tenant}/keys/*.json</code></p> <p>Import cryptographic keys for signing and certificate operations.</p> <p>Example Structure:</p> <pre><code>{\n    \"privateKey\": {\n        \"kty\": \"EC\",\n        \"x\": \"pmn8SKQKZ0t2zFlrUXzJaJwwQ0WnQxcSYoS_D6ZSGho\",\n        \"y\": \"rMd9JTAovcOI_OvOXWCWZ1yVZieVYK2UgvB2IPuSk2o\",\n        \"crv\": \"P-256\",\n        \"d\": \"rqv47L1jWkbFAGMCK8TORQ1FknBUYGY6OLU1dYHNDqU\",\n        \"kid\": \"039af178-3ca0-48f4-a2e4-7b1209f30376\",\n        \"alg\": \"ES256\"\n    },\n    \"crt\": \"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\"\n}\n</code></pre> <p>Key Features:</p> <ul> <li>Multiple keys per tenant: Import several keys for different issuance   configurations</li> <li>Key ID from filename: The filename (without <code>.json</code>) becomes the key ID   (typically a UUID)</li> <li>Optional certificates: Include X.509 certificates in PEM format</li> <li>Algorithm support: ES256 (ECDSA P-256)</li> <li>Validation: Full schema validation during import</li> </ul>"},{"location":"architecture/configuration-import/#2-credential-configurations","title":"2. Credential Configurations","text":"<p>Location: <code>config/config/{tenant}/issuance/credentials/*.json</code></p> <p>Define credential templates and schemas.</p> <p>Schema Reference: Credential Config API</p>"},{"location":"architecture/configuration-import/#3-issuance-configurations","title":"3. Issuance Configurations","text":"<p>Location: <code>config/config/{tenant}/issuance/issuance/*.json</code></p> <p>Define issuance workflows and authentication requirements.</p> <p>Schema Reference: Issuance Config API</p>"},{"location":"architecture/configuration-import/#4-presentation-configurations","title":"4. Presentation Configurations","text":"<p>Location: <code>config/config/{tenant}/presentation/*.json</code></p> <p>Define verification requirements for credential presentations.</p> <p>Schema Reference: Presentation Config API</p>"},{"location":"architecture/configuration-import/#import-process","title":"Import Process","text":""},{"location":"architecture/configuration-import/#1-startup-validation","title":"1. Startup Validation","text":"<p>During application startup, EUDIPLO:</p> <ol> <li>Checks environment variables - Only imports if <code>CONFIG_IMPORT=true</code></li> <li>Scans tenant directories - Processes each tenant folder independently</li> <li>Validates file structure - Ensures required subdirectories exist</li> <li>Reads JSON files - Parses each configuration file</li> </ol>"},{"location":"architecture/configuration-import/#2-validation-and-processing","title":"2. Validation and Processing","text":"<p>For each configuration file:</p> <ol> <li>JSON parsing - Validates file syntax</li> <li>Schema validation - Uses the same validators as the API endpoints</li> <li>Dependency checking - Verifies referenced configurations exist</li> <li>Duplicate handling - Respects <code>CONFIG_IMPORT_FORCE</code> setting</li> </ol>"},{"location":"architecture/configuration-import/#3-error-handling","title":"3. Error Handling","text":"<p>Invalid configurations are handled gracefully:</p> <ul> <li>Validation errors are logged with detailed information</li> <li>Invalid files are skipped - Import continues with remaining files</li> <li>Missing dependencies are reported</li> <li>Existing configurations are preserved unless force mode is enabled</li> </ul>"},{"location":"architecture/configuration-import/#logging","title":"Logging","text":"<p>Import activities are logged with structured information:</p> <pre><code>{\n    \"event\": \"Import\",\n    \"tenant\": \"company-xyz\",\n    \"files\": 5,\n    \"message\": \"5 credential configs imported for company-xyz\"\n}\n</code></pre> <p>Key import logging:</p> <pre><code>{\n    \"event\": \"Import\",\n    \"tenant\": \"company-xyz\",\n    \"message\": \"3 keys imported for company-xyz\"\n}\n</code></pre> <p>Error logging includes detailed validation information:</p> <pre><code>{\n    \"event\": \"ValidationError\",\n    \"file\": \"invalid-config.json\",\n    \"tenant\": \"company-xyz\",\n    \"errors\": [\n        {\n            \"property\": \"credentialConfigs\",\n            \"constraints\": { \"isArray\": \"credentialConfigs must be an array\" },\n            \"value\": \"not-an-array\"\n        }\n    ]\n}\n</code></pre>"},{"location":"architecture/configuration-import/#best-practices","title":"Best Practices","text":""},{"location":"architecture/configuration-import/#1-configuration-management","title":"1. Configuration Management","text":"<ul> <li>Use descriptive filenames that reflect the configuration purpose</li> <li>Test configurations in development before deploying</li> <li>Document tenant-specific configurations</li> </ul>"},{"location":"architecture/configuration-import/#2-production-deployment","title":"2. Production Deployment","text":"<ul> <li>Set <code>CONFIG_IMPORT=true</code> only for initial deployment</li> <li>Use <code>CONFIG_IMPORT_FORCE=false</code> to prevent accidental overwrites</li> <li>Monitor logs for validation errors during startup</li> <li>Manage configurations via API after initial import</li> </ul>"},{"location":"architecture/configuration-import/#3-multi-tenant-setup","title":"3. Multi-Tenant Setup","text":"<pre><code># Organize by tenant/organization\nassets/config/\n\u251c\u2500\u2500 acme-corp/\n\u2502   \u251c\u2500\u2500 keys/\n\u2502   \u251c\u2500\u2500 issuance/\n\u2502   \u2514\u2500\u2500 presentation/\n\u251c\u2500\u2500 university-x/\n\u2502   \u251c\u2500\u2500 keys/\n\u2502   \u251c\u2500\u2500 issuance/\n\u2502   \u2514\u2500\u2500 presentation/\n\u2514\u2500\u2500 government-agency/\n    \u251c\u2500\u2500 keys/\n    \u251c\u2500\u2500 issuance/\n    \u2514\u2500\u2500 presentation/\n</code></pre> <p>Even when you just have one tenant, use a folder structure to prepare for future multi-tenancy.</p>"},{"location":"architecture/configuration-import/#troubleshooting","title":"Troubleshooting","text":""},{"location":"architecture/configuration-import/#common-issues","title":"Common Issues","text":"<p>Import not running: Check <code>CONFIG_IMPORT=true</code> is set</p> <p>Configurations not updating: Set <code>CONFIG_IMPORT_FORCE=true</code> to overwrite existing</p> <p>Validation errors: Check logs for specific validation failures and schema requirements</p> <p>Missing dependencies: Ensure credential configs are imported before issuance configs that reference them</p> <p>Key validation errors: Check that imported keys use supported algorithms (ES256) and have valid JWK format</p> <p>Certificate import issues: Verify certificates are in PEM format and match the imported private key</p>"},{"location":"architecture/configuration-import/#security-considerations","title":"Security Considerations","text":"<ul> <li>File permissions - Ensure config files have appropriate read permissions</li> <li>Tenant isolation - Verify tenant boundaries are properly maintained</li> </ul> <p>TODO: check if webhook credentials should be stored here or in environment variables for security.</p>"},{"location":"architecture/configuration-import/#related-documentation","title":"Related Documentation","text":"<ul> <li>Key Management - Detailed key management architecture</li> <li>API Authentication</li> <li>Multi-tenant Architecture</li> <li>Database Architecture</li> <li>Production Deployment</li> </ul>"},{"location":"architecture/database/","title":"Databases","text":"<p>This service uses TypeORM for data persistence. By default, a local SQLite database is used, but the system also supports PostgreSQL and can be extended to work with other engines such as MySQL thanks to TypeORM\u2019s flexible architecture.</p> <p>\ud83d\udca1 Database configuration is fully dynamic and can be defined via environment variables.</p>"},{"location":"architecture/database/#configuration-overview","title":"Configuration Overview","text":"Variable Description Required for Default <code>DB_TYPE</code> Database engine (<code>sqlite</code> or <code>postgres</code>) All <code>sqlite</code> <code>FOLDER</code> Path for local SQLite database. Will be extended by tenant id <code>sqlite</code> <code>./tmp</code> <code>DB_HOST</code> Hostname for PostgreSQL <code>postgres</code> \u2013 <code>DB_PORT</code> Port for PostgreSQL <code>postgres</code> \u2013 <code>DB_USERNAME</code> PostgreSQL username <code>postgres</code> \u2013 <code>DB_PASSWORD</code> PostgreSQL password <code>postgres</code> \u2013 <code>DB_DATABASE</code> PostgreSQL database name <code>postgres</code> \u2013 <p>\u2705 If <code>DB_TYPE=sqlite</code>, only the <code>FOLDER</code> variable is needed. For <code>postgres</code>, all <code>DB_*</code> variables must be provided.</p>"},{"location":"architecture/database/#sqlite-default","title":"SQLite (Default)","text":"<p>When using <code>DB_TYPE=sqlite</code>, the service will store its data in a local file-based SQLite database located at the path defined by the <code>FOLDER</code> variable (<code>./config</code> by default). This setup is lightweight and ideal for:</p> <ul> <li>Development</li> <li>Testing</li> <li>Prototyping</li> </ul> <p>No additional database server is required.</p>"},{"location":"architecture/database/#postgresql","title":"PostgreSQL","text":"<p>To connect to a PostgreSQL instance, set the following environment variables:</p> <pre><code>DB_TYPE=postgres\nDB_HOST=your-hostname\nDB_PORT=5432\nDB_USERNAME=your-username\nDB_PASSWORD=your-password\nDB_DATABASE=your-database\n</code></pre> <p>This mode is suitable for:</p> <ul> <li>Production deployments</li> <li>Multi-instance setups</li> <li>Scenarios requiring scalability and better concurrency handling</li> </ul> <p>Make sure your database is reachable and properly initialized before starting the service.</p>"},{"location":"architecture/database/#extensibility","title":"Extensibility","text":"<p>Because this service uses TypeORM, it is easy to integrate additional database engines such as:</p> <ul> <li>MySQL / MariaDB</li> <li>Microsoft SQL Server</li> <li>Oracle</li> </ul> <p>To add support for a new engine:</p> <ul> <li>Install the appropriate TypeORM driver (e.g., <code>mysql2</code>)</li> <li>Set <code>DB_TYPE</code> to the corresponding engine name</li> <li>Configure the necessary connection options via environment variables</li> </ul> <p>Let us know if you need help extending support for additional databases.</p>"},{"location":"architecture/database/#multi-tenant-database-schema","title":"Multi-Tenant Database Schema","text":"<p>EUDIPLO supports multi-tenancy, allowing multiple tenants to share the same database while keeping their data isolated. This is achieved by adding a <code>tenantId</code> column to relevant entities and filtering all queries by this identifier.</p>"},{"location":"architecture/database/#tenant-isolation-in-database","title":"Tenant Isolation in Database","text":"<p>In multi-tenant mode, data isolation is achieved through a <code>tenantId</code> column in all relevant entities:</p>"},{"location":"architecture/database/#core-entities-with-tenant-support","title":"Core Entities with Tenant Support:","text":"<p>Session Entity:</p> <pre><code>@Entity()\nexport class Session {\n    @PrimaryColumn('uuid')\n    id: string;\n\n    @Column('varchar')\n    tenantId: string; // Tenant ID for multi-tenancy support\n\n    // ... other fields\n}\n</code></pre> <p>Issuance Configuration Entity:</p> <pre><code>@Entity()\nexport class IssuanceConfig {\n    @PrimaryColumn('varchar')\n    id: string;\n\n    @Column('varchar')\n    tenantId: string;\n\n    // ... other fields\n}\n</code></pre>"},{"location":"architecture/database/#database-queries","title":"Database Queries","text":"<p>All database operations automatically filter by <code>tenantId</code> when in multi-tenant mode:</p> <pre><code>// Example: Get sessions for specific tenant\nreturn this.sessionRepository.findBy({ tenantId });\n\n// Example: Update session with tenant scope\nreturn this.sessionRepository.update({ id: sessionId, tenantId }, updateData);\n</code></pre>"},{"location":"architecture/key-management/","title":"Key Management","text":"<p>The keys used for signing operations in EUDIPLO can be managed in multiple ways, depending on the selected key management type (<code>KM_TYPE</code>).</p> <p>\ud83d\udca1 Encryption operations are always proceed with database stored keys for not and independent from the used KeyManagement Module.</p>"},{"location":"architecture/key-management/#configuration-overview","title":"Configuration Overview","text":"Variable Description Required for Default <code>KM_TYPE</code> Key management engine type (<code>db</code> or <code>vault</code>) All <code>db</code> <code>CRYPTO_ALG</code> Cryptographic algorithm (<code>ES256</code>) All <code>ES256</code> <code>VAULT_URL</code> Vault API URL to vault instance like <code>http://vault:8200</code> <code>vault</code> \u2013 <code>VAULT_TOKEN</code> Authentication token for Vault <code>vault</code> \u2013 <code>CONFIG_IMPORT</code> Enable automatic key import from config files Optional <code>false</code> <code>CONFIG_IMPORT_FORCE</code> Overwrite existing keys during import Optional <code>false</code>"},{"location":"architecture/key-management/#database-based-key-management","title":"Database based Key Management","text":"<p>When <code>KM_TYPE=db</code> (default), keys are stored unencrypted in the database. This mode is ideal for development or testing.</p>"},{"location":"architecture/key-management/#multiple-key-support","title":"Multiple Key Support","text":"<p>Each tenant can manage multiple cryptographic keys simultaneously. Each key has a unique key id and is also isolated via the <code>tenant_id</code> field.</p> <p>Each key file contains the private key in JWK format:</p> <pre><code>{\n  \"kty\": \"EC\",\n  \"x\": \"pmn8SKQKZ0t2zFlrUXzJaJwwQ0WnQxcSYoS_D6ZSGho\",\n  \"y\": \"rMd9JTAovcOI_OvOXWCWZ1yVZieVYK2UgvB2IPuSk2o\",\n  \"crv\": \"P-256\",\n  \"d\": \"rqv47L1jWkbFAGMCK8TORQ1FknBUYGY6OLU1dYHNDqU\",\n  \"kid\": \"039af178-3ca0-48f4-a2e4-7b1209f30376\",\n  \"alg\": \"ES256\"\n}\n</code></pre>"},{"location":"architecture/key-management/#automatic-key-generation","title":"Automatic Key Generation","text":"<p>On startup, if no keys are found for a tenant, the service will automatically generate a new key pair. Even when using the database mode, the private key will never be exposed by the api.</p>"},{"location":"architecture/key-management/#vault-hashicorp-vault","title":"Vault (HashiCorp Vault)","text":"<p>To use HashiCorp Vault for key management, configure the following:</p> <pre><code>KM_TYPE=vault\nVAULT_URL=http://localhost:8200/v1/transit\nVAULT_TOKEN=your-vault-token\n</code></pre> <p>For each tenant, a new secret engine is created in Vault with the path <code>{tenantId}</code>.</p> <p>To issue credentials, you need to have a signed certificate for the public key that is bound to your domain.</p> <p>In this mode:</p> <ul> <li>All signing operations are delegated to Vault via its API.</li> <li>The private key never leaves the Vault server.</li> <li>Access can be tightly controlled using Vault\u2019s policies and authentication   mechanisms.</li> </ul> <p>Vault is well-suited for production environments where secure, auditable key usage is required.</p>"},{"location":"architecture/key-management/#extensibility","title":"Extensibility","text":"<p>The key management system is designed to be extensible. You can integrate other key management backends such as:</p> <ul> <li>\ud83d\udd10 AWS KMS</li> <li>\ud83d\udd10 Azure Key Vault</li> <li>\ud83d\udd10 Google Cloud KMS</li> <li>\ud83d\udd10 Hardware Security Modules (HSMs)</li> </ul> <p>To add a new backend:</p> <ul> <li>Implement the key service interface.</li> <li>Extend the module factory to support a new <code>KM_TYPE</code>.</li> </ul> <pre><code>// Example (in code):\nKM_TYPE = awskms;\n</code></pre> <p>If you need help integrating a new provider, feel free to open an issue or contact the maintainers.</p>"},{"location":"architecture/key-management/#certificates","title":"Certificates","text":"<p>EUDIPLO supports the use of X.509 certificates for key management. Certificates can be used to verify the authenticity of public keys and establish trust between parties.</p>"},{"location":"architecture/key-management/#certificate-generation","title":"Certificate Generation","text":"<p>When a new key pair is generated, a self-signed certificate is also created. This certificate includes the public key and is stored alongside the key files. The certificate can be overwritten any time via the api.</p> <p>When using the Registrar, it will generate a certificate for the public key that can be used to secure the OID4VCI and OID4VP requests. Each tenant will only have one access certificate.</p> <p>Note: In the future the access certificate generation will follow the official standard that is under development right now.</p>"},{"location":"architecture/key-management/#certificate-format","title":"Certificate Format","text":"<p>Certificates are stored in PEM format and can be included in key import requests.</p>"},{"location":"architecture/key-management/#multi-tenant-key-management","title":"Multi-Tenant Key Management","text":""},{"location":"architecture/key-management/#automatic-key-generation_1","title":"Automatic Key Generation","text":"<p>Tenant Initialization Process:</p> <ol> <li>Client registers with credentials (<code>client_id</code>, <code>client_secret</code>)</li> <li>Cryptographic key pair automatically generated</li> <li>Keys stored in tenant-specific location</li> <li>Generation of certificate for public key</li> </ol>"},{"location":"architecture/key-management/#key-import-and-management","title":"Key Import and Management","text":"<p>EUDIPLO supports importing existing keys through multiple methods to accommodate different deployment scenarios and security requirements.</p> <p>The <code>kid</code> provided in the key files is used to identify and manage keys within the system. An optional <code>description</code> field can be included for additional context.</p>"},{"location":"architecture/key-management/#api-based-key-import","title":"API-Based Key Import","text":"<p>Import keys through the REST API using authenticated requests:</p> <p>Endpoint: <code>POST /key</code></p> <p>Request Body:</p> <pre><code>{\n  \"privateKey\": {\n    \"kty\": \"EC\",\n    \"x\": \"pmn8SKQKZ0t2zFlrUXzJaJwwQ0WnQxcSYoS_D6ZSGho\",\n    \"y\": \"rMd9JTAovcOI_OvOXWCWZ1yVZieVYK2UgvB2IPuSk2o\",\n    \"crv\": \"P-256\",\n    \"d\": \"rqv47L1jWkbFAGMCK8TORQ1FknBUYGY6OLU1dYHNDqU\",\n    \"kid\": \"039af178-3ca0-48f4-a2e4-7b1209f30376\",\n    \"alg\": \"ES256\"\n  },\n  \"description\": \"Optional key description\",\n  \"crt\": \"-----BEGIN CERTIFICATE-----\\n...optional certificate...\\n-----END CERTIFICATE-----\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"id\": \"039af178-3ca0-48f4-a2e4-7b1209f30376\"\n}\n</code></pre>"},{"location":"architecture/key-management/#configuration-based-key-import","title":"Configuration-Based Key Import","text":"<p>Import keys automatically during application startup using the configuration import system.</p> <p>Environment Variables:</p> <pre><code>CONFIG_IMPORT=true\nCONFIG_IMPORT_FORCE=false  # Set to true to overwrite existing keys\n</code></pre> <p>Directory Structure:</p> <pre><code>assets/config/\n\u251c\u2500\u2500 tenant-1/\n\u2502   \u2514\u2500\u2500 keys/\n\u2502       \u251c\u2500\u2500 primary-key.json\n\u2502       \u251c\u2500\u2500 backup-key.json\n\u2502       \u2514\u2500\u2500 legacy-key.json\n\u2514\u2500\u2500 tenant-2/\n    \u2514\u2500\u2500 keys/\n        \u2514\u2500\u2500 signing-key.json\n</code></pre> <p>Key File Format:</p> <pre><code>{\n  \"privateKey\": {\n    \"kty\": \"EC\",\n    \"x\": \"...\",\n    \"y\": \"...\",\n    \"crv\": \"P-256\",\n    \"d\": \"...\",\n    \"kid\": \"unique-key-identifier\",\n    \"alg\": \"ES256\"\n  },\n  \"crt\": \"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\"\n}\n</code></pre>"},{"location":"architecture/key-management/#key-management-operations","title":"Key Management Operations","text":"<p>List All Keys:</p> <pre><code>GET /key\nAuthorization: Bearer &lt;tenant-token&gt;\n</code></pre>"},{"location":"architecture/key-management/#supported-key-formats","title":"Supported Key Formats","text":"<ul> <li>Algorithm Support: ES256 (ECDSA P-256)</li> <li>Key Format: JSON Web Key (JWK) format</li> <li>Certificate Support: Optional X.509 certificates in PEM format</li> <li>Key Generation: Automatic generation if no keys exist</li> </ul>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>EUDIPLO is a lightweight middleware designed to bridge the gap between existing systems and the emerging ecosystem of EUDI Wallets. Instead of implementing complex protocols such as OpenID4VP, SD-JWT, or DIDComm themselves, developers can run EUDIPLO as a standalone Docker container and interact with it via simple APIs or configuration files.</p> <p>It acts as an adapter between trusted infrastructure and local applications or web services. EUDIPLO handles the complexities of the EUDI Wallet ecosystem, allowing you to focus on your core business logic without worrying about the underlying protocols.</p>"},{"location":"architecture/overview/#purpose","title":"Purpose","text":"<p>The EUDI Wallet ecosystem introduces new technical standards and trust models that are non-trivial to implement correctly. EUDIPLO handles these standards for you, allowing existing systems to:</p> <ul> <li>Issue verifiable credentials</li> <li>Verify presentations</li> <li>Manage cryptographic keys securely</li> <li>Persist session data</li> <li>Run in a self-contained Docker deployment</li> </ul>"},{"location":"architecture/overview/#deployment","title":"Deployment","text":"<p>EUDIPLO is shipped as a Docker image. It can be run with minimal setup via a <code>.env</code> file. You can mount:</p> <ul> <li>a <code>config/</code> directory for SQLite data or credential configuration</li> <li>optional integration with Vault for key storage</li> </ul> <p>EUDIPLO can be deployed as:</p> <ul> <li>a standalone local service (e.g., during development)</li> <li>a backend service in production (e.g., behind a gateway)</li> </ul> <p>You can find examples of deployments in the deployment directory.</p> <p>For configuration management, see Configuration Import to learn how to bootstrap your deployment with pre-configured credentials and workflows.</p>"},{"location":"architecture/overview/#integration-patterns","title":"Integration Patterns","text":"<p>You can use EUDIPLO as:</p> <ul> <li>An internal credential issuance service for your citizen portal, education   platform, or company registry</li> <li>A verifier bridge to validate wallets without deeply integrating OpenID4VP   etc.</li> <li>A testing sandbox for experimenting with EUDI protocols</li> </ul>"},{"location":"architecture/overview/#extensibility","title":"Extensibility","text":"<p>EUDIPLO is modular and extensible:</p> <ul> <li>Add new key management backends (e.g., AWS KMS)</li> <li>Customize issuance templates</li> <li>Extend the API layer with business-specific endpoints</li> </ul>"},{"location":"architecture/sessions/","title":"Sessions Management","text":"<p>EUDIPLO manages sessions for credential issuance and verification and are bound to each tenant. In case for a presentation during issuance, both actions are handled in the same session. Sessions are stored in the database and can be managed via the <code>/sessions</code> endpoint. You can retrieve a specific session via <code>/sessions/{id}</code>.</p> <p>To tidy up old sessions, an interval is set to delete older session. The default values can be configured by setting:</p> <ul> <li><code>SESSION_TIDY_UP_INTERVAL</code>: value in seconds, default: 3600 (1 hour)</li> <li><code>SESSION_TTL</code>: value in seconds, default: 86400 (24 hours)</li> </ul> <p>Other elements as persisted status mapping (the binding between a session id and a status list reference) are not deleted with this process.</p>"},{"location":"architecture/supported-protocols/","title":"Supported Protocols","text":"<p>EUDIPLO is deliberately limited to protocols that are part of the European Digital Identity Wallet (EUDI Wallet) ecosystem. This focused scope reduces implementation complexity, improves long-term maintainability, and ensures a consistent trust model across services.</p> <p>Rather than being a general-purpose verifiable credentials broker, EUDIPLO aligns strictly with the specifications endorsed by the EU regulatory and technical framework.</p>"},{"location":"architecture/supported-protocols/#protocols-supported","title":"Protocols Supported","text":"Protocol Description OpenID for Verifiable Credential Issuance (OID4VCI) Enables issuers to deliver verifiable credentials to EUDI Wallets using OAuth-based flows. OpenID for Verifiable Presentations (OID4VP) Allows services to request and verify credentials presented by EUDI Wallet holders. Selective Disclosure JWT VC (SD-JWT VC) Data model for credentials allowing selective disclosure of individual claims by the user. OAuth Token Status List Mechanism for determining revocation or suspension status of issued credentials. <p>These standards are evolving in coordination with EU-level pilot projects and working groups. EUDIPLO tracks these developments closely to provide early, stable support as specifications mature.</p>"},{"location":"architecture/supported-protocols/#why-not-more","title":"Why Not More?","text":"<p>By limiting scope to official EUDI Wallet protocols, EUDIPLO avoids:</p> <ul> <li>Incompatibilities with reference implementations</li> <li>Bloated code from supporting rarely used formats</li> <li>Uncertain trust assumptions from broader ecosystems</li> </ul> <p>This makes EUDIPLO especially suitable for:</p> <ul> <li>Public sector services integrating with national wallet pilots</li> <li>Companies targeting pan-European credential workflows</li> <li>Developers seeking a reliable, minimal abstraction layer over complex specs</li> </ul>"},{"location":"architecture/tenant/","title":"Tenant-Based Architecture","text":"<p>EUDIPLO is built on a tenant-based architecture that allows you to isolate configurations and data for different clients or environments. This means you can run multiple instances of EUDIPLO, each serving a different tenant or client, while sharing the same codebase.</p>"},{"location":"architecture/tenant/#tenant-isolation","title":"Tenant Isolation","text":"<p>Each tenant has:</p> <ul> <li>Separate configurations: Managed in the database</li> <li>Isolated database records: All entities include <code>tenantId</code> field</li> <li>Independent key management: Tenant-specific cryptographic keys</li> <li>Dedicated session management: Sessions scoped to tenant</li> <li>Individual credential configurations: Per-tenant issuance and presentation   templates</li> </ul> <p>For now the separation in the database is done by a <code>tenantId</code> field in all entities. In the future, we may support separate databases per tenant.</p>"},{"location":"architecture/tenant/#tenant-management","title":"Tenant Management","text":"<p>When a protected endpoint is called, the system will check if the tenant is already set up. If not, it will call the required functions to do so. This can result in a longer response time for the first request, but subsequent requests will be faster.</p>"},{"location":"architecture/tenant/#deleting-a-tenant","title":"Deleting a Tenant","text":"<p>This is not yet implemented, since you need some kind of admin credential to start the process in case it is not triggered by the tenant itself.</p> <p>TODO: needs to be implemented.</p>"},{"location":"architecture/webhooks/","title":"Webhooks","text":"<p>EUDIPLO supports webhook endpoints that let external services actively participate in issuance and presentation flows.</p> <p>While webhooks are optional, they make the overall process more dynamic\u2014for example:</p> <ul> <li>requesting credential data from your backend service only when needed, or</li> <li>notifying your system when a wallet has completed a flow.</li> </ul>"},{"location":"architecture/webhooks/#supported-webhook-scenarios","title":"Supported Webhook Scenarios","text":"Flow Purpose Credential Issuance Webhook Dynamically provides claims during the credential request process. Presentation Webhook Receives verified claims from the wallet. Presentation During Issuance Supplies verified claims required to issue a credential (mandatory). Notification Webhook Receives status updates (e.g., accepted or denied) about issuance flows."},{"location":"architecture/webhooks/#example-webhook-service","title":"Example Webhook Service","text":"<p>A simple webhook simulator is available in the test/webhook directory. It can be run locally or deployed to a Cloudflare Worker, and is a good starting point for testing webhook functionality.</p>"},{"location":"architecture/webhooks/#webhook-configuration","title":"Webhook Configuration","text":"<p>A webhook configuration object defines how EUDIPLO interacts with your service.</p> <p>It must include:</p> <ul> <li><code>url</code>: The endpoint URL. EUDIPLO sends an HTTP <code>POST</code> request with JSON data.</li> <li><code>auth</code>: (Optional) Authentication configuration.</li> <li><code>type</code>: Authentication type. Currently supported:<ul> <li><code>apiKey</code> \u2013 sends a key in a request header.</li> </ul> </li> </ul>"},{"location":"architecture/webhooks/#example","title":"Example","text":"<pre><code>{\n  \"url\": \"http://localhost:8787/consume\",\n  \"auth\": {\n    \"type\": \"apiKey\",\n    \"config\": {\n      \"headerName\": \"x-api-key\",\n      \"value\": \"your-api-key\"\n    }\n  }\n}\n</code></pre>"},{"location":"architecture/webhooks/#webhook-types","title":"Webhook Types","text":""},{"location":"architecture/webhooks/#claims-webhook","title":"Claims Webhook","text":"<p>The claims webhook allows EUDIPLO to fetch attributes dynamically instead of embedding them in the credential offer. This is useful if:</p> <ul> <li>claims are not known in advance, or</li> <li> <p>you want to avoid including sensitive data in the offer for privacy reasons.</p> </li> <li> <p>Pre-authenticated / Authenticated flows:   Called during the credential request.   If no webhook is configured, EUDIPLO falls back to claims provided in the credential offer or defined in the credential configuration.</p> </li> <li> <p>Presentation during issuance (mandatory):   Called during the auth request.   EUDIPLO sends verified claims to your service, which must respond with the claims to persist in the credential.   This avoids your service needing to manage state between the authentication and issuance phases.</p> </li> </ul> <pre><code>{\n  \"claimsWebhook\": {\n    \"url\": \"http://localhost:8787/process\",\n    \"auth\": {\n      \"type\": \"apiKey\",\n      \"config\": {\n        \"headerName\": \"x-api-key\",\n        \"value\": \"your-api-key\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"architecture/webhooks/#notification-webhook","title":"Notification Webhook","text":"<p>The notification webhook receives the outcome of the issuance process (e.g., accepted or denied). This confirms that the wallet has received and accepted the credential.</p> <pre><code>{\n  \"notifyWebhook\": {\n    \"url\": \"http://localhost:8787/notify\",\n    \"auth\": {\n      \"type\": \"apiKey\",\n      \"config\": {\n        \"headerName\": \"x-api-key\",\n        \"value\": \"your-api-key\"\n      }\n    }\n  }\n}\n</code></pre> <p>If no notification webhook is configured, you can fetch the session result by querying the <code>/session</code> endpoint with the <code>sessionId</code>.</p>"},{"location":"architecture/webhooks/#webhook-request-format","title":"Webhook Request Format","text":"<p>EUDIPLO sends an HTTP <code>POST</code> request with the following structure:</p> <ul> <li><code>credentials</code>: Array of credential objects. Each includes:</li> <li><code>id</code>: The ID of the DCQL query.</li> <li><code>values</code>: The claims presented by the wallet.<ul> <li>SD-JWT VC\u2013specific fields (e.g., <code>cnf</code>, <code>status</code>) are removed for simplicity.</li> </ul> </li> <li><code>error</code>: Present instead of <code>values</code> if verification failed.</li> <li><code>session</code>: The session ID identifying the request.</li> </ul>"},{"location":"architecture/webhooks/#example-payload","title":"Example Payload","text":"<pre><code>{\n  \"credentials\": [\n    {\n      \"id\": \"pid\",\n      \"values\": {\n        \"iss\": \"https://service.eudi-wallet.dev\",\n        \"iat\": 1751884150,\n        \"vct\": \"https://service.eudi-wallet.dev/credentials/vct/pid\",\n        \"address\": {\n          \"locality\": \"K\u00d6LN\",\n          \"postal_code\": \"51147\",\n          \"street_address\": \"HEIDESTRA\u1e9eE 17\"\n        }\n      }\n    },\n    {\n      \"id\": \"citizen\",\n      \"error\": \"Credential verification failed: invalid signature\"\n    }\n  ],\n  \"session\": \"a6318799-dff4-4b60-9d1d-58703611bd23\"\n}\n</code></pre> <p>Info</p> <p>Requests always use <code>Content-Type: application/json</code>.  A retry mechanism is not yet implemented\u2014if a webhook fails, the process halts. Retry support may be added in the future.</p>"},{"location":"architecture/webhooks/#webhook-response-format","title":"Webhook Response Format","text":"<p>A response is required for:</p> <ul> <li>presentation during issuance webhooks, and</li> <li>issuance webhooks.</li> </ul> <p>The response must be a JSON object keyed by the credential configuration ID. Each entry contains the claims to issue.</p>"},{"location":"architecture/webhooks/#example-response","title":"Example Response","text":"<p>Issuing a credential with ID <code>citizen</code>:</p> <pre><code>{\n  \"citizen\": {\n    \"town\": \"Berlin\"\n  }\n}\n</code></pre> <p>This response is injected into the issuance flow to create the final credential.</p>"},{"location":"development/","title":"Development","text":"<p>EUDIPLO is organized as a monorepo workspace containing multiple applications:</p> <ul> <li>Backend: NestJS API server (<code>apps/backend/</code>)</li> <li>Client: Angular web interface (<code>apps/client/</code>)  </li> <li>Webhook: Cloudflare Worker for testing (<code>apps/webhook/</code>)</li> </ul>"},{"location":"development/#quick-start","title":"Quick Start","text":"<pre><code># Install all dependencies\npnpm install\n\n# Start all applications\npnpm run dev\n\n# Or start specific applications\npnpm --filter @eudiplo/backend run start:dev\npnpm --filter @eudiplo/client run dev\n</code></pre> <p>See Workspace Structure for detailed information about the monorepo organization.</p>"},{"location":"development/#backend-nestjs","title":"Backend (NestJS)","text":"<p>The backend is built with NestJS, a progressive Node.js framework for building efficient, scalable server-side applications using TypeScript.</p>"},{"location":"development/#documentation-with-compodoc","title":"Documentation with Compodoc","text":"<p>Compodoc provides a comprehensive overview of the codebase, including:</p> <ul> <li>Modules</li> <li>Controllers</li> <li>Services</li> <li>DTOs</li> <li>Dependencies</li> </ul> <pre><code>pnpm run compodoc:start\n</code></pre> <p>A rendered version of the build is included here.</p>"},{"location":"development/#source-code-structure","title":"Source Code Structure","text":"<p>Each module typically contains its own:</p> <ul> <li><code>controller.ts</code> \u2014 API endpoints</li> <li><code>service.ts</code> \u2014 Business logic</li> <li><code>dto/</code> \u2014 Data Transfer Objects</li> <li><code>entities/</code> \u2014 TypeORM entities (if needed)</li> </ul>"},{"location":"development/#additional-documentation","title":"Additional Documentation","text":"<ul> <li>API Authentication - Guide for using OAuth2   authentication with the API</li> <li>Code Quality Standards - Code formatting, linting, and style guidelines</li> <li>Contributing Guidelines - How to contribute to the project</li> <li>Testing Guide - How to run and write tests</li> <li>Logging - Configuring logging for development   and production</li> <li>Documentation Versioning - Managing documentation versions</li> </ul>"},{"location":"development/#scripts","title":"Scripts","text":"<p>Useful development scripts:</p> <pre><code># Development\npnpm run start:dev        # Start the app in watch mode\npnpm run start:debug      # Start with debug mode and watch\npnpm run build            # Build the application\n\n# Testing\npnpm run test             # Run unit tests\npnpm run test:watch       # Run tests in watch mode\npnpm run test:e2e         # Run end-to-end tests\npnpm run test:cov         # Run tests with coverage\npnpm run test:debug       # Run tests with debug mode\n\n# Code Quality\npnpm run format           # Format all files with Biome\npnpm run format:check     # Check formatting without changes\npnpm run lint             # Run linting checks\npnpm run lint:fix         # Fix linting issues automatically\n\n# Documentation\npnpm run compodoc         # Generate Compodoc documentation\npnpm run compodoc:serve   # Serve Compodoc docs locally (port 3001)\npnpm run doc:watch        # Serve MkDocs documentation with live reload\npnpm run doc:build        # Build all documentation (Swagger + Compodoc + MkDocs)\n</code></pre> <p>\ud83d\udca1 Compodoc output is stored in the <code>doc/compodoc</code> folder and served statically by the application.</p>"},{"location":"development/#contributions","title":"Contributions","text":"<p>Feel free to contribute by improving documentation, fixing bugs, or extending functionality. Make sure to follow the coding standards and write tests where applicable.</p>"},{"location":"development/code-quality/","title":"Code Quality Standards","text":"<p>This project uses Biome for code formatting, linting, and import organization to ensure consistent code quality across the codebase.</p>"},{"location":"development/code-quality/#biome-configuration","title":"Biome Configuration","text":"<p>Biome has replaced ESLint and Prettier in this project for better performance and a unified tooling experience. The configuration is defined in <code>biome.json</code> at the project root.</p>"},{"location":"development/code-quality/#key-settings","title":"Key Settings","text":"<ul> <li>Semicolons: Always required (<code>\"always\"</code>)</li> <li>Indentation: 4 spaces</li> <li>Quote Style: Double quotes preferred</li> <li>Line Width: 80 characters</li> <li>Parameter Decorators: Enabled for NestJS compatibility (<code>unsafeParameterDecoratorsEnabled: true</code>)</li> </ul>"},{"location":"development/code-quality/#available-commands","title":"Available Commands","text":"<pre><code># Format all files\npnpm run format\n\n# Check formatting without making changes\npnpm run format:check\n\n# Run linting checks\npnpm run lint\n\n# Fix linting issues automatically\npnpm run lint:fix\n</code></pre>"},{"location":"development/code-quality/#ide-setup","title":"IDE Setup","text":""},{"location":"development/code-quality/#vs-code-recommended","title":"VS Code (Recommended)","text":"<ol> <li>Install the Biome extension:</li> </ol> <pre><code>Extension ID: biomejs.biome\n</code></pre> <ol> <li>Workspace settings are pre-configured in <code>.vscode/settings.json</code>:</li> <li>Format on save enabled</li> <li>Biome set as default formatter</li> <li>Auto-organize imports on save</li> <li>Quick fixes applied automatically</li> </ol>"},{"location":"development/code-quality/#other-editors","title":"Other Editors","text":"<p>For other editors, refer to the Biome Editor Integration guide.</p>"},{"location":"development/code-quality/#file-coverage","title":"File Coverage","text":"<p>Biome processes the following file types:</p> <ul> <li>TypeScript files: <code>src/**/*.ts</code>, <code>test/**/*.ts</code>, <code>src/**/*.spec.ts</code></li> <li>JavaScript files: <code>*.js</code>, <code>*.mjs</code></li> <li>JSON files: <code>*.json</code>, <code>*.jsonc</code></li> </ul>"},{"location":"development/code-quality/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Consider setting up pre-commit hooks to automatically format and lint code:</p> <pre><code># Example using husky + lint-staged\npnpm add -D husky lint-staged\n\n# In package.json\n\"lint-staged\": {\n  \"*.{ts,js,json}\": [\"pnpm run format\", \"pnpm run lint:fix\"]\n}\n</code></pre>"},{"location":"development/code-quality/#code-style-guidelines","title":"Code Style Guidelines","text":""},{"location":"development/code-quality/#typescriptjavascript","title":"TypeScript/JavaScript","text":"<ul> <li>Use explicit types where beneficial for readability</li> <li>Prefer <code>const</code> over <code>let</code> when variables don't change</li> <li>Use meaningful variable and function names</li> <li>Add JSDoc comments for public APIs</li> <li>Destructure objects when accessing multiple properties</li> </ul>"},{"location":"development/code-quality/#nestjs-specific","title":"NestJS Specific","text":"<ul> <li>Use parameter decorators (e.g., <code>@Body()</code>, <code>@Param()</code>)</li> <li>Organize imports: external packages, then internal modules</li> <li>Use dependency injection consistently</li> <li>Follow NestJS naming conventions for controllers, services, modules</li> </ul>"},{"location":"development/code-quality/#example","title":"Example","text":"<pre><code>import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * Service for managing user authentication.\n */\n@Injectable()\nexport class AuthService {\n  constructor(private readonly configService: ConfigService) {}\n\n  /**\n   * Validates user credentials.\n   * @param email User's email address\n   * @param password User's password\n   * @returns Authentication result\n   */\n  async validateUser(email: string, password: string): Promise&lt;boolean&gt; {\n    const isValid = await this.checkCredentials(email, password);\n    return isValid;\n  }\n}\n</code></pre>"},{"location":"development/contributing/","title":"Contributing","text":"<p>Thank you for considering contributing to EUDIPLO!</p> <p>Please refer to the CONTRIBUTING.md file in the root of the repository for detailed guidelines on:</p> <ul> <li>Reporting issues</li> <li>Suggesting features</li> <li>Setting up the development environment</li> <li>Submitting pull requests</li> </ul>"},{"location":"development/documentation-versioning/","title":"Documentation Versioning","text":"<p>This project uses mike to manage multiple versions of the documentation.</p>"},{"location":"development/documentation-versioning/#available-versions","title":"Available Versions","text":"<ul> <li>main: Always reflects the current state of the main branch</li> <li>latest: Documentation for the most recent stable release</li> <li>Specific Versions: Documentation for specific releases (e.g., <code>1.2.3</code>)   accessible via direct URL</li> </ul>"},{"location":"development/documentation-versioning/#how-it-works","title":"How It Works","text":""},{"location":"development/documentation-versioning/#automatic-deployment","title":"Automatic Deployment","text":"<ol> <li>Main Branch Updates: When code is pushed to <code>main</code>, the documentation is    automatically built and deployed as the <code>main</code> version</li> <li>Releases: When a new release is published:<ul> <li>Documentation is deployed as <code>latest</code></li> <li><code>latest</code> becomes the default/recommended documentation version</li> <li>The specific version (e.g., <code>1.2.3</code>) is also available via direct URL   access</li> </ul> </li> </ol>"},{"location":"development/documentation-versioning/#version-strategy","title":"Version Strategy","text":"<ul> <li>Version Selector Shows: <code>main</code>, <code>latest</code> (clean and simple)</li> <li>Direct Access Available: You can still access specific versions like   <code>/1.2.3/</code> directly via URL</li> <li>Latest Points To: The most recent stable release</li> <li>Default: <code>latest</code> is set as the default documentation version</li> </ul>"},{"location":"development/documentation-versioning/#version-switching","title":"Version Switching","text":"<p>Users can switch between documentation versions using the version selector in the top navigation bar of the documentation site.</p>"},{"location":"development/documentation-versioning/#local-development","title":"Local Development","text":"<p>For local development with versioning:</p> <pre><code># First time setup: Initialize mike with a main version\npnpm run doc:init\n\n# Serve versioned docs locally\npnpm run doc:serve-versions\n\n# Deploy a development version\npnpm run doc:deploy-dev\n\n# Deploy a major version manually (example: version 1)\npnpm run doc:deploy-major 1 latest\n\n# List all deployed versions\npnpm run doc:list-versions\n\n# Delete a specific version (be careful!)\npnpm run doc:delete-version [version-name]\n</code></pre> <p>Note: If you get a 404 error when first running <code>pnpm run doc:serve-versions</code>, you need to run <code>pnpm run doc:init</code> first to initialize mike with at least one version.</p>"},{"location":"development/documentation-versioning/#manual-deployment","title":"Manual Deployment","text":"<p>You can manually trigger documentation deployment using the GitHub Actions workflow dispatch feature in the repository's Actions tab.</p>"},{"location":"development/documentation-versioning/#accessing-documentation-versions","title":"Accessing Documentation Versions","text":"<p>Once deployed, the documentation versions are available at:</p> <ul> <li>Latest Stable:   https://openwallet-foundation-labs.github.io/eudiplo/latest/   (points to latest major version)</li> <li>Development:   https://openwallet-foundation-labs.github.io/eudiplo/main/   (alias: <code>/latest-dev/</code>)</li> <li>Major Versions: <code>https://openwallet-foundation-labs.github.io/eudiplo/1/</code>,   <code>https://openwallet-foundation-labs.github.io/eudiplo/2/</code>, etc.</li> <li>Specific Versions:   <code>https://openwallet-foundation-labs.github.io/eudiplo/v1.2.3/</code> (direct access   only, not in version selector)</li> <li>Version Selector: Available in the top navigation, shows only major   versions + main</li> </ul>"},{"location":"development/documentation-versioning/#structure","title":"Structure","text":"<ul> <li>Documentation lives in the <code>docs/</code> directory</li> <li>API documentation is auto-generated from Swagger/OpenAPI specs</li> <li>Code documentation is auto-generated using Compodoc</li> <li>The site is built using MkDocs with the Material theme</li> </ul>"},{"location":"development/logging-configuration/","title":"Logging Configuration","text":"<p>The EUDIPLO Service provides flexible logging configuration to help with debugging and monitoring.</p>"},{"location":"development/logging-configuration/#basic-log-level-configuration","title":"Basic Log Level Configuration","text":"<p>Control the overall log level using the <code>LOG_LEVEL</code> environment variable:</p> <pre><code># Show all logs (debug, info, warn, error)\nLOG_LEVEL=debug\n\n# Show only info, warn, error (default)\nLOG_LEVEL=info\n\n# Show only warnings and errors\nLOG_LEVEL=warn\n\n# Show only errors\nLOG_LEVEL=error\n</code></pre>"},{"location":"development/logging-configuration/#disabling-specific-logger-services","title":"Disabling Specific Logger Services","text":""},{"location":"development/logging-configuration/#http-requestresponse-logging","title":"HTTP Request/Response Logging","text":"<p>To disable automatic HTTP request and response logging from Pino (useful during development when you want to reduce log noise):</p> <pre><code># Disable HTTP request/response logging\nLOG_ENABLE_HTTP_LOGGER=true\n\n# Enable HTTP request/response logging (default)\nLOG_ENABLE_HTTP_LOGGER=false\n</code></pre> <p>Note: This controls the built-in HTTP logging from the Pino HTTP logger. Session-specific logging is controlled separately.</p>"},{"location":"development/logging-configuration/#sessionloggerservice","title":"SessionLoggerService","text":"<p>To disable all session-related logging (useful during debugging when you want to focus on other components):</p> <pre><code># Disable SessionLoggerService logs\nLOG_ENABLE_SESSION_LOGGER=true\n\n# Enable SessionLoggerService logs (default)\nLOG_ENABLE_SESSION_LOGGER=false\n</code></pre>"},{"location":"development/logging-configuration/#development-scenarios","title":"Development Scenarios","text":""},{"location":"development/logging-configuration/#debugging-authentication-issues","title":"Debugging Authentication Issues","text":"<pre><code>LOG_LEVEL=debug\nLOG_ENABLE_SESSION_LOGGER=true\nLOG_ENABLE_HTTP_LOGGER=true\n</code></pre> <p>This will show detailed debug logs but hide session-related and HTTP request noise.</p>"},{"location":"development/logging-configuration/#monitoring-session-flows","title":"Monitoring Session Flows","text":"<pre><code>LOG_LEVEL=info\nLOG_ENABLE_SESSION_LOGGER=false\nLOG_ENABLE_HTTP_LOGGER=true\n</code></pre> <p>This will show all session flow events for monitoring credential issuance and verification, but without HTTP request logs.</p>"},{"location":"development/logging-configuration/#full-development-logging","title":"Full Development Logging","text":"<pre><code>LOG_LEVEL=debug\nLOG_ENABLE_SESSION_LOGGER=false\nLOG_ENABLE_HTTP_LOGGER=false\n</code></pre> <p>This will show everything including HTTP requests, responses, and session flows.</p>"},{"location":"development/logging-configuration/#production-monitoring","title":"Production Monitoring","text":"<pre><code>LOG_LEVEL=warn\nLOG_ENABLE_SESSION_LOGGER=false\nLOG_ENABLE_HTTP_LOGGER=true\n</code></pre> <p>This will only show warnings, errors, and important session events without HTTP noise.</p>"},{"location":"development/logging-configuration/#log-structure","title":"Log Structure","text":"<p>Session logs include structured data:</p> <pre><code>{\n    \"level\": \"info\",\n    \"time\": \"2025-07-20T10:30:45.123Z\",\n    \"context\": \"SessionLoggerService\",\n    \"sessionId\": \"session_123\",\n    \"tenantId\": \"tenant_456\",\n    \"flowType\": \"OID4VCI\",\n    \"event\": \"flow_start\",\n    \"stage\": \"initialization\",\n    \"msg\": \"[OID4VCI] Flow started for session session_123 in tenant tenant_456\"\n}\n</code></pre>"},{"location":"development/logging-configuration/#environment-configuration","title":"Environment Configuration","text":"<p>Add these to your <code>.env</code> file:</p> <pre><code># Basic logging\nLOG_LEVEL=info\n\n# HTTP request/response logging control\nLOG_ENABLE_HTTP_LOGGER=false\n\n# Session logger control\nLOG_ENABLE_SESSION_LOGGER=false\n</code></pre>"},{"location":"development/logging-configuration/#runtime-control","title":"Runtime Control","text":"<p>You can also control logging at runtime by restarting the service with different environment variables, or by implementing log level changes via API endpoints if needed.</p>"},{"location":"development/running-locally/","title":"Running Locally","text":"<p>This guide will help you run the project locally for development or testing purposes. </p> <p>EUDIPLO is now organized as a monorepo workspace containing: - Backend (<code>apps/backend/</code>) - NestJS API server - Client (<code>apps/client/</code>) - Angular web interface - Webhook (<code>apps/webhook/</code>) - Cloudflare Worker for testing</p>"},{"location":"development/running-locally/#prerequisites","title":"Prerequisites","text":"<p>Before you start, make sure you have the following tools installed:</p> <ul> <li>Node.js (version 22+ recommended)</li> <li>pnpm (package manager for monorepo workspaces)</li> <li>Git</li> <li>ngrok (optional, for exposing a public URL)</li> <li>Docker (optional, for supporting services or containerized deployment)</li> </ul>"},{"location":"development/running-locally/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/openwallet-foundation-labs/eudiplo\ncd eudiplo\n</code></pre>"},{"location":"development/running-locally/#2-install-dependencies","title":"2. Install Dependencies","text":"<p>Install all workspace dependencies:</p> <pre><code>corepack enable\npnpm install\n</code></pre> <p>This will install dependencies for all applications in the workspace.</p>"},{"location":"development/running-locally/#3-set-up-environment-variables","title":"3. Set Up Environment Variables","text":"<p>Create a <code>.env</code> file in the root of the project:</p> <pre><code>cp .env.example .env\n</code></pre> <p>Configure Python environment for documentation (optional):</p> <pre><code>pnpm run setup:python\n</code></pre> <p>To allow your wallet to interact with your service, a public HTTPS URL is required. You can use ngrok to expose your local server:</p> <p>TODO: check if it also runs in a local network when using wallets.</p> <pre><code>ngrok http 3000\n</code></pre> <p>ngrok will display a public HTTPS URL like:</p> <pre><code>https://f8e3-84-123-45-67.ngrok.io\n</code></pre> <p>Use this value in your <code>.env</code>:</p> <pre><code>PUBLIC_URL=https://f8e3-84-123-45-67.ngrok.io\n</code></pre> <p>\ud83d\udca1 The project validates your environment variables on startup using Joi. If <code>PUBLIC_URL</code> is missing or invalid, the app may fail to register with external services.</p> <p>Check out the Key Management or Database sections for more information on how to configure key storage and database options beyond the default settings.</p>"},{"location":"development/running-locally/#4-start-the-applications","title":"4. Start the Applications","text":""},{"location":"development/running-locally/#option-a-start-all-services-with-docker-compose","title":"Option A: Start All Services with Docker Compose","text":"<pre><code># Start both backend and client\ndocker compose up -d\n\n# View logs\ndocker compose logs -f\n</code></pre>"},{"location":"development/running-locally/#option-b-start-individual-applications","title":"Option B: Start Individual Applications","text":"<p>Start the Backend (NestJS API):</p> <pre><code>pnpm --filter @eudiplo/backend run start:dev\n</code></pre> <p>Start the Client (Angular UI) - in another terminal:</p> <pre><code>pnpm --filter @eudiplo/client run dev\n</code></pre> <p>Start the Webhook (for testing) - in another terminal:</p> <pre><code>pnpm --filter test-rp run dev\n</code></pre>"},{"location":"development/running-locally/#option-c-start-all-applications-locally","title":"Option C: Start All Applications Locally","text":"<pre><code># Start all applications in development mode\npnpm run dev\n</code></pre> <p>This will: - Compile and watch your TypeScript code - Reload on changes - Use your <code>.env</code> configuration for keys, database, and registrar access</p> <p>Make sure any external services (like PostgreSQL or Vault) are available, either locally or through Docker.</p>"},{"location":"development/running-locally/#5-access-the-services","title":"5. Access the Services","text":"<p>Once running, the applications are accessible at:</p> <p>Backend API: <pre><code>http://localhost:3000\n</code></pre></p> <p>Client Web Interface: <pre><code>http://localhost:4200\n</code></pre></p> <p>Or via the public URL configured with ngrok: <pre><code>https://f8e3-84-123-45-67.ngrok.io\n</code></pre></p>"},{"location":"development/running-locally/#6-troubleshooting","title":"6. Troubleshooting","text":"<ul> <li>Double-check <code>.env</code> values for typos or missing entries. Changes in the <code>.env</code>   file require a restart of the application.</li> <li>Ensure required external services (e.g. Vault, PostgreSQL) are running.</li> <li>Clear NestJS cache with <code>rm -rf dist node_modules &amp;&amp; pnpm install</code>.</li> <li>If ngrok fails, make sure port 3000 isn't blocked or already in use.</li> </ul>"},{"location":"development/running-locally/#next-steps","title":"Next Steps","text":"<ul> <li>See Key Management to configure signing   keys.</li> <li>See Database to switch database engines.</li> </ul>"},{"location":"development/testing/","title":"Testing","text":"<p>EUDIPLO is designed to be robust and easy to test both in development and CI environments. This guide outlines how to run, write, and automate tests for the project.</p> <p>The current focus is on end-to-end (E2E) tests, which verify the overall functionality of the application.</p>"},{"location":"development/testing/#e2e-tests","title":"E2E Tests","text":"<p>Right now EUDIPLO has only implemented end-to-end (E2E) tests that are stored in the <code>/test</code> folder. These tests are designed to verify the overall functionality of the application, including interactions with external services like the EUDI Wallet.</p> <p>The following command will run the E2E tests and also provide a coverage report:</p> <pre><code>pnpm run test:e2e\n</code></pre> <p>It is also accessible via codecov.</p> <p>During writing E2E tests, you can use it in watch mode to automatically re-run tests on file changes:</p> <pre><code>pnpm run test:e2e:watch\n</code></pre>"},{"location":"development/testing/#linting","title":"Linting","text":"<p>Before pushing code, check linting rules and fix them:</p> <pre><code>pnpm run lint\n</code></pre>"},{"location":"development/testing/#github-actions","title":"GitHub Actions","text":"<p>Tests run automatically on every push to <code>main</code> or pull request via GitHub Actions.</p> <p>You can find the workflow config in <code>.github/workflows/ci.yml</code>.</p>"},{"location":"development/testing/#running-tests-locally","title":"Running Tests Locally","text":"<p>To run all unit and integration tests locally:</p> <pre><code>pnpm run test\n</code></pre> <p>Or with watch mode:</p> <pre><code>pnpm run test:watch\n</code></pre> <p>This uses Vitest under the hood, which is configured for NestJS.</p>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":"<p>To check code coverage:</p> <pre><code>pnpm run test:cov\n</code></pre> <p>This generates a report in the <code>/coverage</code> folder. Open <code>coverage/index.html</code> in your browser to view it.</p>"},{"location":"development/testing/#test-structure","title":"Test Structure","text":"<p>Tests are located next to their implementation files:</p> <pre><code>src/\n  service/\n    my.service.ts\n    my.service.spec.ts  &lt;-- Test file\n</code></pre> <p>Use <code>.spec.ts</code> naming to ensure Vitest picks up the test files automatically.</p>"},{"location":"development/testing/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Keep unit tests isolated; mock dependencies using tools like <code>vitest.mock()</code>   or NestJS's testing module.</li> <li>For HTTP integration tests, use   supertest.</li> <li>For mocking external APIs (e.g., Vault or Keycloak), consider   <code>nock</code>.</li> </ul> <p>Happy testing! \ud83d\ude80</p>"},{"location":"development/versioning/","title":"Versioning &amp; Releases","text":"<p>This project follows a structured release strategy that balances stability with ongoing development.</p>"},{"location":"development/versioning/#semantic-versioning","title":"Semantic Versioning","text":"<p>We use Semantic Versioning (<code>MAJOR.MINOR.PATCH</code>) for all tagged releases.</p> <ul> <li>MAJOR \u2013 breaking changes</li> <li>MINOR \u2013 new features, backwards compatible</li> <li>PATCH \u2013 bug fixes and internal improvements</li> </ul> <p>Example: <code>1.2.3</code> means the 3<sup>rd</sup> patch release of the 2<sup>nd</sup> minor version of the 1<sup>st</sup> major version.</p>"},{"location":"development/versioning/#development-builds-from-main","title":"Development Builds from <code>main</code>","text":"<p>Every push to the <code>main</code> branch automatically builds a Docker image and publishes it with the <code>:main</code> tag.</p> <p>Use this tag for development environments:</p> <pre><code>ghcr.io/openwallet-foundation-labs/eudiplo:main\n</code></pre> <p>\u26a0\ufe0f <code>main</code> is always moving and may contain untagged or unreleased features.</p>"},{"location":"development/versioning/#stable-releases","title":"Stable Releases","text":"<p>Stable releases are published via GitHub tags and follow semantic versioning. Each release creates both a versioned tag and updates the <code>:latest</code> tag:</p> <pre><code>ghcr.io/openwallet-foundation-labs/eudiplo:1.2.3\nghcr.io/openwallet-foundation-labs/eudiplo:latest\n</code></pre> <p>The <code>:latest</code> tag always points to the most recent stable release and is recommended for production use.</p>"},{"location":"development/versioning/#pre-releases","title":"Pre-Releases","text":"<p>Optionally, pre-release tags such as <code>1.3.0-alpha.1</code> may be published for testing upcoming features:</p> <pre><code>ghcr.io/openwallet-foundation-labs/eudiplo:1.3.0-alpha.1\n</code></pre>"},{"location":"development/versioning/#release-automation","title":"Release Automation","text":"<p>Releases are managed using <code>semantic-release</code>. It:</p> <ul> <li>Analyzes commit messages</li> <li>Determines the next version</li> <li>Updates the changelog</li> <li>Publishes a GitHub release</li> <li>Pushes Docker images</li> </ul> <p>Make sure to follow the Conventional Commits specification when contributing to ensure proper versioning.</p>"},{"location":"development/versioning/#summary","title":"Summary","text":"Tag Source Use Case <code>main</code> <code>main</code> branch Development <code>latest</code> GitHub release Production (Latest) <code>x.y.z</code> (e.g. <code>1.2.3</code>) GitHub release Specific Version <code>x.y.z-alpha.N</code> GitHub pre-release Feature Preview / RC"},{"location":"development/workspace-structure/","title":"Workspace Structure","text":"<p>EUDIPLO is organized as a monorepo workspace using pnpm workspaces. This structure allows us to manage multiple related applications in a single repository while maintaining clear separation of concerns.</p>"},{"location":"development/workspace-structure/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"<pre><code>eudiplo/\n\u251c\u2500\u2500 apps/                          # Application packages\n\u2502   \u251c\u2500\u2500 backend/                   # NestJS API server\n\u2502   \u2502   \u251c\u2500\u2500 src/                   # Backend source code\n\u2502   \u2502   \u251c\u2500\u2500 test/                  # Backend tests\n\u2502   \u2502   \u251c\u2500\u2500 package.json           # Backend dependencies\n\u2502   \u2502   \u2514\u2500\u2500 Dockerfile            # Backend container definition\n\u2502   \u251c\u2500\u2500 client/                    # Angular web interface\n\u2502   \u2502   \u251c\u2500\u2500 src/                   # Client source code\n\u2502   \u2502   \u251c\u2500\u2500 package.json           # Client dependencies\n\u2502   \u2502   \u2514\u2500\u2500 Dockerfile            # Client container definition\n\u2502   \u2514\u2500\u2500 webhook/                   # Cloudflare Worker for testing\n\u2502       \u251c\u2500\u2500 src/                   # Webhook source code\n\u2502       \u2514\u2500\u2500 package.json           # Webhook dependencies\n\u251c\u2500\u2500 assets/                        # Configuration and assets\n\u251c\u2500\u2500 docs/                          # Documentation\n\u251c\u2500\u2500 deployment/                    # Docker Compose configurations\n\u251c\u2500\u2500 package.json                   # Root workspace configuration\n\u251c\u2500\u2500 pnpm-workspace.yaml           # pnpm workspace definition\n\u2514\u2500\u2500 docker-compose.yml            # Development compose file\n</code></pre>"},{"location":"development/workspace-structure/#applications","title":"\ud83c\udfd7\ufe0f Applications","text":""},{"location":"development/workspace-structure/#backend-eudiplobackend","title":"Backend (<code>@eudiplo/backend</code>)","text":"<ul> <li>Technology: NestJS with TypeScript</li> <li>Purpose: Core API server for EUDI Wallet integration</li> <li>Port: 3000</li> <li>Key Features:</li> <li>OID4VCI, OID4VP, SD-JWT VC support</li> <li>OAuth2 authentication</li> <li>Pluggable key management</li> <li>Database abstraction</li> </ul>"},{"location":"development/workspace-structure/#client-eudiploclient","title":"Client (<code>@eudiplo/client</code>)","text":"<ul> <li>Technology: Angular with TypeScript</li> <li>Purpose: Web interface for EUDIPLO management</li> <li>Port: 4200</li> <li>Key Features:</li> <li>Credential issuance configuration</li> <li>Presentation request management</li> <li>Real-time monitoring</li> <li>Admin dashboard</li> </ul>"},{"location":"development/workspace-structure/#webhook-test-rp","title":"Webhook (<code>test-rp</code>)","text":"<ul> <li>Technology: Cloudflare Worker</li> <li>Purpose: Testing relying party implementation</li> <li>Key Features:</li> <li>Webhook endpoints for testing</li> <li>Presentation verification</li> <li>Development utilities</li> </ul>"},{"location":"development/workspace-structure/#workspace-commands","title":"\ud83d\udd27 Workspace Commands","text":"<p>The workspace provides several convenient commands:</p>"},{"location":"development/workspace-structure/#development","title":"Development","text":"<pre><code># Install all dependencies\npnpm install\n\n# Start all applications\npnpm run dev\n\n# Start specific application\npnpm --filter @eudiplo/backend run start:dev\npnpm --filter @eudiplo/client run dev\npnpm --filter test-rp run dev\n</code></pre>"},{"location":"development/workspace-structure/#building","title":"Building","text":"<pre><code># Build all applications\npnpm run build\n\n# Build specific application\npnpm --filter @eudiplo/backend run build\npnpm --filter @eudiplo/client run build\n</code></pre>"},{"location":"development/workspace-structure/#testing","title":"Testing","text":"<pre><code># Test all applications\npnpm run test\n\n# Test specific application\npnpm --filter @eudiplo/backend run test\npnpm --filter @eudiplo/client run test\n</code></pre>"},{"location":"development/workspace-structure/#linting-formatting","title":"Linting &amp; Formatting","text":"<pre><code># Check code quality across workspace\npnpm run lint\npnpm run format:check\n\n# Fix issues automatically\npnpm run lint:fix\npnpm run format\n</code></pre>"},{"location":"development/workspace-structure/#docker-integration","title":"\ud83d\udc33 Docker Integration","text":"<p>Each application has its own optimized Dockerfile:</p> <ul> <li>Backend: <code>apps/backend/Dockerfile</code> - Multi-stage build with workspace support</li> <li>Client: <code>apps/client/Dockerfile</code> - Angular build with nginx serving</li> </ul> <p>The root <code>docker-compose.yml</code> orchestrates both services:</p> <pre><code># Start both services\ndocker compose up -d\n\n# Build and start\ndocker compose up -d --build\n\n# View logs\ndocker compose logs -f\n</code></pre>"},{"location":"development/workspace-structure/#dependency-management","title":"\ud83d\udce6 Dependency Management","text":"<p>The workspace uses pnpm for efficient dependency management:</p> <ul> <li>Shared dependencies are hoisted to the root <code>node_modules</code></li> <li>App-specific dependencies remain in their respective <code>node_modules</code></li> <li>Lockfile (<code>pnpm-lock.yaml</code>) ensures consistent installs across environments</li> </ul>"},{"location":"development/workspace-structure/#adding-dependencies","title":"Adding Dependencies","text":"<pre><code># Add to workspace root (shared utilities)\npnpm add dependency-name\n\n# Add to specific application\npnpm --filter @eudiplo/backend add dependency-name\npnpm --filter @eudiplo/client add dependency-name\n</code></pre>"},{"location":"development/workspace-structure/#benefits","title":"\ud83d\ude80 Benefits","text":"<p>This workspace structure provides:</p> <ol> <li>Code Sharing: Common utilities and types can be shared between applications</li> <li>Unified Tooling: Single configuration for linting, formatting, and testing</li> <li>Atomic Changes: Related changes across applications can be made in single commits</li> <li>Efficient CI/CD: Build and test processes can be optimized for the entire workspace</li> <li>Developer Experience: Single repository clone with all related code</li> </ol>"},{"location":"getting-started/monitor/","title":"Monitoring","text":"<p>This guide shows how to set up Prometheus and Grafana monitoring for EUDIPLO in both local development and Docker container scenarios.</p>"},{"location":"getting-started/monitor/#quick-start","title":"Quick Start","text":"<p>The monitoring stack includes:</p> <ul> <li>Prometheus on http://localhost:9090 - Metrics collection</li> <li>Grafana on http://localhost:3001 - Dashboards and visualization</li> </ul>"},{"location":"getting-started/monitor/#start-monitoring-stack","title":"Start Monitoring Stack","text":"<pre><code>cd monitor/\ndocker-compose up -d\n</code></pre>"},{"location":"getting-started/monitor/#local-development-setup","title":"Local Development Setup","text":"<p>When running EUDIPLO locally (outside Docker) and monitoring with Docker:</p>"},{"location":"getting-started/monitor/#1-start-eudiplo-locally","title":"1. Start EUDIPLO Locally","text":"<pre><code># Install dependencies and start EUDIPLO\nnpm install\nnpm run start:dev\n</code></pre> <p>EUDIPLO will be available at http://localhost:3000 with metrics at http://localhost:3000/metrics</p>"},{"location":"getting-started/monitor/#2-configure-prometheus-for-local-eudiplo","title":"2. Configure Prometheus for Local EUDIPLO","text":"<p>Update <code>monitor/prometheus/prometheus.yml</code>:</p> <pre><code>global:\n    scrape_interval: 15s\n\nscrape_configs:\n    - job_name: 'eudiplo-local'\n      static_configs:\n          - targets: ['host.docker.internal:3000'] # For local EUDIPLO\n      metrics_path: '/metrics'\n      scrape_interval: 30s\n</code></pre>"},{"location":"getting-started/monitor/#3-start-monitoring","title":"3. Start Monitoring","text":"<pre><code>cd monitor/\ndocker-compose up -d prometheus grafana\n</code></pre>"},{"location":"getting-started/monitor/#docker-container-setup","title":"Docker Container Setup","text":"<p>When running EUDIPLO as a Docker container:</p>"},{"location":"getting-started/monitor/#1-update-prometheus-configuration","title":"1. Update Prometheus Configuration","text":"<p>Edit <code>monitor/prometheus/prometheus.yml</code>:</p> <pre><code>global:\n    scrape_interval: 15s\n\nscrape_configs:\n    - job_name: 'eudiplo-docker'\n      static_configs:\n          - targets: ['eudiplo:3000'] # For Docker container\n      metrics_path: '/metrics'\n      scrape_interval: 30s\n</code></pre>"},{"location":"getting-started/monitor/#2-add-eudiplo-to-docker-compose","title":"2. Add EUDIPLO to Docker Compose","text":"<p>Add to <code>monitor/docker-compose.yml</code>:</p> <pre><code>services:\n    eudiplo:\n        image: eudiplo/eudiplo:latest\n        ports:\n            - '3000:3000'\n        environment:\n            - NODE_ENV=development\n            - PUBLIC_URL=http://localhost:3000\n        networks:\n            - monitoring\n\n    prometheus:\n        # ... existing config\n\nnetworks:\n    monitoring:\n        driver: bridge\n</code></pre>"},{"location":"getting-started/monitor/#3-start-full-stack","title":"3. Start Full Stack","text":"<pre><code>cd monitor/\ndocker-compose up -d\n</code></pre>"},{"location":"getting-started/monitor/#key-metrics","title":"Key Metrics","text":"<p>EUDIPLO exposes these important metrics:</p>"},{"location":"getting-started/monitor/#business-metrics","title":"Business Metrics","text":"<ul> <li><code>sessions</code> - Active, completed, and failed sessions</li> </ul> <p>More values will be added as the project evolves.</p>"},{"location":"getting-started/monitor/#access-dashboards","title":"Access Dashboards","text":"<ol> <li> <p>Prometheus: http://localhost:9090</p> <ul> <li>View metrics and run queries</li> <li>Check targets status at <code>/targets</code></li> </ul> </li> <li> <p>Grafana: http://localhost:3001</p> <ul> <li>Username: <code>admin</code></li> <li>Password: <code>admin</code></li> <li>Import or create dashboards</li> </ul> </li> </ol>"},{"location":"getting-started/monitor/#configuration-files","title":"Configuration Files","text":""},{"location":"getting-started/monitor/#prometheus-prometheusprometheusyml","title":"Prometheus (<code>prometheus/prometheus.yml</code>)","text":"<pre><code>global:\n    scrape_interval: 15s\n\nscrape_configs:\n    - job_name: 'eudiplo'\n      static_configs:\n          - targets: ['host.docker.internal:3000'] # Local\n          # - targets: ['eudiplo:3000']             # Docker\n      scrape_interval: 30s\n</code></pre>"},{"location":"getting-started/monitor/#grafana-data-source","title":"Grafana Data Source","text":"<p>Grafana is pre-configured with Prometheus as data source at <code>http://prometheus:9090</code>.</p>"},{"location":"getting-started/monitor/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/monitor/#common-issues","title":"Common Issues","text":"<p>Prometheus can't reach EUDIPLO:</p> <pre><code># Check if metrics endpoint is accessible\ncurl http://localhost:3000/metrics\n\n# For local development, verify host.docker.internal works\ndocker run --rm appropriate/curl curl -I http://host.docker.internal:3000/metrics\n</code></pre> <p>No data in Grafana:</p> <ul> <li>Check Prometheus targets: http://localhost:9090/targets</li> <li>Verify time range in Grafana dashboards</li> <li>Ensure Prometheus data source is configured</li> </ul> <p>Container issues:</p> <pre><code># Check logs\ndocker-compose logs prometheus\ndocker-compose logs grafana\n\n# Restart services\ndocker-compose restart\n</code></pre>"},{"location":"getting-started/monitor/#production-considerations","title":"Production Considerations","text":"<p>For production deployments:</p> <ol> <li>Security: Change default Grafana password</li> <li>Retention: Configure appropriate data retention</li> <li>Backup: Set up regular backups of Grafana dashboards</li> <li>Alerting: Configure alertmanager for notifications</li> <li>Resources: Monitor resource usage and scale accordingly</li> </ol> <p>Warning</p> <p>The endpoint for <code>/metrics</code> is not protected yet. So for now run the prometheus in the same network as the EUDIPLO instance. Authentication mechanisms will be added in the future.</p>"},{"location":"getting-started/monitor/#clean-up","title":"Clean Up","text":"<pre><code># Stop monitoring stack\ndocker-compose down\n\n# Remove volumes (deletes all data)\ndocker-compose down -v\n</code></pre>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get EUDIPLO running in under 2 minutes! This guide gets you from zero to issuing your first credential.</p> <p>New to EUDIPLO?</p> <p>This is the fastest path to see EUDIPLO working. For production setup and advanced configuration, see the Architecture and API sections.</p>"},{"location":"getting-started/quick-start/#what-youll-need","title":"What You'll Need","text":"<ul> <li>Docker installed</li> <li>2 minutes of your time \u23f1\ufe0f</li> </ul>"},{"location":"getting-started/quick-start/#step-1-choose-your-setup","title":"Step 1: Choose Your Setup","text":"<p>Choose how you want to run EUDIPLO:</p> \ud83d\udda5\ufe0f Full Setup (Web Client + API)\u26a1 API-Only Setup <p>For users who want the web interface:</p> <pre><code># Start the backend\ndocker run -d \\\n  --name eudiplo \\      \n  -p 3000:3000 \\\n  ghcr.io/openwallet-foundation-labs/eudiplo:latest\n\n# Start the web client\ndocker run -d \\\n  --name eudiplo-client \\      \n  -p 4200:80 \\      \n  ghcr.io/openwallet-foundation-labs/eudiplo-client:latest\n</code></pre> <p>For users who only need the API:</p> <pre><code># Run EUDIPLO backend only\ndocker run -d \\\n  --name eudiplo \\\n  -p 3000:3000 \\\n  ghcr.io/openwallet-foundation-labs/eudiplo:latest\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-verify-its-working","title":"Step 2: Verify It's Working","text":"<p>Check health:</p> <pre><code>curl http://localhost:3000/health\n</code></pre> <p>Expected response:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"info\": {\n        \"database\": { \"status\": \"up\" }\n    },\n    \"errors\": {}\n}\n</code></pre>"},{"location":"getting-started/quick-start/#step-3-choose-your-interface","title":"Step 3: Choose Your Interface","text":"<p>EUDIPLO provides two ways to interact with the system:</p> \ud83d\udda5\ufe0f Web Client (Recommended for beginners)\ud83d\udd27 Swagger API (For developers) <p>Open the Web Interface: </p> <ul> <li>If you used Full Setup: http://localhost:4200</li> <li>If you used API-Only Setup: Not available (web client not started)</li> </ul> <p>The web client provides a user-friendly interface for:</p> <ul> <li>\ud83d\udccb Managing credential templates</li> <li>\ud83c\udfab Issuing credentials to wallets</li> <li>\u2705 Verifying credential presentations</li> <li>\ud83d\udcca Viewing system status</li> </ul> <p>Perfect for first-time users</p> <p>The web client is the easiest way to understand EUDIPLO's capabilities without needing API knowledge.</p> <p>Web Client Requires Full Setup</p> <p>To use the web client, make sure you chose the \"Full Setup\" option in Step 1.</p> <p>Open the API Documentation: http://localhost:3000/api</p> <p>The Swagger UI provides direct API access for:</p> <ul> <li>\ud83d\udd0c Integration testing</li> <li>\ud83d\udcd6 API documentation exploration</li> <li>\u26a1 Advanced automation workflows</li> <li>\ud83e\uddea Direct endpoint testing</li> </ul>"},{"location":"getting-started/quick-start/#step-4-get-started","title":"Step 4: Get Started","text":"<p>Choose your preferred approach:</p> \ud83d\udda5\ufe0f Using the Web Client\ud83d\udd27 Using the Swagger API <ol> <li>Open: http://localhost:4200 (if you used Full Setup)</li> <li>Log in with the default credentials:<ul> <li>EUDIPLO Instance: <code>http://localhost:3000</code></li> <li>Authentication Server: <code>http://localhost:3000</code></li> <li>Client ID: <code>root</code></li> <li>Client Secret: <code>root</code></li> </ul> </li> <li>Explore the dashboard to see:<ul> <li>Available credential templates        </li> <li>Quick action buttons for common tasks</li> </ul> </li> </ol> <p>You're ready!</p> <p>The web interface will guide you through issuing your first credential with step-by-step instructions.</p> <p>Learn More</p> <p>For detailed web client features and workflows, see the Web Client Guide.</p>"},{"location":"getting-started/quick-start/#authenticate-via-swagger-ui","title":"Authenticate via Swagger UI","text":"<ol> <li>Open the API Documentation: http://localhost:3000/api</li> <li>Click the \"Authorize\" button (\ud83d\udd13 lock icon) in the top-right</li> <li>Enter your credentials:<ul> <li>Client ID: <code>root</code></li> <li>Client Secret: <code>root</code></li> </ul> </li> <li>Click \"Authorize\" and then \"Close\"</li> </ol> <p>You're now authenticated! The \ud83d\udd13 icon should change to \ud83d\udd12 (locked).</p>"},{"location":"getting-started/quick-start/#test-your-first-api-call","title":"Test Your First API Call","text":"<ol> <li>Find the \"Issuer Management\" section in Swagger UI</li> <li>Expand <code>/issuer-management/credentials</code> \u2192 GET</li> <li>Click \"Try it out\" \u2192 \"Execute\"</li> </ol> <p>You should see a successful response with available credential templates!</p>"},{"location":"getting-started/quick-start/#success","title":"Success!","text":"<p>EUDIPLO is now running and ready for credential issuance and verification.</p>"},{"location":"getting-started/quick-start/#whats-next","title":"What's Next?","text":"\ud83d\udda5\ufe0f Web Client Users <ul> <li>\ud83c\udfab Issue Your First Credential - Use the web interface to create and send credentials to wallets</li> <li>\ud83d\udd0d Verify Credentials - Set up verification flows through the web UI</li> <li>\ud83d\udccb Manage Templates - Create custom credential templates for your use case</li> <li>\ud83d\udcca Monitor Activity - Track credential issuance and verification through the dashboard</li> </ul> \ud83d\udd27 API Users <ul> <li>\ud83c\udfab Issue Your First Credential - Learn credential issuance flows</li> <li>\ud83d\udd0d Verify Credentials - Set up credential verification</li> <li>\ud83d\udd0c API Integration - Integrate EUDIPLO into your applications</li> <li>\ud83d\udcd6 API Authentication - External OIDC, multi-tenant setup</li> </ul>"},{"location":"getting-started/quick-start/#common-next-steps","title":"Common Next Steps","text":"<ul> <li>\u2699\ufe0f Production Setup - Deploy for production use</li> <li>\ud83d\udd10 Security Configuration - Replace default credentials</li> <li>\ud83c\udfd7\ufe0f Architecture Overview - Understand system design</li> </ul>"},{"location":"getting-started/quick-start/#clean-up","title":"Clean Up","text":"<p>When you're done experimenting:</p> <p>For Full Setup users: <pre><code>docker stop eudiplo eudiplo-client\ndocker rm eudiplo eudiplo-client\n</code></pre></p> <p>For API-Only Setup users: <pre><code>docker stop eudiplo &amp;&amp; docker rm eudiplo\n</code></pre></p>"},{"location":"getting-started/registrar/","title":"Registrar","text":"<p>To interact with an EUDI Wallet, two types of certificates are required:</p> <ul> <li>Access Certificate \u2013 Grants access to the EUDI Wallet.</li> <li>Registration Certificate \u2013 Authorizes data requests from the EUDI Wallet.</li> </ul> <p>You can still use EUDIPLO without these certificates, but it can end up into warnings when making requests to the EUDI Wallet.</p>"},{"location":"getting-started/registrar/#registrar-settings","title":"Registrar Settings","text":"<p>These values are used to request access and registration certificates from the Registrar.</p> Variable Description <code>REGISTRAR_URL</code> URL of the registrar <p>Used to authenticate against the Registrar using any OIDC-compliant provider.</p> Variable Description <code>REGISTRAR_OIDC_URL</code> OIDC URL (e.g., https://auth.example.com/realms/myrealm) <code>REGISTRAR_OIDC_CLIENT_ID</code> Client ID as configured in the OIDC provider <code>REGISTRAR_OIDC_CLIENT_SECRET</code> Secret associated with the OIDC client"},{"location":"getting-started/registrar/#example-configurations","title":"Example Configurations","text":"<p>Keycloak:</p> <pre><code>REGISTRAR_OIDC_URL=https://keycloak.example.com/realms/registrar\nREGISTRAR_OIDC_CLIENT_ID=eudiplo-client\nREGISTRAR_OIDC_CLIENT_SECRET=your-client-secret\n</code></pre>"},{"location":"getting-started/registrar/#accessing-the-registrar","title":"Accessing the Registrar","text":"<p>To enable EUDIPLO to communicate with the registrar, you must configure the necessary environment variables.</p> <p>On startup, EUDIPLO checks whether a Relying Party (RP) is already registered using the <code>config/registrar.json</code> file. If no ID is specified, EUDIPLO will automatically register a new Relying Party with the registrar using the <code>RP_NAME</code> value.</p>"},{"location":"getting-started/registrar/#access-certificate","title":"Access Certificate","text":"<p>At startup, EUDIPLO checks for a valid access certificate based on the <code>accessCertificateId</code> in <code>config/registrar.json</code>. If no valid certificate is found, a new one will be requested from the registrar and bound to the <code>CREDENTIAL_ISSUER</code> URL. The resulting certificate ID will then be stored in <code>config/registrar.json</code>.</p>"},{"location":"getting-started/registrar/#registration-certificate","title":"Registration Certificate","text":"<p>The registration certificate is required to request data from the EUDI Wallet. Each configuration file in the <code>config/presentation</code> folder defines the payload for the corresponding registration certificate.</p> <p>Since registration certificates are tied to specific presentation types, they are managed within the individual presentation configuration files\u2014not in <code>config/registrar.json</code>. If no certificate ID is specified in a presentation config, a new registration certificate will be requested automatically when a presentation request is made.</p>"},{"location":"getting-started/wallet-compatibility/","title":"Wallet Compatibility","text":"<p>EUDIPLO is designed to work with EUDI-compliant wallets that implement the supported protocols (OID4VCI, OID4VP, and SD-JWT VC).</p> <p>This page provides information about tested wallets, compatibility status, and guidance for testing new wallets with EUDIPLO.</p>"},{"location":"getting-started/wallet-compatibility/#officially-tested-wallets","title":"Officially Tested Wallets","text":"<p>The following wallets have been officially tested and verified to work with EUDIPLO:</p> Wallet Reported Version Status Contributor Last Updated None reported yet - - - -"},{"location":"getting-started/wallet-compatibility/#community-verified-wallets","title":"Community-Verified Wallets","text":"<p>These wallets have been reported as compatible by community members:</p> Wallet Reported Version Status Contributor Last Updated None reported yet - - - - <p>Help us expand this list!</p> <p>If you have successfully tested EUDIPLO with a wallet not listed here, please reach out to us so we can add it to this list.</p>"},{"location":"getting-started/wallet-compatibility/#compatibility-requirements","title":"Compatibility Requirements","text":"<p>For a wallet to be compatible with EUDIPLO, it must support:</p>"},{"location":"getting-started/wallet-compatibility/#issuance-flow-oid4vci","title":"Issuance Flow (OID4VCI)","text":"<ul> <li>\u2705 Authorization Code Flow</li> <li>\u2705 Pre-authorized Code Flow</li> <li>\u2705 SD-JWT VC format</li> <li>\u2705 Proof of possession (DPoP or client attestation)</li> </ul>"},{"location":"getting-started/wallet-compatibility/#presentation-flow-oid4vp","title":"Presentation Flow (OID4VP)","text":"<ul> <li>\u2705 Authorization Request via deep link or QR code</li> <li>\u2705 VP Token submission</li> <li>\u2705 Selective disclosure of SD-JWT VC claims</li> <li>\u2705 Response mode <code>direct_post</code></li> </ul>"},{"location":"getting-started/wallet-compatibility/#general-requirements","title":"General Requirements","text":"<ul> <li>\u2705 HTTPS endpoints support</li> <li>\u2705 JSON Web Token (JWT) handling</li> <li>\u2705 Cryptographic key management (ES256, EdDSA)</li> </ul>"},{"location":"getting-started/wallet-compatibility/#known-compatibility-issues","title":"Known Compatibility Issues","text":""},{"location":"getting-started/wallet-compatibility/#common-issues","title":"Common Issues","text":"<ul> <li>Deep Link Handling: Some wallets may have different URL scheme   requirements</li> <li>Certificate Validation: Strict certificate chain validation may require   proper CA setup</li> <li>Timeout Handling: Different wallets may have varying timeout expectations</li> </ul>"},{"location":"getting-started/wallet-compatibility/#workarounds","title":"Workarounds","text":"<p>Most compatibility issues can be resolved through:</p> <ul> <li>Proper SSL certificate configuration</li> <li>Adjusting timeout values in EUDIPLO configuration</li> <li>Using appropriate redirect URIs for the wallet's URL scheme</li> </ul>"},{"location":"getting-started/wallet-compatibility/#testing-new-wallets","title":"Testing New Wallets","text":"<p>If you want to test EUDIPLO with a new wallet, follow these steps:</p>"},{"location":"getting-started/wallet-compatibility/#1-setup-test-environment","title":"1. Setup Test Environment","text":"<pre><code># Run EUDIPLO with proper HTTPS endpoint\ndocker run -p 3000:3000 \\\n  -e PUBLIC_URL=https://your-domain.com \\\n  -e JWT_SECRET=your-secret-key-here-minimum-32-characters \\\n  ghcr.io/openwallet-foundation-labs/eudiplo:latest\n</code></pre>"},{"location":"getting-started/wallet-compatibility/#2-test-credential-issuance","title":"2. Test Credential Issuance","text":"<ol> <li>Configure a test credential template</li> <li>Initiate issuance flow via API</li> <li>Complete the flow in your wallet</li> <li>Verify credential is stored correctly</li> </ol>"},{"location":"getting-started/wallet-compatibility/#3-test-credential-presentation","title":"3. Test Credential Presentation","text":"<ol> <li>Create a presentation request</li> <li>Generate QR code or deep link</li> <li>Present credential from wallet</li> <li>Verify presentation is received and validated</li> </ol>"},{"location":"getting-started/wallet-compatibility/#4-document-results","title":"4. Document Results","text":"<p>Please document:</p> <ul> <li>Wallet name and version</li> <li>Test results (success/failure)</li> <li>Any configuration adjustments needed</li> <li>Error messages or issues encountered</li> </ul>"},{"location":"getting-started/wallet-compatibility/#contributing-compatibility-information","title":"Contributing Compatibility Information","text":""},{"location":"getting-started/wallet-compatibility/#reporting-compatible-wallets","title":"Reporting Compatible Wallets","text":"<p>If you have successfully tested a wallet with EUDIPLO:</p> <ol> <li>Create an Issue: Open a    new issue    on GitHub</li> <li>Use Template: Select the \"Wallet Compatibility Report\" template</li> <li>Provide Details: Include wallet name, version, test results, and any    configuration notes</li> <li>Screenshots: Attach screenshots of successful flows if possible</li> </ol>"},{"location":"getting-started/wallet-compatibility/#reporting-issues","title":"Reporting Issues","text":"<p>If you encounter compatibility problems:</p> <ol> <li>Check Known Issues: Review the section above first</li> <li>Gather Information: Collect logs, error messages, and configuration    details</li> <li>Create Bug Report: Open an issue with detailed reproduction steps</li> <li>Community Support: Ask for help in our    Discord community</li> </ol>"},{"location":"getting-started/wallet-compatibility/#version-compatibility-matrix","title":"Version Compatibility Matrix","text":"EUDIPLO Version Protocol Versions Notes 1.x.x OID4VCI draft-15, OID4VP draft-24, SD-JWT VC draft-08 Current stable Latest (main) Latest draft versions Development version <p>Protocol Evolution</p> <p>EUDI wallet protocols are still evolving. Compatibility may change as new protocol versions are adopted. We track the latest specifications and update EUDIPLO accordingly.</p>"},{"location":"getting-started/wallet-compatibility/#need-help","title":"Need Help?","text":"<ul> <li>\ud83d\udcd6 Documentation: Check our   Getting Started guide</li> <li>\ud83d\udc1b Issues: Report problems on   GitHub Issues</li> <li>\ud83d\udcac Community: Join our Discord server</li> <li>\ud83d\udce7 Contact: Reach out to the EUDIPLO team through GitHub discussions</li> </ul>"},{"location":"getting-started/web-client/","title":"Web Client","text":"<p>EUDIPLO provides a user-friendly web interface for credential management\u2014no API expertise required. Simply enter your instance URL and credentials to get started. There's no need to deploy a separate client for each instance.</p> <p>There is no need to use the client to interact with EUDIPLO, but it offers a more intuitive way to manage the configurations.</p>"},{"location":"getting-started/web-client/#getting-started","title":"Getting Started","text":""},{"location":"getting-started/web-client/#accessing-the-web-client","title":"Accessing the Web Client","text":"<p>After completing the Full Setup:</p> <ol> <li>Open your browser and go to: http://localhost:4200</li> <li>Login using the default credentials:</li> <li>Username: <code>root</code></li> <li>Password: <code>root</code></li> </ol> <p>Important: Change the default credentials before using EUDIPLO in production. See Authentication for details.</p>"},{"location":"getting-started/web-client/#dashboard-overview","title":"Dashboard Overview","text":"<p>The dashboard offers:</p> <ul> <li>Quick Actions: One-click access to common tasks</li> <li>Statistics: Usage metrics and activity summaries (coming soon)</li> </ul>"},{"location":"getting-started/web-client/#core-features","title":"Core Features","text":""},{"location":"getting-started/web-client/#credential-issuance-management","title":"\ud83c\udfab Credential Issuance Management","text":"<ul> <li>Create, edit, import, or delete credential and issuance configurations</li> <li>Import keys and certificates, and link them to configurations</li> </ul>"},{"location":"getting-started/web-client/#credential-verification","title":"\u2705 Credential Verification","text":"<ul> <li>Manage verification flows</li> <li>Create, edit, import, or delete verification configurations</li> </ul>"},{"location":"getting-started/web-client/#session-management","title":"\ud83d\udccb Session Management","text":"<ul> <li>View and manage active issuance and verification sessions</li> <li>Inspect session details, including parameters</li> </ul>"},{"location":"getting-started/web-client/#client-management","title":"\ud83e\uddd1\u200d\ud83d\udcbc Client Management","text":"<ul> <li>Create new tenants with client ID and secret (Keycloak only)</li> <li>Not supported for other identity providers or when using EUDIPLO as IAM yet</li> </ul>"},{"location":"getting-started/web-client/#configuration-editing-validation","title":"Configuration Editing &amp; Validation","text":"<p>The web client is designed for intuitive and robust configuration management:</p> <ul> <li>Data Model &amp; Validation: The EUDIPLO service uses decorators on data transfer objects (DTOs) and entities to describe variables and their values, enabling server-side validation.</li> <li>OpenAPI Specification: An OpenAPI spec is generated from these DTOs and entities, providing a standardized interface for backend interaction.</li> <li>SDK Integration: The web client uses an SDK generated from the OpenAPI spec for seamless and type-safe communication with the backend.</li> <li> <p>Editing Experience:</p> </li> <li> <p>Simple variables (strings, numbers, booleans) are edited via text inputs, select options, or checkboxes.</p> </li> <li> <p>Complex data structures are managed using an integrated JSON editor (Monaco Editor), which leverages JSON schemas for each variable.</p> </li> <li> <p>Client-Side Validation &amp; Guidance: The JSON editor uses the provided JSON schemas to offer inline descriptions, auto-completion, and validation directly in the browser.</p> </li> <li>Direct JSON Access: Each configuration can be viewed and edited as raw JSON for advanced use cases.</li> </ul>"},{"location":"getting-started/web-client/#next-steps","title":"Next Steps","text":"<ul> <li>API Documentation: For programmatic integration</li> <li>Configuration: Advanced setup options</li> <li>Architecture: System</li> </ul>"},{"location":"getting-started/issuance/","title":"Configuring Credential Issuance Flows","text":"<p>Issuance flow files define how a credential should be generated, signed, and formatted. EUDIPLO uses a tenant-based architecture where each tenant has isolated configuration.</p> <p>The issuance system uses a two-layer configuration approach:</p> <ol> <li>Credential Configurations - Define the structure, format, and metadata of    individual credentials</li> <li>Issuance Configurations - Define which credentials to issue together and    authentication requirements</li> </ol> <p>Both configurations have a many-to-many relationship, which means a defined credential can be used in multiple issuance configurations.</p>"},{"location":"getting-started/issuance/#api-endpoints","title":"API Endpoints","text":"<p>The system uses two separate endpoints for the two-layer configuration:</p>"},{"location":"getting-started/issuance/#credential-configurations","title":"Credential Configurations","text":"<p>To manage individual credential configurations, use the <code>/issuer-management/credentials</code> endpoint. This endpoint handles the definition of credential types, their formats, claims, and display properties.</p>"},{"location":"getting-started/issuance/#issuance-configurations","title":"Issuance Configurations","text":"<p>To manage issuance flows (which credentials to issue together and authentication requirements), use the <code>/issuer-management/issuance</code> endpoint. This endpoint handles grouping credentials and defining authorizations or webhooks.</p> <p>Based on your passed JWT, both endpoints will be scoped to the tenant ID of the token. The configurations are internally stored in a database.</p>"},{"location":"getting-started/issuance/#creating-credential-offers","title":"Creating Credential Offers","text":"<p>Via the <code>/issuer-management/offer</code> endpoint you can start the issuance flow for a specific issuance configuration. The credential offer process works as follows:</p> <ol> <li>Provide an <code>issuanceId</code> - This specifies which issuance configuration to    use as the base</li> <li>Optionally override credentials - Use <code>credentialConfigurationIds</code> to    override which specific credentials are issued</li> <li>Optionally override claims - Use the <code>values</code> parameter to provide custom    claims for specific credentials</li> </ol> <p>The issuance configuration defines the default credentials to issue and authentication requirements, but these can be customized per offer.</p>"},{"location":"getting-started/issuance/#credential-issuance-flow","title":"Credential Issuance Flow","text":"<p>This flow describes how a backend service starts an issuance flow of an attestation. EUDIPLO creates the OID4VCI request and handles the protocol flow with the wallet. It also shows the interactions with webhooks when they are configured.</p> <pre><code>sequenceDiagram\n    autonumber\n    actor Wallet as EUDI Wallet\n    participant EUDIPLO as Middleware\n    participant Service as End Service (with Webhooks)\n\n    Service-&gt;&gt;EUDIPLO: Request OID4VCI issuance offer\n    EUDIPLO--&gt;&gt;Service: Return credential offer link\n    Service-&gt;&gt;Wallet: Present offer link to user\n\n    Wallet-&gt;&gt;EUDIPLO: Authorization Request (auth / pre-auth)\n    note over EUDIPLO: Validate request, locate credential config\n\n    alt Claims webhook configured\n        EUDIPLO-&gt;&gt;Service: Fetch claims dynamically (claims webhook)\n        Service--&gt;&gt;EUDIPLO: Claims response (JSON)\n    else No webhook\n        note over EUDIPLO: Use claims from Offer or static configuration\n    end\n\n    EUDIPLO-&gt;&gt;EUDIPLO: Create credential with claims\n    EUDIPLO--&gt;&gt;Wallet: Return issued credential\n\n    Wallet-&gt;&gt;EUDIPLO: Sending notification\n\n    opt Notification webhook configured\n        EUDIPLO-&gt;&gt;Service: Notify status (accepted / denied)\n        Service--&gt;&gt;EUDIPLO: 2xx ACK\n    end</code></pre>"},{"location":"getting-started/issuance/#documentation-structure","title":"Documentation Structure","text":"<p>This issuance documentation is organized into the following sections:</p> <ul> <li>Credential Configuration - Learn how to   define individual credential types, their structure, claims, and display   properties</li> <li>Advanced Features - Explore key binding, status   management, expiration, and advanced key management</li> <li>Authentication Flows - Configure different   authentication methods for issuance flows</li> <li>API Guide - Step-by-step API usage with examples and curl   commands</li> <li>Revocation - Manage credential revocation and status   lists</li> </ul>"},{"location":"getting-started/issuance/#quick-start","title":"Quick Start","text":"<p>For a quick start, follow these steps:</p> <ol> <li>Create a credential configuration - Define your credential type using the    Credential Configuration guide</li> <li>Create an issuance configuration - Set up authentication and grouping    using the API Guide</li> <li>Issue credentials - Start the issuance flow by creating credential offers</li> </ol> <p>For advanced features like key binding, status management, or expiration, see the Advanced Features section.</p>"},{"location":"getting-started/issuance/#passing-claims","title":"Passing Claims","text":"<p>EUDIPLO provides three methods to pass claims (data) for credentials during issuance. Understanding these methods and their priority order is crucial for designing your issuance flows effectively.</p>"},{"location":"getting-started/issuance/#priority-order","title":"Priority Order","text":"<p>Claims are resolved in the following priority order (highest to lowest):</p> <ol> <li>Webhook Response - Dynamic claims from webhook endpoints</li> <li>Credential Offer Values - Claims passed during offer creation</li> <li>Static Claims - Default claims defined in credential configuration</li> </ol> <p>Info</p> <p>Higher priority sources completely override lower priority sources - claims are not merged between different sources.</p>"},{"location":"getting-started/issuance/#1-webhook-response-highest-priority","title":"1. Webhook Response (Highest Priority)","text":"<p>Webhooks allow you to dynamically generate claims based on authentication context or external data sources. This is the most flexible approach for personalized credentials.</p> <p>Current Support: Presentation during issuance flows only (future Enhancement: General webhook support planned)</p> <p>Learn More About Presentation During Issuance</p> <p>For detailed information about presentation during issuance workflows:</p> <ul> <li>Authentication Guide - Configuration and setup</li> <li>API Guide - Implementation examples and webhook payloads</li> <li>Presentation Documentation - Flow diagrams and use cases</li> <li>Webhooks Architecture - Technical details</li> </ul> <p>When to use:</p> <ul> <li>Dynamic claims based on user authentication</li> <li>Claims from external systems or databases</li> <li>Personalized credentials requiring real-time data</li> </ul> <p>Example webhook response:</p> <pre><code>{\n  \"pid\": {\n    \"given_name\": \"Max\",\n    \"family_name\": \"Mustermann\",\n    \"birthdate\": \"1990-01-01\",\n    \"issuing_country\": \"DE\"\n  }\n}\n</code></pre>"},{"location":"getting-started/issuance/#2-credential-offer-values-medium-priority","title":"2. Credential Offer Values (Medium Priority)","text":"<p>Pass claims directly when creating a credential offer. This is ideal for scenarios where the issuing service has the required data at offer creation time.</p> <p>When to use:</p> <ul> <li>Claims known at offer creation time</li> <li>Overriding specific static claims for individual issuances</li> <li>Customizing credentials per recipient</li> </ul> <p>Example API request:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/issuer-management/offer' \\\n  -H 'Authorization: Bearer your-jwt-token' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"issuanceId\": \"employee-onboarding\",\n    \"response_type\": \"uri\",\n    \"claims\": {\n      \"pid\": {\n        \"given_name\": \"Max\",\n        \"family_name\": \"Mustermann\",\n        \"employee_id\": \"EMP12345\",\n        \"department\": \"Engineering\"\n      }\n    }\n  }'\n</code></pre>"},{"location":"getting-started/issuance/#3-static-claims-lowest-priority","title":"3. Static Claims (Lowest Priority)","text":"<p>Define default claims directly in the credential configuration. These serve as fallback values when no higher priority source provides claims.</p> <p>When to use:</p> <ul> <li>Default values for all credentials of this type</li> <li>Fixed metadata (e.g., issuing country, authority)</li> <li>Development and testing scenarios</li> </ul> <p>Example in credential configuration:</p> <pre><code>{\n  \"id\": \"pid\",\n  \"format\": \"vc+sd-jwt\",\n  \"claims\": {\n    \"issuing_country\": \"DE\",\n    \"issuing_authority\": \"Federal Government\",\n    \"credential_type\": \"PersonalID\"\n  }\n}\n</code></pre>"},{"location":"getting-started/issuance/#no-claims-scenario","title":"No Claims Scenario","text":"<p>If no claims are provided through any of the three methods, the credential will be issued with an empty claims set. While technically valid, this is rarely useful in practice.</p>"},{"location":"getting-started/issuance/#best-practices","title":"Best Practices","text":"<ul> <li>Combine methods strategically: Use static claims for fixed metadata, offer values for known recipient data, and webhooks for dynamic personalization</li> <li>Test priority behavior: Ensure you understand which claims source will be used in your specific scenario</li> <li>Validate claim completeness: Verify that all required claims are provided through at least one method</li> </ul>"},{"location":"getting-started/issuance/#display-configuration","title":"Display Configuration","text":"<p>TODO: needs to be updated</p> <p>This display information gets included into the credential issuer metadata.</p> <p><code>&lt;PUBLIC_URL&gt;</code> will be dynamically replaced at runtime with your public URL together with the tenant ID.</p>"},{"location":"getting-started/issuance/advanced-features/","title":"Advanced Credential Features","text":"<p>This guide covers the advanced features available in EUDIPLO credential configurations, including cryptographic key binding, status management, and credential expiration.</p>"},{"location":"getting-started/issuance/advanced-features/#cryptographic-key-binding","title":"Cryptographic Key Binding","text":"<p>Cryptographic key binding ensures that a credential can only be used by the holder who possesses the corresponding private key. This is enabled through the <code>keyBinding</code> configuration option.</p>"},{"location":"getting-started/issuance/advanced-features/#configuration","title":"Configuration","text":"<pre><code>{\n    \"config\": {\n        \"format\": \"dc+sd-jwt\",\n        \"display\": [\n            {\n                \"name\": \"Secure Credential\",\n                \"description\": \"Cryptographically bound credential\"\n            }\n        ]\n    },\n    \"keyBinding\": true,\n    \"claims\": {\n        \"given_name\": \"ERIKA\",\n        \"family_name\": \"MUSTERMANN\"\n    }\n}\n</code></pre>"},{"location":"getting-started/issuance/advanced-features/#how-it-works","title":"How It Works","text":"<p>When <code>keyBinding</code> is enabled:</p> <ul> <li>The credential includes a <code>cnf</code> (confirmation) claim containing the holder's   public key</li> <li>During credential request, the holder must provide a proof of possession of   their private key</li> <li>The resulting credential can only be presented by the holder who has the   private key</li> </ul>"},{"location":"getting-started/issuance/advanced-features/#use-cases","title":"Use Cases","text":"<ul> <li>High-value credentials (identity documents, diplomas, licenses)</li> <li>Credentials requiring strong authentication</li> <li>Preventing credential theft or unauthorized use</li> </ul>"},{"location":"getting-started/issuance/advanced-features/#status-management-and-revocation","title":"Status Management and Revocation","text":"<p>Status management allows credentials to be revoked or suspended using OAuth Token Status Lists. This is controlled by the <code>statusManagement</code> configuration option.</p>"},{"location":"getting-started/issuance/advanced-features/#configuration_1","title":"Configuration","text":"<pre><code>{\n    \"config\": {\n        \"format\": \"dc+sd-jwt\",\n        \"display\": [\n            {\n                \"name\": \"Revocable Credential\",\n                \"description\": \"Credential with revocation support\"\n            }\n        ]\n    },\n    \"statusManagement\": true,\n    \"claims\": {\n        \"given_name\": \"ERIKA\",\n        \"family_name\": \"MUSTERMANN\"\n    }\n}\n</code></pre>"},{"location":"getting-started/issuance/advanced-features/#how-it-works_1","title":"How It Works","text":"<p>When <code>statusManagement</code> is enabled:</p> <ul> <li>Each issued credential includes a <code>status</code> claim with a reference to a status   list</li> <li>The status list tracks the revocation state of individual credentials</li> <li>The status list is provided by the service and can be fetched by verifiers</li> <li>Credentials can be revoked using the <code>/session/revoke</code> endpoint</li> <li>The status list is updated immediately upon revocation</li> </ul>"},{"location":"getting-started/issuance/advanced-features/#benefits","title":"Benefits","text":"<ul> <li>Real-time revocation capability</li> <li>Standards-compliant status tracking</li> <li>Verifiers can check credential validity</li> <li>Granular control over credential lifecycle</li> </ul>"},{"location":"getting-started/issuance/advanced-features/#credential-expiration","title":"Credential Expiration","text":"<p>Credential expiration allows setting a specific lifetime for credentials using the <code>lifeTime</code> configuration option (specified in seconds).</p>"},{"location":"getting-started/issuance/advanced-features/#configuration_2","title":"Configuration","text":"<pre><code>{\n    \"config\": {\n        \"format\": \"dc+sd-jwt\",\n        \"display\": [\n            {\n                \"name\": \"Temporary Credential\",\n                \"description\": \"Time-limited credential\"\n            }\n        ]\n    },\n    \"lifeTime\": 3600,\n    \"claims\": {\n        \"given_name\": \"ERIKA\",\n        \"family_name\": \"MUSTERMANN\"\n    }\n}\n</code></pre>"},{"location":"getting-started/issuance/advanced-features/#how-it-works_2","title":"How It Works","text":"<p>When <code>lifeTime</code> is specified:</p> <ul> <li>The credential includes an <code>exp</code> (expiration) claim</li> <li>The expiration time is calculated as: <code>iat</code> (issued at) + <code>lifeTime</code></li> <li>Example: <code>\"lifeTime\": 3600</code> creates credentials valid for 1 hour</li> <li>Example: <code>\"lifeTime\": 86400</code> creates credentials valid for 24 hours</li> </ul>"},{"location":"getting-started/issuance/advanced-features/#common-lifetime-values","title":"Common Lifetime Values","text":"Duration Seconds Use Case 1 hour 3600 Short-term access tokens 1 day 86400 Daily passes, temporary IDs 1 week 604800 Weekly permits 1 month 2592000 Monthly subscriptions 1 year 31536000 Annual licenses"},{"location":"getting-started/issuance/advanced-features/#complete-example-with-all-features","title":"Complete Example with All Features","text":"<pre><code>{\n    \"config\": {\n        \"format\": \"dc+sd-jwt\",\n        \"display\": [\n            {\n                \"name\": \"Enhanced PID\",\n                \"description\": \"Personal Identity Document with full security features\",\n                \"locale\": \"en-US\",\n                \"background_color\": \"#FFFFFF\",\n                \"text_color\": \"#000000\",\n                \"logo\": {\n                    \"uri\": \"&lt;PUBLIC_URL&gt;/issuer.png\",\n                    \"url\": \"&lt;PUBLIC_URL&gt;/issuer.png\"\n                },\n                \"background_image\": {\n                    \"uri\": \"&lt;PUBLIC_URL&gt;/bdr/credential.png\",\n                    \"url\": \"&lt;PUBLIC_URL&gt;/bdr/credential.png\"\n                }\n            }\n        ]\n    },\n    \"lifeTime\": 86400,\n    \"statusManagement\": true,\n    \"keyBinding\": true,\n    \"claims\": {\n        \"issuing_country\": \"DE\",\n        \"issuing_authority\": \"DE\",\n        \"given_name\": \"ERIKA\",\n        \"family_name\": \"MUSTERMANN\",\n        \"birth_family_name\": \"GABLER\",\n        \"birthdate\": \"1964-08-12\",\n        \"age_birth_year\": 1964,\n        \"age_in_years\": 59,\n        \"age_equal_or_over\": {\n            \"12\": true,\n            \"14\": true,\n            \"16\": true,\n            \"18\": true,\n            \"21\": true,\n            \"65\": false\n        },\n        \"place_of_birth\": {\n            \"locality\": \"BERLIN\"\n        },\n        \"address\": {\n            \"locality\": \"K\u00d6LN\",\n            \"postal_code\": \"51147\",\n            \"street_address\": \"HEIDESTRA\u1e9eE 17\"\n        },\n        \"nationalities\": [\"DE\"]\n    },\n    \"disclosureFrame\": {\n        \"_sd\": [\n            \"issuing_country\",\n            \"issuing_authority\",\n            \"given_name\",\n            \"family_name\",\n            \"birth_family_name\",\n            \"birthdate\",\n            \"age_birth_year\",\n            \"age_in_years\",\n            \"age_equal_or_over\",\n            \"place_of_birth\",\n            \"address\",\n            \"nationalities\"\n        ],\n        \"address\": {\n            \"_sd\": [\"locality\", \"postal_code\", \"street_address\"]\n        }\n    },\n    \"vct\": {}\n}\n</code></pre> <p>This configuration enables:</p> <ul> <li>Key binding: Credential bound to holder's key</li> <li>Status management: Revocation support via status lists</li> <li>Expiration: 24-hour credential lifetime</li> <li>Selective disclosure: Claims can be selectively revealed</li> <li>Rich claims: Complex data types and nested objects</li> </ul>"},{"location":"getting-started/issuance/advanced-features/#next-steps","title":"Next Steps","text":"<ul> <li>Configure Authentication Flows for your issuance process</li> <li>Set up Revocation management for your credentials</li> <li>Use the API Guide to implement these features</li> </ul>"},{"location":"getting-started/issuance/api-guide/","title":"API Guide","text":"<p>This guide provides step-by-step instructions for using the EUDIPLO issuance APIs, including creating configurations, managing credentials, and starting issuance flows.</p>"},{"location":"getting-started/issuance/api-guide/#configuration-management","title":"Configuration Management","text":""},{"location":"getting-started/issuance/api-guide/#creating-credential-configurations","title":"Creating Credential Configurations","text":"<p>Credential configurations are managed via the <code>/issuer-management/credentials</code> endpoint:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/issuer-management/credentials' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"pid\",\n    \"config\": {\n      \"format\": \"dc+sd-jwt\",\n      \"display\": [\n        {\n          \"name\": \"Personal ID\",\n          \"description\": \"Official identity credential\",\n          \"locale\": \"en-US\"\n        }\n      ]\n    },\n    \"keyBinding\": true,\n    \"statusManagement\": true,\n    \"lifeTime\": 3600,\n    \"claims\": {\n      \"given_name\": \"ERIKA\",\n      \"family_name\": \"MUSTERMANN\"\n    },\n    \"disclosureFrame\": {\n      \"_sd\": [\"given_name\", \"family_name\"]\n    }\n  }'\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#response","title":"Response","text":"<pre><code>{\n  \"id\": \"pid\",\n  \"tenantId\": \"your-tenant-id\",\n  \"config\": { ... },\n  \"claims\": { ... },\n  \"disclosureFrame\": { ... },\n  \"keyBinding\": true,\n  \"statusManagement\": true,\n  \"lifeTime\": 3600\n}\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#retrieving-credential-configurations","title":"Retrieving Credential Configurations","text":"<p>Get all credential configurations for your tenant:</p> <pre><code>curl -X 'GET' \\\n  'http://localhost:3000/issuer-management/credentials' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk'\n</code></pre> <p>Get a specific credential configuration:</p> <pre><code>curl -X 'GET' \\\n  'http://localhost:3000/issuer-management/credentials/pid' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk'\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#updating-credential-configurations","title":"Updating Credential Configurations","text":"<pre><code>curl -X 'PUT' \\\n  'http://localhost:3000/issuer-management/credentials/pid' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"pid\",\n    \"config\": { ... },\n    \"lifeTime\": 7200\n  }'\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#deleting-credential-configurations","title":"Deleting Credential Configurations","text":"<pre><code>curl -X 'DELETE' \\\n  'http://localhost:3000/issuer-management/credentials/pid' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk'\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#issuance-configuration-management","title":"Issuance Configuration Management","text":""},{"location":"getting-started/issuance/api-guide/#creating-issuance-configurations","title":"Creating Issuance Configurations","text":"<p>Issuance configurations are managed via the <code>/issuer-management/issuance</code> endpoint:</p>"},{"location":"getting-started/issuance/api-guide/#simple-pre-authorized-flow","title":"Simple Pre-Authorized Flow","text":"<pre><code>curl -X 'POST' \\\n  'http://localhost:3000/issuer-management/issuance' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"simple-citizen-pass\",\n    \"authenticationConfig\": {\n      \"method\": \"none\"\n    },\n    \"credentialConfigs\": [\n      {\n        \"id\": \"citizen\"\n      }\n    ]\n  }'\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#external-authentication-flow","title":"External Authentication Flow","text":"<pre><code>curl -X 'POST' \\\n  'http://localhost:3000/issuer-management/issuance' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"authenticated-employee-badge\",\n    \"authenticationConfig\": {\n      \"method\": \"auth\",\n      \"config\": {\n        \"authUrl\": \"https://company-auth.example.com/login\",\n        \"webhook\": {\n          \"url\": \"https://hr-api.example.com/verify\",\n          \"auth\": {\n            \"type\": \"apiKey\",\n            \"config\": {\n              \"headerName\": \"x-api-key\",\n              \"value\": \"hr-system-key\"\n            }\n          }\n        }\n      }\n    },\n    \"credentialConfigs\": [\n      {\n        \"id\": \"employee-badge\"\n      }\n    ],\n    \"notifyWebhook\": {\n      \"url\": \"https://hr-api.example.com/notify\",\n      \"auth\": {\n        \"type\": \"apiKey\",\n        \"config\": {\n          \"headerName\": \"x-api-key\",\n          \"value\": \"notification-key\"\n        }\n      }\n    }\n  }'\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#presentation-during-issuance-flow","title":"Presentation-During-Issuance Flow","text":"<pre><code>curl -X 'POST' \\\n  'http://localhost:3000/issuer-management/issuance' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"citizen-with-pid-verification\",\n    \"authenticationConfig\": {\n      \"method\": \"presentationDuringIssuance\",\n      \"config\": {\n        \"presentation\": {\n          \"type\": \"pid\",\n          \"webhook\": {\n            \"url\": \"http://localhost:8787/process\"\n          }\n        }\n      }\n    },\n    \"credentialConfigs\": [\n      {\n        \"id\": \"citizen\"\n      }\n    ],\n    \"notifyWebhook\": {\n      \"url\": \"http://localhost:8787/notify\",\n      \"auth\": {\n        \"type\": \"apiKey\",\n        \"config\": {\n          \"headerName\": \"x-api-key\",\n          \"value\": \"foo-bar\"\n        }\n      }\n    }\n  }'\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#retrieving-issuance-configurations","title":"Retrieving Issuance Configurations","text":"<pre><code>curl -X 'GET' \\\n  'http://localhost:3000/issuer-management/issuance' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk'\n</code></pre> <p>Get a specific issuance configuration:</p> <pre><code>curl -X 'GET' \\\n  'http://localhost:3000/issuer-management/issuance/citizen-with-pid-verification' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk'\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#webhook-integration","title":"Webhook Integration","text":"<p>When using webhooks in your issuance configurations (especially for presentation-during-issuance flows), you need to implement endpoints that can handle EUDIPLO's webhook requests and provide appropriate responses.</p>"},{"location":"getting-started/issuance/api-guide/#webhook-request-format","title":"Webhook Request Format","text":"<p>EUDIPLO sends HTTP <code>POST</code> requests to your configured webhook endpoints with the following payload structure:</p> <pre><code>{\n  \"credentials\": [\n    {\n      \"id\": \"pid\",\n      \"values\": {\n        \"iss\": \"https://service.eudi-wallet.dev\",\n        \"iat\": 1751884150,\n        \"vct\": \"https://service.eudi-wallet.dev/credentials/vct/pid\",\n        \"given_name\": \"ERIKA\",\n        \"family_name\": \"MUSTERMANN\",\n        \"birthdate\": \"1964-08-12\",\n        \"address\": {\n          \"locality\": \"K\u00d6LN\",\n          \"postal_code\": \"51147\",\n          \"street_address\": \"HEIDESTRA\u1e9eE 17\"\n        }\n      }\n    }\n  ],\n  \"session\": \"a6318799-dff4-4b60-9d1d-58703611bd23\"\n}\n</code></pre> <p>Important Notes:</p> <ul> <li><code>credentials</code>: Array of credential objects containing the presented claims</li> <li><code>id</code>: The ID of the DCQL query that identifies which credential was requested</li> <li><code>values</code>: The actual claims from the presented credential (simplified, with SD-JWT specific fields like <code>cnf</code> and <code>status</code> removed)</li> <li><code>session</code>: Session ID for tracking the request</li> <li>If credential verification fails, an <code>error</code> field will be included instead of <code>values</code></li> </ul>"},{"location":"getting-started/issuance/api-guide/#webhook-response-format","title":"Webhook Response Format","text":"<p>For presentation-during-issuance webhooks only, your webhook must respond with a JSON object containing the claims to issue for each credential configuration:</p> <pre><code>{\n  \"citizen\": {\n    \"town\": \"Berlin\",\n    \"verified_age\": true,\n    \"status\": \"active\"\n  }\n}\n</code></pre> <p>Key Points:</p> <ul> <li>The response object is keyed by the credential configuration ID (e.g., <code>\"citizen\"</code>)</li> <li>Each entry contains the claims that will be issued in the new credential</li> <li>This response is used to populate the claims in the issuance flow</li> </ul>"},{"location":"getting-started/issuance/api-guide/#example-webhook-implementation","title":"Example Webhook Implementation","text":"<p>Here's a simple webhook endpoint example:</p> <pre><code>app.post('/process', (req, res) =&gt; {\n  const { credentials, session } = req.body;\n\n  // Process the presented credentials\n  const pidCredential = credentials.find((c) =&gt; c.id === 'pid');\n\n  if (pidCredential &amp;&amp; pidCredential.values) {\n    const { given_name, family_name, birthdate } = pidCredential.values;\n\n    // Generate claims for the new credential\n    const response = {\n      citizen: {\n        name: `${given_name} ${family_name}`,\n        age_verified:\n          new Date().getFullYear() - new Date(birthdate).getFullYear() &gt;= 18,\n        verification_date: new Date().toISOString(),\n        status: 'verified',\n      },\n    };\n\n    res.json(response);\n  } else {\n    res.status(400).json({ error: 'Invalid credential presentation' });\n  }\n});\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#creating-credential-offers","title":"Creating Credential Offers","text":"<p>To start the issuance flow, you need to create a credential offer using an issuance configuration ID. This is done by calling the <code>/issuer-management/offer</code> endpoint.</p>"},{"location":"getting-started/issuance/api-guide/#request-parameters","title":"Request Parameters","text":"<ul> <li><code>issuanceId</code> (required): The ID of the issuance configuration to use</li> <li><code>credentialConfigurationIds</code> (optional): Override the credential   configurations defined in the issuance config</li> <li><code>values</code> (optional): Override claims for specific credentials</li> </ul>"},{"location":"getting-started/issuance/api-guide/#how-it-works","title":"How It Works","text":"<ol> <li>You provide an <code>issuanceId</code> to specify which issuance configuration to use</li> <li>The issuance configuration defines which credentials will be issued and    authentication requirements</li> <li>Optionally, you can override the default credentials using    <code>credentialConfigurationIds</code></li> <li>Optionally, you can provide custom claims using the <code>values</code> parameter</li> </ol>"},{"location":"getting-started/issuance/api-guide/#response-types","title":"Response Types","text":"<p>Via the <code>response_type</code> parameter, you can specify how the response should be formatted:</p> <ul> <li><code>uri</code>: Returns a URI that the user can open in their wallet to start the   issuance flow</li> <li><code>qrcode</code>: Returns a QR code that the user can scan with their wallet to start   the issuance flow</li> </ul> <p>While the <code>qrcode</code> is good for easy testing with the Swagger UI, the <code>uri</code> is recommended to also receive the session ID in the response that is needed to fetch information about the session later on.</p>"},{"location":"getting-started/issuance/api-guide/#basic-credential-offer","title":"Basic Credential Offer","text":"<p>Using the default credentials defined in the issuance configuration:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/issuer-management/offer' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"response_type\": \"uri\",\n    \"issuanceId\": \"citizen-with-pid-verification\"\n  }'\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#response_1","title":"Response","text":"<pre><code>{\n  \"credential_offer_uri\": \"openid-credential-offer://...\",\n  \"session\": \"59d22466-b403-4b37-b1d0-20163696ade7\"\n}\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#credential-offer-with-overridden-credentials","title":"Credential Offer with Overridden Credentials","text":"<p>Override which credentials to issue while using the same issuance configuration:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/issuer-management/offer' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"response_type\": \"uri\",\n    \"issuanceId\": \"citizen-with-pid-verification\",\n    \"credentialConfigurationIds\": [\"employee-badge\", \"parking-permit\"]\n  }'\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#credential-offer-with-custom-claims","title":"Credential Offer with Custom Claims","text":"<p>Override claims for specific credentials:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/issuer-management/offer' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"response_type\": \"uri\",\n    \"issuanceId\": \"employee-onboarding\",\n    \"values\": {\n      \"employee-badge\": {\n        \"employee_id\": \"EMP12345\",\n        \"department\": \"Engineering\",\n        \"valid_until\": \"2024-12-31\"\n      }\n    }\n  }'\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#qr-code-response","title":"QR Code Response","text":"<pre><code>curl -X 'POST' \\\n  'http://localhost:3000/issuer-management/offer' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"response_type\": \"qrcode\",\n    \"issuanceId\": \"simple-citizen-pass\"\n  }'\n</code></pre> <p>Important: The <code>issuanceId</code> is always required and determines the base configuration. The <code>credentialConfigurationIds</code> parameter allows you to override which specific credentials are issued, while the <code>values</code> parameter allows you to override claims.</p>"},{"location":"getting-started/issuance/api-guide/#session-management","title":"Session Management","text":""},{"location":"getting-started/issuance/api-guide/#retrieving-session-information","title":"Retrieving Session Information","text":"<pre><code>curl -X 'GET' \\\n  'http://localhost:3000/session/59d22466-b403-4b37-b1d0-20163696ade7' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk'\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#response_2","title":"Response","text":"<pre><code>{\n  \"id\": \"59d22466-b403-4b37-b1d0-20163696ade7\",\n  \"status\": \"completed\",\n  \"tenantId\": \"your-tenant-id\",\n  \"issuanceId\": \"citizen-with-pid-verification\",\n  \"createdAt\": \"2024-08-08T10:30:00Z\",\n  \"updatedAt\": \"2024-08-08T10:35:00Z\",\n  \"notifications\": [\n    {\n      \"id\": \"notif-123\",\n      \"event\": \"credential_accepted\",\n      \"timestamp\": \"2024-08-08T10:35:00Z\"\n    }\n  ]\n}\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#session-status-values","title":"Session Status Values","text":"<ul> <li><code>active</code>: Session is in progress</li> <li><code>completed</code>: Credential successfully issued</li> <li><code>expired</code>: Session timed out</li> <li><code>failed</code>: Issuance failed</li> </ul>"},{"location":"getting-started/issuance/api-guide/#error-handling","title":"Error Handling","text":""},{"location":"getting-started/issuance/api-guide/#common-error-responses","title":"Common Error Responses","text":""},{"location":"getting-started/issuance/api-guide/#configuration-not-found","title":"Configuration Not Found","text":"<pre><code>{\n  \"statusCode\": 404,\n  \"message\": \"Issuance configuration with id 'invalid-config' not found\",\n  \"error\": \"Not Found\"\n}\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#invalid-configuration","title":"Invalid Configuration","text":"<pre><code>{\n  \"statusCode\": 400,\n  \"message\": [\"config must be an object\", \"keyBinding must be a boolean value\"],\n  \"error\": \"Bad Request\"\n}\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#authentication-error","title":"Authentication Error","text":"<pre><code>{\n  \"statusCode\": 401,\n  \"message\": \"Unauthorized\",\n  \"error\": \"Unauthorized\"\n}\n</code></pre>"},{"location":"getting-started/issuance/api-guide/#http-status-codes","title":"HTTP Status Codes","text":"<ul> <li><code>200</code>: Success</li> <li><code>201</code>: Created successfully</li> <li><code>400</code>: Bad request (validation error)</li> <li><code>401</code>: Unauthorized</li> <li><code>404</code>: Resource not found</li> <li><code>409</code>: Conflict (e.g., ID already exists)</li> <li><code>500</code>: Internal server error</li> </ul>"},{"location":"getting-started/issuance/api-guide/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Revocation management</li> <li>Explore Advanced Features for enhanced functionality</li> </ul>"},{"location":"getting-started/issuance/authentication/","title":"Authentication Flows","text":"<p>The authentication configuration uses a discriminated union pattern that ensures type safety and proper validation. Each authentication method corresponds to a specific OpenID4VC flow, and only one method can be active at a time.</p>"},{"location":"getting-started/issuance/authentication/#overview","title":"Overview","text":"<p>EUDIPLO supports three main authentication flows for credential issuance:</p> <ol> <li>Pre-Authorized Code Flow (<code>none</code>) - No user authentication required</li> <li>OID4VCI Authorized Code Flow (<code>auth</code>) - External user authentication</li> <li>OID4VP Flow (<code>presentationDuringIssuance</code>) - Credential presentation    required</li> </ol>"},{"location":"getting-started/issuance/authentication/#1-pre-authorized-code-flow-none","title":"1. Pre-Authorized Code Flow (<code>none</code>)","text":"<p>Used when no user authentication is required. The credential is issued directly using a pre-authorized code.</p>"},{"location":"getting-started/issuance/authentication/#configuration","title":"Configuration","text":"<pre><code>{\n    \"authenticationConfig\": {\n        \"method\": \"none\"\n    }\n}\n</code></pre>"},{"location":"getting-started/issuance/authentication/#use-cases","title":"Use Cases","text":"<ul> <li>User has logged in previously so no further authentication is needed</li> <li>Direct credential issuance without user interaction</li> </ul>"},{"location":"getting-started/issuance/authentication/#example-flow","title":"Example Flow","text":"<ol> <li>Backend service requests credential offer</li> <li>EUDIPLO generates pre-authorized code</li> <li>Wallet uses code to directly retrieve credential</li> <li>No user authentication required</li> </ol>"},{"location":"getting-started/issuance/authentication/#2-oid4vci-authorized-code-flow-auth","title":"2. OID4VCI Authorized Code Flow (<code>auth</code>)","text":"<p>Used when user authentication is required. The user will be redirected to an external authentication URL as part of the OID4VCI authorized code flow.</p> <p>TODO: has to be tested!!!</p>"},{"location":"getting-started/issuance/authentication/#configuration_1","title":"Configuration","text":"<pre><code>{\n    \"authenticationConfig\": {\n        \"method\": \"auth\",\n        \"config\": {\n            \"authUrl\": \"https://auth.example.com/login\",\n            \"webhook\": {\n                \"url\": \"https://api.example.com/webhook\",\n                \"auth\": {\n                    \"type\": \"apiKey\",\n                    \"config\": {\n                        \"headerName\": \"Authorization\",\n                        \"value\": \"Bearer your-token\"\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/issuance/authentication/#configuration-fields","title":"Configuration Fields","text":"<ul> <li><code>authUrl</code>: REQUIRED - The URL where users will be redirected for   authentication</li> <li><code>webhook</code>: OPTIONAL - Webhook configuration for authentication callbacks</li> </ul>"},{"location":"getting-started/issuance/authentication/#use-cases_1","title":"Use Cases","text":"<ul> <li>Identity verification before credential issuance</li> <li>Account-based credential issuance</li> <li>Integration with existing authentication systems</li> <li>User consent flows</li> </ul>"},{"location":"getting-started/issuance/authentication/#example-flow_1","title":"Example Flow","text":"<ol> <li>User initiates credential request</li> <li>EUDIPLO redirects user to external auth URL</li> <li>User authenticates with external system</li> <li>External system calls webhook with user data</li> <li>EUDIPLO issues credential based on authenticated user</li> </ol>"},{"location":"getting-started/issuance/authentication/#3-oid4vp-flow-presentationduringissuance","title":"3. OID4VP Flow (<code>presentationDuringIssuance</code>)","text":"<p>Used when a credential presentation is required before issuance. An OID4VP request is sent to the wallet to present specific credentials.</p>"},{"location":"getting-started/issuance/authentication/#configuration_2","title":"Configuration","text":"<pre><code>{\n    \"authenticationConfig\": {\n        \"method\": \"presentationDuringIssuance\",\n        \"config\": {\n            \"presentation\": {\n                \"type\": \"pid\",\n                \"webhook\": {\n                    \"url\": \"https://api.example.com/webhook\",\n                    \"auth\": {\n                        \"type\": \"apiKey\",\n                        \"config\": {\n                            \"headerName\": \"Authorization\",\n                            \"value\": \"Bearer your-token\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/issuance/authentication/#configuration-fields_1","title":"Configuration Fields","text":"<ul> <li><code>presentation</code>: REQUIRED - Presentation configuration<ul> <li><code>type</code>: Type of credential to present (e.g., \"pid\", \"oid4vp\")</li> <li><code>webhook</code>: Webhook configuration for processing presented credentials</li> </ul> </li> </ul>"},{"location":"getting-started/issuance/authentication/#use-cases_2","title":"Use Cases","text":"<ul> <li>Issuing credentials based on existing credentials</li> <li>Step-up authentication with credential presentation</li> <li>Verification workflows (e.g., university diploma requires high school   certificate)</li> <li>Identity linking between credentials</li> </ul>"},{"location":"getting-started/issuance/authentication/#example-flow_2","title":"Example Flow","text":"<ol> <li>User requests new credential</li> <li>EUDIPLO requests presentation of existing credential</li> <li>User presents required credential via OID4VP</li> <li>EUDIPLO validates presentation via webhook</li> <li>New credential is issued based on presented data</li> </ol>"},{"location":"getting-started/issuance/authentication/#webhook-configuration","title":"Webhook Configuration","text":"<p>All authentication flows can include webhook configurations for external processing.</p>"},{"location":"getting-started/issuance/authentication/#webhook-structure","title":"Webhook Structure","text":"<pre><code>{\n    \"webhook\": {\n        \"url\": \"https://api.example.com/process\",\n        \"auth\": {\n            \"type\": \"apiKey\",\n            \"config\": {\n                \"headerName\": \"x-api-key\",\n                \"value\": \"your-secret-key\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/issuance/authentication/#authentication-types","title":"Authentication Types","text":""},{"location":"getting-started/issuance/authentication/#api-key-authentication","title":"API Key Authentication","text":"<pre><code>{\n    \"auth\": {\n        \"type\": \"apiKey\",\n        \"config\": {\n            \"headerName\": \"Authorization\",\n            \"value\": \"Bearer your-token\"\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/issuance/authentication/#complete-issuance-configuration-examples","title":"Complete Issuance Configuration Examples","text":""},{"location":"getting-started/issuance/authentication/#simple-pre-authorized-flow","title":"Simple Pre-Authorized Flow","text":"<pre><code>{\n    \"id\": \"simple-citizen-pass\",\n    \"authenticationConfig\": {\n        \"method\": \"none\"\n    },\n    \"credentialConfigs\": [\n        {\n            \"id\": \"citizen\"\n        }\n    ]\n}\n</code></pre>"},{"location":"getting-started/issuance/authentication/#external-authentication-flow","title":"External Authentication Flow","text":"<pre><code>{\n    \"id\": \"authenticated-employee-badge\",\n    \"authenticationConfig\": {\n        \"method\": \"auth\",\n        \"config\": {\n            \"authUrl\": \"https://company-auth.example.com/login\",\n            \"webhook\": {\n                \"url\": \"https://hr-api.example.com/verify-employee\",\n                \"auth\": {\n                    \"type\": \"apiKey\",\n                    \"config\": {\n                        \"headerName\": \"x-api-key\",\n                        \"value\": \"hr-system-key\"\n                    }\n                }\n            }\n        }\n    },\n    \"credentialConfigs\": [\n        {\n            \"id\": \"employee-badge\"\n        }\n    ]\n}\n</code></pre>"},{"location":"getting-started/issuance/authentication/#presentation-based-flow","title":"Presentation-Based Flow","text":"<pre><code>{\n    \"id\": \"university-diploma\",\n    \"authenticationConfig\": {\n        \"method\": \"presentationDuringIssuance\",\n        \"config\": {\n            \"presentation\": {\n                \"type\": \"high-school-certificate\",\n                \"webhook\": {\n                    \"url\": \"https://university-api.example.com/verify-prerequisite\",\n                    \"auth\": {\n                        \"type\": \"apiKey\",\n                        \"config\": {\n                            \"headerName\": \"Authorization\",\n                            \"value\": \"Bearer university-token\"\n                        }\n                    }\n                }\n            }\n        }\n    },\n    \"credentialConfigs\": [\n        {\n            \"id\": \"university-diploma\"\n        }\n    ],\n    \"notifyWebhook\": {\n        \"url\": \"https://university-api.example.com/notify-issuance\",\n        \"auth\": {\n            \"type\": \"apiKey\",\n            \"config\": {\n                \"headerName\": \"x-api-key\",\n                \"value\": \"notification-key\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/issuance/authentication/#choosing-the-right-flow","title":"Choosing the Right Flow","text":"Flow Type When to Use Pre-Authorized User already authenticated External Auth User verification required Presentation Credential-based verification"},{"location":"getting-started/issuance/authentication/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Advanced Features for enhanced security</li> <li>Use the API Guide to implement these authentication flows</li> </ul>"},{"location":"getting-started/issuance/credential-configuration/","title":"Credential Configuration","text":"<p>Credential configurations define the structure and properties of individual credentials. Each credential type has its own configuration file.</p>"},{"location":"getting-started/issuance/credential-configuration/#basic-structure","title":"Basic Structure","text":"<p>Example Credential Configuration (PID):</p> <pre><code>{\n    \"config\": {\n        \"format\": \"dc+sd-jwt\",\n        \"display\": [\n            {\n                \"name\": \"PID\",\n                \"background_color\": \"#FFFFFF\",\n                \"background_image\": {\n                    \"uri\": \"&lt;PUBLIC_URL&gt;/bdr/credential.png\",\n                    \"url\": \"&lt;PUBLIC_URL&gt;/bdr/credential.png\"\n                },\n                \"description\": \"PID Credential\",\n                \"locale\": \"en-US\",\n                \"logo\": {\n                    \"uri\": \"&lt;PUBLIC_URL&gt;/issuer.png\",\n                    \"url\": \"&lt;PUBLIC_URL&gt;/issuer.png\"\n                },\n                \"text_color\": \"#000000\"\n            }\n        ]\n    },\n    \"lifeTime\": 3600,\n    \"statusManagement\": true,\n    \"keyBinding\": true,\n    \"claims\": {\n        \"issuing_country\": \"DE\",\n        \"issuing_authority\": \"DE\",\n        \"given_name\": \"ERIKA\",\n        \"family_name\": \"MUSTERMANN\",\n        \"birth_family_name\": \"GABLER\",\n        \"birthdate\": \"1964-08-12\",\n        \"age_birth_year\": 1964,\n        \"age_in_years\": 59,\n        \"age_equal_or_over\": {\n            \"12\": true,\n            \"14\": true,\n            \"16\": true,\n            \"18\": true,\n            \"21\": true,\n            \"65\": false\n        },\n        \"place_of_birth\": {\n            \"locality\": \"BERLIN\"\n        },\n        \"address\": {\n            \"locality\": \"K\u00d6LN\",\n            \"postal_code\": \"51147\",\n            \"street_address\": \"HEIDESTRA\u1e9eE 17\"\n        },\n        \"nationalities\": [\"DE\"]\n    },\n    \"disclosureFrame\": {\n        \"_sd\": [\n            \"issuing_country\",\n            \"issuing_authority\",\n            \"given_name\",\n            \"family_name\",\n            \"birth_family_name\",\n            \"birthdate\",\n            \"age_birth_year\",\n            \"age_in_years\",\n            \"age_equal_or_over\",\n            \"place_of_birth\",\n            \"address\",\n            \"nationalities\"\n        ],\n        \"address\": {\n            \"_sd\": [\"locality\", \"postal_code\", \"street_address\"]\n        }\n    },\n    \"vct\": {}\n}\n</code></pre>"},{"location":"getting-started/issuance/credential-configuration/#configuration-fields","title":"Configuration Fields","text":""},{"location":"getting-started/issuance/credential-configuration/#required-fields","title":"Required Fields","text":"<ul> <li><code>config</code>: REQUIRED - Entry for   credential_configuration_supported.   The name of the file will be used as the key in the configuration.<ul> <li><code>format</code>: REQUIRED - The format of the credential, only <code>dc+sd-jwt</code> is   currently supported.</li> <li><code>display</code>: REQUIRED - Display configuration for the credential,   including name, description, locale, colors, and images.</li> </ul> </li> <li><code>vct</code>: REQUIRED -   VC Type Metadata   provided via the <code>/credentials/vct/{id}</code> endpoint. This link will   automatically added into the credential.</li> </ul>"},{"location":"getting-started/issuance/credential-configuration/#optional-fields","title":"Optional Fields","text":"<ul> <li><code>lifeTime</code>: OPTIONAL - Credential expiration time in seconds. If   specified, credentials will include an <code>exp</code> claim calculated as   <code>iat + lifeTime</code>.</li> <li><code>statusManagement</code>: OPTIONAL - Enable OAuth Token Status Lists for   credential revocation. When <code>true</code>, credentials include a <code>status</code> claim with   revocation information.</li> <li><code>keyBinding</code>: OPTIONAL - Enable cryptographic key binding. When <code>true</code>,   credentials include a <code>cnf</code> claim with the holder's public key and require   proof of possession.</li> <li><code>claims</code>: OPTIONAL - Static claims to include in the credential. Can be   overridden by webhook responses or claims passed during credential offer.</li> <li><code>disclosureFrame</code>: OPTIONAL - Defines which claims should be selectively   disclosable in SD-JWT format.</li> </ul>"},{"location":"getting-started/issuance/credential-configuration/#claims-configuration","title":"Claims Configuration","text":"<p>Claims define the data that will be included in the credential. You can specify static claims directly in the configuration, or they can be provided dynamically during the issuance process.</p>"},{"location":"getting-started/issuance/credential-configuration/#static-claims","title":"Static Claims","text":"<pre><code>{\n    \"claims\": {\n        \"issuing_country\": \"DE\",\n        \"issuing_authority\": \"DE\",\n        \"given_name\": \"ERIKA\",\n        \"family_name\": \"MUSTERMANN\",\n        \"birth_family_name\": \"GABLER\",\n        \"birthdate\": \"1964-08-12\",\n        \"age_birth_year\": 1964,\n        \"age_in_years\": 59,\n        \"age_equal_or_over\": {\n            \"12\": true,\n            \"14\": true,\n            \"16\": true,\n            \"18\": true,\n            \"21\": true,\n            \"65\": false\n        },\n        \"place_of_birth\": {\n            \"locality\": \"BERLIN\"\n        },\n        \"address\": {\n            \"locality\": \"K\u00d6LN\",\n            \"postal_code\": \"51147\",\n            \"street_address\": \"HEIDESTRA\u1e9eE 17\"\n        },\n        \"nationalities\": [\"DE\"]\n    }\n}\n</code></pre>"},{"location":"getting-started/issuance/credential-configuration/#complex-data-types","title":"Complex Data Types","text":"<p>Claims support various data types including objects, arrays, and boolean values:</p> <p>Object Claims:</p> <pre><code>{\n    \"address\": {\n        \"locality\": \"K\u00d6LN\",\n        \"postal_code\": \"51147\",\n        \"street_address\": \"HEIDESTRA\u1e9eE 17\"\n    },\n    \"place_of_birth\": {\n        \"locality\": \"BERLIN\"\n    }\n}\n</code></pre> <p>Array Claims:</p> <pre><code>{\n    \"nationalities\": [\"DE\", \"EU\"]\n}\n</code></pre> <p>Boolean Claims:</p> <pre><code>{\n    \"age_equal_or_over\": {\n        \"18\": true,\n        \"21\": true,\n        \"65\": false\n    }\n}\n</code></pre>"},{"location":"getting-started/issuance/credential-configuration/#selective-disclosure","title":"Selective Disclosure","text":"<p>Use the <code>disclosureFrame</code> to make specific claims selectively disclosable in SD-JWT format:</p> <pre><code>{\n    \"disclosureFrame\": {\n        \"_sd\": [\n            \"issuing_country\",\n            \"issuing_authority\",\n            \"given_name\",\n            \"family_name\",\n            \"birth_family_name\",\n            \"birthdate\",\n            \"age_birth_year\",\n            \"age_in_years\",\n            \"age_equal_or_over\",\n            \"place_of_birth\",\n            \"address\",\n            \"nationalities\"\n        ],\n        \"address\": {\n            \"_sd\": [\"locality\", \"postal_code\", \"street_address\"]\n        }\n    }\n}\n</code></pre> <p>This configuration allows:</p> <ul> <li>Individual disclosure of personal information fields</li> <li>Selective disclosure of address components</li> <li>Holders can choose which claims to reveal during presentation</li> </ul>"},{"location":"getting-started/issuance/credential-configuration/#nested-selective-disclosure","title":"Nested Selective Disclosure","text":"<p>For complex claims with nested objects, you can specify selective disclosure at multiple levels:</p> <pre><code>{\n    \"disclosureFrame\": {\n        \"_sd\": [\"given_name\", \"family_name\", \"address\", \"place_of_birth\"],\n        \"address\": {\n            \"_sd\": [\"locality\", \"postal_code\", \"street_address\"]\n        },\n        \"place_of_birth\": {\n            \"_sd\": [\"locality\", \"country\"]\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/issuance/credential-configuration/#display-configuration","title":"Display Configuration","text":"<p>The display configuration defines how the credential appears in wallets:</p> <pre><code>{\n    \"display\": [\n        {\n            \"name\": \"Personal Identity Document\",\n            \"description\": \"Official identity credential\",\n            \"locale\": \"en-US\",\n            \"background_color\": \"#FFFFFF\",\n            \"text_color\": \"#000000\",\n            \"logo\": {\n                \"uri\": \"&lt;PUBLIC_URL&gt;/issuer.png\",\n                \"url\": \"&lt;PUBLIC_URL&gt;/issuer.png\"\n            },\n            \"background_image\": {\n                \"uri\": \"&lt;PUBLIC_URL&gt;/credential-bg.png\",\n                \"url\": \"&lt;PUBLIC_URL&gt;/credential-bg.png\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"getting-started/issuance/credential-configuration/#display-fields","title":"Display Fields","text":"<ul> <li><code>name</code>: Display name for the credential</li> <li><code>description</code>: Brief description of the credential</li> <li><code>locale</code>: Language/locale (e.g., \"en-US\", \"de-DE\")</li> <li><code>background_color</code>: Background color (hex format)</li> <li><code>text_color</code>: Text color (hex format)</li> <li><code>logo</code>: Issuer logo configuration</li> <li><code>background_image</code>: Background image for the credential</li> </ul>"},{"location":"getting-started/issuance/credential-configuration/#advanced-features","title":"Advanced Features","text":"<p>For more complex credential requirements, see:</p> <ul> <li>Advanced Features - Learn about key binding,   status management, and expiration</li> <li>Authentication - Configure OAuth flows and security</li> <li>API Guide - Create and manage configurations   programmatically</li> </ul>"},{"location":"getting-started/issuance/credential-configuration/#complete-example","title":"Complete Example","text":"<p>Here's a complete configuration with all available features:</p> <pre><code>{\n    \"config\": {\n        \"format\": \"dc+sd-jwt\",\n        \"display\": [\n            {\n                \"name\": \"Enhanced Personal ID\",\n                \"description\": \"Personal Identity Document with advanced features\",\n                \"locale\": \"en-US\",\n                \"background_color\": \"#FFFFFF\",\n                \"text_color\": \"#000000\",\n                \"logo\": {\n                    \"uri\": \"&lt;PUBLIC_URL&gt;/issuer.png\",\n                    \"url\": \"&lt;PUBLIC_URL&gt;/issuer.png\"\n                },\n                \"background_image\": {\n                    \"uri\": \"&lt;PUBLIC_URL&gt;/bdr/credential.png\",\n                    \"url\": \"&lt;PUBLIC_URL&gt;/bdr/credential.png\"\n                }\n            }\n        ]\n    },\n    \"lifeTime\": 86400,\n    \"statusManagement\": true,\n    \"keyBinding\": true,\n    \"claims\": {\n        \"issuing_country\": \"DE\",\n        \"issuing_authority\": \"DE\",\n        \"given_name\": \"ERIKA\",\n        \"family_name\": \"MUSTERMANN\",\n        \"birth_family_name\": \"GABLER\",\n        \"birthdate\": \"1964-08-12\",\n        \"age_birth_year\": 1964,\n        \"age_in_years\": 59,\n        \"age_equal_or_over\": {\n            \"12\": true,\n            \"14\": true,\n            \"16\": true,\n            \"18\": true,\n            \"21\": true,\n            \"65\": false\n        },\n        \"place_of_birth\": {\n            \"locality\": \"BERLIN\"\n        },\n        \"address\": {\n            \"locality\": \"K\u00d6LN\",\n            \"postal_code\": \"51147\",\n            \"street_address\": \"HEIDESTRA\u1e9eE 17\"\n        },\n        \"nationalities\": [\"DE\"]\n    },\n    \"disclosureFrame\": {\n        \"_sd\": [\n            \"issuing_country\",\n            \"issuing_authority\",\n            \"given_name\",\n            \"family_name\",\n            \"birth_family_name\",\n            \"birthdate\",\n            \"age_birth_year\",\n            \"age_in_years\",\n            \"age_equal_or_over\",\n            \"place_of_birth\",\n            \"address\",\n            \"nationalities\"\n        ],\n        \"address\": {\n            \"_sd\": [\"locality\", \"postal_code\", \"street_address\"]\n        }\n    },\n    \"vct\": {}\n}\n</code></pre> <p>This configuration provides:</p> <ul> <li>24-hour expiration via <code>lifeTime</code></li> <li>Revocation support via <code>statusManagement</code></li> <li>Cryptographic binding via <code>keyBinding</code></li> <li>Rich claims with complex data types</li> <li>Selective disclosure for privacy protection</li> </ul>"},{"location":"getting-started/issuance/credential-configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Advanced Features for key binding, status   management, and expiration</li> <li>Configure Authentication Flows for your issuance process</li> <li>Use the API Guide to create and manage configurations</li> </ul>"},{"location":"getting-started/issuance/revocation/","title":"Credential Revocation","text":"<p>EUDIPLO provides comprehensive credential revocation capabilities using OAuth Token Status Lists. This guide covers how to enable, manage, and use credential revocation.</p>"},{"location":"getting-started/issuance/revocation/#overview","title":"Overview","text":"<p>Credential revocation allows issuers to invalidate credentials after they have been issued. This is essential for scenarios such as:</p> <ul> <li>Employee termination or role changes</li> <li>Security breaches or compromised credentials</li> <li>Credential expiration or replacement</li> <li>Legal or compliance requirements</li> </ul>"},{"location":"getting-started/issuance/revocation/#enabling-status-management","title":"Enabling Status Management","text":"<p>To enable revocation for credentials, set <code>statusManagement: true</code> in your credential configuration:</p> <pre><code>{\n  \"id\": \"employee-badge\",\n  \"statusManagement\": true,\n  \"config\": {\n    \"format\": \"dc+sd-jwt\"\n  },\n  \"claims\": {\n    \"employee_id\": \"EMP12345\",\n    \"department\": \"Engineering\"\n  }\n}\n</code></pre> <p>When status management is enabled:</p> <ul> <li>Each issued credential includes a <code>status</code> claim</li> <li>The status claim references a status list maintained by EUDIPLO</li> <li>Individual credentials can be revoked without affecting others</li> <li>Status changes are immediate and globally accessible</li> </ul>"},{"location":"getting-started/issuance/revocation/#how-status-lists-work","title":"How Status Lists Work","text":""},{"location":"getting-started/issuance/revocation/#status-list-structure","title":"Status List Structure","text":"<p>EUDIPLO maintains status lists that track the revocation state of credentials:</p> <ul> <li>Status List URL: Public endpoint where verifiers can check status</li> <li>Status List Index: Unique position for each credential in the list</li> <li>Status Values:</li> <li><code>0</code> = Valid/Active</li> <li><code>1</code> = Revoked/Suspended</li> </ul>"},{"location":"getting-started/issuance/revocation/#credential-status-claim","title":"Credential Status Claim","text":"<p>When a credential is issued with status management enabled, it includes a status claim:</p> <pre><code>{\n  \"status\": {\n    \"status_list\": {\n      \"idx\": 42,\n      \"uri\": \"https://issuer.example.com/status/list/1\"\n    }\n  }\n}\n</code></pre> <p>This allows verifiers to check the credential's current status by querying the status list.</p>"},{"location":"getting-started/issuance/revocation/#revoking-credentials","title":"Revoking Credentials","text":""},{"location":"getting-started/issuance/revocation/#single-credential-revocation","title":"Single Credential Revocation","text":"<p>Revoke a specific credential for a session:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/session/revoke' \\\n  -H 'accept: */*' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"sessionId\": \"59d22466-b403-4b37-b1d0-20163696ade7\",\n    \"credentialConfigurationId\": \"employee-badge\",\n    \"status\": 1\n  }'\n</code></pre>"},{"location":"getting-started/issuance/revocation/#restoring-credentials","title":"Restoring Credentials","text":"<p>To restore a revoked credential, set the status back to valid:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/session/revoke' \\\n  -H 'accept: */*' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"sessionId\": \"59d22466-b403-4b37-b1d0-20163696ade7\",\n    \"credentialConfigurationId\": \"employee-badge\",\n    \"status\": 0\n</code></pre>"},{"location":"getting-started/issuance/revocation/#status-values","title":"Status Values","text":"Value Status Description <code>0</code> Valid Credential is active and valid <code>1</code> Revoked Credential has been revoked and should not be accepted"},{"location":"getting-started/issuance/revocation/#integration-examples","title":"Integration Examples","text":""},{"location":"getting-started/issuance/revocation/#employee-termination-workflow","title":"Employee Termination Workflow","text":"<pre><code># 1. Get session ID from HR system\nSESSION_ID=\"employee-session-123\"\n\n# 2. Revoke employee badge\ncurl -X 'POST' \\\n  'http://localhost:3000/session/revoke' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"sessionId\": \"'$SESSION_ID'\",\n    \"credentialConfigurationId\": \"employee-badge\",\n    \"status\": 1\n  }'\n\n# 3. Revoke access cards\ncurl -X 'POST' \\\n  'http://localhost:3000/session/revoke' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"sessionId\": \"'$SESSION_ID'\",\n    \"credentialConfigurationId\": \"access-card\",\n    \"status\": 1\n  }'\n</code></pre>"},{"location":"getting-started/issuance/revocation/#automated-revocation-script","title":"Automated Revocation Script","text":"<pre><code>#!/bin/bash\n\n# Revoke credentials for a list of sessions\nSESSIONS=(\"session-1\" \"session-2\" \"session-3\")\nCREDENTIAL_TYPE=\"temporary-pass\"\n\nfor session in \"${SESSIONS[@]}\"; do\n    echo \"Revoking credentials for session: $session\"\n\n    curl -s -X 'POST' \\\n      'http://localhost:3000/session/revoke' \\\n      -H 'Authorization: Bearer eyJhb...npoNk' \\\n      -H 'Content-Type: application/json' \\\n      -d '{\n        \"sessionId\": \"'$session'\",\n        \"credentialConfigurationId\": \"'$CREDENTIAL_TYPE'\",\n        \"status\": 1\n      }'\n\n    echo \"\u2713 Revoked credentials for $session\"\ndone\n</code></pre>"},{"location":"getting-started/issuance/revocation/#verifier-integration","title":"Verifier Integration","text":"<p>Verifiers can check credential status by querying the status list endpoint:</p>"},{"location":"getting-started/issuance/revocation/#status-list-endpoint","title":"Status List Endpoint","text":"<pre><code>curl -X 'GET' \\\n  'https://issuer.example.com/status/list/1' \\\n  -H 'accept: application/json'\n</code></pre>"},{"location":"getting-started/issuance/revocation/#status-check-response","title":"Status Check Response","text":"<pre><code>{\n  \"iss\": \"https://issuer.example.com\",\n  \"sub\": \"https://issuer.example.com/status/list/1\",\n  \"iat\": 1609459200,\n  \"status_list\": {\n    \"bits\": 1,\n    \"lst\": \"eNrbuRgAAhcBNQ\"\n  }\n}\n</code></pre> <p>The <code>lst</code> field contains a compressed bitstring where each bit represents the status of a credential at that index.</p>"},{"location":"getting-started/issuance/revocation/#data-storage-and-privacy","title":"Data Storage and Privacy","text":""},{"location":"getting-started/issuance/revocation/#what-is-stored","title":"What is Stored","text":"<p>EUDIPLO stores minimal data for revocation:</p> <ul> <li>Session ID</li> <li>Status list URL</li> <li>Status list index</li> <li>Current status value</li> </ul>"},{"location":"getting-started/issuance/revocation/#what-is-not-stored","title":"What is NOT Stored","text":"<ul> <li>Personal data from credentials</li> <li>Credential content</li> <li>User identifying information</li> <li>Detailed revocation reasons</li> </ul>"},{"location":"getting-started/issuance/revocation/#data-retention","title":"Data Retention","text":"<ul> <li>Status mappings persist beyond session cleanup</li> <li>Only index and status information is retained</li> <li>No personal or sensitive data is stored long-term</li> </ul>"},{"location":"getting-started/issuance/revocation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/issuance/revocation/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/issuance/revocation/#revocation-not-taking-effect","title":"Revocation Not Taking Effect","text":"<pre><code># Check session exists\ncurl -X 'GET' \\\n  'http://localhost:3000/session/YOUR_SESSION_ID' \\\n  -H 'Authorization: Bearer eyJhb...npoNk'\n\n# Verify credential configuration ID\ncurl -X 'GET' \\\n  'http://localhost:3000/issuer-management/credentials' \\\n  -H 'Authorization: Bearer eyJhb...npoNk'\n</code></pre>"},{"location":"getting-started/issuance/revocation/#status-list-not-accessible","title":"Status List Not Accessible","text":"<ol> <li>Check network connectivity</li> <li>Verify status list URL in credential</li> <li>Confirm issuer endpoint is accessible</li> <li>Check for proper CORS configuration</li> </ol>"},{"location":"getting-started/issuance/revocation/#performance-issues","title":"Performance Issues","text":"<ol> <li>Monitor status list size</li> <li>Check cache configuration</li> <li>Verify database performance</li> <li>Consider status list rotation</li> </ol>"},{"location":"getting-started/issuance/revocation/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Advanced Features for enhanced credential   management</li> <li>Use the API Guide to implement revocation workflows</li> </ul>"},{"location":"getting-started/presentation/","title":"Credential Presentation","text":"<p>EUDIPLO provides comprehensive credential presentation capabilities using OpenID4VP (OpenID for Verifiable Presentations). This system allows verifiers to request specific credentials and claims from users, enabling secure identity verification and attribute validation.</p>"},{"location":"getting-started/presentation/#overview","title":"Overview","text":"<p>Credential presentation enables verifiers to:</p> <ul> <li>Request specific credentials from users' wallets</li> <li>Verify authenticity of presented credentials</li> <li>Extract required claims for authorization or validation</li> <li>Maintain privacy by requesting only necessary information</li> <li>Support multiple presentation flows for different use cases</li> </ul> <p>EUDIPLO supports both standalone presentation flows and presentation-during-issuance scenarios, providing flexibility for various business requirements.</p>"},{"location":"getting-started/presentation/#key-concepts","title":"Key Concepts","text":""},{"location":"getting-started/presentation/#presentation-flows","title":"Presentation Flows","text":"<p>EUDIPLO supports multiple presentation scenarios:</p> <ol> <li> <p>Standard Presentation Flow</p> <ul> <li>Direct credential verification requests</li> <li>Used for access control and identity verification</li> <li>Returns verified claims to the requesting service</li> </ul> </li> <li> <p>Presentation During Issuance</p> <ul> <li>Credentials presented as prerequisites for new credential issuance</li> <li>Enables qualification-based credential issuance</li> <li>Supports complex identity verification workflows</li> </ul> </li> </ol>"},{"location":"getting-started/presentation/#dcql-digital-credentials-query-language","title":"DCQL (Digital Credentials Query Language)","text":"<p>EUDIPLO uses DCQL to define presentation requests:</p> <ul> <li>Structured queries for specific credentials and claims</li> <li>Format specification (e.g., <code>dc+sd-jwt</code>)</li> <li>Selective disclosure of only required attributes</li> <li>VCT (Verifiable Credential Type) targeting for precise credential matching</li> </ul>"},{"location":"getting-started/presentation/#registration-certificates","title":"Registration Certificates","text":"<p>All presentation requests include registration certificates that provide:</p> <ul> <li>Legal basis for data processing</li> <li>Privacy policy information</li> <li>Contact details for data protection inquiries</li> <li>Purpose statements explaining why data is requested</li> </ul>"},{"location":"getting-started/presentation/#architecture","title":"Architecture","text":""},{"location":"getting-started/presentation/#tenant-based-configuration","title":"Tenant-Based Configuration","text":"<p>EUDIPLO uses a tenant-based architecture where:</p> <ul> <li>Each tenant has isolated presentation configurations</li> <li>Configurations are stored securely in the database</li> <li>API access is scoped to the authenticated tenant</li> <li>Multi-tenant deployments maintain strict data isolation</li> </ul>"},{"location":"getting-started/presentation/#session-management","title":"Session Management","text":"<p>Presentation flows create sessions that:</p> <ul> <li>Track the presentation request lifecycle</li> <li>Store temporary data during the exchange</li> <li>Enable asynchronous processing via webhooks</li> <li>Maintain audit trails for compliance</li> </ul>"},{"location":"getting-started/presentation/#quick-start","title":"Quick Start","text":""},{"location":"getting-started/presentation/#1-create-a-presentation-configuration","title":"1. Create a Presentation Configuration","text":"<pre><code>{\n    \"id\": \"identity-verification\",\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"pid\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\n                        \"https://your-domain.com/credentials/vct/pid\"\n                    ]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"given_name\"]\n                    },\n                    {\n                        \"path\": [\"family_name\"]\n                    }\n                ]\n            }\n        ]\n    },\n    \"registrationCert\": {\n        \"body\": {\n            \"privacy_policy\": \"https://your-domain.com/privacy-policy\",\n            \"purpose\": [\n                {\n                    \"locale\": \"en-US\",\n                    \"name\": \"Identity verification for service access\"\n                }\n            ],\n            \"contact\": {\n                \"website\": \"https://your-domain.com/contact\",\n                \"email\": \"privacy@your-domain.com\",\n                \"phone\": \"+1234567890\"\n            }\n        }\n    },\n    \"webhook\": {\n        \"url\": \"https://your-backend.com/presentation-webhook\"\n    }\n}\n</code></pre>"},{"location":"getting-started/presentation/#2-store-the-configuration","title":"2. Store the Configuration","text":"<pre><code>curl -X 'POST' \\\n  'http://localhost:3000/presentation-management' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '@presentation-config.json'\n</code></pre>"},{"location":"getting-started/presentation/#3-request-a-presentation","title":"3. Request a Presentation","text":"<pre><code>curl -X 'POST' \\\n  'http://localhost:3000/presentation-management/request' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"response_type\": \"uri\",\n    \"requestId\": \"identity-verification\"\n  }'\n</code></pre>"},{"location":"getting-started/presentation/#4-present-to-user","title":"4. Present to User","text":"<p>The response includes a URI that can be presented to the user:</p> <pre><code>{\n    \"uri\": \"openid4vp://?request_uri=https://your-domain.com/oid4vp/request/abc123&amp;session_id=session-456\",\n    \"session_id\": \"session-456\"\n}\n</code></pre>"},{"location":"getting-started/presentation/#flow-diagrams","title":"Flow Diagrams","text":""},{"location":"getting-started/presentation/#standard-presentation-flow","title":"Standard Presentation Flow","text":"<pre><code>sequenceDiagram\n    actor User\n    participant Wallet\n    participant Verifier\n    participant EUDIPLO\n\n    Verifier-&gt;&gt;EUDIPLO: Create presentation request\n    EUDIPLO--&gt;&gt;Verifier: Return presentation URI\n    Verifier-&gt;&gt;User: Display QR code or link\n    User-&gt;&gt;Wallet: Scan QR or click link\n    Wallet-&gt;&gt;EUDIPLO: Initiate OID4VP flow\n    EUDIPLO-&gt;&gt;Wallet: Send presentation request\n    Wallet-&gt;&gt;User: Request consent for data sharing\n    User-&gt;&gt;Wallet: Approve presentation\n    Wallet-&gt;&gt;EUDIPLO: Submit verifiable presentation\n    EUDIPLO-&gt;&gt;Verifier: Send verified claims (webhook)</code></pre>"},{"location":"getting-started/presentation/#presentation-during-issuance","title":"Presentation During Issuance","text":"<pre><code>sequenceDiagram\n    actor User\n    participant Wallet\n    participant Issuer\n    participant EUDIPLO\n\n    Issuer-&gt;&gt;EUDIPLO: Request credential issuance\n    EUDIPLO--&gt;&gt;Issuer: Return offer URI\n    Issuer-&gt;&gt;User: Present offer\n    User-&gt;&gt;Wallet: Accept offer\n    Wallet-&gt;&gt;EUDIPLO: Start issuance flow\n    EUDIPLO-&gt;&gt;Wallet: Request presentation first\n    Wallet-&gt;&gt;User: Request presentation consent\n    User-&gt;&gt;Wallet: Approve presentation\n    Wallet-&gt;&gt;EUDIPLO: Submit required credentials\n    EUDIPLO-&gt;&gt;Issuer: Send verified claims\n    Issuer-&gt;&gt;EUDIPLO: Provide issuance data\n    EUDIPLO-&gt;&gt;Wallet: Issue new credential</code></pre>"},{"location":"getting-started/presentation/#security-considerations","title":"Security Considerations","text":""},{"location":"getting-started/presentation/#data-minimization","title":"Data Minimization","text":"<ul> <li>Request only necessary claims to protect user privacy</li> <li>Use selective disclosure to limit exposed information</li> <li>Implement purpose limitation through clear registration certificates</li> </ul>"},{"location":"getting-started/presentation/#authentication","title":"Authentication","text":"<ul> <li>OAuth 2.0 bearer tokens for API authentication</li> <li>Tenant isolation prevents cross-tenant data access</li> <li>Session-based security with automatic cleanup</li> </ul>"},{"location":"getting-started/presentation/#verification","title":"Verification","text":"<ul> <li>Cryptographic validation of presented credentials</li> <li>Issuer verification against trusted registries</li> <li>Revocation status checking for active credentials</li> </ul>"},{"location":"getting-started/presentation/#next-steps","title":"Next Steps","text":"<p>Explore the detailed guides for implementing presentation flows:</p> <ul> <li>Presentation Configuration - Configure   presentation requests</li> <li>Authentication - Secure your presentation endpoints</li> <li>API Guide - Practical implementation examples</li> <li>Integration Examples - Real-world scenarios</li> </ul>"},{"location":"getting-started/presentation/api-guide/","title":"API Guide","text":"<p>This comprehensive guide provides practical examples for implementing credential presentation flows using EUDIPLO's API. Learn how to integrate presentation requests into your applications with real-world examples.</p>"},{"location":"getting-started/presentation/api-guide/#api-overview","title":"API Overview","text":"<p>EUDIPLO provides a RESTful API for managing credential presentations:</p> Endpoint Method Purpose <code>/presentation-management</code> <code>GET</code> List all presentation configurations <code>/presentation-management</code> <code>POST</code> Create or update a presentation configuration <code>/presentation-management/{id}</code> <code>DELETE</code> Delete a presentation configuration <code>/presentation-management/request</code> <code>POST</code> Create a presentation request <p>All endpoints require OAuth 2.0 authentication with appropriate scopes.</p>"},{"location":"getting-started/presentation/api-guide/#configuration-management","title":"Configuration Management","text":""},{"location":"getting-started/presentation/api-guide/#create-a-presentation-configuration","title":"Create a Presentation Configuration","text":"<p>Store a new presentation configuration that defines what credentials to request:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/presentation-management' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"employee-verification\",\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"employee-card\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\"https://your-company.com/credentials/vct/employee\"]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"employee_id\"]\n                    },\n                    {\n                        \"path\": [\"department\"]\n                    },\n                    {\n                        \"path\": [\"clearance_level\"]\n                    }\n                ]\n            }\n        ]\n    },\n    \"registrationCert\": {\n        \"body\": {\n            \"privacy_policy\": \"https://your-company.com/privacy-policy\",\n            \"purpose\": [\n                {\n                    \"locale\": \"en-US\",\n                    \"name\": \"Employee verification for secure facility access\"\n                }\n            ],\n            \"contact\": {\n                \"website\": \"https://your-company.com/contact\",\n                \"email\": \"privacy@your-company.com\",\n                \"phone\": \"+1 555 123 4567\"\n            }\n        }\n    },\n    \"webhook\": {\n        \"url\": \"https://access-control.your-company.com/presentation-webhook\"\n    }\n  }'\n</code></pre> <p>Response:</p> <pre><code>{\n    \"id\": \"employee-verification\",\n    \"status\": \"created\",\n    \"tenantId\": \"tenant-abc123\"\n}\n</code></pre>"},{"location":"getting-started/presentation/api-guide/#list-all-configurations","title":"List All Configurations","text":"<p>Retrieve all presentation configurations for your tenant:</p> <pre><code>curl -X 'GET' \\\n  'http://localhost:3000/presentation-management' \\\n  -H 'Authorization: Bearer eyJhb...npoNk'\n</code></pre> <p>Response:</p> <pre><code>[\n    {\n        \"id\": \"employee-verification\",\n        \"dcql_query\": {\n            \"credentials\": [\n                {\n                    \"id\": \"employee-card\",\n                    \"format\": \"dc+sd-jwt\",\n                    \"meta\": {\n                        \"vct_values\": [\n                            \"https://your-company.com/credentials/vct/employee\"\n                        ]\n                    },\n                    \"claims\": [\n                        {\n                            \"path\": [\"employee_id\"]\n                        },\n                        {\n                            \"path\": [\"department\"]\n                        }\n                    ]\n                }\n            ]\n        },\n        \"registrationCert\": {\n            \"body\": {\n                \"privacy_policy\": \"https://your-company.com/privacy-policy\",\n                \"purpose\": [\n                    {\n                        \"locale\": \"en-US\",\n                        \"name\": \"Employee verification for secure facility access\"\n                    }\n                ]\n            }\n        },\n        \"webhook\": {\n            \"url\": \"https://access-control.your-company.com/presentation-webhook\"\n        },\n        \"createdAt\": \"2024-08-08T10:30:00Z\"\n    }\n]\n</code></pre>"},{"location":"getting-started/presentation/api-guide/#update-configuration","title":"Update Configuration","text":"<p>Update an existing configuration by posting with the same ID:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/presentation-management' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"employee-verification\",\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"employee-card\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\"https://your-company.com/credentials/vct/employee\"]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"employee_id\"]\n                    },\n                    {\n                        \"path\": [\"department\"]\n                    },\n                    {\n                        \"path\": [\"clearance_level\"]\n                    },\n                    {\n                        \"path\": [\"employment_status\"]\n                    }\n                ]\n            }\n        ]\n    },\n    \"registrationCert\": {\n        \"body\": {\n            \"privacy_policy\": \"https://your-company.com/privacy-policy\",\n            \"purpose\": [\n                {\n                    \"locale\": \"en-US\",\n                    \"name\": \"Enhanced employee verification for secure facility access\"\n                }\n            ],\n            \"contact\": {\n                \"email\": \"privacy@your-company.com\"\n            }\n        }\n    }\n  }'\n</code></pre>"},{"location":"getting-started/presentation/api-guide/#delete-configuration","title":"Delete Configuration","text":"<p>Remove a presentation configuration:</p> <pre><code>curl -X 'DELETE' \\\n  'http://localhost:3000/presentation-management/employee-verification' \\\n  -H 'Authorization: Bearer eyJhb...npoNk'\n</code></pre> <p>Response:</p> <pre><code>{\n    \"id\": \"employee-verification\",\n    \"status\": \"deleted\"\n}\n</code></pre>"},{"location":"getting-started/presentation/api-guide/#creating-presentation-requests","title":"Creating Presentation Requests","text":""},{"location":"getting-started/presentation/api-guide/#uri-response-type","title":"URI Response Type","text":"<p>Request a presentation with a URI that can be opened in wallets:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/presentation-management/request' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"response_type\": \"uri\",\n    \"requestId\": \"employee-verification\"\n  }'\n</code></pre> <p>Response:</p> <pre><code>{\n    \"uri\": \"openid4vp://?request_uri=https://your-domain.com/oid4vp/request/abc123&amp;client_id=your-client\",\n    \"session_id\": \"session-456def\"\n}\n</code></pre>"},{"location":"getting-started/presentation/api-guide/#qr-code-response-type","title":"QR Code Response Type","text":"<p>Request a presentation with a QR code for easy scanning:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/presentation-management/request' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"response_type\": \"qrcode\",\n    \"requestId\": \"employee-verification\"\n  }'\n</code></pre> <p>Response: Binary PNG image data for the QR code</p>"},{"location":"getting-started/presentation/api-guide/#override-webhook-for-single-request","title":"Override Webhook for Single Request","text":"<p>Override the configured webhook for a specific presentation request:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/presentation-management/request' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"response_type\": \"uri\",\n    \"requestId\": \"employee-verification\",\n    \"webhook\": {\n        \"url\": \"https://special-handler.your-company.com/webhook\"\n    }\n  }'\n</code></pre>"},{"location":"getting-started/presentation/api-guide/#implementation-examples","title":"Implementation Examples","text":""},{"location":"getting-started/presentation/api-guide/#basic-age-verification","title":"Basic Age Verification","text":"<p>Create a simple age verification flow:</p> <pre><code># 1. Create age verification configuration\ncurl -X 'POST' \\\n  'http://localhost:3000/presentation-management' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"age-verification\",\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"pid\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\"https://your-domain.com/credentials/vct/pid\"]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"age_over_18\"]\n                    }\n                ]\n            }\n        ]\n    },\n    \"registrationCert\": {\n        \"body\": {\n            \"privacy_policy\": \"https://your-domain.com/privacy-policy\",\n            \"purpose\": [\n                {\n                    \"locale\": \"en-US\",\n                    \"name\": \"Age verification for restricted content access\"\n                }\n            ],\n            \"contact\": {\n                \"email\": \"privacy@your-domain.com\"\n            }\n        }\n    }\n  }'\n\n# 2. Request age verification presentation\ncurl -X 'POST' \\\n  'http://localhost:3000/presentation-management/request' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"response_type\": \"uri\",\n    \"requestId\": \"age-verification\"\n  }'\n</code></pre>"},{"location":"getting-started/presentation/api-guide/#professional-license-verification","title":"Professional License Verification","text":"<p>Verify professional credentials with multiple claims:</p> <pre><code># 1. Create professional license configuration\ncurl -X 'POST' \\\n  'http://localhost:3000/presentation-management' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"license-verification\",\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"professional-license\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\"https://licensing-authority.gov/credentials/vct/professional-license\"]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"license_number\"]\n                    },\n                    {\n                        \"path\": [\"license_type\"]\n                    },\n                    {\n                        \"path\": [\"holder_name\"]\n                    },\n                    {\n                        \"path\": [\"expiration_date\"]\n                    },\n                    {\n                        \"path\": [\"issuing_authority\"]\n                    }\n                ]\n            }\n        ]\n    },\n    \"registrationCert\": {\n        \"body\": {\n            \"privacy_policy\": \"https://your-domain.com/privacy-policy\",\n            \"purpose\": [\n                {\n                    \"locale\": \"en-US\",\n                    \"name\": \"Professional license verification for service authorization\"\n                }\n            ],\n            \"contact\": {\n                \"website\": \"https://your-domain.com/contact\",\n                \"email\": \"compliance@your-domain.com\",\n                \"phone\": \"+1 555 987 6543\"\n            }\n        }\n    },\n    \"webhook\": {\n        \"url\": \"https://license-verification.your-domain.com/webhook\"\n    }\n  }'\n\n# 2. Request license verification\ncurl -X 'POST' \\\n  'http://localhost:3000/presentation-management/request' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"response_type\": \"uri\",\n    \"requestId\": \"license-verification\"\n  }'\n</code></pre>"},{"location":"getting-started/presentation/api-guide/#multi-credential-verification","title":"Multi-Credential Verification","text":"<p>Request multiple credential types in a single presentation:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/presentation-management' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"comprehensive-verification\",\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"identity\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\"https://government.gov/credentials/vct/pid\"]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"given_name\"]\n                    },\n                    {\n                        \"path\": [\"family_name\"]\n                    }\n                ]\n            },\n            {\n                \"id\": \"employment\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\"https://employer.com/credentials/vct/employee\"]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"employee_id\"]\n                    },\n                    {\n                        \"path\": [\"department\"]\n                    }\n                ]\n            },\n            {\n                \"id\": \"certification\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\"https://cert-authority.org/credentials/vct/certification\"]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"certification_level\"]\n                    },\n                    {\n                        \"path\": [\"valid_until\"]\n                    }\n                ]\n            }\n        ]\n    },\n    \"registrationCert\": {\n        \"body\": {\n            \"privacy_policy\": \"https://your-domain.com/privacy-policy\",\n            \"purpose\": [\n                {\n                    \"locale\": \"en-US\",\n                    \"name\": \"Comprehensive verification for high-security access\"\n                }\n            ],\n            \"contact\": {\n                \"email\": \"security@your-domain.com\"\n            }\n        }\n    }\n  }'\n</code></pre>"},{"location":"getting-started/presentation/api-guide/#webhook-integration","title":"Webhook Integration","text":""},{"location":"getting-started/presentation/api-guide/#webhook-handler-implementation","title":"Webhook Handler Implementation","text":"<p>Example webhook handler in Node.js/Express:</p> <pre><code>const express = require('express');\nconst app = express();\n\napp.use(express.json());\n\napp.post('/presentation-webhook', (req, res) =&gt; {\n    try {\n        const { sessionId, requestId, status, verifiedClaims } = req.body;\n\n        // Validate the webhook payload\n        if (!sessionId || !requestId || !verifiedClaims) {\n            return res.status(400).json({ error: 'Invalid payload' });\n        }\n\n        // Process based on presentation type\n        switch (requestId) {\n            case 'employee-verification':\n                handleEmployeeVerification(verifiedClaims);\n                break;\n            case 'age-verification':\n                handleAgeVerification(verifiedClaims);\n                break;\n            case 'license-verification':\n                handleLicenseVerification(verifiedClaims);\n                break;\n            default:\n                console.log('Unknown request type:', requestId);\n        }\n\n        res.status(200).json({ received: true });\n    } catch (error) {\n        console.error('Webhook error:', error);\n        res.status(500).json({ error: 'Internal server error' });\n    }\n});\n\nfunction handleEmployeeVerification(claims) {\n    const employeeData = claims['employee-card'];\n    if (employeeData) {\n        // Grant access based on employee data\n        grantFacilityAccess(\n            employeeData.employee_id,\n            employeeData.clearance_level,\n        );\n    }\n}\n\nfunction handleAgeVerification(claims) {\n    const pidData = claims['pid'];\n    if (pidData &amp;&amp; pidData.age_over_18) {\n        // Allow access to restricted content\n        allowRestrictedAccess();\n    }\n}\n\nfunction handleLicenseVerification(claims) {\n    const licenseData = claims['professional-license'];\n    if (licenseData) {\n        // Verify license is valid and not expired\n        const isValid = validateLicense(licenseData);\n        if (isValid) {\n            authorizeService(licenseData.license_number);\n        }\n    }\n}\n\napp.listen(3001, () =&gt; {\n    console.log('Webhook server running on port 3001');\n});\n</code></pre>"},{"location":"getting-started/presentation/api-guide/#webhook-payload-structure","title":"Webhook Payload Structure","text":"<p>EUDIPLO sends the following payload to your webhook:</p> <pre><code>{\n    \"sessionId\": \"session-abc123\",\n    \"requestId\": \"employee-verification\",\n    \"status\": \"completed\",\n    \"verifiedClaims\": {\n        \"employee-card\": {\n            \"employee_id\": \"EMP001234\",\n            \"department\": \"Engineering\",\n            \"clearance_level\": \"Level 3\",\n            \"employment_status\": \"Active\"\n        }\n    },\n    \"verificationDetails\": {\n        \"timestamp\": \"2024-08-08T10:35:00Z\",\n        \"issuer_verified\": true,\n        \"signature_valid\": true,\n        \"not_revoked\": true,\n        \"not_expired\": true\n    }\n}\n</code></pre>"},{"location":"getting-started/presentation/api-guide/#error-handling","title":"Error Handling","text":""},{"location":"getting-started/presentation/api-guide/#common-api-errors","title":"Common API Errors","text":""},{"location":"getting-started/presentation/api-guide/#configuration-not-found","title":"Configuration Not Found","text":"<pre><code>HTTP/1.1 404 Not Found\n{\n    \"error\": \"configuration_not_found\",\n    \"message\": \"No presentation configuration found with ID 'unknown-config'\"\n}\n</code></pre>"},{"location":"getting-started/presentation/api-guide/#invalid-dcql-query","title":"Invalid DCQL Query","text":"<pre><code>HTTP/1.1 400 Bad Request\n{\n    \"error\": \"invalid_dcql\",\n    \"message\": \"DCQL query structure is invalid\",\n    \"details\": \"Missing required field 'credentials'\"\n}\n</code></pre>"},{"location":"getting-started/presentation/api-guide/#authentication-error","title":"Authentication Error","text":"<pre><code>HTTP/1.1 401 Unauthorized\n{\n    \"error\": \"invalid_token\",\n    \"message\": \"The access token is invalid or expired\"\n}\n</code></pre>"},{"location":"getting-started/presentation/api-guide/#error-recovery","title":"Error Recovery","text":"<p>Implement proper error handling in your integration:</p> <pre><code>async function createPresentationRequest(requestId) {\n    try {\n        const response = await fetch('/presentation-management/request', {\n            method: 'POST',\n            headers: {\n                Authorization: `Bearer ${token}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                response_type: 'uri',\n                requestId: requestId,\n            }),\n        });\n\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(`API Error: ${error.message}`);\n        }\n\n        return await response.json();\n    } catch (error) {\n        console.error('Failed to create presentation request:', error);\n\n        // Implement retry logic for transient errors\n        if (error.message.includes('rate limit')) {\n            await new Promise((resolve) =&gt; setTimeout(resolve, 60000));\n            return createPresentationRequest(requestId); // Retry\n        }\n\n        throw error;\n    }\n}\n</code></pre>"},{"location":"getting-started/presentation/api-guide/#testing","title":"Testing","text":""},{"location":"getting-started/presentation/api-guide/#testing-with-swagger-ui","title":"Testing with Swagger UI","text":"<p>EUDIPLO provides a Swagger UI for API testing:</p> <ol> <li>Navigate to <code>http://localhost:3000/api</code></li> <li>Authenticate using OAuth 2.0</li> <li>Test presentation configuration endpoints</li> <li>Generate QR codes for wallet testing</li> </ol>"},{"location":"getting-started/presentation/api-guide/#integration-testing","title":"Integration Testing","text":"<p>Example test for presentation configuration:</p> <pre><code>const { expect } = require('chai');\nconst request = require('supertest');\n\ndescribe('Presentation API', () =&gt; {\n    let authToken;\n    let configId;\n\n    beforeEach(async () =&gt; {\n        authToken = await getAuthToken();\n        configId = 'test-config-' + Date.now();\n    });\n\n    it('should create a presentation configuration', async () =&gt; {\n        const config = {\n            id: configId,\n            dcql_query: {\n                credentials: [\n                    {\n                        id: 'test-credential',\n                        format: 'dc+sd-jwt',\n                        meta: {\n                            vct_values: [\n                                'https://test.com/credentials/vct/test',\n                            ],\n                        },\n                        claims: [{ path: ['test_claim'] }],\n                    },\n                ],\n            },\n            registrationCert: {\n                body: {\n                    privacy_policy: 'https://test.com/privacy',\n                    purpose: [\n                        {\n                            locale: 'en-US',\n                            name: 'Test purpose',\n                        },\n                    ],\n                    contact: { email: 'test@test.com' },\n                },\n            },\n        };\n\n        const response = await request(app)\n            .post('/presentation-management')\n            .set('Authorization', `Bearer ${authToken}`)\n            .send(config)\n            .expect(201);\n\n        expect(response.body.id).to.equal(configId);\n    });\n\n    it('should create a presentation request', async () =&gt; {\n        const response = await request(app)\n            .post('/presentation-management/request')\n            .set('Authorization', `Bearer ${authToken}`)\n            .send({\n                response_type: 'uri',\n                requestId: configId,\n            })\n            .expect(201);\n\n        expect(response.body).to.have.property('uri');\n        expect(response.body).to.have.property('session_id');\n    });\n});\n</code></pre>"},{"location":"getting-started/presentation/api-guide/#best-practices","title":"Best Practices","text":""},{"location":"getting-started/presentation/api-guide/#api-design","title":"API Design","text":"<ul> <li>Use meaningful configuration IDs that describe the verification purpose</li> <li>Implement idempotent operations for configuration updates</li> <li>Cache configurations to reduce API calls</li> <li>Handle rate limits gracefully with exponential backoff</li> </ul>"},{"location":"getting-started/presentation/api-guide/#security","title":"Security","text":"<ul> <li>Validate all webhook payloads before processing</li> <li>Use HTTPS everywhere for secure communication</li> <li>Implement proper error handling without exposing sensitive data</li> <li>Log security events for audit and monitoring</li> </ul>"},{"location":"getting-started/presentation/api-guide/#performance","title":"Performance","text":"<ul> <li>Use webhook endpoints for asynchronous processing</li> <li>Implement connection pooling for high-volume scenarios</li> <li>Monitor API response times and optimize accordingly</li> <li>Cache authentication tokens until expiration</li> </ul>"},{"location":"getting-started/presentation/api-guide/#next-steps","title":"Next Steps","text":"<ul> <li>Explore Integration Examples for complete   implementation scenarios</li> <li>Review Authentication for security best practices</li> </ul>"},{"location":"getting-started/presentation/authentication/","title":"Authentication &amp; Security","text":"<p>EUDIPLO's presentation system implements comprehensive security measures to protect user data and ensure secure credential verification. This guide covers authentication requirements, security best practices, and privacy considerations.</p>"},{"location":"getting-started/presentation/authentication/#api-authentication","title":"API Authentication","text":""},{"location":"getting-started/presentation/authentication/#oauth-20-bearer-tokens","title":"OAuth 2.0 Bearer Tokens","text":"<p>All presentation management endpoints require OAuth 2.0 authentication:</p> <pre><code>curl -X 'GET' \\\n  'http://localhost:3000/presentation-management' \\\n  -H 'Authorization: Bearer eyJhb...npoNk'\n</code></pre> <p>The bearer token must:</p> <ul> <li>Be obtained from EUDIPLO's OAuth 2.0 authorization server</li> <li>Include appropriate scopes (<code>api:read</code>, <code>api:write</code>)</li> <li>Be included in the <code>Authorization</code> header</li> <li>Be valid and not expired</li> </ul>"},{"location":"getting-started/presentation/authentication/#tenant-isolation","title":"Tenant Isolation","text":"<p>EUDIPLO provides strict tenant isolation:</p> <ul> <li>Token-based scoping: Each token is associated with a specific tenant</li> <li>Data isolation: Tenants cannot access each other's configurations or data</li> <li>Resource separation: Presentation configurations are tenant-specific</li> <li>Session isolation: Presentation sessions are scoped to the requesting   tenant</li> </ul>"},{"location":"getting-started/presentation/authentication/#credential-verification-security","title":"Credential Verification Security","text":""},{"location":"getting-started/presentation/authentication/#supported-verification-methods","title":"Supported Verification Methods","text":"Check Type Description Implementation Signature Verification Validates cryptographic signatures JWS/JWK verification Issuer Trust Verifies issuer against trusted registries Certificate chain validation Revocation Status Checks if credential is revoked OAuth Token Status Lists Expiration Validation Ensures credential is not expired <code>exp</code> claim validation Binding Verification Validates key binding if present Proof-of-possession verification"},{"location":"getting-started/presentation/authentication/#privacy-protection","title":"Privacy Protection","text":""},{"location":"getting-started/presentation/authentication/#data-minimization","title":"Data Minimization","text":"<p>EUDIPLO implements strict data minimization principles:</p> <pre><code>{\n    \"data_handling\": {\n        \"collected_data\": \"Only requested claims\",\n        \"storage_duration\": \"Session-based, automatically cleaned\",\n        \"purpose_limitation\": \"Defined in registration certificate\",\n        \"user_consent\": \"Explicit consent for each presentation\"\n    }\n}\n</code></pre>"},{"location":"getting-started/presentation/authentication/#selective-disclosure","title":"Selective Disclosure","text":"<p>Use SD-JWT credentials for fine-grained privacy control:</p> <pre><code>{\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"pid\",\n                \"format\": \"dc+sd-jwt\",\n                \"claims\": [\n                    {\n                        \"path\": [\"age_over_18\"]\n                    }\n                ]\n            }\n        ]\n    }\n}\n</code></pre> <p>Benefits:</p> <ul> <li>Users only reveal necessary attributes</li> <li>Cryptographic privacy guarantees</li> <li>Reduced exposure of sensitive information</li> </ul>"},{"location":"getting-started/presentation/authentication/#session-security","title":"Session Security","text":""},{"location":"getting-started/presentation/authentication/#session-management","title":"Session Management","text":"<p>EUDIPLO creates secure sessions for each presentation request:</p> <pre><code>{\n    \"session\": {\n        \"id\": \"session-abc123\",\n        \"created_at\": \"2024-08-08T10:30:00Z\",\n        \"expires_at\": \"2024-08-08T11:00:00Z\",\n        \"status\": \"pending\",\n        \"security_level\": \"high\"\n    }\n}\n</code></pre>"},{"location":"getting-started/presentation/authentication/#session-properties","title":"Session Properties","text":"Property Description Security Benefit Time-limited Sessions expire automatically Prevents replay attacks Single-use Each session is for one presentation Prevents reuse attacks Encrypted storage Session data is encrypted at rest Protects against data breaches Audit logging All session events are logged Enables security monitoring"},{"location":"getting-started/presentation/authentication/#session-cleanup","title":"Session Cleanup","text":"<p>EUDIPLO automatically cleans up session data:</p> <ul> <li>Automatic expiration: Sessions expire after 30 minutes</li> <li>Data purging: Sensitive data is securely deleted</li> <li>Audit retention: Only security logs are retained</li> <li>GDPR compliance: Personal data is not stored long-term</li> </ul>"},{"location":"getting-started/presentation/authentication/#webhook-security","title":"Webhook Security","text":""},{"location":"getting-started/presentation/authentication/#securing-webhook-endpoints","title":"Securing Webhook Endpoints","text":"<p>Protect your webhook endpoints that receive verified presentations:</p> <pre><code>{\n    \"webhook\": {\n        \"url\": \"https://your-backend.com/presentation-webhook\",\n        \"headers\": {\n            \"Authorization\": \"Bearer your-secret-token\",\n            \"X-API-Key\": \"your-api-key\"\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/presentation/authentication/#webhook-payload-validation","title":"Webhook Payload Validation","text":"<p>Validate incoming webhook payloads:</p> <pre><code>// Example webhook handler\napp.post('/presentation-webhook', (req, res) =&gt; {\n    // 1. Verify authentication\n    const authHeader = req.headers.authorization;\n    if (!verifyAuthToken(authHeader)) {\n        return res.status(401).send('Unauthorized');\n    }\n\n    // 2. Validate payload structure\n    const { sessionId, requestId, verifiedClaims } = req.body;\n    if (!sessionId || !requestId || !verifiedClaims) {\n        return res.status(400).send('Invalid payload');\n    }\n\n    // 3. Process verified claims\n    processVerifiedClaims(verifiedClaims);\n\n    res.status(200).send('OK');\n});\n</code></pre>"},{"location":"getting-started/presentation/authentication/#https-requirements","title":"HTTPS Requirements","text":"<ul> <li>Always use HTTPS for webhook endpoints</li> <li>Validate TLS certificates to prevent man-in-the-middle attacks</li> <li>Use strong authentication tokens for webhook requests</li> <li>Implement rate limiting to prevent abuse</li> </ul>"},{"location":"getting-started/presentation/authentication/#troubleshooting-security-issues","title":"Troubleshooting Security Issues","text":""},{"location":"getting-started/presentation/authentication/#common-authentication-problems","title":"Common Authentication Problems","text":""},{"location":"getting-started/presentation/authentication/#invalid-bearer-token","title":"Invalid Bearer Token","text":"<pre><code>HTTP/1.1 401 Unauthorized\n{\n    \"error\": \"invalid_token\",\n    \"error_description\": \"The access token is invalid or expired\"\n}\n</code></pre> <p>Solution: Refresh your OAuth token or obtain a new one.</p>"},{"location":"getting-started/presentation/authentication/#webhook-security-issues","title":"Webhook Security Issues","text":""},{"location":"getting-started/presentation/authentication/#webhook-authentication-failure","title":"Webhook Authentication Failure","text":"<pre><code># Check webhook endpoint authentication\ncurl -X 'POST' \\\n  'https://your-backend.com/presentation-webhook' \\\n  -H 'Authorization: Bearer your-secret-token' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"test\": \"payload\"}'\n</code></pre>"},{"location":"getting-started/presentation/authentication/#tls-certificate-problems","title":"TLS Certificate Problems","text":"<ul> <li>Verify certificate validity and chain</li> <li>Check for certificate expiration</li> <li>Ensure proper hostname matching</li> </ul>"},{"location":"getting-started/presentation/authentication/#next-steps","title":"Next Steps","text":"<ul> <li>Review API Guide for secure implementation patterns</li> <li>Explore Integration Examples with security   considerations</li> </ul>"},{"location":"getting-started/presentation/integration-examples/","title":"Integration Examples","text":"<p>This guide provides real-world integration examples for implementing credential presentation flows with EUDIPLO. Learn how to build complete solutions for common use cases.</p>"},{"location":"getting-started/presentation/integration-examples/#example-1-age-verification-for-content-access","title":"Example 1: Age Verification for Content Access","text":""},{"location":"getting-started/presentation/integration-examples/#scenario","title":"Scenario","text":"<p>A streaming platform needs to verify user age before allowing access to age-restricted content.</p>"},{"location":"getting-started/presentation/integration-examples/#implementation","title":"Implementation","text":""},{"location":"getting-started/presentation/integration-examples/#1-create-age-verification-configuration","title":"1. Create Age Verification Configuration","text":"<pre><code>curl -X 'POST' \\\n  'http://localhost:3000/presentation-management' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"age-verification-streaming\",\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"age-credential\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\"https://government.gov/credentials/vct/pid\"]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"age_over_18\"]\n                    }\n                ]\n            }\n        ]\n    },\n    \"registrationCert\": {\n        \"body\": {\n            \"privacy_policy\": \"https://streamingapp.com/privacy-policy\",\n            \"purpose\": [\n                {\n                    \"locale\": \"en-US\",\n                    \"name\": \"Age verification for access to age-restricted content\"\n                },\n                {\n                    \"locale\": \"de-DE\",\n                    \"name\": \"Altersverifikation f\u00fcr den Zugang zu altersbeschr\u00e4nkten Inhalten\"\n                }\n            ],\n            \"contact\": {\n                \"website\": \"https://streamingapp.com/contact\",\n                \"email\": \"privacy@streamingapp.com\",\n                \"phone\": \"+1 555 STREAM1\"\n            },\n            \"legal_basis\": \"Legitimate interest for content age restrictions compliance\",\n            \"data_retention\": \"Verification status stored for 24 hours maximum\"\n        }\n    },\n    \"webhook\": {\n        \"url\": \"https://api.streamingapp.com/age-verification-webhook\"\n    }\n  }'\n</code></pre>"},{"location":"getting-started/presentation/integration-examples/#2-web-application-integration","title":"2. Web Application Integration","text":"<pre><code>// Frontend: Request age verification\nasync function requestAgeVerification(userId) {\n    try {\n        const response = await fetch('/api/request-age-verification', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userToken}`,\n            },\n            body: JSON.stringify({ userId }),\n        });\n\n        const result = await response.json();\n\n        // Display QR code or link to user\n        showVerificationModal(result.uri, result.session_id);\n\n        // Poll for completion\n        pollVerificationStatus(result.session_id);\n    } catch (error) {\n        console.error('Age verification request failed:', error);\n        showErrorMessage('Unable to start age verification. Please try again.');\n    }\n}\n\n// Poll for verification completion\nasync function pollVerificationStatus(sessionId) {\n    const pollInterval = setInterval(async () =&gt; {\n        try {\n            const response = await fetch(\n                `/api/verification-status/${sessionId}`,\n            );\n            const status = await response.json();\n\n            if (status.completed) {\n                clearInterval(pollInterval);\n                if (status.ageVerified) {\n                    redirectToRestrictedContent();\n                } else {\n                    showAgeVerificationFailed();\n                }\n            }\n        } catch (error) {\n            console.error('Status polling error:', error);\n        }\n    }, 2000);\n\n    // Stop polling after 5 minutes\n    setTimeout(() =&gt; clearInterval(pollInterval), 300000);\n}\n</code></pre>"},{"location":"getting-started/presentation/integration-examples/#3-backend-implementation","title":"3. Backend Implementation","text":"<pre><code>const express = require('express');\nconst app = express();\n\n// Store verification sessions temporarily\nconst verificationSessions = new Map();\n\n// Request age verification endpoint\napp.post('/api/request-age-verification', async (req, res) =&gt; {\n    try {\n        const { userId } = req.body;\n\n        // Create presentation request\n        const presentationResponse = await fetch(\n            'http://localhost:3000/presentation-management/request',\n            {\n                method: 'POST',\n                headers: {\n                    Authorization: `Bearer ${eudiploBearerToken}`,\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    response_type: 'uri',\n                    requestId: 'age-verification-streaming',\n                }),\n            },\n        );\n\n        const presentationData = await presentationResponse.json();\n\n        // Store session for tracking\n        verificationSessions.set(presentationData.session_id, {\n            userId,\n            status: 'pending',\n            createdAt: new Date(),\n        });\n\n        res.json({\n            uri: presentationData.uri,\n            session_id: presentationData.session_id,\n        });\n    } catch (error) {\n        console.error('Age verification request error:', error);\n        res.status(500).json({\n            error: 'Failed to create verification request',\n        });\n    }\n});\n\n// Webhook handler for verification results\napp.post('/age-verification-webhook', (req, res) =&gt; {\n    try {\n        const { sessionId, verifiedClaims, status } = req.body;\n\n        if (verificationSessions.has(sessionId)) {\n            const session = verificationSessions.get(sessionId);\n\n            if (status === 'completed' &amp;&amp; verifiedClaims['age-credential']) {\n                const ageVerified =\n                    verifiedClaims['age-credential'].age_over_18;\n\n                // Update session status\n                session.status = 'completed';\n                session.ageVerified = ageVerified;\n                session.completedAt = new Date();\n\n                // Grant or deny access\n                if (ageVerified) {\n                    grantRestrictedContentAccess(session.userId);\n                }\n\n                verificationSessions.set(sessionId, session);\n            }\n        }\n\n        res.status(200).json({ received: true });\n    } catch (error) {\n        console.error('Webhook processing error:', error);\n        res.status(500).json({ error: 'Webhook processing failed' });\n    }\n});\n\n// Status check endpoint\napp.get('/api/verification-status/:sessionId', (req, res) =&gt; {\n    const { sessionId } = req.params;\n    const session = verificationSessions.get(sessionId);\n\n    if (session) {\n        res.json({\n            completed: session.status === 'completed',\n            ageVerified: session.ageVerified || false,\n        });\n    } else {\n        res.status(404).json({ error: 'Session not found' });\n    }\n});\n\nfunction grantRestrictedContentAccess(userId) {\n    // Set user permission for 24 hours\n    const accessExpiry = new Date(Date.now() + 24 * 60 * 60 * 1000);\n    userDatabase.updateRestrictedAccess(userId, true, accessExpiry);\n}\n</code></pre>"},{"location":"getting-started/presentation/integration-examples/#example-2-employee-access-control-system","title":"Example 2: Employee Access Control System","text":""},{"location":"getting-started/presentation/integration-examples/#scenario_1","title":"Scenario","text":"<p>A corporate facility requires employee credential verification for secure area access.</p>"},{"location":"getting-started/presentation/integration-examples/#implementation_1","title":"Implementation","text":""},{"location":"getting-started/presentation/integration-examples/#1-employee-verification-configuration","title":"1. Employee Verification Configuration","text":"<pre><code>curl -X 'POST' \\\n  'http://localhost:3000/presentation-management' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"employee-access-control\",\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"employee-badge\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\"https://company.com/credentials/vct/employee\"]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"employee_id\"]\n                    },\n                    {\n                        \"path\": [\"department\"]\n                    },\n                    {\n                        \"path\": [\"clearance_level\"]\n                    },\n                    {\n                        \"path\": [\"employment_status\"]\n                    },\n                    {\n                        \"path\": [\"valid_until\"]\n                    }\n                ]\n            }\n        ]\n    },\n    \"registrationCert\": {\n        \"body\": {\n            \"privacy_policy\": \"https://company.com/privacy-policy\",\n            \"purpose\": [\n                {\n                    \"locale\": \"en-US\",\n                    \"name\": \"Employee verification for secure facility access control\"\n                }\n            ],\n            \"contact\": {\n                \"website\": \"https://company.com/hr-contact\",\n                \"email\": \"hr-privacy@company.com\",\n                \"phone\": \"+1 555 COMPANY\"\n            },\n            \"legal_basis\": \"Legitimate interest for facility security and employee safety\",\n            \"data_retention\": \"Access logs retained for security audit purposes only\"\n        }\n    },\n    \"webhook\": {\n        \"url\": \"https://access-control.company.com/employee-verification-webhook\"\n    }\n  }'\n</code></pre>"},{"location":"getting-started/presentation/integration-examples/#2-access-control-terminal-integration","title":"2. Access Control Terminal Integration","text":"<pre><code>import requests\nimport qrcode\nimport time\nfrom datetime import datetime, timedelta\n\nclass AccessControlTerminal:\n    def __init__(self, terminal_id, eudiplo_token):\n        self.terminal_id = terminal_id\n        self.eudiplo_token = eudiplo_token\n        self.base_url = \"http://localhost:3000\"\n        self.pending_sessions = {}\n\n    def request_employee_verification(self, door_id):\n        \"\"\"Request employee credential verification\"\"\"\n        try:\n            response = requests.post(\n                f\"{self.base_url}/presentation-management/request\",\n                headers={\n                    \"Authorization\": f\"Bearer {self.eudiplo_token}\",\n                    \"Content-Type\": \"application/json\"\n                },\n                json={\n                    \"response_type\": \"qrcode\",\n                    \"requestId\": \"employee-access-control\"\n                }\n            )\n\n            if response.status_code == 200:\n                # Display QR code on terminal screen\n                qr_image = response.content\n                self.display_qr_code(qr_image)\n\n                # Extract session ID from response headers or separate call\n                session_id = self.get_session_id()\n\n                # Track verification session\n                self.pending_sessions[session_id] = {\n                    'door_id': door_id,\n                    'requested_at': datetime.now(),\n                    'status': 'pending'\n                }\n\n                return session_id\n\n        except Exception as e:\n            print(f\"Verification request failed: {e}\")\n            self.display_error(\"Verification system unavailable\")\n            return None\n\n    def display_qr_code(self, qr_image_data):\n        \"\"\"Display QR code on terminal screen\"\"\"\n        # Implementation depends on terminal hardware\n        print(\"QR Code displayed on terminal\")\n\n    def display_error(self, message):\n        \"\"\"Display error message on terminal\"\"\"\n        print(f\"ERROR: {message}\")\n\n    def grant_access(self, door_id, employee_data):\n        \"\"\"Grant access based on employee verification\"\"\"\n        clearance_required = self.get_door_clearance_requirement(door_id)\n        employee_clearance = employee_data.get('clearance_level')\n\n        if self.check_clearance(employee_clearance, clearance_required):\n            self.unlock_door(door_id)\n            self.log_access_granted(door_id, employee_data['employee_id'])\n            self.display_message(\"Access Granted\", color=\"green\")\n        else:\n            self.log_access_denied(door_id, employee_data['employee_id'], \"Insufficient clearance\")\n            self.display_message(\"Access Denied - Insufficient Clearance\", color=\"red\")\n\n    def check_clearance(self, employee_level, required_level):\n        \"\"\"Check if employee clearance meets requirements\"\"\"\n        clearance_hierarchy = {\n            'Level 1': 1,\n            'Level 2': 2,\n            'Level 3': 3,\n            'Level 4': 4,\n            'Executive': 5\n        }\n\n        employee_rank = clearance_hierarchy.get(employee_level, 0)\n        required_rank = clearance_hierarchy.get(required_level, 0)\n\n        return employee_rank &gt;= required_rank\n\n# Webhook handler for terminal\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\nterminal = AccessControlTerminal(\"TERM001\", \"your-eudiplo-token\")\n\n@app.route('/employee-verification-webhook', methods=['POST'])\ndef handle_employee_verification():\n    try:\n        data = request.get_json()\n        session_id = data.get('sessionId')\n        verified_claims = data.get('verifiedClaims', {})\n        status = data.get('status')\n\n        if session_id in terminal.pending_sessions:\n            session = terminal.pending_sessions[session_id]\n\n            if status == 'completed' and 'employee-badge' in verified_claims:\n                employee_data = verified_claims['employee-badge']\n\n                # Validate employment status\n                if employee_data.get('employment_status') == 'Active':\n                    terminal.grant_access(session['door_id'], employee_data)\n                else:\n                    terminal.display_message(\"Access Denied - Employment Status Invalid\", color=\"red\")\n\n                # Clean up session\n                del terminal.pending_sessions[session_id]\n\n        return jsonify({'received': True})\n\n    except Exception as e:\n        print(f\"Webhook error: {e}\")\n        return jsonify({'error': str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n</code></pre>"},{"location":"getting-started/presentation/integration-examples/#example-3-professional-license-verification","title":"Example 3: Professional License Verification","text":""},{"location":"getting-started/presentation/integration-examples/#scenario_2","title":"Scenario","text":"<p>A marketplace platform verifying service provider credentials before allowing them to offer services.</p>"},{"location":"getting-started/presentation/integration-examples/#implementation_2","title":"Implementation","text":""},{"location":"getting-started/presentation/integration-examples/#1-license-verification-configuration","title":"1. License Verification Configuration","text":"<pre><code>curl -X 'POST' \\\n  'http://localhost:3000/presentation-management' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"professional-license-verification\",\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"professional-license\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\n                        \"https://medical-board.gov/credentials/vct/medical-license\",\n                        \"https://law-society.org/credentials/vct/law-license\",\n                        \"https://engineering-board.org/credentials/vct/engineering-license\"\n                    ]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"license_number\"]\n                    },\n                    {\n                        \"path\": [\"license_type\"]\n                    },\n                    {\n                        \"path\": [\"holder_name\"]\n                    },\n                    {\n                        \"path\": [\"issuing_authority\"]\n                    },\n                    {\n                        \"path\": [\"issue_date\"]\n                    },\n                    {\n                        \"path\": [\"expiration_date\"]\n                    },\n                    {\n                        \"path\": [\"specializations\"]\n                    }\n                ]\n            },\n            {\n                \"id\": \"identity-document\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\"https://government.gov/credentials/vct/pid\"]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"given_name\"]\n                    },\n                    {\n                        \"path\": [\"family_name\"]\n                    }\n                ]\n            }\n        ]\n    },\n    \"registrationCert\": {\n        \"body\": {\n            \"privacy_policy\": \"https://marketplace.com/privacy-policy\",\n            \"purpose\": [\n                {\n                    \"locale\": \"en-US\",\n                    \"name\": \"Professional license verification for service provider qualification\"\n                }\n            ],\n            \"contact\": {\n                \"website\": \"https://marketplace.com/support\",\n                \"email\": \"verification@marketplace.com\",\n                \"phone\": \"+1 555 MARKET1\"\n            },\n            \"legal_basis\": \"Contractual necessity for service provider onboarding\",\n            \"data_retention\": \"License verification data retained for regulatory compliance\"\n        }\n    },\n    \"webhook\": {\n        \"url\": \"https://api.marketplace.com/license-verification-webhook\"\n    }\n  }'\n</code></pre>"},{"location":"getting-started/presentation/integration-examples/#2-service-provider-onboarding","title":"2. Service Provider Onboarding","text":"<pre><code>const express = require('express');\nconst mongoose = require('mongoose');\n\n// Service Provider Schema\nconst ServiceProviderSchema = new mongoose.Schema({\n    userId: { type: String, required: true, unique: true },\n    verificationStatus: {\n        type: String,\n        enum: ['pending', 'verified', 'rejected', 'expired'],\n        default: 'pending',\n    },\n    licenseData: {\n        number: String,\n        type: String,\n        authority: String,\n        expirationDate: Date,\n        specializations: [String],\n    },\n    verifiedAt: Date,\n    nextVerificationDue: Date,\n});\n\nconst ServiceProvider = mongoose.model(\n    'ServiceProvider',\n    ServiceProviderSchema,\n);\n\nclass LicenseVerificationService {\n    async startVerificationProcess(userId, serviceCategory) {\n        try {\n            // Create or update service provider record\n            let provider = await ServiceProvider.findOne({ userId });\n            if (!provider) {\n                provider = new ServiceProvider({\n                    userId,\n                    verificationStatus: 'pending',\n                });\n                await provider.save();\n            }\n\n            // Request license verification\n            const response = await fetch(\n                'http://localhost:3000/presentation-management/request',\n                {\n                    method: 'POST',\n                    headers: {\n                        Authorization: `Bearer ${process.env.EUDIPLO_TOKEN}`,\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        response_type: 'uri',\n                        requestId: 'professional-license-verification',\n                    }),\n                },\n            );\n\n            const result = await response.json();\n\n            // Store session mapping\n            await this.storeVerificationSession(result.session_id, userId);\n\n            return {\n                verificationUri: result.uri,\n                sessionId: result.session_id,\n                status: 'verification_requested',\n            };\n        } catch (error) {\n            console.error('Verification process error:', error);\n            throw new Error('Failed to start verification process');\n        }\n    }\n\n    async processVerificationResult(sessionId, verifiedClaims) {\n        try {\n            const userId = await this.getUserFromSession(sessionId);\n            const provider = await ServiceProvider.findOne({ userId });\n\n            if (!provider) {\n                throw new Error('Service provider not found');\n            }\n\n            const licenseData = verifiedClaims['professional-license'];\n            const identityData = verifiedClaims['identity-document'];\n\n            // Validate license expiration\n            const expirationDate = new Date(licenseData.expiration_date);\n            const now = new Date();\n\n            if (expirationDate &lt;= now) {\n                provider.verificationStatus = 'rejected';\n                await provider.save();\n\n                await this.notifyUser(\n                    userId,\n                    'verification_failed',\n                    'License has expired',\n                );\n                return;\n            }\n\n            // Validate name matching\n            const licenseHolderName = licenseData.holder_name.toLowerCase();\n            const providedName =\n                `${identityData.given_name} ${identityData.family_name}`.toLowerCase();\n\n            if (!this.namesMatch(licenseHolderName, providedName)) {\n                provider.verificationStatus = 'rejected';\n                await provider.save();\n\n                await this.notifyUser(\n                    userId,\n                    'verification_failed',\n                    'Name mismatch between license and identity',\n                );\n                return;\n            }\n\n            // Cross-check with licensing authority\n            const licenseValid = await this.verifyWithLicensingAuthority(\n                licenseData.license_number,\n                licenseData.issuing_authority,\n            );\n\n            if (!licenseValid) {\n                provider.verificationStatus = 'rejected';\n                await provider.save();\n\n                await this.notifyUser(\n                    userId,\n                    'verification_failed',\n                    'License verification failed with issuing authority',\n                );\n                return;\n            }\n\n            // Update provider with verified license data\n            provider.licenseData = {\n                number: licenseData.license_number,\n                type: licenseData.license_type,\n                authority: licenseData.issuing_authority,\n                expirationDate: expirationDate,\n                specializations: licenseData.specializations || [],\n            };\n            provider.verificationStatus = 'verified';\n            provider.verifiedAt = new Date();\n            provider.nextVerificationDue =\n                this.calculateNextVerificationDate(expirationDate);\n\n            await provider.save();\n\n            // Enable service provider capabilities\n            await this.enableServiceProviderAccess(userId, licenseData);\n\n            await this.notifyUser(\n                userId,\n                'verification_successful',\n                'License verified successfully',\n            );\n        } catch (error) {\n            console.error('Verification result processing error:', error);\n            throw error;\n        }\n    }\n\n    async verifyWithLicensingAuthority(licenseNumber, authority) {\n        // Implementation depends on specific licensing authority APIs\n        try {\n            const response = await fetch(`${authority}/api/verify-license`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ license_number: licenseNumber }),\n            });\n\n            const result = await response.json();\n            return result.valid === true;\n        } catch (error) {\n            console.error('Authority verification error:', error);\n            return false;\n        }\n    }\n\n    namesMatch(licenseName, providedName) {\n        // Implement fuzzy name matching logic\n        return (\n            licenseName.includes(providedName) ||\n            providedName.includes(licenseName)\n        );\n    }\n\n    calculateNextVerificationDate(licenseExpiration) {\n        // Schedule re-verification 30 days before license expires\n        const reVerificationDate = new Date(licenseExpiration);\n        reVerificationDate.setDate(reVerificationDate.getDate() - 30);\n        return reVerificationDate;\n    }\n\n    async enableServiceProviderAccess(userId, licenseData) {\n        // Enable specific service categories based on license type\n        const serviceCategories = this.mapLicenseToServiceCategories(\n            licenseData.license_type,\n        );\n\n        // Update user permissions in your system\n        await this.updateUserPermissions(userId, serviceCategories);\n    }\n}\n\n// Webhook endpoint\napp.post('/license-verification-webhook', async (req, res) =&gt; {\n    try {\n        const { sessionId, verifiedClaims, status } = req.body;\n\n        if (status === 'completed' &amp;&amp; verifiedClaims) {\n            const verificationService = new LicenseVerificationService();\n            await verificationService.processVerificationResult(\n                sessionId,\n                verifiedClaims,\n            );\n        }\n\n        res.status(200).json({ received: true });\n    } catch (error) {\n        console.error('License verification webhook error:', error);\n        res.status(500).json({ error: 'Webhook processing failed' });\n    }\n});\n</code></pre>"},{"location":"getting-started/presentation/integration-examples/#example-4-multi-factor-identity-verification","title":"Example 4: Multi-Factor Identity Verification","text":""},{"location":"getting-started/presentation/integration-examples/#scenario_3","title":"Scenario","text":"<p>A financial services platform requiring multi-credential verification for high-value transactions.</p>"},{"location":"getting-started/presentation/integration-examples/#implementation_3","title":"Implementation","text":"<pre><code>curl -X 'POST' \\\n  'http://localhost:3000/presentation-management' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"financial-multi-factor-verification\",\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"government-id\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\"https://government.gov/credentials/vct/pid\"]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"given_name\"]\n                    },\n                    {\n                        \"path\": [\"family_name\"]\n                    },\n                    {\n                        \"path\": [\"birth_date\"]\n                    },\n                    {\n                        \"path\": [\"document_number\"]\n                    }\n                ]\n            },\n            {\n                \"id\": \"bank-account\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\"https://central-bank.gov/credentials/vct/bank-account\"]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"account_holder_name\"]\n                    },\n                    {\n                        \"path\": [\"account_number\"]\n                    },\n                    {\n                        \"path\": [\"bank_name\"]\n                    },\n                    {\n                        \"path\": [\"account_status\"]\n                    }\n                ]\n            },\n            {\n                \"id\": \"address-proof\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\"https://utility-company.com/credentials/vct/address-proof\"]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"full_address\"]\n                    },\n                    {\n                        \"path\": [\"resident_name\"]\n                    },\n                    {\n                        \"path\": [\"verification_date\"]\n                    }\n                ]\n            }\n        ]\n    },\n    \"registrationCert\": {\n        \"body\": {\n            \"privacy_policy\": \"https://financeapp.com/privacy-policy\",\n            \"purpose\": [\n                {\n                    \"locale\": \"en-US\",\n                    \"name\": \"Multi-factor identity verification for high-value financial transactions\"\n                }\n            ],\n            \"contact\": {\n                \"website\": \"https://financeapp.com/contact\",\n                \"email\": \"compliance@financeapp.com\",\n                \"phone\": \"+1 555 FINANCE\"\n            },\n            \"legal_basis\": \"Legal obligation for anti-money laundering compliance\",\n            \"data_retention\": \"KYC data retained as required by financial regulations\"\n        }\n    },\n    \"webhook\": {\n        \"url\": \"https://api.financeapp.com/multi-factor-verification-webhook\"\n    }\n  }'\n</code></pre> <p>This multi-factor verification ensures:</p> <ul> <li>Identity verification through government-issued credentials</li> <li>Financial standing through bank account verification</li> <li>Address verification through utility credentials</li> <li>Cross-credential validation to prevent fraud</li> </ul>"},{"location":"getting-started/presentation/integration-examples/#next-steps","title":"Next Steps","text":"<ul> <li>Review Authentication for security implementation details</li> <li>Explore the main Presentation Guide for architectural concepts</li> </ul>"},{"location":"getting-started/presentation/presentation-configuration/","title":"Presentation Configuration","text":"<p>This guide covers how to create, manage, and configure presentation requests in EUDIPLO. Presentation configurations define what credentials and claims should be requested from users.</p>"},{"location":"getting-started/presentation/presentation-configuration/#configuration-structure","title":"Configuration Structure","text":""},{"location":"getting-started/presentation/presentation-configuration/#basic-configuration","title":"Basic Configuration","text":"<p>A presentation configuration consists of three main components:</p> <pre><code>{\n    \"id\": \"unique-identifier\",\n    \"dcql_query\": {\n        /* DCQL specification */\n    },\n    \"registrationCert\": {\n        /* Privacy and legal information */\n    },\n    \"webhook\": {\n        /* Optional webhook configuration */\n    }\n}\n</code></pre>"},{"location":"getting-started/presentation/presentation-configuration/#field-descriptions","title":"Field Descriptions","text":"Field Type Required Description <code>id</code> string \u2705 Unique identifier for the presentation configuration <code>dcql_query</code> object \u2705 DCQL query defining requested credentials and claims <code>registrationCert</code> object \u274c Registration certificate with privacy policy and contact info <code>webhook</code> object \u274c Optional webhook URL for receiving verified presentations"},{"location":"getting-started/presentation/presentation-configuration/#dcql-query-structure","title":"DCQL Query Structure","text":""},{"location":"getting-started/presentation/presentation-configuration/#basic-dcql-example","title":"Basic DCQL Example","text":"<pre><code>{\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"pid\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\n                        \"https://your-domain.com/credentials/vct/pid\"\n                    ]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"given_name\"]\n                    },\n                    {\n                        \"path\": [\"family_name\"]\n                    },\n                    {\n                        \"path\": [\"birth_date\"]\n                    }\n                ]\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"getting-started/presentation/presentation-configuration/#multiple-credential-types","title":"Multiple Credential Types","text":"<p>Request different types of credentials in a single presentation:</p> <pre><code>{\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"identity\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\n                        \"https://your-domain.com/credentials/vct/pid\"\n                    ]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"given_name\"]\n                    },\n                    {\n                        \"path\": [\"family_name\"]\n                    }\n                ]\n            },\n            {\n                \"id\": \"address\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\n                        \"https://your-domain.com/credentials/vct/address\"\n                    ]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"street_address\"]\n                    },\n                    {\n                        \"path\": [\"locality\"]\n                    },\n                    {\n                        \"path\": [\"postal_code\"]\n                    }\n                ]\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"getting-started/presentation/presentation-configuration/#nested-claims","title":"Nested Claims","text":"<p>Request nested attributes from credential structures:</p> <pre><code>{\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"employee\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\n                        \"https://your-domain.com/credentials/vct/employee\"\n                    ]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"personal_info\", \"name\"]\n                    },\n                    {\n                        \"path\": [\"employment\", \"department\"]\n                    },\n                    {\n                        \"path\": [\"employment\", \"position\"]\n                    },\n                    {\n                        \"path\": [\"contact\", \"email\"]\n                    }\n                ]\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"getting-started/presentation/presentation-configuration/#registration-certificate","title":"Registration Certificate","text":""},{"location":"getting-started/presentation/presentation-configuration/#purpose-and-legal-basis","title":"Purpose and Legal Basis","text":"<p>The registration certificate provides legal and privacy information required for GDPR compliance:</p> <pre><code>{\n    \"registrationCert\": {\n        \"body\": {\n            \"privacy_policy\": \"https://your-domain.com/privacy-policy\",\n            \"purpose\": [\n                {\n                    \"locale\": \"en-US\",\n                    \"name\": \"Employee identity verification for building access\"\n                },\n                {\n                    \"locale\": \"de-DE\",\n                    \"name\": \"Mitarbeiteridentit\u00e4tsverifikation f\u00fcr Geb\u00e4udezugang\"\n                }\n            ],\n            \"contact\": {\n                \"website\": \"https://your-domain.com/contact\",\n                \"email\": \"privacy@your-domain.com\",\n                \"phone\": \"+49 123 456 7890\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/presentation/presentation-configuration/#multi-language-support","title":"Multi-Language Support","text":"<p>Support multiple languages for better user experience:</p> <pre><code>{\n    \"purpose\": [\n        {\n            \"locale\": \"en-US\",\n            \"name\": \"Age verification for restricted content access\"\n        },\n        {\n            \"locale\": \"de-DE\",\n            \"name\": \"Altersverifikation f\u00fcr den Zugang zu eingeschr\u00e4nkten Inhalten\"\n        },\n        {\n            \"locale\": \"fr-FR\",\n            \"name\": \"V\u00e9rification d'\u00e2ge pour l'acc\u00e8s au contenu restreint\"\n        }\n    ]\n}\n</code></pre>"},{"location":"getting-started/presentation/presentation-configuration/#webhook-configuration","title":"Webhook Configuration","text":""},{"location":"getting-started/presentation/presentation-configuration/#basic-webhook-setup","title":"Basic Webhook Setup","text":"<p>Configure webhooks to receive verified presentations asynchronously:</p> <pre><code>{\n    \"webhook\": {\n        \"url\": \"https://your-backend.com/presentation-webhook\",\n        \"headers\": {\n            \"Authorization\": \"Bearer your-webhook-secret\"\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/presentation/presentation-configuration/#webhook-payload","title":"Webhook Payload","text":"<p>EUDIPLO sends the following payload to your webhook endpoint:</p> <pre><code>{\n    \"sessionId\": \"session-123\",\n    \"requestId\": \"identity-verification\",\n    \"status\": \"completed\",\n    \"verifiedClaims\": {\n        \"pid\": {\n            \"given_name\": \"John\",\n            \"family_name\": \"Doe\",\n            \"birth_date\": \"1990-01-01\"\n        }\n    },\n    \"timestamp\": \"2024-08-08T10:30:00Z\"\n}\n</code></pre>"},{"location":"getting-started/presentation/presentation-configuration/#configuration-examples","title":"Configuration Examples","text":""},{"location":"getting-started/presentation/presentation-configuration/#age-verification","title":"Age Verification","text":"<pre><code>{\n    \"id\": \"age-verification\",\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"pid\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\n                        \"https://your-domain.com/credentials/vct/pid\"\n                    ]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"birth_date\"]\n                    }\n                ]\n            }\n        ]\n    },\n    \"registrationCert\": {\n        \"body\": {\n            \"privacy_policy\": \"https://your-domain.com/privacy-policy\",\n            \"purpose\": [\n                {\n                    \"locale\": \"en-US\",\n                    \"name\": \"Age verification for restricted content access\"\n                }\n            ],\n            \"contact\": {\n                \"email\": \"privacy@your-domain.com\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/presentation/presentation-configuration/#employee-access-control","title":"Employee Access Control","text":"<pre><code>{\n    \"id\": \"employee-access\",\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"employee-id\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\n                        \"https://your-domain.com/credentials/vct/employee\"\n                    ]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"employee_id\"]\n                    },\n                    {\n                        \"path\": [\"department\"]\n                    },\n                    {\n                        \"path\": [\"clearance_level\"]\n                    }\n                ]\n            }\n        ]\n    },\n    \"registrationCert\": {\n        \"body\": {\n            \"privacy_policy\": \"https://your-domain.com/privacy-policy\",\n            \"purpose\": [\n                {\n                    \"locale\": \"en-US\",\n                    \"name\": \"Employee verification for secure area access\"\n                }\n            ],\n            \"contact\": {\n                \"website\": \"https://your-domain.com/contact\",\n                \"email\": \"security@your-domain.com\"\n            }\n        }\n    },\n    \"webhook\": {\n        \"url\": \"https://access-control.your-domain.com/verify\"\n    }\n}\n</code></pre>"},{"location":"getting-started/presentation/presentation-configuration/#professional-license-verification","title":"Professional License Verification","text":"<pre><code>{\n    \"id\": \"license-verification\",\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"professional-license\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\n                        \"https://your-domain.com/credentials/vct/professional-license\"\n                    ]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"license_number\"]\n                    },\n                    {\n                        \"path\": [\"license_type\"]\n                    },\n                    {\n                        \"path\": [\"issuing_authority\"]\n                    },\n                    {\n                        \"path\": [\"expiration_date\"]\n                    },\n                    {\n                        \"path\": [\"holder_name\"]\n                    }\n                ]\n            }\n        ]\n    },\n    \"registrationCert\": {\n        \"body\": {\n            \"privacy_policy\": \"https://your-domain.com/privacy-policy\",\n            \"purpose\": [\n                {\n                    \"locale\": \"en-US\",\n                    \"name\": \"Professional license verification for service provision\"\n                }\n            ],\n            \"contact\": {\n                \"website\": \"https://your-domain.com/contact\",\n                \"email\": \"compliance@your-domain.com\",\n                \"phone\": \"+1 555 123 4567\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/presentation/presentation-configuration/#managing-configurations","title":"Managing Configurations","text":""},{"location":"getting-started/presentation/presentation-configuration/#creating-configurations","title":"Creating Configurations","text":"<p>Store a new presentation configuration:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/presentation-management' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"identity-verification\",\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"pid\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\"https://your-domain.com/credentials/vct/pid\"]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"given_name\"]\n                    },\n                    {\n                        \"path\": [\"family_name\"]\n                    }\n                ]\n            }\n        ]\n    },\n    \"registrationCert\": {\n        \"body\": {\n            \"privacy_policy\": \"https://your-domain.com/privacy-policy\",\n            \"purpose\": [\n                {\n                    \"locale\": \"en-US\",\n                    \"name\": \"Identity verification\"\n                }\n            ],\n            \"contact\": {\n                \"email\": \"privacy@your-domain.com\"\n            }\n        }\n    }\n  }'\n</code></pre>"},{"location":"getting-started/presentation/presentation-configuration/#listing-configurations","title":"Listing Configurations","text":"<p>Retrieve all presentation configurations for your tenant:</p> <pre><code>curl -X 'GET' \\\n  'http://localhost:3000/presentation-management' \\\n  -H 'Authorization: Bearer eyJhb...npoNk'\n</code></pre>"},{"location":"getting-started/presentation/presentation-configuration/#updating-configurations","title":"Updating Configurations","text":"<p>Update an existing configuration by posting with the same ID:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/presentation-management' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"identity-verification\",\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"pid\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\"https://your-domain.com/credentials/vct/pid\"]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"given_name\"]\n                    },\n                    {\n                        \"path\": [\"family_name\"]\n                    },\n                    {\n                        \"path\": [\"birth_date\"]\n                    }\n                ]\n            }\n        ]\n    },\n    \"registrationCert\": {\n        \"body\": {\n            \"privacy_policy\": \"https://your-domain.com/privacy-policy\",\n            \"purpose\": [\n                {\n                    \"locale\": \"en-US\",\n                    \"name\": \"Enhanced identity verification with age check\"\n                }\n            ],\n            \"contact\": {\n                \"email\": \"privacy@your-domain.com\"\n            }\n        }\n    }\n  }'\n</code></pre>"},{"location":"getting-started/presentation/presentation-configuration/#deleting-configurations","title":"Deleting Configurations","text":"<p>Remove a presentation configuration:</p> <pre><code>curl -X 'DELETE' \\\n  'http://localhost:3000/presentation-management/identity-verification' \\\n  -H 'Authorization: Bearer eyJhb...npoNk'\n</code></pre>"},{"location":"getting-started/presentation/presentation-configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Authentication for securing your API calls</li> <li>Explore the API Guide for detailed implementation examples</li> <li>Review Integration Examples for real-world   scenarios</li> </ul>"}]}