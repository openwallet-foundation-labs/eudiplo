{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is EUDIPLO","text":""},{"location":"#what-is-eudiplo","title":"What is EUDIPLO?","text":"<p>EUDIPLO is a lightweight, open-source middleware layer that bridges your IT systems with the European Digital Identity Wallet (EUDI Wallet) ecosystem.</p> <p>Whether you're building services for government, education, healthcare, or the private sector\u2014EUDIPLO lets you interact with EUDI Wallets using simple JSON-based APIs, without having to implement complex identity protocols yourself.</p> <p>EUDIPLO stands for EUDI Protocol Liaison Operator</p> <p>The name EUDIPLO is inspired by diplomat \u2014 because this middleware acts as a translator and trusted go-between. It speaks fluent EUDI specs on one side and down-to-earth JSON on the other, making sure your backend doesn't have to become a protocol expert overnight.</p>"},{"location":"#why-eudiplo","title":"Why EUDIPLO?","text":"<p>Connecting to the EUDI Wallet ecosystem is technically demanding:</p> <ul> <li>You must understand OID4VCI, OID4VP, SD-JWT VC, and OAuth-based   status protocols.</li> <li>Libraries are scattered, often incomplete or language-specific.</li> <li>Hosted services can lead to vendor lock-in or obscure how your data is   processed.</li> </ul> <p>EUDIPLO solves these problems by acting as a protocol abstraction layer you can run yourself, integrate over HTTP, and configure via JSON.</p>"},{"location":"#key-capabilities","title":"Key Capabilities","text":"Capability Description \ud83d\udec2 Issuance Issue credentials to users through the EUDI Wallet \ud83e\uddfe Presentation Request credentials from users and verify them \ud83d\udd04 Cross-Flow Support Request credentials as part of an issuance flow \ud83d\udd10 Secure by Default Built-in support for secure key handling and OAuth-based status checking \ud83e\uddf1 Plug and Play Integrates with your backend over HTTP; no requirement to use a specific programming language \u2699\ufe0f JSON Configurable Set up templates, trust roots, and issuers through JSON files \ud83c\uddea\ud83c\uddfa Wallet Compatible Works with multiple wallets \ud83d\udc65 Multi-Tenant Support Isolate configurations for different tenants or clients"},{"location":"#where-does-it-fit","title":"Where Does It Fit?","text":"<p>Here\u2019s how EUDIPLO fits into your infrastructure:</p> <p></p>"},{"location":"#how-do-i-use-it","title":"How Do I Use It?","text":"<p>EUDIPLO is distributed as a Docker container and can be configured in minutes.</p> <pre><code>docker run -p 3000:3000 \\\n  -e PUBLIC_URL=https://example.com \\\n  -e JWT_SECRET=your-secret-key-here-minimum-32-characters \\\n  -e AUTH_CLIENT_ID=your-tenant-id \\\n  -e AUTH_CLIENT_SECRET=your-tenant-secret \\\n  -v $(pwd)/config:/app/config \\\n  ghcr.io/openwallet-foundation-labs/eudiplo:latest\n</code></pre> <p>\u27a1\ufe0f Read the Quickstart Guide \ud83d\udcd8 Learn how to configure credentials or verify them</p>"},{"location":"#who-is-it-for","title":"Who is it For?","text":"<p>EUDIPLO is built for:</p> <ul> <li>\ud83c\udfdb\ufe0f Government services that need to verify official documents.</li> <li>\ud83c\udf93 Universities and schools that issue or validate diplomas.</li> <li>\ud83c\udfe5 Health systems managing patient identity or insurance.</li> <li>\ud83c\udfe2 Private sector apps that want to integrate trustable identity with   minimal complexity.</li> </ul> <p>If your organization needs to connect to the EUDI Wallet ecosystem\u2014without reinventing the wheel\u2014EUDIPLO is your gateway.</p>"},{"location":"api/","title":"API Reference","text":"<p>EUDIPLO exposes a REST API based on the OpenAPI 3.0 standard. This interface allows systems to issue credentials, verify presentations, manage keys, and configure credential behavior through standard HTTP endpoints.</p> <p>A rendered openapi overview can be found here.</p>"},{"location":"api/#openapi-endpoints","title":"OpenAPI Endpoints","text":"<p>When running EUDIPLO, the following endpoints are available:</p> <ul> <li>Swagger UI: http://localhost:3000/api</li> <li>OpenAPI Spec (JSON):   http://localhost:3000/api-json</li> </ul> <p>Info</p> <p>By default it will only include the endpoints that are relevant to interact with it from the server side (it is excluding the routes that are relevant for e.g. OID4VCI and OID4VP). To generate the full OpenAPI specification, you can set the environment variable <code>SWAGGER_ALL</code> to <code>true</code> when starting the service like <code>SWAGGER_ALL=true pnpm run start:dev</code>.</p> <p>You can use this OpenAPI specification to generate client libraries with e.g the OpenAPI Generator.</p>"},{"location":"api/authentication/","title":"API Authentication","text":"<p>EUDIPLO uses OAuth 2.0 Client Credentials flow for API authentication, designed for service-to-service communication without user interaction.</p>"},{"location":"api/authentication/#authentication-architecture","title":"Authentication Architecture","text":""},{"location":"api/authentication/#design-principles","title":"Design Principles","text":"<ul> <li>Service-to-Service: No user interaction required</li> <li>Tenant Isolation: JWT <code>sub</code> claim identifies and isolates tenants</li> <li>Pluggable Identity: Support for both built-in and external OIDC providers</li> <li>Stateless: JWT tokens enable horizontal scaling</li> </ul>"},{"location":"api/authentication/#security-model","title":"Security Model","text":"<ul> <li>All management endpoints require authentication</li> <li>Tenant data is isolated using JWT subject claims</li> <li>Tokens are signed and validated for integrity</li> <li>Support for token expiration and rotation</li> </ul> <p>Related Architecture: For multi-tenant configuration and session management, see Tenant-Based Architecture and Sessions.</p>"},{"location":"api/authentication/#oauth2-client-credentials-authentication","title":"OAuth2 Client Credentials Authentication","text":"<p>This API exclusively uses the OAuth2 client credentials flow, which is designed for service-to-service authentication where no user interaction is required.</p>"},{"location":"api/authentication/#built-in-oauth2-server-recommended-for-getting-started","title":"Built-in OAuth2 Server (Recommended for Getting Started)","text":"<p>EUDIPLO includes a built-in OAuth2 server for simple deployments:</p> <ol> <li> <p>Swagger UI Authentication:</p> <ul> <li>Navigate to the Swagger UI at <code>/api</code></li> <li>Click the \"Authorize\" button</li> <li>Select \"oauth2\"</li> <li>Enter client ID and secret (configured via environment variables)</li> <li>Click \"Authorize\"</li> </ul> </li> <li> <p>Programmatic Access:</p> <p>Option 1: Credentials in Authorization Header (OAuth2 Standard):</p> <pre><code>curl -X POST http://localhost:3000/auth/oauth2/token \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Basic $(echo -n 'client_id:client_secret' | base64)\" \\\n  -d '{\n    \"grant_type\": \"client_credentials\"\n  }'\n</code></pre> <p>Option 2: Credentials in Request Body:</p> <pre><code>curl -X POST http://localhost:3000/auth/oauth2/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"grant_type\": \"client_credentials\",\n    \"client_id\": \"your-client-id\",\n    \"client_secret\": \"your-client-secret\"\n  }'\n</code></pre> </li> </ol>"},{"location":"api/authentication/#external-oidc-provider","title":"External OIDC Provider","text":"<p>For enterprise deployments with existing identity infrastructure, EUDIPLO can integrate with external OIDC providers like Keycloak, Auth0, or Azure AD.</p> <p>Configuration:</p> <pre><code>OIDC=https://your-keycloak.example.com/realms/your-realm\nPUBLIC_URL=https://your-api.example.com\n</code></pre> <p>Authentication Flow:</p> <ol> <li>Use your OIDC provider's token endpoint with client credentials flow</li> <li>Include the access token in API requests: <code>Authorization: Bearer &lt;token&gt;</code></li> </ol>"},{"location":"api/authentication/#configuration","title":"Configuration","text":""},{"location":"api/authentication/#external-oidc-provider_1","title":"External OIDC Provider","text":"<pre><code># Enable external OIDC\nOIDC=true\nKEYCLOAK_INTERNAL_ISSUER_URL=https://your-keycloak.example.com/realms/your-realm\nKEYCLOAK_CLIENT_ID=your-client-id\nPUBLIC_URL=https://your-api.example.com\n</code></pre>"},{"location":"api/authentication/#integrated-oauth2-server","title":"Integrated OAuth2 Server","text":"<pre><code># Leave OIDC undefined for integrated OAuth2 server\nPUBLIC_URL=https://your-api.example.com\nJWT_SECRET=your-secret-key-here-minimum-32-characters\nAUTH_CLIENT_ID=root\nAUTH_CLIENT_SECRET=root\n</code></pre> <p>Configuration Reference: For complete configuration options and environment variables, see Key Management and Database Configuration.</p>"},{"location":"api/authentication/#protected-endpoints","title":"Protected Endpoints","text":"<p>All administrative endpoints require OAuth2 authentication:</p> <ul> <li>Issuer Management (<code>/issuer-management/*</code>) - Credential issuance   management</li> <li>Presentation Management (<code>/presentation-management/*</code>) - Presentation   verification management</li> <li>Session Management (<code>/session/*</code>) - Session lifecycle management</li> </ul>"},{"location":"api/authentication/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/authentication/#token-validation-errors","title":"Token Validation Errors","text":"<ol> <li>Verify that tokens include the correct audience (<code>eudiplo-service</code>)</li> <li>Ensure clock synchronization between client and server</li> <li>Check token expiration times</li> </ol>"},{"location":"api/authentication/#integrated-oauth2-server-issues","title":"Integrated OAuth2 Server Issues","text":"<ol> <li>Verify <code>JWT_SECRET</code> is at least 32 characters</li> <li>Ensure client credentials (<code>AUTH_CLIENT_ID</code>/<code>AUTH_CLIENT_SECRET</code>) are    configured correctly</li> <li>Check that <code>PUBLIC_URL</code> is accessible for OAuth2 flows</li> </ol>"},{"location":"api/authentication/#security-considerations","title":"Security Considerations","text":"<ul> <li>Token Lifetime: Tokens expire after 24 hours for client credentials flow</li> <li>Secure Storage: Store client credentials and tokens securely and never   expose them in logs or URLs</li> <li>Service-to-Service: This API is designed for service-to-service   authentication without user interaction</li> </ul>"},{"location":"api/authentication/#related-documentation","title":"Related Documentation","text":""},{"location":"api/authentication/#architecture-design","title":"Architecture &amp; Design","text":"<ul> <li>Tenant-Based Architecture - Multi-tenant   isolation and configuration</li> <li>Sessions - Session lifecycle and management</li> <li>Key Management - Cryptographic key   handling and security</li> </ul>"},{"location":"api/authentication/#implementation-guides","title":"Implementation Guides","text":"<ul> <li>Quick Start - Get authentication   working in 5 minutes</li> <li>API Overview - Complete API reference and endpoints</li> </ul>"},{"location":"api/authentication/#operations","title":"Operations","text":"<ul> <li>Development Setup - Local development   authentication setup</li> </ul>"},{"location":"api/openapi/","title":"OpenApi","text":""},{"location":"api/openapi/#eudiplo-service-api-main","title":"EUDIPLO Service API main","text":"<p>This is the API documentation for the EUDIPLO Service, which provides credential issuance and verification services</p>"},{"location":"api/openapi/#key","title":"Key","text":""},{"location":"api/openapi/#get-key","title":"GET /key","text":"<p>Get all keys for the tenant.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p> Response 200 OK </p> application/json <p><pre><code>[\n    {}\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/KeyObj\"\n    }\n}\n</code></pre>"},{"location":"api/openapi/#post-key","title":"POST /key","text":"<p>Add a new key to the key service.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p>Request body</p> application/json <p><pre><code>{\n    \"privateKey\": null,\n    \"crt\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"privateKey\": {\n            \"description\": \"The private key in JWK format.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Key\"\n                }\n            ]\n        },\n        \"crt\": {\n            \"type\": \"string\",\n            \"description\": \"Optional certificate in PEM format.\"\n        }\n    },\n    \"required\": [\n        \"privateKey\"\n    ]\n}\n</code></pre> <p> Response 201 Created </p>"},{"location":"api/openapi/#delete-keyid","title":"DELETE /key/{id}","text":"<p>Delete a key from the key service.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <code>id</code> path string No <p> Response 200 OK </p>"},{"location":"api/openapi/#issuer-management","title":"Issuer management","text":""},{"location":"api/openapi/#get-issuer-managementcredentials","title":"GET /issuer-management/credentials","text":"<p>Returns the credential configurations for this tenant.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p> Response 200 OK </p> application/json <p><pre><code>[\n    {\n        \"id\": \"string\",\n        \"tenantId\": \"string\",\n        \"config\": {},\n        \"claims\": {},\n        \"disclosureFrame\": {},\n        \"vct\": {\n            \"vct\": \"string\",\n            \"name\": \"string\",\n            \"description\": \"string\",\n            \"extends\": \"string\",\n            \"extends#integrity\": \"string\",\n            \"schema_uri\": \"string\",\n            \"schema_uri#integrity\": \"string\"\n        },\n        \"schema\": {\n            \"$schema\": {},\n            \"type\": {},\n            \"properties\": {},\n            \"required\": [\n                \"string\"\n            ]\n        },\n        \"credentialIssuanceBindings\": [\n            {\n                \"credentialConfigId\": \"string\",\n                \"issuanceConfigId\": \"string\",\n                \"credentialConfig\": null,\n                \"issuanceConfig\": null,\n                \"keyID\": \"string\",\n                \"createdAt\": \"2022-04-13T15:42:05.901Z\"\n            }\n        ]\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/CredentialConfig\"\n    }\n}\n</code></pre>"},{"location":"api/openapi/#post-issuer-managementcredentials","title":"POST /issuer-management/credentials","text":"<p>Stores the credential configuration for this tenant.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p>Request body</p> application/json <p><pre><code>{\n    \"id\": \"string\",\n    \"tenantId\": \"string\",\n    \"config\": {},\n    \"claims\": {},\n    \"disclosureFrame\": {},\n    \"vct\": {\n        \"vct\": \"string\",\n        \"name\": \"string\",\n        \"description\": \"string\",\n        \"extends\": \"string\",\n        \"extends#integrity\": \"string\",\n        \"schema_uri\": \"string\",\n        \"schema_uri#integrity\": \"string\"\n    },\n    \"schema\": {\n        \"$schema\": {},\n        \"type\": {},\n        \"properties\": {},\n        \"required\": [\n            \"string\"\n        ]\n    },\n    \"credentialIssuanceBindings\": [\n        {\n            \"credentialConfigId\": \"string\",\n            \"issuanceConfigId\": \"string\",\n            \"credentialConfig\": null,\n            \"issuanceConfig\": null,\n            \"keyID\": \"string\",\n            \"createdAt\": \"2022-04-13T15:42:05.901Z\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\",\n            \"description\": \"Unique identifier for the configuration to reference it.\"\n        },\n        \"tenantId\": {\n            \"type\": \"string\",\n            \"description\": \"Tenant ID for the issuance configuration.\"\n        },\n        \"config\": {\n            \"type\": \"object\",\n            \"description\": \"OID4VCI issuer metadata crddential configuration element.\"\n        },\n        \"claims\": {\n            \"type\": \"object\",\n            \"description\": \"Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.\"\n        },\n        \"disclosureFrame\": {\n            \"type\": \"object\",\n            \"description\": \"Disclosure frame for the sd jwt vc.\"\n        },\n        \"vct\": {\n            \"$ref\": \"#/components/schemas/VCT\"\n        },\n        \"schema\": {\n            \"$ref\": \"#/components/schemas/SchemaResponse\"\n        },\n        \"credentialIssuanceBindings\": {\n            \"description\": \"Link to all the issuance config bindings that are using this credential.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/CredentialIssuanceBinding\"\n            }\n        }\n    },\n    \"required\": [\n        \"id\",\n        \"tenantId\",\n        \"config\",\n        \"claims\",\n        \"disclosureFrame\",\n        \"credentialIssuanceBindings\"\n    ]\n}\n</code></pre> <p> Response 201 Created </p> application/json Schema of the response body <pre><code>{\n    \"type\": \"object\"\n}\n</code></pre>"},{"location":"api/openapi/#delete-issuer-managementcredentialsid","title":"DELETE /issuer-management/credentials/{id}","text":"<p>Deletes an credential configuration.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <code>id</code> path string No <p> Response 200 OK </p>"},{"location":"api/openapi/#post-issuer-managementoffer","title":"POST /issuer-management/offer","text":"<p>Create an offer for a credential. This endpoint may be protected</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p>Request body</p> application/json <pre><code>{\n    \"response_type\": \"qrcode\",\n    \"issuanceId\": \"pid\"\n}\n</code></pre> <pre><code>{\n    \"response_type\": \"uri\",\n    \"issuanceId\": \"pid\"\n}\n</code></pre> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"response_type\": {\n            \"example\": \"qrcode\",\n            \"enum\": [\n                \"qrcode\",\n                \"uri\"\n            ],\n            \"type\": \"string\",\n            \"description\": \"The type of response expected for the offer request.\"\n        },\n        \"issuanceId\": {\n            \"type\": \"string\",\n            \"example\": \"pid\"\n        },\n        \"credentialConfigurationIds\": {\n            \"example\": [\n                \"pid\"\n            ],\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\"\n            }\n        }\n    },\n    \"required\": [\n        \"response_type\",\n        \"issuanceId\"\n    ]\n}\n</code></pre> <p> Response 201 Created </p> application/jsonimage/png <p><pre><code>{\n    \"uri\": \"string\",\n    \"session\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"uri\": {\n            \"type\": \"string\"\n        },\n        \"session\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\n        \"uri\",\n        \"session\"\n    ]\n}\n</code></pre> <p><pre><code>{\n    \"uri\": \"string\",\n    \"session\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"uri\": {\n            \"type\": \"string\"\n        },\n        \"session\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\n        \"uri\",\n        \"session\"\n    ]\n}\n</code></pre>"},{"location":"api/openapi/#get-issuer-managementissuance","title":"GET /issuer-management/issuance","text":"<p>Returns the issuance configurations for this tenant.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p> Response 200 OK </p> application/json <p><pre><code>[\n    {\n        \"id\": \"string\",\n        \"credentialIssuanceBindings\": [\n            {\n                \"credentialConfigId\": \"string\",\n                \"issuanceConfigId\": \"string\",\n                \"credentialConfig\": null,\n                \"issuanceConfig\": null,\n                \"keyID\": \"string\",\n                \"createdAt\": \"2022-04-13T15:42:05.901Z\"\n            }\n        ],\n        \"authenticationConfig\": {},\n        \"createdAt\": \"2022-04-13T15:42:05.901Z\",\n        \"notifyWebhook\": null\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/IssuanceConfig\"\n    }\n}\n</code></pre>"},{"location":"api/openapi/#post-issuer-managementissuance","title":"POST /issuer-management/issuance","text":"<p>Stores the issuance configuration for this tenant.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p>Request body</p> application/json <p><pre><code>{\n    \"id\": \"string\",\n    \"credentialConfigs\": [\n        {\n            \"id\": \"string\",\n            \"keyId\": \"string\"\n        }\n    ],\n    \"authenticationConfig\": null,\n    \"notifyWebhook\": null\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\",\n            \"description\": \"Unique identifier for the issuance configuration.\"\n        },\n        \"credentialConfigs\": {\n            \"description\": \"Ids of the credential configurations associated with this issuance configuration.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/CredentialConfigMapping\"\n            }\n        },\n        \"authenticationConfig\": {\n            \"description\": \"Authentication configuration for the issuance process.\\nThis includes details like the authentication method and any required parameters.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AuthenticationConfigDto\"\n                }\n            ]\n        },\n        \"notifyWebhook\": {\n            \"description\": \"Optional webhook configuration to send the results of the notification response.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/WebhookConfig\"\n                }\n            ]\n        }\n    },\n    \"required\": [\n        \"id\",\n        \"credentialConfigs\",\n        \"authenticationConfig\"\n    ]\n}\n</code></pre> <p> Response 201 Created </p> application/json Schema of the response body <pre><code>{\n    \"type\": \"object\"\n}\n</code></pre>"},{"location":"api/openapi/#delete-issuer-managementissuanceid","title":"DELETE /issuer-management/issuance/{id}","text":"<p>Deletes an issuance configuration.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <code>id</code> path string No <p> Response 200 OK </p>"},{"location":"api/openapi/#presentation-management","title":"Presentation management","text":""},{"location":"api/openapi/#post-presentation-managementrequest","title":"POST /presentation-management/request","text":"<p>Create an presentation request that can be sent to the user</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <code>oauth2</code> header string N/A No <p>Request body</p> application/json <pre><code>{\n    \"response_type\": \"qrcode\",\n    \"requestId\": \"pid\"\n}\n</code></pre> <pre><code>{\n    \"response_type\": \"uri\",\n    \"requestId\": \"pid\"\n}\n</code></pre> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"response_type\": {\n            \"type\": \"string\",\n            \"example\": \"qrcode\",\n            \"enum\": [\n                \"qrcode\",\n                \"uri\"\n            ]\n        },\n        \"requestId\": {\n            \"type\": \"string\",\n            \"description\": \"Identifier of the presentation configuration\",\n            \"example\": \"pid\"\n        },\n        \"webhook\": {\n            \"description\": \"Webhook configuration to receive the response.\\nIf not provided, the configured webhook from the configuration will be used.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/WebhookConfig\"\n                }\n            ]\n        }\n    },\n    \"required\": [\n        \"response_type\",\n        \"requestId\"\n    ]\n}\n</code></pre> <p> Response 201 Created </p> application/jsonimage/png <p><pre><code>{\n    \"uri\": \"string\",\n    \"session\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"uri\": {\n            \"type\": \"string\"\n        },\n        \"session\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\n        \"uri\",\n        \"session\"\n    ]\n}\n</code></pre> <p><pre><code>{\n    \"uri\": \"string\",\n    \"session\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"uri\": {\n            \"type\": \"string\"\n        },\n        \"session\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\n        \"uri\",\n        \"session\"\n    ]\n}\n</code></pre>"},{"location":"api/openapi/#get-presentation-management","title":"GET /presentation-management","text":"<p>Returns the presentation request configurations.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p> Response 200 OK </p> application/json <p><pre><code>[\n    {\n        \"id\": \"string\",\n        \"dcql_query\": {},\n        \"registrationCert\": null,\n        \"webhook\": null,\n        \"createdAt\": \"2022-04-13T15:42:05.901Z\"\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/PresentationConfig\"\n    }\n}\n</code></pre>"},{"location":"api/openapi/#post-presentation-management","title":"POST /presentation-management","text":"<p>Store a presentation request configuration. If it already exists, it will be updated.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p>Request body</p> application/json <p><pre><code>{\n    \"id\": \"string\",\n    \"dcql_query\": {},\n    \"registrationCert\": null,\n    \"webhook\": null,\n    \"createdAt\": \"2022-04-13T15:42:05.901Z\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\",\n            \"description\": \"Unique identifier for the VP request.\"\n        },\n        \"dcql_query\": {\n            \"type\": \"object\",\n            \"description\": \"The DCQL query to be used for the VP request.\"\n        },\n        \"registrationCert\": {\n            \"description\": \"The registration certificate request containing the necessary details.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/RegistrationCertificateRequest\"\n                }\n            ]\n        },\n        \"webhook\": {\n            \"description\": \"Optional webhook URL to receive the response.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/WebhookConfig\"\n                }\n            ]\n        },\n        \"createdAt\": {\n            \"format\": \"date-time\",\n            \"type\": \"string\",\n            \"description\": \"The timestamp when the VP request was created.\"\n        }\n    },\n    \"required\": [\n        \"id\",\n        \"dcql_query\",\n        \"registrationCert\",\n        \"createdAt\"\n    ]\n}\n</code></pre> <p> Response 201 Created </p> application/json <p><pre><code>{\n    \"id\": \"string\",\n    \"dcql_query\": {},\n    \"registrationCert\": null,\n    \"webhook\": null,\n    \"createdAt\": \"2022-04-13T15:42:05.901Z\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\",\n            \"description\": \"Unique identifier for the VP request.\"\n        },\n        \"dcql_query\": {\n            \"type\": \"object\",\n            \"description\": \"The DCQL query to be used for the VP request.\"\n        },\n        \"registrationCert\": {\n            \"description\": \"The registration certificate request containing the necessary details.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/RegistrationCertificateRequest\"\n                }\n            ]\n        },\n        \"webhook\": {\n            \"description\": \"Optional webhook URL to receive the response.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/WebhookConfig\"\n                }\n            ]\n        },\n        \"createdAt\": {\n            \"format\": \"date-time\",\n            \"type\": \"string\",\n            \"description\": \"The timestamp when the VP request was created.\"\n        }\n    },\n    \"required\": [\n        \"id\",\n        \"dcql_query\",\n        \"registrationCert\",\n        \"createdAt\"\n    ]\n}\n</code></pre>"},{"location":"api/openapi/#delete-presentation-managementid","title":"DELETE /presentation-management/{id}","text":"<p>Deletes a presentation request configuration by its ID.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <code>id</code> path string No <p> Response 200 OK </p>"},{"location":"api/openapi/#session-management","title":"Session management","text":""},{"location":"api/openapi/#get-session","title":"GET /session","text":"<p>Retrieves all sessions.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p> Response 200 OK </p> application/json <p><pre><code>[\n    {\n        \"id\": \"string\",\n        \"issuanceId\": \"string\",\n        \"requestId\": \"string\",\n        \"credentials\": [\n            {}\n        ],\n        \"authorization_code\": \"string\",\n        \"request_uri\": \"string\",\n        \"auth_queries\": null,\n        \"vp_nonce\": \"string\",\n        \"createdAt\": \"2022-04-13T15:42:05.901Z\",\n        \"offer\": {},\n        \"credentialPayload\": null,\n        \"webhook\": null,\n        \"notifyWebhook\": null,\n        \"notifications\": [\n            {}\n        ],\n        \"tenantId\": \"string\",\n        \"status\": {}\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/Session\"\n    }\n}\n</code></pre>"},{"location":"api/openapi/#get-sessionid","title":"GET /session/{id}","text":"<p>Retrieves the session information for a given session ID.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <code>id</code> path string No <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": \"string\",\n    \"issuanceId\": \"string\",\n    \"requestId\": \"string\",\n    \"credentials\": [\n        {}\n    ],\n    \"authorization_code\": \"string\",\n    \"request_uri\": \"string\",\n    \"auth_queries\": null,\n    \"vp_nonce\": \"string\",\n    \"createdAt\": \"2022-04-13T15:42:05.901Z\",\n    \"offer\": {},\n    \"credentialPayload\": null,\n    \"webhook\": null,\n    \"notifyWebhook\": null,\n    \"notifications\": [\n        {}\n    ],\n    \"tenantId\": \"string\",\n    \"status\": {}\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\",\n            \"description\": \"Unique identifier for the session.\"\n        },\n        \"issuanceId\": {\n            \"type\": \"string\"\n        },\n        \"requestId\": {\n            \"type\": \"string\",\n            \"description\": \"The ID of the presentation configuration associated with the session.\"\n        },\n        \"credentials\": {\n            \"description\": \"Verified credentials from the verification process.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\"\n            }\n        },\n        \"authorization_code\": {\n            \"type\": \"string\",\n            \"description\": \"Authorization code for the session.\"\n        },\n        \"request_uri\": {\n            \"type\": \"string\",\n            \"description\": \"Request URI from the authorization request.\"\n        },\n        \"auth_queries\": {\n            \"description\": \"Authorization queries associated with the session.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AuthorizeQueries\"\n                }\n            ]\n        },\n        \"vp_nonce\": {\n            \"type\": \"string\",\n            \"description\": \"Noncce from the Verifiable Presentation request.\"\n        },\n        \"createdAt\": {\n            \"format\": \"date-time\",\n            \"type\": \"string\",\n            \"description\": \"Credential offer object containing details about the credential offer or presentation request.\"\n        },\n        \"offer\": {\n            \"type\": \"object\",\n            \"description\": \"Credential offer object containing details about the credential offer or presentation request.\"\n        },\n        \"credentialPayload\": {\n            \"description\": \"Credential payload containing the offer request details.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/OfferRequestDto\"\n                }\n            ]\n        },\n        \"webhook\": {\n            \"description\": \"Webhook configuration to send result and may receive further information.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/WebhookConfig\"\n                }\n            ]\n        },\n        \"notifyWebhook\": {\n            \"description\": \"Webhook configuration to send the result of the notification response.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/WebhookConfig\"\n                }\n            ]\n        },\n        \"notifications\": {\n            \"description\": \"Notifications associated with the session.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\"\n            }\n        },\n        \"tenantId\": {\n            \"type\": \"string\",\n            \"description\": \"Tenant ID for multi-tenancy support.\"\n        },\n        \"status\": {\n            \"type\": \"object\"\n        }\n    },\n    \"required\": [\n        \"id\",\n        \"createdAt\",\n        \"notifications\",\n        \"tenantId\",\n        \"status\"\n    ]\n}\n</code></pre>"},{"location":"api/openapi/#post-sessionrevoke","title":"POST /session/revoke","text":"<p>Update the status of the credentials of a specific session.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>oauth2</code> header string N/A No <p>Request body</p> application/json <p><pre><code>{\n    \"sessionId\": \"string\",\n    \"credentialConfigurationId\": \"string\",\n    \"status\": 10.12\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"sessionId\": {\n            \"type\": \"string\",\n            \"description\": \"The session ID of the user\"\n        },\n        \"credentialConfigurationId\": {\n            \"type\": \"string\",\n            \"description\": \"The ID of the credential configuration\\nThis is optional, if not provided, all credentials will be revoked of the session.\"\n        },\n        \"status\": {\n            \"type\": \"number\",\n            \"description\": \"The status of the credential\\n0 = valid, 1 = revoked\",\n            \"enum\": [\n                0,\n                1\n            ]\n        }\n    },\n    \"required\": [\n        \"sessionId\",\n        \"status\"\n    ]\n}\n</code></pre> <p> Response 201 Created </p>"},{"location":"api/openapi/#health","title":"Health","text":""},{"location":"api/openapi/#get-health","title":"GET /health","text":"<p>Endpoint to check the health of the service.</p> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"status\": \"ok\",\n    \"info\": {\n        \"database\": {\n            \"status\": \"up\"\n        }\n    },\n    \"error\": {},\n    \"details\": {\n        \"database\": {\n            \"status\": \"up\"\n        }\n    }\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\",\n            \"example\": \"ok\"\n        },\n        \"info\": {\n            \"type\": \"object\",\n            \"example\": {\n                \"database\": {\n                    \"status\": \"up\"\n                }\n            },\n            \"additionalProperties\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"status\"\n                ],\n                \"properties\": {\n                    \"status\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": true\n            },\n            \"nullable\": true\n        },\n        \"error\": {\n            \"type\": \"object\",\n            \"example\": {},\n            \"additionalProperties\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"status\"\n                ],\n                \"properties\": {\n                    \"status\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": true\n            },\n            \"nullable\": true\n        },\n        \"details\": {\n            \"type\": \"object\",\n            \"example\": {\n                \"database\": {\n                    \"status\": \"up\"\n                }\n            },\n            \"additionalProperties\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"status\"\n                ],\n                \"properties\": {\n                    \"status\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": true\n            }\n        }\n    }\n}\n</code></pre> <p> Response 503 Service Unavailable </p> application/json <p><pre><code>{\n    \"status\": \"error\",\n    \"info\": {\n        \"database\": {\n            \"status\": \"up\"\n        }\n    },\n    \"error\": {\n        \"redis\": {\n            \"status\": \"down\",\n            \"message\": \"Could not connect\"\n        }\n    },\n    \"details\": {\n        \"database\": {\n            \"status\": \"up\"\n        },\n        \"redis\": {\n            \"status\": \"down\",\n            \"message\": \"Could not connect\"\n        }\n    }\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\",\n            \"example\": \"error\"\n        },\n        \"info\": {\n            \"type\": \"object\",\n            \"example\": {\n                \"database\": {\n                    \"status\": \"up\"\n                }\n            },\n            \"additionalProperties\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"status\"\n                ],\n                \"properties\": {\n                    \"status\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": true\n            },\n            \"nullable\": true\n        },\n        \"error\": {\n            \"type\": \"object\",\n            \"example\": {\n                \"redis\": {\n                    \"status\": \"down\",\n                    \"message\": \"Could not connect\"\n                }\n            },\n            \"additionalProperties\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"status\"\n                ],\n                \"properties\": {\n                    \"status\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": true\n            },\n            \"nullable\": true\n        },\n        \"details\": {\n            \"type\": \"object\",\n            \"example\": {\n                \"database\": {\n                    \"status\": \"up\"\n                },\n                \"redis\": {\n                    \"status\": \"down\",\n                    \"message\": \"Could not connect\"\n                }\n            },\n            \"additionalProperties\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"status\"\n                ],\n                \"properties\": {\n                    \"status\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": true\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"api/openapi/#authentication","title":"Authentication","text":""},{"location":"api/openapi/#post-authoauth2token","title":"POST /auth/oauth2/token","text":"<p>OAuth2 Token endpoint - supports client credentials flow only Accepts client credentials either in Authorization header (Basic auth) or request body</p> <p>Request body</p> application/json <pre><code>{\n    \"grant_type\": \"client_credentials\",\n    \"client_id\": \"root\",\n    \"client_secret\": \"root\"\n}\n</code></pre> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"client_id\": {\n            \"type\": \"string\"\n        },\n        \"client_secret\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\n        \"client_id\",\n        \"client_secret\"\n    ]\n}\n</code></pre> <p> Response 200 OK </p> application/json <pre><code>{\n    \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 86400\n}\n</code></pre> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"access_token\": {\n            \"type\": \"string\"\n        },\n        \"token_type\": {\n            \"type\": \"string\"\n        },\n        \"expires_in\": {\n            \"type\": \"number\"\n        }\n    },\n    \"required\": [\n        \"access_token\",\n        \"token_type\",\n        \"expires_in\"\n    ]\n}\n</code></pre> <p> Response 201 Created </p> application/json <p><pre><code>{\n    \"access_token\": \"string\",\n    \"token_type\": \"string\",\n    \"expires_in\": 10.12\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"access_token\": {\n            \"type\": \"string\"\n        },\n        \"token_type\": {\n            \"type\": \"string\"\n        },\n        \"expires_in\": {\n            \"type\": \"number\"\n        }\n    },\n    \"required\": [\n        \"access_token\",\n        \"token_type\",\n        \"expires_in\"\n    ]\n}\n</code></pre> <p> Response 401 Unauthorized </p>"},{"location":"api/openapi/#prometheus","title":"Prometheus","text":""},{"location":"api/openapi/#get-metrics","title":"GET /metrics","text":"<p> Response 200 OK </p>"},{"location":"api/openapi/#schemas","title":"Schemas","text":""},{"location":"api/openapi/#apikeyconfig","title":"ApiKeyConfig","text":"Name Type <code>headerName</code> string <code>value</code> string"},{"location":"api/openapi/#authenticationconfigdto","title":"AuthenticationConfigDto","text":"Name Type <code>config</code> <code>method</code> string"},{"location":"api/openapi/#authorizequeries","title":"AuthorizeQueries","text":"Name Type <code>auth_session</code> string <code>client_id</code> string <code>code_challenge</code> string <code>code_challenge_method</code> string <code>dpop_jkt</code> string <code>issuer_state</code> string <code>redirect_uri</code> string <code>request_uri</code> string <code>resource</code> string <code>response_type</code> string <code>scope</code> string"},{"location":"api/openapi/#clientcredentialsdto","title":"ClientCredentialsDto","text":"Name Type <code>client_id</code> string <code>client_secret</code> string"},{"location":"api/openapi/#credentialconfig","title":"CredentialConfig","text":"Name Type <code>claims</code> <code>config</code> <code>credentialIssuanceBindings</code> Array&lt;CredentialIssuanceBinding&gt; <code>disclosureFrame</code> <code>id</code> string <code>schema</code> SchemaResponse <code>tenantId</code> string <code>vct</code> VCT"},{"location":"api/openapi/#credentialconfigmapping","title":"CredentialConfigMapping","text":"Name Type <code>id</code> string <code>keyId</code> string"},{"location":"api/openapi/#credentialissuancebinding","title":"CredentialIssuanceBinding","text":"Name Type <code>createdAt</code> string(date-time) <code>credentialConfig</code> <code>credentialConfigId</code> string <code>issuanceConfig</code> <code>issuanceConfigId</code> string <code>keyID</code> string"},{"location":"api/openapi/#issuanceconfig","title":"IssuanceConfig","text":"Name Type <code>authenticationConfig</code> <code>createdAt</code> string(date-time) <code>credentialIssuanceBindings</code> Array&lt;CredentialIssuanceBinding&gt; <code>id</code> string <code>notifyWebhook</code>"},{"location":"api/openapi/#issuancedto","title":"IssuanceDto","text":"Name Type <code>authenticationConfig</code> <code>credentialConfigs</code> Array&lt;CredentialConfigMapping&gt; <code>id</code> string <code>notifyWebhook</code>"},{"location":"api/openapi/#key_1","title":"Key","text":"Name Type <code>alg</code> string <code>crv</code> string <code>d</code> string <code>kid</code> string <code>kty</code> string <code>x</code> string <code>y</code> string"},{"location":"api/openapi/#keyimportdto","title":"KeyImportDto","text":"Name Type <code>crt</code> string <code>privateKey</code>"},{"location":"api/openapi/#keyobj","title":"KeyObj","text":""},{"location":"api/openapi/#offerrequestdto","title":"OfferRequestDto","text":"Name Type <code>credentialConfigurationIds</code> Array&lt;string&gt; <code>issuanceId</code> string <code>response_type</code> string"},{"location":"api/openapi/#offerresponse","title":"OfferResponse","text":"Name Type <code>session</code> string <code>uri</code> string"},{"location":"api/openapi/#presentationconfig","title":"PresentationConfig","text":"Name Type <code>createdAt</code> string(date-time) <code>dcql_query</code> <code>id</code> string <code>registrationCert</code> <code>webhook</code>"},{"location":"api/openapi/#presentationrequest","title":"PresentationRequest","text":"Name Type <code>requestId</code> string <code>response_type</code> string <code>webhook</code>"},{"location":"api/openapi/#registrationcertificaterequest","title":"RegistrationCertificateRequest","text":"Name Type <code>body</code> <code>id</code> string"},{"location":"api/openapi/#schemaresponse","title":"SchemaResponse","text":"Name Type <code>$schema</code> <code>properties</code> <code>required</code> Array&lt;string&gt; <code>type</code>"},{"location":"api/openapi/#session","title":"Session","text":"Name Type <code>auth_queries</code> <code>authorization_code</code> string <code>createdAt</code> string(date-time) <code>credentialPayload</code> <code>credentials</code> Array&lt;&gt; <code>id</code> string <code>issuanceId</code> string <code>notifications</code> Array&lt;&gt; <code>notifyWebhook</code> <code>offer</code> <code>request_uri</code> string <code>requestId</code> string <code>status</code> <code>tenantId</code> string <code>vp_nonce</code> string <code>webhook</code>"},{"location":"api/openapi/#statusupdatedto","title":"StatusUpdateDto","text":"Name Type <code>credentialConfigurationId</code> string <code>sessionId</code> string <code>status</code> number"},{"location":"api/openapi/#tokenresponse","title":"TokenResponse","text":"Name Type <code>access_token</code> string <code>expires_in</code> number <code>token_type</code> string"},{"location":"api/openapi/#vct","title":"VCT","text":"Name Type <code>description</code> string <code>extends</code> string <code>extends#integrity</code> string <code>name</code> string <code>schema_uri</code> string <code>schema_uri#integrity</code> string <code>vct</code> string"},{"location":"api/openapi/#webhookauthconfig","title":"WebHookAuthConfig","text":"Name Type <code>config</code> <code>type</code> string"},{"location":"api/openapi/#webhookconfig","title":"WebhookConfig","text":"Name Type <code>auth</code> <code>url</code> string"},{"location":"api/openapi/#security-schemes","title":"Security schemes","text":"Name Type Scheme Description oauth2 oauth2"},{"location":"api/openapi/#more-documentation","title":"More documentation","text":"<p>Documentation</p> For more information: https://openwallet-foundation-labs.github.io/eudiplo/latest/"},{"location":"architecture/configuration-import/","title":"Configuration Import","text":"<p>EUDIPLO supports importing configurations from JSON files on application startup. This feature allows you to pre-configure credentials, issuance workflows, and presentation verification rules without using the API.</p>"},{"location":"architecture/configuration-import/#overview","title":"Overview","text":"<p>The configuration import system automatically loads and validates JSON configuration files from the <code>config/config/</code> directory when the application starts. This is particularly useful for:</p> <ul> <li>Development environments - Pre-load test configurations</li> <li>Production deployments - Bootstrap with standard configurations</li> <li>CI/CD pipelines - Automated environment setup</li> <li>Multi-tenant scenarios - Bulk import tenant-specific configurations</li> </ul> <p>When running locally with nodejs, the default directory is <code>assets/config/</code>.</p>"},{"location":"architecture/configuration-import/#environment-variables","title":"Environment Variables","text":"<p>Configure the import behavior using these environment variables:</p> Variable Type Default Description <code>CONFIG_IMPORT</code> boolean <code>false</code> Enable configuration import on startup <code>CONFIG_IMPORT_FORCE</code> boolean <code>false</code> Overwrite existing configurations with same ID <code>CONFIG_FOLDER</code> string <code>assets/config/</code> Directory containing configuration files. Will be set in the Dockerfile to <code>app/config/config/</code>"},{"location":"architecture/configuration-import/#examples","title":"Examples","text":"<pre><code># Enable import (skip existing configs)\nCONFIG_IMPORT=true\n\n# Enable import and overwrite existing configs\nCONFIG_IMPORT=true\nCONFIG_IMPORT_FORCE=true\n</code></pre>"},{"location":"architecture/configuration-import/#directory-structure","title":"Directory Structure","text":"<p>The configuration import follows a specific directory structure:</p> <pre><code>assets/\n\u2514\u2500\u2500 config/\n    \u251c\u2500\u2500 tenant1/\n    \u2502   \u251c\u2500\u2500 keys/\n    \u2502   \u2502   \u251c\u2500\u2500 039af178-3ca0-48f4-a2e4-7b1209f30376.json  # Key ID: \"039af178-3ca0-48f4-a2e4-7b1209f30376\"\n    \u2502   \u2502   \u251c\u2500\u2500 7d8e9f10-1234-5678-9abc-def012345678.json  # Key ID: \"7d8e9f10-1234-5678-9abc-def012345678\"\n    \u2502   \u2502   \u2514\u2500\u2500 a1b2c3d4-e5f6-7890-abcd-ef1234567890.json  # Key ID: \"a1b2c3d4-e5f6-7890-abcd-ef1234567890\"\n    \u2502   \u251c\u2500\u2500 issuance/\n    \u2502   \u2502   \u251c\u2500\u2500 credentials/\n    \u2502   \u2502   \u2502   \u251c\u2500\u2500 employee-badge.json\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500 student-id.json\n    \u2502   \u2502   \u2514\u2500\u2500 issuance/\n    \u2502   \u2502       \u251c\u2500\u2500 employee-onboarding.json\n    \u2502   \u2502       \u2514\u2500\u2500 student-enrollment.json\n    \u2502   \u2514\u2500\u2500 presentation/\n    \u2502       \u251c\u2500\u2500 age-verification.json\n    \u2502       \u2514\u2500\u2500 identity-check.json\n    \u251c\u2500\u2500 tenant2/\n    \u2502   \u251c\u2500\u2500 keys/\n    \u2502   \u2502   \u2514\u2500\u2500 f8e7d6c5-b4a3-9281-7065-432109876543.json  # Key ID: \"f8e7d6c5-b4a3-9281-7065-432109876543\"\n    \u2502   \u251c\u2500\u2500 issuance/\n    \u2502   \u2502   \u251c\u2500\u2500 credentials/\n    \u2502   \u2502   \u2514\u2500\u2500 issuance/\n    \u2502   \u2514\u2500\u2500 presentation/\n    \u2514\u2500\u2500 company-xyz/\n        \u251c\u2500\u2500 keys/\n        \u2502   \u251c\u2500\u2500 12345678-abcd-ef12-3456-789012345678.json  # Key ID: \"12345678-abcd-ef12-3456-789012345678\"\n        \u2502   \u2514\u2500\u2500 98765432-fedc-ba98-7654-321098765432.json  # Key ID: \"98765432-fedc-ba98-7654-321098765432\"\n        \u251c\u2500\u2500 issuance/\n        \u2502   \u251c\u2500\u2500 credentials/\n        \u2502   \u2514\u2500\u2500 issuance/\n        \u2514\u2500\u2500 presentation/\n</code></pre>"},{"location":"architecture/configuration-import/#key-points","title":"Key Points","text":"<ul> <li>Tenant isolation: Each tenant has its own folder (e.g., <code>tenant1</code>,   <code>company-xyz</code>)</li> <li>Configuration types: Four types of configurations are supported</li> <li>File naming: JSON file names become the configuration ID (without <code>.json</code>   extension)</li> <li>Key ID mapping: For keys, the id is based on the <code>kid</code> field in the JSON   file and not based on the filename.</li> <li>Nested structure: Credentials and issuance configs are grouped under   <code>issuance/</code></li> <li>Key management: Cryptographic keys are stored in the <code>keys/</code> directory and   will be imported automatically. After the import, the keys can be removed from   the import folder.</li> </ul>"},{"location":"architecture/configuration-import/#configuration-types","title":"Configuration Types","text":""},{"location":"architecture/configuration-import/#1-cryptographic-keys","title":"1. Cryptographic Keys","text":"<p>Location: <code>config/config/{tenant}/keys/*.json</code></p> <p>Import cryptographic keys for signing and certificate operations.</p> <p>Example Structure:</p> <pre><code>{\n    \"privateKey\": {\n        \"kty\": \"EC\",\n        \"x\": \"pmn8SKQKZ0t2zFlrUXzJaJwwQ0WnQxcSYoS_D6ZSGho\",\n        \"y\": \"rMd9JTAovcOI_OvOXWCWZ1yVZieVYK2UgvB2IPuSk2o\",\n        \"crv\": \"P-256\",\n        \"d\": \"rqv47L1jWkbFAGMCK8TORQ1FknBUYGY6OLU1dYHNDqU\",\n        \"kid\": \"039af178-3ca0-48f4-a2e4-7b1209f30376\",\n        \"alg\": \"ES256\"\n    },\n    \"crt\": \"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\"\n}\n</code></pre> <p>Key Features:</p> <ul> <li>Multiple keys per tenant: Import several keys for different issuance   configurations</li> <li>Key ID from filename: The filename (without <code>.json</code>) becomes the key ID   (typically a UUID)</li> <li>Optional certificates: Include X.509 certificates in PEM format</li> <li>Algorithm support: ES256 (ECDSA P-256)</li> <li>Validation: Full schema validation during import</li> </ul>"},{"location":"architecture/configuration-import/#2-credential-configurations","title":"2. Credential Configurations","text":"<p>Location: <code>config/config/{tenant}/issuance/credentials/*.json</code></p> <p>Define credential templates and schemas.</p> <p>Schema Reference: Credential Config API</p>"},{"location":"architecture/configuration-import/#3-issuance-configurations","title":"3. Issuance Configurations","text":"<p>Location: <code>config/config/{tenant}/issuance/issuance/*.json</code></p> <p>Define issuance workflows and authentication requirements.</p> <p>Schema Reference: Issuance Config API</p>"},{"location":"architecture/configuration-import/#4-presentation-configurations","title":"4. Presentation Configurations","text":"<p>Location: <code>config/config/{tenant}/presentation/*.json</code></p> <p>Define verification requirements for credential presentations.</p> <p>Schema Reference: Presentation Config API</p>"},{"location":"architecture/configuration-import/#import-process","title":"Import Process","text":""},{"location":"architecture/configuration-import/#1-startup-validation","title":"1. Startup Validation","text":"<p>During application startup, EUDIPLO:</p> <ol> <li>Checks environment variables - Only imports if <code>CONFIG_IMPORT=true</code></li> <li>Scans tenant directories - Processes each tenant folder independently</li> <li>Validates file structure - Ensures required subdirectories exist</li> <li>Reads JSON files - Parses each configuration file</li> </ol>"},{"location":"architecture/configuration-import/#2-validation-and-processing","title":"2. Validation and Processing","text":"<p>For each configuration file:</p> <ol> <li>JSON parsing - Validates file syntax</li> <li>Schema validation - Uses the same validators as the API endpoints</li> <li>Dependency checking - Verifies referenced configurations exist</li> <li>Duplicate handling - Respects <code>CONFIG_IMPORT_FORCE</code> setting</li> </ol>"},{"location":"architecture/configuration-import/#3-error-handling","title":"3. Error Handling","text":"<p>Invalid configurations are handled gracefully:</p> <ul> <li>Validation errors are logged with detailed information</li> <li>Invalid files are skipped - Import continues with remaining files</li> <li>Missing dependencies are reported</li> <li>Existing configurations are preserved unless force mode is enabled</li> </ul>"},{"location":"architecture/configuration-import/#logging","title":"Logging","text":"<p>Import activities are logged with structured information:</p> <pre><code>{\n    \"event\": \"Import\",\n    \"tenant\": \"company-xyz\",\n    \"files\": 5,\n    \"message\": \"5 credential configs imported for company-xyz\"\n}\n</code></pre> <p>Key import logging:</p> <pre><code>{\n    \"event\": \"Import\",\n    \"tenant\": \"company-xyz\",\n    \"message\": \"3 keys imported for company-xyz\"\n}\n</code></pre> <p>Error logging includes detailed validation information:</p> <pre><code>{\n    \"event\": \"ValidationError\",\n    \"file\": \"invalid-config.json\",\n    \"tenant\": \"company-xyz\",\n    \"errors\": [\n        {\n            \"property\": \"credentialConfigs\",\n            \"constraints\": { \"isArray\": \"credentialConfigs must be an array\" },\n            \"value\": \"not-an-array\"\n        }\n    ]\n}\n</code></pre>"},{"location":"architecture/configuration-import/#best-practices","title":"Best Practices","text":""},{"location":"architecture/configuration-import/#1-configuration-management","title":"1. Configuration Management","text":"<ul> <li>Use descriptive filenames that reflect the configuration purpose</li> <li>Test configurations in development before deploying</li> <li>Document tenant-specific configurations</li> </ul>"},{"location":"architecture/configuration-import/#2-production-deployment","title":"2. Production Deployment","text":"<ul> <li>Set <code>CONFIG_IMPORT=true</code> only for initial deployment</li> <li>Use <code>CONFIG_IMPORT_FORCE=false</code> to prevent accidental overwrites</li> <li>Monitor logs for validation errors during startup</li> <li>Manage configurations via API after initial import</li> </ul>"},{"location":"architecture/configuration-import/#3-multi-tenant-setup","title":"3. Multi-Tenant Setup","text":"<pre><code># Organize by tenant/organization\nassets/config/\n\u251c\u2500\u2500 acme-corp/\n\u2502   \u251c\u2500\u2500 keys/\n\u2502   \u251c\u2500\u2500 issuance/\n\u2502   \u2514\u2500\u2500 presentation/\n\u251c\u2500\u2500 university-x/\n\u2502   \u251c\u2500\u2500 keys/\n\u2502   \u251c\u2500\u2500 issuance/\n\u2502   \u2514\u2500\u2500 presentation/\n\u2514\u2500\u2500 government-agency/\n    \u251c\u2500\u2500 keys/\n    \u251c\u2500\u2500 issuance/\n    \u2514\u2500\u2500 presentation/\n</code></pre> <p>Even when you just have one tenant, use a folder structure to prepare for future multi-tenancy.</p>"},{"location":"architecture/configuration-import/#troubleshooting","title":"Troubleshooting","text":""},{"location":"architecture/configuration-import/#common-issues","title":"Common Issues","text":"<p>Import not running: Check <code>CONFIG_IMPORT=true</code> is set</p> <p>Configurations not updating: Set <code>CONFIG_IMPORT_FORCE=true</code> to overwrite existing</p> <p>Validation errors: Check logs for specific validation failures and schema requirements</p> <p>Missing dependencies: Ensure credential configs are imported before issuance configs that reference them</p> <p>Key validation errors: Check that imported keys use supported algorithms (ES256) and have valid JWK format</p> <p>Certificate import issues: Verify certificates are in PEM format and match the imported private key</p>"},{"location":"architecture/configuration-import/#security-considerations","title":"Security Considerations","text":"<ul> <li>File permissions - Ensure config files have appropriate read permissions</li> <li>Tenant isolation - Verify tenant boundaries are properly maintained</li> </ul> <p>TODO: check if webhook credentials should be stored here or in environment variables for security.</p>"},{"location":"architecture/configuration-import/#related-documentation","title":"Related Documentation","text":"<ul> <li>Key Management - Detailed key management architecture</li> <li>API Authentication</li> <li>Multi-tenant Architecture</li> <li>Database Architecture</li> <li>Production Deployment</li> </ul>"},{"location":"architecture/database/","title":"Databases","text":"<p>This service uses TypeORM for data persistence. By default, a local SQLite database is used, but the system also supports PostgreSQL and can be extended to work with other engines such as MySQL thanks to TypeORM\u2019s flexible architecture.</p> <p>\ud83d\udca1 Database configuration is fully dynamic and can be defined via environment variables.</p>"},{"location":"architecture/database/#configuration-overview","title":"Configuration Overview","text":"Variable Description Required for Default <code>DB_TYPE</code> Database engine (<code>sqlite</code> or <code>postgres</code>) All <code>sqlite</code> <code>FOLDER</code> Path for local SQLite database. Will be extended by tenant id <code>sqlite</code> <code>./tmp</code> <code>DB_HOST</code> Hostname for PostgreSQL <code>postgres</code> \u2013 <code>DB_PORT</code> Port for PostgreSQL <code>postgres</code> \u2013 <code>DB_USERNAME</code> PostgreSQL username <code>postgres</code> \u2013 <code>DB_PASSWORD</code> PostgreSQL password <code>postgres</code> \u2013 <code>DB_DATABASE</code> PostgreSQL database name <code>postgres</code> \u2013 <p>\u2705 If <code>DB_TYPE=sqlite</code>, only the <code>FOLDER</code> variable is needed. For <code>postgres</code>, all <code>DB_*</code> variables must be provided.</p>"},{"location":"architecture/database/#sqlite-default","title":"SQLite (Default)","text":"<p>When using <code>DB_TYPE=sqlite</code>, the service will store its data in a local file-based SQLite database located at the path defined by the <code>FOLDER</code> variable (<code>./config</code> by default). This setup is lightweight and ideal for:</p> <ul> <li>Development</li> <li>Testing</li> <li>Prototyping</li> </ul> <p>No additional database server is required.</p>"},{"location":"architecture/database/#postgresql","title":"PostgreSQL","text":"<p>To connect to a PostgreSQL instance, set the following environment variables:</p> <pre><code>DB_TYPE=postgres\nDB_HOST=your-hostname\nDB_PORT=5432\nDB_USERNAME=your-username\nDB_PASSWORD=your-password\nDB_DATABASE=your-database\n</code></pre> <p>This mode is suitable for:</p> <ul> <li>Production deployments</li> <li>Multi-instance setups</li> <li>Scenarios requiring scalability and better concurrency handling</li> </ul> <p>Make sure your database is reachable and properly initialized before starting the service.</p>"},{"location":"architecture/database/#extensibility","title":"Extensibility","text":"<p>Because this service uses TypeORM, it is easy to integrate additional database engines such as:</p> <ul> <li>MySQL / MariaDB</li> <li>Microsoft SQL Server</li> <li>Oracle</li> </ul> <p>To add support for a new engine:</p> <ul> <li>Install the appropriate TypeORM driver (e.g., <code>mysql2</code>)</li> <li>Set <code>DB_TYPE</code> to the corresponding engine name</li> <li>Configure the necessary connection options via environment variables</li> </ul> <p>Let us know if you need help extending support for additional databases.</p>"},{"location":"architecture/database/#multi-tenant-database-schema","title":"Multi-Tenant Database Schema","text":"<p>EUDIPLO supports multi-tenancy, allowing multiple tenants to share the same database while keeping their data isolated. This is achieved by adding a <code>tenantId</code> column to relevant entities and filtering all queries by this identifier.</p>"},{"location":"architecture/database/#tenant-isolation-in-database","title":"Tenant Isolation in Database","text":"<p>In multi-tenant mode, data isolation is achieved through a <code>tenantId</code> column in all relevant entities:</p>"},{"location":"architecture/database/#core-entities-with-tenant-support","title":"Core Entities with Tenant Support:","text":"<p>Session Entity:</p> <pre><code>@Entity()\nexport class Session {\n    @PrimaryColumn('uuid')\n    id: string;\n\n    @Column('varchar')\n    tenantId: string; // Tenant ID for multi-tenancy support\n\n    // ... other fields\n}\n</code></pre> <p>Issuance Configuration Entity:</p> <pre><code>@Entity()\nexport class IssuanceConfig {\n    @PrimaryColumn('varchar')\n    id: string;\n\n    @Column('varchar')\n    tenantId: string;\n\n    // ... other fields\n}\n</code></pre>"},{"location":"architecture/database/#database-queries","title":"Database Queries","text":"<p>All database operations automatically filter by <code>tenantId</code> when in multi-tenant mode:</p> <pre><code>// Example: Get sessions for specific tenant\nreturn this.sessionRepository.findBy({ tenantId });\n\n// Example: Update session with tenant scope\nreturn this.sessionRepository.update({ id: sessionId, tenantId }, updateData);\n</code></pre>"},{"location":"architecture/key-management/","title":"Key Management","text":"<p>The keys used for signing operations in EUDIPLO can be managed in multiple ways, depending on the selected key management type (<code>KM_TYPE</code>).</p> <p>\ud83d\udca1 Encryption operations are always handled locally using the configured crypto module, regardless of the selected key management backend.</p>"},{"location":"architecture/key-management/#configuration-overview","title":"Configuration Overview","text":"Variable Description Required for Default <code>KM_TYPE</code> Key management engine type (<code>file</code> or <code>vault</code>) All <code>file</code> <code>CRYPTO_ALG</code> Cryptographic algorithm (<code>ES256</code>) All <code>ES256</code> <code>VAULT_URL</code> Vault API URL to vault instance like <code>http://vault:8200</code> <code>vault</code> \u2013 <code>VAULT_TOKEN</code> Authentication token for Vault <code>vault</code> \u2013 <code>CONFIG_IMPORT</code> Enable automatic key import from config files Optional <code>false</code> <code>CONFIG_IMPORT_FORCE</code> Overwrite existing keys during import Optional <code>false</code> <p>\u2705 When using the default <code>file</code> mode, the keys will be stored in the <code>keys</code> folder in the config folder. Vault mode requires all <code>VAULT_*</code> variables.</p>"},{"location":"architecture/key-management/#local-file-based-key-management","title":"Local (File-Based) Key Management","text":"<p>When <code>KM_TYPE=file</code> (default), keys are stored unencrypted in the <code>keys</code> directory in the config folder. This mode is ideal for development or testing.</p>"},{"location":"architecture/key-management/#multiple-key-support","title":"Multiple Key Support","text":"<p>Each tenant can manage multiple cryptographic keys simultaneously. Keys are stored in the tenant's <code>keys/keys/</code> subdirectory as individual JSON files:</p> <pre><code>config/\n\u251c\u2500\u2500 tenant-1/\n\u2502   \u251c\u2500\u2500 keys/\n\u2502   \u2502   \u2514\u2500\u2500 keys/\n\u2502   \u2502       \u251c\u2500\u2500 039af178-3ca0-48f4-a2e4-7b1209f30376.json\n\u2502   \u2502       \u251c\u2500\u2500 7e2c1a4b-9d8e-4f3a-b5c2-8f1e3d7a9c6b.json\n\u2502   \u2502       \u2514\u2500\u2500 a1b2c3d4-e5f6-7890-1234-567890abcdef.json\n\u2502   \u2514\u2500\u2500 display.json\n</code></pre> <p>Each key file contains the private key in JWK format:</p> <pre><code>{\n    \"kty\": \"EC\",\n    \"x\": \"pmn8SKQKZ0t2zFlrUXzJaJwwQ0WnQxcSYoS_D6ZSGho\",\n    \"y\": \"rMd9JTAovcOI_OvOXWCWZ1yVZieVYK2UgvB2IPuSk2o\",\n    \"crv\": \"P-256\",\n    \"d\": \"rqv47L1jWkbFAGMCK8TORQ1FknBUYGY6OLU1dYHNDqU\",\n    \"kid\": \"039af178-3ca0-48f4-a2e4-7b1209f30376\",\n    \"alg\": \"ES256\"\n}\n</code></pre>"},{"location":"architecture/key-management/#automatic-key-generation","title":"Automatic Key Generation","text":"<p>On startup, if no keys are found for a tenant, the service will automatically generate a new key pair with a self signed certificate. Each generated key includes:</p> <ul> <li>Private key (stored as JWK format)</li> <li>Public key (derived from private key)</li> <li>Self-signed certificate (automatically generated)</li> </ul>"},{"location":"architecture/key-management/#vault-hashicorp-vault","title":"Vault (HashiCorp Vault)","text":"<p>To use HashiCorp Vault for key management, configure the following:</p> <pre><code>KM_TYPE=vault\nVAULT_URL=http://localhost:8200/v1/transit\nVAULT_TOKEN=your-vault-token\n</code></pre> <p>For each tenant, a new secret engine is created in Vault with the path <code>{tenantId}</code>.</p> <p>To issue credentials, you need to have a signed certificate for the public key that is bound to your domain.</p> <p>In this mode:</p> <ul> <li>All signing operations are delegated to Vault via its API.</li> <li>The private key never leaves the Vault server.</li> <li>Access can be tightly controlled using Vault\u2019s policies and authentication   mechanisms.</li> </ul> <p>Vault is well-suited for production environments where secure, auditable key usage is required.</p>"},{"location":"architecture/key-management/#extensibility","title":"Extensibility","text":"<p>The key management system is designed to be extensible. You can integrate other key management backends such as:</p> <ul> <li>\ud83d\udd10 AWS KMS</li> <li>\ud83d\udd10 Azure Key Vault</li> <li>\ud83d\udd10 Google Cloud KMS</li> <li>\ud83d\udd10 Hardware Security Modules (HSMs)</li> </ul> <p>To add a new backend:</p> <ul> <li>Implement the key service interface.</li> <li>Extend the module factory to support a new <code>KM_TYPE</code>.</li> </ul> <pre><code>// Example (in code):\nKM_TYPE = awskms;\n</code></pre> <p>If you need help integrating a new provider, feel free to open an issue or contact the maintainers.</p>"},{"location":"architecture/key-management/#multi-tenant-key-management","title":"Multi-Tenant Key Management","text":"<p>In multi-tenant mode, EUDIPLO provides complete key isolation between tenants, ensuring cryptographic separation and security.</p>"},{"location":"architecture/key-management/#tenant-specific-key-storage","title":"Tenant-Specific Key Storage","text":""},{"location":"architecture/key-management/#file-based-key-management","title":"File-Based Key Management","text":"<p>When <code>KM_TYPE=file</code> in multi-tenant mode:</p> <pre><code>config/\n\u251c\u2500\u2500 tenant-1/\n\u2502   \u251c\u2500\u2500 keys/\n\u2502   \u2502   \u2514\u2500\u2500 keys/\n\u2502   \u2502       \u251c\u2500\u2500 key-1.json\n\u2502   \u2502       \u251c\u2500\u2500 key-2.json\n\u2502   \u2502       \u2514\u2500\u2500 key-3.json\n\u2502   \u2514\u2500\u2500 display.json\n\u251c\u2500\u2500 tenant-2/\n\u2502   \u251c\u2500\u2500 keys/\n\u2502   \u2502   \u2514\u2500\u2500 keys/\n\u2502   \u2502       \u251c\u2500\u2500 signing-key.json\n\u2502   \u2502       \u2514\u2500\u2500 backup-key.json\n\u2502   \u2514\u2500\u2500 display.json\n</code></pre> <p>Each key file contains a complete JWK private key with metadata.</p>"},{"location":"architecture/key-management/#automatic-key-generation_1","title":"Automatic Key Generation","text":"<p>Tenant Initialization Process:</p> <ol> <li>Client registers with credentials (<code>client_id</code>, <code>client_secret</code>)</li> <li>System creates tenant directory: <code>/config/{tenantId}/</code></li> <li>Cryptographic key pair automatically generated</li> <li>Keys stored in tenant-specific location</li> <li>Generation of certificate for public key</li> </ol>"},{"location":"architecture/key-management/#key-import-and-management","title":"Key Import and Management","text":"<p>EUDIPLO supports importing existing keys through multiple methods to accommodate different deployment scenarios and security requirements.</p>"},{"location":"architecture/key-management/#api-based-key-import","title":"API-Based Key Import","text":"<p>Import keys through the REST API using authenticated requests:</p> <p>Endpoint: <code>POST /key</code></p> <p>Request Body:</p> <pre><code>{\n    \"privateKey\": {\n        \"kty\": \"EC\",\n        \"x\": \"pmn8SKQKZ0t2zFlrUXzJaJwwQ0WnQxcSYoS_D6ZSGho\",\n        \"y\": \"rMd9JTAovcOI_OvOXWCWZ1yVZieVYK2UgvB2IPuSk2o\",\n        \"crv\": \"P-256\",\n        \"d\": \"rqv47L1jWkbFAGMCK8TORQ1FknBUYGY6OLU1dYHNDqU\",\n        \"kid\": \"039af178-3ca0-48f4-a2e4-7b1209f30376\",\n        \"alg\": \"ES256\"\n    },\n    \"crt\": \"-----BEGIN CERTIFICATE-----\\n...optional certificate...\\n-----END CERTIFICATE-----\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n    \"id\": \"039af178-3ca0-48f4-a2e4-7b1209f30376\"\n}\n</code></pre>"},{"location":"architecture/key-management/#configuration-based-key-import","title":"Configuration-Based Key Import","text":"<p>Import keys automatically during application startup using the configuration import system.</p> <p>Environment Variables:</p> <pre><code>CONFIG_IMPORT=true\nCONFIG_IMPORT_FORCE=false  # Set to true to overwrite existing keys\n</code></pre> <p>Directory Structure:</p> <pre><code>assets/config/\n\u251c\u2500\u2500 tenant-1/\n\u2502   \u2514\u2500\u2500 keys/\n\u2502       \u251c\u2500\u2500 primary-key.json\n\u2502       \u251c\u2500\u2500 backup-key.json\n\u2502       \u2514\u2500\u2500 legacy-key.json\n\u2514\u2500\u2500 tenant-2/\n    \u2514\u2500\u2500 keys/\n        \u2514\u2500\u2500 signing-key.json\n</code></pre> <p>Key File Format:</p> <pre><code>{\n    \"privateKey\": {\n        \"kty\": \"EC\",\n        \"x\": \"...\",\n        \"y\": \"...\",\n        \"crv\": \"P-256\",\n        \"d\": \"...\",\n        \"kid\": \"unique-key-identifier\",\n        \"alg\": \"ES256\"\n    },\n    \"crt\": \"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\"\n}\n</code></pre>"},{"location":"architecture/key-management/#key-management-operations","title":"Key Management Operations","text":"<p>List All Keys:</p> <pre><code>GET /key\nAuthorization: Bearer &lt;tenant-token&gt;\n</code></pre>"},{"location":"architecture/key-management/#supported-key-formats","title":"Supported Key Formats","text":"<ul> <li>Algorithm Support: ES256 (ECDSA P-256)</li> <li>Key Format: JSON Web Key (JWK) format</li> <li>Certificate Support: Optional X.509 certificates in PEM format</li> <li>Key Generation: Automatic generation if no keys exist</li> </ul>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>EUDIPLO is a lightweight middleware designed to bridge the gap between existing systems and the emerging ecosystem of EUDI Wallets. Instead of implementing complex protocols such as OpenID4VP, SD-JWT, or DIDComm themselves, developers can run EUDIPLO as a standalone Docker container and interact with it via simple APIs or configuration files.</p> <p>It acts as an adapter between trusted infrastructure and local applications or web services. EUDIPLO handles the complexities of the EUDI Wallet ecosystem, allowing you to focus on your core business logic without worrying about the underlying protocols.</p>"},{"location":"architecture/overview/#purpose","title":"Purpose","text":"<p>The EUDI Wallet ecosystem introduces new technical standards and trust models that are non-trivial to implement correctly. EUDIPLO handles these standards for you, allowing existing systems to:</p> <ul> <li>Issue verifiable credentials</li> <li>Verify presentations</li> <li>Manage cryptographic keys securely</li> <li>Persist session data</li> <li>Run in a self-contained Docker deployment</li> </ul>"},{"location":"architecture/overview/#deployment","title":"Deployment","text":"<p>EUDIPLO is shipped as a Docker image. It can be run with minimal setup via a <code>.env</code> file. You can mount:</p> <ul> <li>a <code>config/</code> directory for SQLite data or credential configuration</li> <li>optional integration with Vault for key storage</li> </ul> <p>EUDIPLO can be deployed as:</p> <ul> <li>a standalone local service (e.g., during development)</li> <li>a backend service in production (e.g., behind a gateway)</li> </ul> <p>You can find examples of deployments in the deployment directory.</p> <p>For configuration management, see Configuration Import to learn how to bootstrap your deployment with pre-configured credentials and workflows.</p>"},{"location":"architecture/overview/#integration-patterns","title":"Integration Patterns","text":"<p>You can use EUDIPLO as:</p> <ul> <li>An internal credential issuance service for your citizen portal, education   platform, or company registry</li> <li>A verifier bridge to validate wallets without deeply integrating OpenID4VP   etc.</li> <li>A testing sandbox for experimenting with EUDI protocols</li> </ul>"},{"location":"architecture/overview/#extensibility","title":"Extensibility","text":"<p>EUDIPLO is modular and extensible:</p> <ul> <li>Add new key management backends (e.g., AWS KMS)</li> <li>Customize issuance templates</li> <li>Extend the API layer with business-specific endpoints</li> </ul>"},{"location":"architecture/sessions/","title":"Sessions Management","text":"<p>EUDIPLO manages sessions for credential issuance and verification and are bound to each tenant. In case for a presentation during issuance, both actions are handled in the same session. Sessions are stored in the database and can be managed via the <code>/sessions</code> endpoint. You can retrieve a specific session via <code>/sessions/{id}</code>.</p> <p>To tidy up old sessions, an interval is set to delete older session. The default values can be configured by setting:</p> <ul> <li><code>SESSION_TIDY_UP_INTERVAL</code>: value in seconds, default: 3600 (1 hour)</li> <li><code>SESSION_TTL</code>: value in seconds, default: 86400 (24 hours)</li> </ul> <p>Other elements as persisted status mapping (the binding between a session id and a status list reference) are not deleted with this process.</p>"},{"location":"architecture/supported-protocols/","title":"Supported Protocols","text":"<p>EUDIPLO is deliberately limited to protocols that are part of the European Digital Identity Wallet (EUDI Wallet) ecosystem. This focused scope reduces implementation complexity, improves long-term maintainability, and ensures a consistent trust model across services.</p> <p>Rather than being a general-purpose verifiable credentials broker, EUDIPLO aligns strictly with the specifications endorsed by the EU regulatory and technical framework.</p>"},{"location":"architecture/supported-protocols/#protocols-supported","title":"Protocols Supported","text":"Protocol Description OpenID for Verifiable Credential Issuance (OID4VCI) Enables issuers to deliver verifiable credentials to EUDI Wallets using OAuth-based flows. OpenID for Verifiable Presentations (OID4VP) Allows services to request and verify credentials presented by EUDI Wallet holders. Selective Disclosure JWT VC (SD-JWT VC) Data model for credentials allowing selective disclosure of individual claims by the user. OAuth Token Status List Mechanism for determining revocation or suspension status of issued credentials. <p>These standards are evolving in coordination with EU-level pilot projects and working groups. EUDIPLO tracks these developments closely to provide early, stable support as specifications mature.</p>"},{"location":"architecture/supported-protocols/#why-not-more","title":"Why Not More?","text":"<p>By limiting scope to official EUDI Wallet protocols, EUDIPLO avoids:</p> <ul> <li>Incompatibilities with reference implementations</li> <li>Bloated code from supporting rarely used formats</li> <li>Uncertain trust assumptions from broader ecosystems</li> </ul> <p>This makes EUDIPLO especially suitable for:</p> <ul> <li>Public sector services integrating with national wallet pilots</li> <li>Companies targeting pan-European credential workflows</li> <li>Developers seeking a reliable, minimal abstraction layer over complex specs</li> </ul>"},{"location":"architecture/tenant/","title":"Tenant-Based Architecture","text":"<p>EUDIPLO is built on a tenant-based architecture that allows you to isolate configurations and data for different clients or environments. This means you can run multiple instances of EUDIPLO, each serving a different tenant or client, while sharing the same codebase.</p>"},{"location":"architecture/tenant/#tenant-isolation","title":"Tenant Isolation","text":"<p>Each tenant has:</p> <ul> <li>Separate configurations: Managed in the database</li> <li>Isolated database records: All entities include <code>tenantId</code> field</li> <li>Independent key management: Tenant-specific cryptographic keys</li> <li>Dedicated session management: Sessions scoped to tenant</li> <li>Individual credential configurations: Per-tenant issuance and presentation   templates</li> </ul> <p>For now the separation in the database is done by a <code>tenantId</code> field in all entities. In the future, we may support separate databases per tenant.</p>"},{"location":"architecture/tenant/#tenant-management","title":"Tenant Management","text":"<p>When a protected endpoint is called, the system will check if the tenant is already set up. If not, it will call the required functions to do so. This can result in a longer response time for the first request, but subsequent requests will be faster.</p>"},{"location":"architecture/tenant/#deleting-a-tenant","title":"Deleting a Tenant","text":"<p>This is not yet implemented, since you need some kind of admin credential to start the process in case it is not triggered by the tenant itself.</p> <p>TODO: needs to be implemented.</p>"},{"location":"architecture/webhooks/","title":"Webhooks","text":"<p>EUDIPLO allows the configuration of webhook endpoints to integrate external services during credential presentation and presentation during issuance flows.</p>"},{"location":"architecture/webhooks/#supported-webhook-scenarios","title":"Supported Webhook Scenarios","text":"Flow Purpose Presentation Webhook Receives verified claims from the wallet Presentation During Issuance Receives claims required to issue a credential Notification Webhook Receives notifications about the status of the issuance process."},{"location":"architecture/webhooks/#example-webhook-service","title":"Example Webhook Service","text":"<p>In the test/webhook directory, you can find a simple webhook simulator that can be used to test the webhook functionality of the EUDIPLO service. It can be run locally or deployed to a cloudflare worker.</p>"},{"location":"architecture/webhooks/#webhook-configuration","title":"Webhook Configuration","text":"<p>A webhook object can be configured to pass the required information to the EUDIPLO service. The object must contain the following fields:</p> <ul> <li><code>url</code>: The URL of the webhook endpoint to which the data will be sent. The   request will be sent as an HTTP <code>POST</code> request.</li> <li><code>auth</code>: Optional authentication information for the webhook endpoint.<ul> <li><code>type</code>: The type of authentication to use. Supported types are:<ul> <li><code>apiKey</code>: API key authentication, where the key is sent in a header.</li> </ul> </li> </ul> </li> </ul> <p>Here is an example of a webhook configuration:</p> <pre><code>{\n    \"webhook\": {\n        \"url\": \"http://localhost:8787/consume\",\n        \"auth\": {\n            \"type\": \"apiKey\",\n            \"config\": {\n                \"headerName\": \"x-api-key\",\n                \"value\": \"your-api-key\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"architecture/webhooks/#1-presentation-webhook","title":"1. Presentation Webhook","text":"<p>You can configure the webhook statically inside your presentation or issuance configuration or passing the webhook dynamically via offer creation:</p>"},{"location":"architecture/webhooks/#2-presentation-during-issuance","title":"2. Presentation During Issuance","text":"<pre><code>{\n    \"authenticationConfig\": {\n        \"method\": \"presentationDuringIssuance\",\n        \"config\": {\n            \"presentation\": {\n                \"type\": \"pid\",\n                \"webhook\": {\n                    \"url\": \"http://localhost:8787/process\",\n                    \"auth\": {\n                        \"type\": \"apiKey\",\n                        \"config\": {\n                            \"headerName\": \"x-api-key\",\n                            \"value\": \"your-api-key\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"architecture/webhooks/#3-notification-webhook","title":"3. Notification Webhook","text":"<p>When configured, it will send the notification response like accepted or denied to the configured webhook endpoint. Then you can be sure that the Wallet has received and accepted the credential.</p> <pre><code>{\n    \"notifyWebhook\": {\n        \"url\": \"http://localhost:8787/notify\",\n        \"auth\": {\n            \"type\": \"apiKey\",\n            \"config\": {\n                \"headerName\": \"x-api-key\",\n                \"value\": \"your-api-key\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"architecture/webhooks/#webhook-request-format","title":"Webhook Request Format","text":"<p>Webhooks receive an HTTP <code>POST</code> request with a simplified payload containing only the presented claims.</p> <p>It is structured as follows:</p> <ul> <li><code>credentials</code>: An array of credential objects, each containing:<ul> <li><code>id</code>: The ID of the DCQL query to identify which was passed for the   request.</li> <li><code>values</code>: The claims presented by the wallet. SD-JWT VC specific fields   like cnf and status got removed for simplicity.</li> </ul> </li> <li><code>session</code>: The session ID used to identify the request.</li> </ul> <p>In case the verification of a credential fails, an <code>error</code> field with a message is included instead of the values.</p>"},{"location":"architecture/webhooks/#example-payload","title":"Example Payload","text":"<pre><code>{\n    \"credentials\": [\n        {\n            \"id\": \"pid\",\n            \"values\": {\n                \"iss\": \"https://service.eudi-wallet.dev\",\n                \"iat\": 1751884150,\n                \"vct\": \"https://service.eudi-wallet.dev/credentials/vct/pid\",\n                \"address\": {\n                    \"locality\": \"K\u00d6LN\",\n                    \"postal_code\": \"51147\",\n                    \"street_address\": \"HEIDESTRA\u1e9eE 17\"\n                }\n            }\n        },\n        {\n            \"id\": \"citizen\",\n            \"error\": \"Credential verification failed: invalid signature\"\n        }\n    ],\n    \"session\": \"a6318799-dff4-4b60-9d1d-58703611bd23\"\n}\n</code></pre>"},{"location":"architecture/webhooks/#webhook-response-format","title":"Webhook Response Format","text":"<p>Only required for presentation during issuance webhooks.</p> <p>The response must be a JSON object keyed by the ID of the credential configuration. Each entry must contain the claims to issue.</p>"},{"location":"architecture/webhooks/#example-response","title":"Example Response","text":"<p>Issuing a credential with the ID <code>citizen</code>:</p> <pre><code>{\n    \"citizen\": {\n        \"town\": \"Berlin\"\n    }\n}\n</code></pre> <p>This response is passed into the issuance flow to create the final credential.</p>"},{"location":"development/","title":"Development","text":"<p>This project is built with NestJS, a progressive Node.js framework for building efficient, scalable server-side applications using TypeScript.</p>"},{"location":"development/#documentation-with-compodoc","title":"Documentation with Compodoc","text":"<p>Compodoc provides a comprehensive overview of the codebase, including:</p> <ul> <li>Modules</li> <li>Controllers</li> <li>Services</li> <li>DTOs</li> <li>Dependencies</li> </ul> <pre><code>pnpm run compodoc:start\n</code></pre> <p>A rendered version of the build is included here.</p>"},{"location":"development/#source-code-structure","title":"Source Code Structure","text":"<p>Each module typically contains its own:</p> <ul> <li><code>controller.ts</code> \u2014 API endpoints</li> <li><code>service.ts</code> \u2014 Business logic</li> <li><code>dto/</code> \u2014 Data Transfer Objects</li> <li><code>entities/</code> \u2014 TypeORM entities (if needed)</li> </ul>"},{"location":"development/#additional-documentation","title":"Additional Documentation","text":"<ul> <li>API Authentication - Guide for using OAuth2   authentication with the API</li> <li>Contributing Guidelines - How to contribute to the project</li> <li>Testing Guide - How to run and write tests</li> <li>Logging - Configuring logging for development   and production</li> </ul>"},{"location":"development/#scripts","title":"Scripts","text":"<p>Useful development scripts:</p> <pre><code>pnpm run start:dev        # Start the app in watch mode\npnpm run test             # Run unit tests\npnpm run compodoc         # Generate Compodoc documentation\npnpm run compodoc:serve   # Serve the generated docs locally\n</code></pre> <p>\ud83d\udca1 Compodoc output is stored in the <code>doc/compodoc</code> folder and served statically by the application.</p>"},{"location":"development/#contributions","title":"Contributions","text":"<p>Feel free to contribute by improving documentation, fixing bugs, or extending functionality. Make sure to follow the coding standards and write tests where applicable.</p>"},{"location":"development/contributing/","title":"Contributing","text":"<p>Thank you for considering contributing to EUDIPLO!</p> <p>Please refer to the CONTRIBUTING.md file in the root of the repository for detailed guidelines on:</p> <ul> <li>Reporting issues</li> <li>Suggesting features</li> <li>Setting up the development environment</li> <li>Submitting pull requests</li> </ul>"},{"location":"development/documentation-versioning/","title":"Documentation Versioning","text":"<p>This project uses mike to manage multiple versions of the documentation.</p>"},{"location":"development/documentation-versioning/#available-versions","title":"Available Versions","text":"<ul> <li>main: Always reflects the current state of the main branch</li> <li>latest: Documentation for the most recent stable release</li> <li>Specific Versions: Documentation for specific releases (e.g., <code>1.2.3</code>)   accessible via direct URL</li> </ul>"},{"location":"development/documentation-versioning/#how-it-works","title":"How It Works","text":""},{"location":"development/documentation-versioning/#automatic-deployment","title":"Automatic Deployment","text":"<ol> <li>Main Branch Updates: When code is pushed to <code>main</code>, the documentation is    automatically built and deployed as the <code>main</code> version</li> <li>Releases: When a new release is published:<ul> <li>Documentation is deployed as <code>latest</code></li> <li><code>latest</code> becomes the default/recommended documentation version</li> <li>The specific version (e.g., <code>1.2.3</code>) is also available via direct URL   access</li> </ul> </li> </ol>"},{"location":"development/documentation-versioning/#version-strategy","title":"Version Strategy","text":"<ul> <li>Version Selector Shows: <code>main</code>, <code>latest</code> (clean and simple)</li> <li>Direct Access Available: You can still access specific versions like   <code>/1.2.3/</code> directly via URL</li> <li>Latest Points To: The most recent stable release</li> <li>Default: <code>latest</code> is set as the default documentation version</li> </ul>"},{"location":"development/documentation-versioning/#version-switching","title":"Version Switching","text":"<p>Users can switch between documentation versions using the version selector in the top navigation bar of the documentation site.</p>"},{"location":"development/documentation-versioning/#local-development","title":"Local Development","text":"<p>For local development with versioning:</p> <pre><code># First time setup: Initialize mike with a main version\npnpm run doc:init\n\n# Serve versioned docs locally\npnpm run doc:serve-versions\n\n# Deploy a development version\npnpm run doc:deploy-dev\n\n# Deploy a major version manually (example: version 1)\npnpm run doc:deploy-major 1 latest\n\n# List all deployed versions\npnpm run doc:list-versions\n\n# Delete a specific version (be careful!)\npnpm run doc:delete-version [version-name]\n</code></pre> <p>Note: If you get a 404 error when first running <code>pnpm run doc:serve-versions</code>, you need to run <code>pnpm run doc:init</code> first to initialize mike with at least one version.</p>"},{"location":"development/documentation-versioning/#manual-deployment","title":"Manual Deployment","text":"<p>You can manually trigger documentation deployment using the GitHub Actions workflow dispatch feature in the repository's Actions tab.</p>"},{"location":"development/documentation-versioning/#accessing-documentation-versions","title":"Accessing Documentation Versions","text":"<p>Once deployed, the documentation versions are available at:</p> <ul> <li>Latest Stable:   https://openwallet-foundation-labs.github.io/eudiplo/latest/   (points to latest major version)</li> <li>Development:   https://openwallet-foundation-labs.github.io/eudiplo/main/   (alias: <code>/latest-dev/</code>)</li> <li>Major Versions: <code>https://openwallet-foundation-labs.github.io/eudiplo/1/</code>,   <code>https://openwallet-foundation-labs.github.io/eudiplo/2/</code>, etc.</li> <li>Specific Versions:   <code>https://openwallet-foundation-labs.github.io/eudiplo/v1.2.3/</code> (direct access   only, not in version selector)</li> <li>Version Selector: Available in the top navigation, shows only major   versions + main</li> </ul>"},{"location":"development/documentation-versioning/#structure","title":"Structure","text":"<ul> <li>Documentation lives in the <code>docs/</code> directory</li> <li>API documentation is auto-generated from Swagger/OpenAPI specs</li> <li>Code documentation is auto-generated using Compodoc</li> <li>The site is built using MkDocs with the Material theme</li> </ul>"},{"location":"development/logging-configuration/","title":"Logging Configuration","text":"<p>The EUDIPLO Service provides flexible logging configuration to help with debugging and monitoring.</p>"},{"location":"development/logging-configuration/#basic-log-level-configuration","title":"Basic Log Level Configuration","text":"<p>Control the overall log level using the <code>LOG_LEVEL</code> environment variable:</p> <pre><code># Show all logs (debug, info, warn, error)\nLOG_LEVEL=debug\n\n# Show only info, warn, error (default)\nLOG_LEVEL=info\n\n# Show only warnings and errors\nLOG_LEVEL=warn\n\n# Show only errors\nLOG_LEVEL=error\n</code></pre>"},{"location":"development/logging-configuration/#disabling-specific-logger-services","title":"Disabling Specific Logger Services","text":""},{"location":"development/logging-configuration/#http-requestresponse-logging","title":"HTTP Request/Response Logging","text":"<p>To disable automatic HTTP request and response logging from Pino (useful during development when you want to reduce log noise):</p> <pre><code># Disable HTTP request/response logging\nLOG_ENABLE_HTTP_LOGGER=true\n\n# Enable HTTP request/response logging (default)\nLOG_ENABLE_HTTP_LOGGER=false\n</code></pre> <p>Note: This controls the built-in HTTP logging from the Pino HTTP logger. Session-specific logging is controlled separately.</p>"},{"location":"development/logging-configuration/#sessionloggerservice","title":"SessionLoggerService","text":"<p>To disable all session-related logging (useful during debugging when you want to focus on other components):</p> <pre><code># Disable SessionLoggerService logs\nLOG_ENABLE_SESSION_LOGGER=true\n\n# Enable SessionLoggerService logs (default)\nLOG_ENABLE_SESSION_LOGGER=false\n</code></pre>"},{"location":"development/logging-configuration/#development-scenarios","title":"Development Scenarios","text":""},{"location":"development/logging-configuration/#debugging-authentication-issues","title":"Debugging Authentication Issues","text":"<pre><code>LOG_LEVEL=debug\nLOG_ENABLE_SESSION_LOGGER=true\nLOG_ENABLE_HTTP_LOGGER=true\n</code></pre> <p>This will show detailed debug logs but hide session-related and HTTP request noise.</p>"},{"location":"development/logging-configuration/#monitoring-session-flows","title":"Monitoring Session Flows","text":"<pre><code>LOG_LEVEL=info\nLOG_ENABLE_SESSION_LOGGER=false\nLOG_ENABLE_HTTP_LOGGER=true\n</code></pre> <p>This will show all session flow events for monitoring credential issuance and verification, but without HTTP request logs.</p>"},{"location":"development/logging-configuration/#full-development-logging","title":"Full Development Logging","text":"<pre><code>LOG_LEVEL=debug\nLOG_ENABLE_SESSION_LOGGER=false\nLOG_ENABLE_HTTP_LOGGER=false\n</code></pre> <p>This will show everything including HTTP requests, responses, and session flows.</p>"},{"location":"development/logging-configuration/#production-monitoring","title":"Production Monitoring","text":"<pre><code>LOG_LEVEL=warn\nLOG_ENABLE_SESSION_LOGGER=false\nLOG_ENABLE_HTTP_LOGGER=true\n</code></pre> <p>This will only show warnings, errors, and important session events without HTTP noise.</p>"},{"location":"development/logging-configuration/#log-structure","title":"Log Structure","text":"<p>Session logs include structured data:</p> <pre><code>{\n    \"level\": \"info\",\n    \"time\": \"2025-07-20T10:30:45.123Z\",\n    \"context\": \"SessionLoggerService\",\n    \"sessionId\": \"session_123\",\n    \"tenantId\": \"tenant_456\",\n    \"flowType\": \"OID4VCI\",\n    \"event\": \"flow_start\",\n    \"stage\": \"initialization\",\n    \"msg\": \"[OID4VCI] Flow started for session session_123 in tenant tenant_456\"\n}\n</code></pre>"},{"location":"development/logging-configuration/#environment-configuration","title":"Environment Configuration","text":"<p>Add these to your <code>.env</code> file:</p> <pre><code># Basic logging\nLOG_LEVEL=info\n\n# HTTP request/response logging control\nLOG_ENABLE_HTTP_LOGGER=false\n\n# Session logger control\nLOG_ENABLE_SESSION_LOGGER=false\n</code></pre>"},{"location":"development/logging-configuration/#runtime-control","title":"Runtime Control","text":"<p>You can also control logging at runtime by restarting the service with different environment variables, or by implementing log level changes via API endpoints if needed.</p>"},{"location":"development/running-locally/","title":"Running Locally","text":"<p>This guide will help you run the project locally for development or testing purposes. It is intended for developers who want to inspect or modify the code and run the service directly using Node.js.</p>"},{"location":"development/running-locally/#prerequisites","title":"Prerequisites","text":"<p>Before you start, make sure you have the following tools installed:</p> <ul> <li>Node.js (version 20+ recommended)</li> <li>pnpm</li> <li>Git</li> <li>ngrok (optional, for exposing a public URL)</li> <li>Docker (optional, only for supporting services like   PostgreSQL or Vault)</li> </ul>"},{"location":"development/running-locally/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/openwallet-foundation-labs/eudiplo\ncd eudiplo\n</code></pre>"},{"location":"development/running-locally/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>corepack enable\npnpm install\n</code></pre>"},{"location":"development/running-locally/#3-set-up-environment-variables","title":"3. Set Up Environment Variables","text":"<p>Create a <code>.env</code> file in the root of the project:</p> <pre><code>cp .env.example .env\n</code></pre> <p>To allow your wallet to interact with your service, a public HTTPS URL is required. You can use ngrok to expose your local server:</p> <p>TODO: check if it also runs in a local network when using wallets.</p> <pre><code>ngrok http 3000\n</code></pre> <p>ngrok will display a public HTTPS URL like:</p> <pre><code>https://f8e3-84-123-45-67.ngrok.io\n</code></pre> <p>Use this value in your <code>.env</code>:</p> <pre><code>PUBLIC_URL=https://f8e3-84-123-45-67.ngrok.io\n</code></pre> <p>\ud83d\udca1 The project validates your environment variables on startup using Joi. If <code>PUBLIC_URL</code> is missing or invalid, the app may fail to register with external services.</p> <p>Check out the Key Management or Database sections for more information on how to configure key storage and database options beyond the default settings.</p>"},{"location":"development/running-locally/#4-start-the-application","title":"4. Start the Application","text":"<p>Start the NestJS application in development mode using:</p> <pre><code>pnpm run start:dev\n</code></pre> <p>This will:</p> <ul> <li>Compile and watch your TypeScript code</li> <li>Reload on changes</li> <li>Use your <code>.env</code> configuration for keys, database, and registrar access</li> </ul> <p>Make sure any external services (like PostgreSQL or Vault) are available, either locally or through Docker.</p> <p>\ud83d\udee0\ufe0f You do not need to use Docker to run the application itself \u2014 this guide assumes you're running it via Node.js for local development.</p>"},{"location":"development/running-locally/#5-access-the-service","title":"5. Access the Service","text":"<p>Once running, the application is typically accessible at:</p> <pre><code>http://localhost:3000\n</code></pre> <p>Or via the public URL configured with ngrok, for example:</p> <pre><code>https://f8e3-84-123-45-67.ngrok.io\n</code></pre>"},{"location":"development/running-locally/#6-troubleshooting","title":"6. Troubleshooting","text":"<ul> <li>Double-check <code>.env</code> values for typos or missing entries. Changes in the <code>.env</code>   file require a restart of the application.</li> <li>Ensure required external services (e.g. Vault, PostgreSQL) are running.</li> <li>Clear NestJS cache with <code>rm -rf dist node_modules &amp;&amp; pnpm install</code>.</li> <li>If ngrok fails, make sure port 3000 isn't blocked or already in use.</li> </ul>"},{"location":"development/running-locally/#next-steps","title":"Next Steps","text":"<ul> <li>See Key Management to configure signing   keys.</li> <li>See Database to switch database engines.</li> </ul>"},{"location":"development/testing/","title":"Testing","text":"<p>EUDIPLO is designed to be robust and easy to test both in development and CI environments. This guide outlines how to run, write, and automate tests for the project.</p> <p>The current focus is on end-to-end (E2E) tests, which verify the overall functionality of the application.</p>"},{"location":"development/testing/#e2e-tests","title":"E2E Tests","text":"<p>Right now EUDIPLO has only implemented end-to-end (E2E) tests that are stored in the <code>/test</code> folder. These tests are designed to verify the overall functionality of the application, including interactions with external services like the EUDI Wallet.</p> <p>The following command will run the E2E tests and also provide a coverage report:</p> <pre><code>pnpm run test:e2e\n</code></pre> <p>It is also accessible via codecov.</p> <p>During writing E2E tests, you can use it in watch mode to automatically re-run tests on file changes:</p> <pre><code>pnpm run test:e2e:watch\n</code></pre>"},{"location":"development/testing/#linting","title":"Linting","text":"<p>Before pushing code, check linting rules and fix them:</p> <pre><code>pnpm run lint\n</code></pre>"},{"location":"development/testing/#github-actions","title":"GitHub Actions","text":"<p>Tests run automatically on every push to <code>main</code> or pull request via GitHub Actions.</p> <p>You can find the workflow config in <code>.github/workflows/ci.yml</code>.</p>"},{"location":"development/testing/#running-tests-locally","title":"Running Tests Locally","text":"<p>To run all unit and integration tests locally:</p> <pre><code>pnpm run test\n</code></pre> <p>Or with watch mode:</p> <pre><code>pnpm run test:watch\n</code></pre> <p>This uses Vitest under the hood, which is configured for NestJS.</p>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":"<p>To check code coverage:</p> <pre><code>pnpm run test:cov\n</code></pre> <p>This generates a report in the <code>/coverage</code> folder. Open <code>coverage/index.html</code> in your browser to view it.</p>"},{"location":"development/testing/#test-structure","title":"Test Structure","text":"<p>Tests are located next to their implementation files:</p> <pre><code>src/\n  service/\n    my.service.ts\n    my.service.spec.ts  &lt;-- Test file\n</code></pre> <p>Use <code>.spec.ts</code> naming to ensure Vitest picks up the test files automatically.</p>"},{"location":"development/testing/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Keep unit tests isolated; mock dependencies using tools like <code>vitest.mock()</code>   or NestJS's testing module.</li> <li>For HTTP integration tests, use   supertest.</li> <li>For mocking external APIs (e.g., Vault or Keycloak), consider   <code>nock</code>.</li> </ul> <p>Happy testing! \ud83d\ude80</p>"},{"location":"development/versioning/","title":"Versioning &amp; Releases","text":"<p>This project follows a structured release strategy that balances stability with ongoing development.</p>"},{"location":"development/versioning/#semantic-versioning","title":"Semantic Versioning","text":"<p>We use Semantic Versioning (<code>MAJOR.MINOR.PATCH</code>) for all tagged releases.</p> <ul> <li>MAJOR \u2013 breaking changes</li> <li>MINOR \u2013 new features, backwards compatible</li> <li>PATCH \u2013 bug fixes and internal improvements</li> </ul> <p>Example: <code>1.2.3</code> means the 3<sup>rd</sup> patch release of the 2<sup>nd</sup> minor version of the 1<sup>st</sup> major version.</p>"},{"location":"development/versioning/#development-builds-from-main","title":"Development Builds from <code>main</code>","text":"<p>Every push to the <code>main</code> branch automatically builds a Docker image and publishes it with the <code>:main</code> tag.</p> <p>Use this tag for development environments:</p> <pre><code>ghcr.io/openwallet-foundation-labs/eudiplo:main\n</code></pre> <p>\u26a0\ufe0f <code>main</code> is always moving and may contain untagged or unreleased features.</p>"},{"location":"development/versioning/#stable-releases","title":"Stable Releases","text":"<p>Stable releases are published via GitHub tags and follow semantic versioning. Each release creates both a versioned tag and updates the <code>:latest</code> tag:</p> <pre><code>ghcr.io/openwallet-foundation-labs/eudiplo:1.2.3\nghcr.io/openwallet-foundation-labs/eudiplo:latest\n</code></pre> <p>The <code>:latest</code> tag always points to the most recent stable release and is recommended for production use.</p>"},{"location":"development/versioning/#pre-releases","title":"Pre-Releases","text":"<p>Optionally, pre-release tags such as <code>1.3.0-alpha.1</code> may be published for testing upcoming features:</p> <pre><code>ghcr.io/openwallet-foundation-labs/eudiplo:1.3.0-alpha.1\n</code></pre>"},{"location":"development/versioning/#release-automation","title":"Release Automation","text":"<p>Releases are managed using <code>semantic-release</code>. It:</p> <ul> <li>Analyzes commit messages</li> <li>Determines the next version</li> <li>Updates the changelog</li> <li>Publishes a GitHub release</li> <li>Pushes Docker images</li> </ul> <p>Make sure to follow the Conventional Commits specification when contributing to ensure proper versioning.</p>"},{"location":"development/versioning/#summary","title":"Summary","text":"Tag Source Use Case <code>main</code> <code>main</code> branch Development <code>latest</code> GitHub release Production (Latest) <code>x.y.z</code> (e.g. <code>1.2.3</code>) GitHub release Specific Version <code>x.y.z-alpha.N</code> GitHub pre-release Feature Preview / RC"},{"location":"getting-started/issuance/","title":"Configuring Credential Issuance Flows","text":"<p>Issuance flow files define how a credential should be generated, signed, and formatted. EUDIPLO uses a tenant-based architecture where each tenant has isolated configuration.</p> <p>The issuance system uses a two-layer configuration approach:</p> <ol> <li>Credential Configurations - Define the structure, format, and metadata of    individual credentials</li> <li>Issuance Configurations - Define which credentials to issue together and    authentication requirements</li> </ol> <p>Both configurations have a many-to-many relationship, which means a defined credential can be used in multiple issuance configurations.</p>"},{"location":"getting-started/issuance/#api-endpoints","title":"API Endpoints","text":"<p>The system uses two separate endpoints for the two-layer configuration:</p>"},{"location":"getting-started/issuance/#credential-configurations","title":"Credential Configurations","text":"<p>To manage individual credential configurations, use the <code>/issuer-management/credentials</code> endpoint. This endpoint handles the definition of credential types, their formats, claims, and display properties.</p>"},{"location":"getting-started/issuance/#issuance-configurations","title":"Issuance Configurations","text":"<p>To manage issuance flows (which credentials to issue together and authentication requirements), use the <code>/issuer-management/issuance</code> endpoint. This endpoint handles grouping credentials and defining authorizations or webhooks.</p> <p>Based on your passed JWT, both endpoints will be scoped to the tenant ID of the token. The configurations are internally stored in a database.</p> <p>Via the <code>/issuer-management/offer</code> endpoint you can start the issuance flow for a specific issuance configuration. Some of the defined information can be overridden when creating the credential offer.</p>"},{"location":"getting-started/issuance/#credential-issuance-flow","title":"Credential Issuance Flow","text":"<p>This flow describes how a backend service starts an issuance flow of an attestation. EUDIPLO creates the OID4VCI request and handles the protocol flow with the wallet.</p> <pre><code>sequenceDiagram\nactor EUDI_Wallet\nparticipant Middleware\nparticipant End_Service\n\nEnd_Service -&gt;&gt; Middleware : Request OID4VCI issuance offer\nMiddleware --&gt;&gt; End_Service : Return credential offer link\nEnd_Service -&gt;&gt; EUDI_Wallet : Present link to user\nMiddleware -&gt; EUDI_Wallet : OID4VCI\nMiddleware -&gt;&gt; End_Service : Notify successful issuance</code></pre>"},{"location":"getting-started/issuance/#configuration-structure","title":"Configuration Structure","text":""},{"location":"getting-started/issuance/#credential-configuration","title":"Credential Configuration","text":"<p>Credential configurations define the structure and properties of individual credentials. Each credential type has its own configuration file.</p> <p>Example Credential Configuration (PID):</p> <pre><code>{\n    \"config\": {\n        \"format\": \"dc+sd-jwt\",\n        \"vct\": \"https://sd-jwt.com\",\n        \"proof_types_supported\": {\n            \"jwt\": {\n                \"proof_signing_alg_values_supported\": [\"ES256\"]\n            }\n        },\n        \"credential_signing_alg_values_supported\": [\"ES256\"],\n        \"cryptographic_binding_methods_supported\": [\"jwk\"],\n        \"display\": [\n            {\n                \"name\": \"PID\",\n                \"background_color\": \"#FFFFFF\",\n                \"background_image\": {\n                    \"uri\": \"&lt;PUBLIC_URL&gt;/bdr/credential.png\",\n                    \"url\": \"&lt;PUBLIC_URL&gt;/bdr/credential.png\"\n                },\n                \"description\": \"PID Credential\",\n                \"locale\": \"en-US\",\n                \"logo\": {\n                    \"uri\": \"&lt;PUBLIC_URL&gt;/issuer.png\",\n                    \"url\": \"&lt;PUBLIC_URL&gt;/issuer.png\"\n                },\n                \"text_color\": \"#000000\"\n            }\n        ]\n    },\n    \"claims\": {\n        \"issuing_country\": \"DE\",\n        \"issuing_authority\": \"DE\",\n        \"given_name\": \"ERIKA\",\n        \"family_name\": \"MUSTERMANN\",\n        \"birthdate\": \"1964-08-12\",\n        \"place_of_birth\": {\n            \"locality\": \"BERLIN\"\n        },\n        \"address\": {\n            \"locality\": \"K\u00d6LN\",\n            \"postal_code\": \"51147\",\n            \"street_address\": \"HEIDESTRA\u1e9eE 17\"\n        }\n    },\n    \"disclosureFrame\": {\n        \"_sd\": [\n            \"issuing_country\",\n            \"issuing_authority\",\n            \"given_name\",\n            \"family_name\",\n            \"birthdate\",\n            \"place_of_birth\",\n            \"address\"\n        ],\n        \"address\": {\n            \"_sd\": [\"locality\", \"postal_code\", \"street_address\"]\n        }\n    },\n    \"vct\": {},\n    \"schema\": {\n        \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n        \"type\": \"object\",\n        \"properties\": {\n            \"vct\": { \"type\": \"string\" },\n            \"iss\": { \"type\": \"string\" },\n            \"nbf\": { \"type\": \"number\" },\n            \"exp\": { \"type\": \"number\" },\n            \"cnf\": { \"type\": \"object\" },\n            \"status\": { \"type\": \"object\" },\n            \"given_name\": { \"type\": \"string\" },\n            \"family_name\": { \"type\": \"string\" }\n        },\n        \"required\": [\"iss\", \"vct\", \"cnf\", \"given_name\", \"family_name\"]\n    }\n}\n</code></pre> <p>Credential Configuration Fields:</p> <ul> <li><code>config</code>: REQUIRED - Entry for   credential_configuration_supported.   The name of the file will be used as the key in the configuration.</li> <li><code>claims</code>: OPTIONAL - Static claims to include in the credential. Can be   overridden by webhook responses or claims passed during credential offer.</li> <li><code>disclosureFrame</code>: OPTIONAL - Defines which claims should be selectively   disclosable in SD-JWT format.</li> <li><code>vct</code>: OPTIONAL -   VC Type Metadata   provided via the <code>/credentials/vct/{id}</code> endpoint.</li> <li><code>schema</code>: OPTIONAL -   Schema Type Metadata   to validate the claims before issuance. The schema will be added into the vct   values.</li> </ul>"},{"location":"getting-started/issuance/#issuance-configuration","title":"Issuance Configuration","text":"<p>Issuance configurations define which credentials to issue together and any authentication requirements.</p> <p>Example Issuance Configuration (Citizen Pass):</p> <pre><code>{\n    \"authenticationConfig\": {\n        \"method\": \"presentationDuringIssuance\",\n        \"config\": {\n            \"presentation\": {\n                \"type\": \"pid\",\n                \"webhook\": {\n                    \"url\": \"http://localhost:8787/process\"\n                }\n            }\n        }\n    },\n    \"credentialConfigs\": [\n        {\n            \"id\": \"citizen\"\n        }\n    ],\n    \"notifyWebhook\": {\n        \"url\": \"http://localhost:8787/notify\",\n        \"auth\": {\n            \"type\": \"apiKey\",\n            \"config\": {\n                \"headerName\": \"x-api-key\",\n                \"value\": \"foo-bar\"\n            }\n        }\n    }\n}\n</code></pre> <p>Issuance Configuration Fields:</p> <ul> <li><code>credentialConfigs</code>: REQUIRED - Array of credential configuration IDs to   issue together.</li> <li><code>authenticationConfig</code>: OPTIONAL - Authentication method and configuration   for the issuance flow.</li> <li><code>notifyWebhook</code>: OPTIONAL - Webhook configuration to notify external   services about successful issuance.</li> </ul>"},{"location":"getting-started/issuance/#authentication","title":"Authentication","text":"<p>The authentication configuration uses a discriminated union pattern that ensures type safety and proper validation. Each authentication method corresponds to a specific OpenID4VC flow, and only one method can be active at a time.</p>"},{"location":"getting-started/issuance/#1-pre-authorized-code-flow-none","title":"1. Pre-Authorized Code Flow (<code>none</code>)","text":"<p>Used when no user authentication is required. The credential is issued directly using a pre-authorized code.</p> <pre><code>const config: AuthenticationConfig = {\n    method: 'none',\n};\n</code></pre> <p>Use case: Direct credential issuance without user interaction (e.g., batch issuance, automated processes)</p>"},{"location":"getting-started/issuance/#2-oid4vci-authorized-code-flow-auth","title":"2. OID4VCI Authorized Code Flow (<code>auth</code>)","text":"<p>Used when user authentication is required. The user will be redirected to an external authentication URL as part of the OID4VCI authorized code flow.</p> <pre><code>const config: AuthenticationConfig = {\n    method: 'auth',\n    config: {\n        authUrl: 'https://auth.example.com/login',\n        webhook: {\n            url: 'https://api.example.com/webhook',\n            auth: {\n                type: 'apiKey',\n                config: {\n                    headerName: 'Authorization',\n                    value: 'Bearer your-token',\n                },\n            },\n        },\n    },\n};\n</code></pre> <p>Use case: When the issuer needs to authenticate the user before issuing credentials (e.g., identity verification, account-based issuance)</p>"},{"location":"getting-started/issuance/#3-oid4vp-flow-presentationduringissuance","title":"3. OID4VP Flow (<code>presentationDuringIssuance</code>)","text":"<p>Used when a credential presentation is required before issuance. An OID4VP request is sent to the wallet to present specific credentials.</p> <pre><code>const config: AuthenticationConfig = {\n    method: 'presentationDuringIssuance',\n    config: {\n        presentation: {\n            type: 'oid4vp',\n            webhook: {\n                url: 'https://api.example.com/webhook',\n                auth: {\n                    type: 'apiKey',\n                    config: {\n                        headerName: 'Authorization',\n                        value: 'Bearer your-token',\n                    },\n                },\n            },\n        },\n    },\n};\n</code></pre> <p>Use case: When the issuer needs to verify that the user possesses certain credentials before issuing new ones (e.g., issuing a university diploma only if the user can present a high school certificate)</p>"},{"location":"getting-started/issuance/#display-configuration","title":"Display Configuration","text":"<p>TODO: needs to be updated</p> <p>This display information gets included into the credential issuer metadata.</p> <p><code>&lt;PUBLIC_URL&gt;</code> will be dynamically replaced at runtime with your public URL together with the tenant ID.</p>"},{"location":"getting-started/issuance/#passing-claims","title":"Passing Claims","text":"<p>There are three options to pass claims for the credential. They are handled in the following order:</p> <ol> <li>Webhook response during presentation during issuance (highest priority)</li> <li>Claims field in the credential offer request</li> <li>Static claims in the credential configuration (lowest priority)</li> </ol> <p>If no claims are provided, the credential will be issued with an empty claims set. Claims will not be merged with other claims from e.g. the offer or the static defined ones - the higher priority source completely overrides lower priority sources.</p>"},{"location":"getting-started/issuance/#configuration-management","title":"Configuration Management","text":""},{"location":"getting-started/issuance/#creating-credential-configurations","title":"Creating Credential Configurations","text":"<p>Credential configurations are managed via the <code>/issuer-management/credentials</code> endpoint:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/issuer-management/credentials' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"pid\",\n    \"config\": {\n      \"format\": \"dc+sd-jwt\",\n      \"vct\": \"https://sd-jwt.com\",\n      \"proof_types_supported\": {\n        \"jwt\": {\n          \"proof_signing_alg_values_supported\": [\"ES256\"]\n        }\n      },\n      \"credential_signing_alg_values_supported\": [\"ES256\"],\n      \"cryptographic_binding_methods_supported\": [\"jwk\"],\n      \"display\": [...]\n    },\n    \"claims\": {...},\n    \"disclosureFrame\": {...}\n  }'\n</code></pre>"},{"location":"getting-started/issuance/#creating-issuance-configurations","title":"Creating Issuance Configurations","text":"<p>Issuance configurations are managed via the <code>/issuer-management/issuance</code> endpoint:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/issuer-management/issuance' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"id\": \"citizen-with-pid-verification\",\n    \"authenticationConfig\": {\n      \"method\": \"presentationDuringIssuance\",\n      \"config\": {\n        \"presentation\": {\n          \"type\": \"pid\",\n          \"webhook\": {\n            \"url\": \"http://localhost:8787/process\"\n          }\n        }\n      }\n    },\n    \"credentialConfigs\": [\n      {\n        \"id\": \"citizen\"\n      }\n    ],\n    \"notifyWebhook\": {\n      \"url\": \"http://localhost:8787/notify\",\n      \"auth\": {\n        \"type\": \"apiKey\",\n        \"config\": {\n          \"headerName\": \"x-api-key\",\n          \"value\": \"foo-bar\"\n        }\n      }\n    }\n  }'\n</code></pre>"},{"location":"getting-started/issuance/#creating-a-credential-offer","title":"Creating a Credential Offer","text":"<p>To start the issuance flow, you need to create a credential offer using an issuance configuration ID. This is done by calling the <code>/issuer-management/offer</code> endpoint. Via the <code>response_type</code> parameter, you can specify how the response should be formatted:</p> <ul> <li><code>uri</code>: Returns a URI that the user can open in their wallet to start the   issuance flow.</li> <li><code>qrcode</code>: Returns a QR code that the user can scan with their wallet to start   the issuance flow.</li> </ul> <p>While the <code>qrcode</code> is good for easy testing with the Swagger UI, the <code>uri</code> is recommended to also receive the session ID in the response that is needed to fetch information about the session later on.</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/issuer-management/offer' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"response_type\": \"uri\",\n  \"credentialConfigurationIds\": [\n    \"citizen-with-pid-verification\"\n  ]\n}'\n</code></pre> <p>Note: The <code>credentialConfigurationIds</code> field now expects issuance configuration IDs, not individual credential IDs. The issuance configuration will determine which credentials are actually issued.</p> <p>When there is no issuance configuration with the provided ID, the service will return an error.</p>"},{"location":"getting-started/issuance/#revoking-credentials","title":"Revoking Credentials","text":"<p>To simply the revocation of credentials, the service will persist the indexes of the status list together with the session data. No other personal data is stored, just</p> <ul> <li>session ID</li> <li>status list URL</li> <li>status list index</li> </ul> <p>Sessions can be revoked via the <code>/session/revoke</code> endpoint like</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/session/revoke' \\\n  -H 'accept: */*' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"sessionId\": \"59d22466-b403-4b37-b1d0-20163696ade7\",\n  \"credentialConfigurationId\": \"pid\",\n  \"status\": 1\n}'\n</code></pre> <p>If no <code>credentialConfigurationId</code> is provided, the revocation will be applied to all credentials of the session. The update to the status list will be performed immediately after the request and the updates status list will be available.</p>"},{"location":"getting-started/monitor/","title":"Monitoring","text":"<p>This guide shows how to set up Prometheus and Grafana monitoring for EUDIPLO in both local development and Docker container scenarios.</p>"},{"location":"getting-started/monitor/#quick-start","title":"Quick Start","text":"<p>The monitoring stack includes:</p> <ul> <li>Prometheus on http://localhost:9090 - Metrics collection</li> <li>Grafana on http://localhost:3001 - Dashboards and visualization</li> </ul>"},{"location":"getting-started/monitor/#start-monitoring-stack","title":"Start Monitoring Stack","text":"<pre><code>cd monitor/\ndocker-compose up -d\n</code></pre>"},{"location":"getting-started/monitor/#local-development-setup","title":"Local Development Setup","text":"<p>When running EUDIPLO locally (outside Docker) and monitoring with Docker:</p>"},{"location":"getting-started/monitor/#1-start-eudiplo-locally","title":"1. Start EUDIPLO Locally","text":"<pre><code># Install dependencies and start EUDIPLO\nnpm install\nnpm run start:dev\n</code></pre> <p>EUDIPLO will be available at http://localhost:3000 with metrics at http://localhost:3000/metrics</p>"},{"location":"getting-started/monitor/#2-configure-prometheus-for-local-eudiplo","title":"2. Configure Prometheus for Local EUDIPLO","text":"<p>Update <code>monitor/prometheus/prometheus.yml</code>:</p> <pre><code>global:\n    scrape_interval: 15s\n\nscrape_configs:\n    - job_name: 'eudiplo-local'\n      static_configs:\n          - targets: ['host.docker.internal:3000'] # For local EUDIPLO\n      metrics_path: '/metrics'\n      scrape_interval: 30s\n</code></pre>"},{"location":"getting-started/monitor/#3-start-monitoring","title":"3. Start Monitoring","text":"<pre><code>cd monitor/\ndocker-compose up -d prometheus grafana\n</code></pre>"},{"location":"getting-started/monitor/#docker-container-setup","title":"Docker Container Setup","text":"<p>When running EUDIPLO as a Docker container:</p>"},{"location":"getting-started/monitor/#1-update-prometheus-configuration","title":"1. Update Prometheus Configuration","text":"<p>Edit <code>monitor/prometheus/prometheus.yml</code>:</p> <pre><code>global:\n    scrape_interval: 15s\n\nscrape_configs:\n    - job_name: 'eudiplo-docker'\n      static_configs:\n          - targets: ['eudiplo:3000'] # For Docker container\n      metrics_path: '/metrics'\n      scrape_interval: 30s\n</code></pre>"},{"location":"getting-started/monitor/#2-add-eudiplo-to-docker-compose","title":"2. Add EUDIPLO to Docker Compose","text":"<p>Add to <code>monitor/docker-compose.yml</code>:</p> <pre><code>services:\n    eudiplo:\n        image: eudiplo/eudiplo:latest\n        ports:\n            - '3000:3000'\n        environment:\n            - NODE_ENV=development\n            - PUBLIC_URL=http://localhost:3000\n        networks:\n            - monitoring\n\n    prometheus:\n        # ... existing config\n\nnetworks:\n    monitoring:\n        driver: bridge\n</code></pre>"},{"location":"getting-started/monitor/#3-start-full-stack","title":"3. Start Full Stack","text":"<pre><code>cd monitor/\ndocker-compose up -d\n</code></pre>"},{"location":"getting-started/monitor/#key-metrics","title":"Key Metrics","text":"<p>EUDIPLO exposes these important metrics:</p>"},{"location":"getting-started/monitor/#business-metrics","title":"Business Metrics","text":"<ul> <li><code>sessions</code> - Active, completed, and failed sessions</li> </ul> <p>More values will be added as the project evolves.</p>"},{"location":"getting-started/monitor/#access-dashboards","title":"Access Dashboards","text":"<ol> <li> <p>Prometheus: http://localhost:9090</p> <ul> <li>View metrics and run queries</li> <li>Check targets status at <code>/targets</code></li> </ul> </li> <li> <p>Grafana: http://localhost:3001</p> <ul> <li>Username: <code>admin</code></li> <li>Password: <code>admin</code></li> <li>Import or create dashboards</li> </ul> </li> </ol>"},{"location":"getting-started/monitor/#configuration-files","title":"Configuration Files","text":""},{"location":"getting-started/monitor/#prometheus-prometheusprometheusyml","title":"Prometheus (<code>prometheus/prometheus.yml</code>)","text":"<pre><code>global:\n    scrape_interval: 15s\n\nscrape_configs:\n    - job_name: 'eudiplo'\n      static_configs:\n          - targets: ['host.docker.internal:3000'] # Local\n          # - targets: ['eudiplo:3000']             # Docker\n      scrape_interval: 30s\n</code></pre>"},{"location":"getting-started/monitor/#grafana-data-source","title":"Grafana Data Source","text":"<p>Grafana is pre-configured with Prometheus as data source at <code>http://prometheus:9090</code>.</p>"},{"location":"getting-started/monitor/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/monitor/#common-issues","title":"Common Issues","text":"<p>Prometheus can't reach EUDIPLO:</p> <pre><code># Check if metrics endpoint is accessible\ncurl http://localhost:3000/metrics\n\n# For local development, verify host.docker.internal works\ndocker run --rm appropriate/curl curl -I http://host.docker.internal:3000/metrics\n</code></pre> <p>No data in Grafana:</p> <ul> <li>Check Prometheus targets: http://localhost:9090/targets</li> <li>Verify time range in Grafana dashboards</li> <li>Ensure Prometheus data source is configured</li> </ul> <p>Container issues:</p> <pre><code># Check logs\ndocker-compose logs prometheus\ndocker-compose logs grafana\n\n# Restart services\ndocker-compose restart\n</code></pre>"},{"location":"getting-started/monitor/#production-considerations","title":"Production Considerations","text":"<p>For production deployments:</p> <ol> <li>Security: Change default Grafana password</li> <li>Retention: Configure appropriate data retention</li> <li>Backup: Set up regular backups of Grafana dashboards</li> <li>Alerting: Configure alertmanager for notifications</li> <li>Resources: Monitor resource usage and scale accordingly</li> </ol> <p>Warning</p> <p>The endpoint for <code>/metrics</code> is not protected yet. So for now run the prometheus in the same network as the EUDIPLO instance. Authentication mechanisms will be added in the future.</p>"},{"location":"getting-started/monitor/#clean-up","title":"Clean Up","text":"<pre><code># Stop monitoring stack\ndocker-compose down\n\n# Remove volumes (deletes all data)\ndocker-compose down -v\n</code></pre>"},{"location":"getting-started/presentation/","title":"Configuring Presentation Flows","text":"<p>Presentation flow files define what credentials should be requested from the user and which claims must be disclosed. EUDIPLO uses a tenant-based architecture where each tenant has isolated configuration.</p>"},{"location":"getting-started/presentation/#api-endpoints","title":"API Endpoints","text":"<p>To manage the configs for presentation, you need to interact with the <code>/presentation-management</code> endpoint. Based on your passed JWT, the endpoint will be scoped to the tenant ID of the token. The configurations are internally stored in a database.</p> <p>Via this endpoint you are also able to start the presentation flow for a specific flow configuration.</p>"},{"location":"getting-started/presentation/#credential-presentation-flow","title":"Credential Presentation Flow","text":"<p>This flow describes how a backend service requests a credential presentation (e.g., to authorize a user or verify an attribute). EUDIPLO creates the OID4VP request and handles the protocol flow with the wallet.</p> <pre><code>sequenceDiagram\nactor EUDI_Wallet\nparticipant Middleware\nparticipant End_Service\n\nEnd_Service -&gt;&gt; Middleware : Request OID4VP presentation request\nMiddleware --&gt;&gt; End_Service : Return presentation request link\nEnd_Service -&gt;&gt; EUDI_Wallet : Present link to user\nEUDI_Wallet -&gt;&gt; Middleware : Start OID4VP flow\nMiddleware -&gt; EUDI_Wallet : OID4VP presentation exchange\nMiddleware -&gt;&gt; End_Service : Send presented data</code></pre>"},{"location":"getting-started/presentation/#credential-presentation-during-issuance","title":"Credential Presentation During Issuance","text":"<p>This flow describes an advanced scenario where the end-user is required to present a credential during the issuance of another credential. This is useful when a prior attribute (e.g. student ID, PID) is needed to qualify for the new credential.</p> <pre><code>sequenceDiagram\nactor EUDI_Wallet\nparticipant Middleware\nparticipant End_Service\n\nEnd_Service -&gt;&gt; Middleware : Request OID4VCI offer generation\nMiddleware --&gt;&gt; End_Service : Return offer link\nEnd_Service -&gt;&gt; EUDI_Wallet : Present offer link to user\nEUDI_Wallet -&gt;&gt; Middleware : Start OID4VCI flow\nMiddleware -&gt;&gt; EUDI_Wallet : Request credential presentation\nEUDI_Wallet -&gt;&gt; Middleware : Present credential\nMiddleware -&gt;&gt; End_Service : Send presented credential\nEnd_Service -&gt;&gt; Middleware : Provide data for issuance\nMiddleware -&gt; EUDI_Wallet : OID4VCI credential issuance\nMiddleware -&gt;&gt; End_Service : Notify successful issuance</code></pre>"},{"location":"getting-started/presentation/#example-presentation-request","title":"Example Presentation Request","text":"<pre><code>{\n    \"dcql_query\": {\n        \"credentials\": [\n            {\n                \"id\": \"pid\",\n                \"format\": \"dc+sd-jwt\",\n                \"meta\": {\n                    \"vct_values\": [\"&lt;PUBLIC_URL&gt;/credentials/vct/pid\"]\n                },\n                \"claims\": [\n                    {\n                        \"path\": [\"address\", \"locality\"]\n                    }\n                ]\n            }\n        ]\n    },\n    \"registrationCert\": {\n        \"body\": {\n            \"privacy_policy\": \"https://example.com/privacy-policy\",\n            \"purpose\": [\n                {\n                    \"locale\": \"en-US\",\n                    \"name\": \"To register a new user\"\n                }\n            ],\n            \"contact\": {\n                \"website\": \"https://example.com/contact\",\n                \"e-mail\": \"privacy@example.com\",\n                \"phone\": \"+1234567890\"\n            },\n            \"credentials\": [\n                {\n                    \"format\": \"dc+sd-jwt\",\n                    \"meta\": {\n                        \"vct_values\": [\"&lt;PUBLIC_URL&gt;/credentials/vct/pid\"]\n                    },\n                    \"claims\": [\n                        {\n                            \"path\": [\"address\", \"locality\"]\n                        }\n                    ]\n                }\n            ]\n        },\n        \"id\": \"ea140773-5f7f-4e39-a21c-d2a5f912deb2\"\n    },\n    \"webhook\": { \"url\": \"http://localhost:8787/consume\" }\n}\n</code></pre> <p>Field Breakdown</p> <ul> <li><code>dcql_query</code>: REQUIRED:   Digital Credentials Query Language   Defines the credentials and claims to be requested.</li> <li><code>registrationCert</code>: REQUIRED: Contains the legal purpose and contact   information for processing personal data aligned with the   Blueprint</li> <li><code>webhook</code>: OPTIONAL: The URL where the verified presentation will be sent   after the user completes the flow, for more information, see   Webhook Integration. If not provided, the data   can be fetched via the session ID returned in the initial request.</li> </ul> <p><code>&lt;PUBLIC_URL&gt;</code> will be dynamically replaced at runtime with your public URL together with with the tenant ID.</p>"},{"location":"getting-started/presentation/#creating-a-presentation-request","title":"Creating a Presentation Request","text":"<p>To start the presentation flow, you need to create a presentation request. This is done by calling the <code>/presentation-management/request</code> endpoint. Via the <code>response_type</code> parameter, you can specify how the response should be formatted:</p> <ul> <li><code>uri</code>: Returns a URI that the user can open in their wallet to start the   presentation flow.</li> <li><code>qrcode</code>: Returns a QR code that the user can scan with their wallet to start   the presentation flow.</li> </ul> <p>While the <code>qrcode</code> is good for easy testing with the Swagger UI, the <code>uri</code> is recommended to also receive the session ID in the response that is needed to fetch information about the session later on.</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:3000/presentation-management/offer' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhb...npoNk' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"response_type\": \"qrcode\",\n  \"requestId\": \"pid\",\n}'\n</code></pre>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get EUDIPLO running in under 2 minutes! This guide gets you from zero to issuing your first credential.</p> <p>New to EUDIPLO?</p> <p>This is the fastest path to see EUDIPLO working. For production setup and advanced configuration, see the Architecture and API sections.</p>"},{"location":"getting-started/quick-start/#what-youll-need","title":"What You'll Need","text":"<ul> <li>Docker installed</li> <li>2 minutes of your time \u23f1\ufe0f</li> </ul>"},{"location":"getting-started/quick-start/#step-1-one-command-setup","title":"Step 1: One-Command Setup","text":"<pre><code># Run EUDIPLO with default settings\ndocker run -d \\\n  --name eudiplo-quickstart \\\n  -p 3000:3000 \\\n  -e PUBLIC_URL=http://localhost:3000 \\\n  -e AUTH_CLIENT_ID=demo \\\n  -e AUTH_CLIENT_SECRET=demo-secret \\\n  -e JWT_SECRET=quick-start-secret-32-characters-min \\\n  ghcr.io/openwallet-foundation-labs/eudiplo:latest\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-verify-its-working","title":"Step 2: Verify It's Working","text":"<p>Check health:</p> <pre><code>curl http://localhost:3000/health\n</code></pre> <p>Expected response:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"info\": {\n        \"database\": { \"status\": \"up\" }\n    },\n    \"errors\": {}\n}\n</code></pre>"},{"location":"getting-started/quick-start/#step-3-explore-the-api","title":"Step 3: Explore the API","text":"<p>Open your browser and visit:</p> <ul> <li>\ud83c\udfe0 API Documentation: http://localhost:3000/api</li> <li>\ud83d\udcca Health Check: http://localhost:3000/health</li> </ul> <p>The Swagger UI includes authentication - use:</p> <ul> <li>Client ID: <code>demo</code></li> <li>Client Secret: <code>demo-secret</code></li> </ul>"},{"location":"getting-started/quick-start/#step-4-authenticate-via-swagger-ui","title":"Step 4: Authenticate via Swagger UI","text":"<ol> <li>Open the API Documentation: http://localhost:3000/api</li> <li>Click the \"Authorize\" button (\ud83d\udd13 lock icon) in the top-right</li> <li>Enter your credentials:<ul> <li>Client ID: <code>demo</code></li> <li>Client Secret: <code>demo-secret</code></li> </ul> </li> <li>Click \"Authorize\" and then \"Close\"</li> </ol> <p>You're now authenticated! The \ud83d\udd13 icon should change to \ud83d\udd12 (locked).</p>"},{"location":"getting-started/quick-start/#step-5-test-your-first-api-call","title":"Step 5: Test Your First API Call","text":"<ol> <li>Find the \"Issuer Management\" section in Swagger UI</li> <li>Expand <code>/issuer-management/credentials</code> \u2192 GET</li> <li>Click \"Try it out\" \u2192 \"Execute\"</li> </ol> <p>You should see a successful response with available credential templates!</p>"},{"location":"getting-started/quick-start/#success","title":"\ud83c\udf89 Success!","text":"<p>EUDIPLO is now running and ready for credential issuance and verification.</p>"},{"location":"getting-started/quick-start/#whats-next","title":"What's Next?","text":"<ul> <li>\ud83d\udcdd Issue Your First Credential - Learn credential   issuance flows</li> <li>\ud83d\udd0d Verify Credentials - Set up credential   verification</li> <li>\u2699\ufe0f Production Setup - Deploy for production   use</li> <li>\ud83d\udd10 Advanced Authentication - External OIDC,   multi-tenant setup</li> </ul>"},{"location":"getting-started/quick-start/#clean-up","title":"Clean Up","text":"<p>When you're done experimenting:</p> <pre><code>docker stop eudiplo-quickstart &amp;&amp; docker rm eudiplo-quickstart\n</code></pre>"},{"location":"getting-started/registrar/","title":"Registrar","text":"<p>To interact with an EUDI Wallet, two types of certificates are required:</p> <ul> <li>Access Certificate \u2013 Grants access to the EUDI Wallet.</li> <li>Registration Certificate \u2013 Authorizes data requests from the EUDI Wallet.</li> </ul> <p>You can still use EUDIPLO without these certificates, but it can end up into warnings when making requests to the EUDI Wallet.</p>"},{"location":"getting-started/registrar/#registrar-settings","title":"Registrar Settings","text":"<p>These values are used to request access and registration certificates from the Registrar.</p> Variable Description <code>REGISTRAR_URL</code> URL of the registrar <p>Used to authenticate against the Registrar using any OIDC-compliant provider.</p> Variable Description <code>REGISTRAR_OIDC_URL</code> OIDC URL (e.g., https://auth.example.com/realms/myrealm) <code>REGISTRAR_OIDC_CLIENT_ID</code> Client ID as configured in the OIDC provider <code>REGISTRAR_OIDC_CLIENT_SECRET</code> Secret associated with the OIDC client"},{"location":"getting-started/registrar/#example-configurations","title":"Example Configurations","text":"<p>Keycloak:</p> <pre><code>REGISTRAR_OIDC_URL=https://keycloak.example.com/realms/registrar\nREGISTRAR_OIDC_CLIENT_ID=eudiplo-client\nREGISTRAR_OIDC_CLIENT_SECRET=your-client-secret\n</code></pre>"},{"location":"getting-started/registrar/#accessing-the-registrar","title":"Accessing the Registrar","text":"<p>To enable EUDIPLO to communicate with the registrar, you must configure the necessary environment variables.</p> <p>On startup, EUDIPLO checks whether a Relying Party (RP) is already registered using the <code>config/registrar.json</code> file. If no ID is specified, EUDIPLO will automatically register a new Relying Party with the registrar using the <code>RP_NAME</code> value.</p>"},{"location":"getting-started/registrar/#access-certificate","title":"Access Certificate","text":"<p>At startup, EUDIPLO checks for a valid access certificate based on the <code>accessCertificateId</code> in <code>config/registrar.json</code>. If no valid certificate is found, a new one will be requested from the registrar and bound to the <code>CREDENTIAL_ISSUER</code> URL. The resulting certificate ID will then be stored in <code>config/registrar.json</code>.</p>"},{"location":"getting-started/registrar/#registration-certificate","title":"Registration Certificate","text":"<p>The registration certificate is required to request data from the EUDI Wallet. Each configuration file in the <code>config/presentation</code> folder defines the payload for the corresponding registration certificate.</p> <p>Since registration certificates are tied to specific presentation types, they are managed within the individual presentation configuration files\u2014not in <code>config/registrar.json</code>. If no certificate ID is specified in a presentation config, a new registration certificate will be requested automatically when a presentation request is made.</p>"},{"location":"getting-started/wallet-compatibility/","title":"Wallet Compatibility","text":"<p>EUDIPLO is designed to work with EUDI-compliant wallets that implement the supported protocols (OID4VCI, OID4VP, and SD-JWT VC).</p> <p>This page provides information about tested wallets, compatibility status, and guidance for testing new wallets with EUDIPLO.</p>"},{"location":"getting-started/wallet-compatibility/#officially-tested-wallets","title":"Officially Tested Wallets","text":"<p>The following wallets have been officially tested and verified to work with EUDIPLO:</p> Wallet Reported Version Status Contributor Last Updated None reported yet - - - -"},{"location":"getting-started/wallet-compatibility/#community-verified-wallets","title":"Community-Verified Wallets","text":"<p>These wallets have been reported as compatible by community members:</p> Wallet Reported Version Status Contributor Last Updated None reported yet - - - - <p>Help us expand this list!</p> <p>If you have successfully tested EUDIPLO with a wallet not listed here, please reach out to us so we can add it to this list.</p>"},{"location":"getting-started/wallet-compatibility/#compatibility-requirements","title":"Compatibility Requirements","text":"<p>For a wallet to be compatible with EUDIPLO, it must support:</p>"},{"location":"getting-started/wallet-compatibility/#issuance-flow-oid4vci","title":"Issuance Flow (OID4VCI)","text":"<ul> <li>\u2705 Authorization Code Flow</li> <li>\u2705 Pre-authorized Code Flow</li> <li>\u2705 SD-JWT VC format</li> <li>\u2705 Proof of possession (DPoP or client attestation)</li> </ul>"},{"location":"getting-started/wallet-compatibility/#presentation-flow-oid4vp","title":"Presentation Flow (OID4VP)","text":"<ul> <li>\u2705 Authorization Request via deep link or QR code</li> <li>\u2705 VP Token submission</li> <li>\u2705 Selective disclosure of SD-JWT VC claims</li> <li>\u2705 Response mode <code>direct_post</code></li> </ul>"},{"location":"getting-started/wallet-compatibility/#general-requirements","title":"General Requirements","text":"<ul> <li>\u2705 HTTPS endpoints support</li> <li>\u2705 JSON Web Token (JWT) handling</li> <li>\u2705 Cryptographic key management (ES256, EdDSA)</li> </ul>"},{"location":"getting-started/wallet-compatibility/#known-compatibility-issues","title":"Known Compatibility Issues","text":""},{"location":"getting-started/wallet-compatibility/#common-issues","title":"Common Issues","text":"<ul> <li>Deep Link Handling: Some wallets may have different URL scheme   requirements</li> <li>Certificate Validation: Strict certificate chain validation may require   proper CA setup</li> <li>Timeout Handling: Different wallets may have varying timeout expectations</li> </ul>"},{"location":"getting-started/wallet-compatibility/#workarounds","title":"Workarounds","text":"<p>Most compatibility issues can be resolved through:</p> <ul> <li>Proper SSL certificate configuration</li> <li>Adjusting timeout values in EUDIPLO configuration</li> <li>Using appropriate redirect URIs for the wallet's URL scheme</li> </ul>"},{"location":"getting-started/wallet-compatibility/#testing-new-wallets","title":"Testing New Wallets","text":"<p>If you want to test EUDIPLO with a new wallet, follow these steps:</p>"},{"location":"getting-started/wallet-compatibility/#1-setup-test-environment","title":"1. Setup Test Environment","text":"<pre><code># Run EUDIPLO with proper HTTPS endpoint\ndocker run -p 3000:3000 \\\n  -e PUBLIC_URL=https://your-domain.com \\\n  -e JWT_SECRET=your-secret-key-here-minimum-32-characters \\\n  ghcr.io/openwallet-foundation-labs/eudiplo:latest\n</code></pre>"},{"location":"getting-started/wallet-compatibility/#2-test-credential-issuance","title":"2. Test Credential Issuance","text":"<ol> <li>Configure a test credential template</li> <li>Initiate issuance flow via API</li> <li>Complete the flow in your wallet</li> <li>Verify credential is stored correctly</li> </ol>"},{"location":"getting-started/wallet-compatibility/#3-test-credential-presentation","title":"3. Test Credential Presentation","text":"<ol> <li>Create a presentation request</li> <li>Generate QR code or deep link</li> <li>Present credential from wallet</li> <li>Verify presentation is received and validated</li> </ol>"},{"location":"getting-started/wallet-compatibility/#4-document-results","title":"4. Document Results","text":"<p>Please document:</p> <ul> <li>Wallet name and version</li> <li>Test results (success/failure)</li> <li>Any configuration adjustments needed</li> <li>Error messages or issues encountered</li> </ul>"},{"location":"getting-started/wallet-compatibility/#contributing-compatibility-information","title":"Contributing Compatibility Information","text":""},{"location":"getting-started/wallet-compatibility/#reporting-compatible-wallets","title":"Reporting Compatible Wallets","text":"<p>If you have successfully tested a wallet with EUDIPLO:</p> <ol> <li>Create an Issue: Open a    new issue    on GitHub</li> <li>Use Template: Select the \"Wallet Compatibility Report\" template</li> <li>Provide Details: Include wallet name, version, test results, and any    configuration notes</li> <li>Screenshots: Attach screenshots of successful flows if possible</li> </ol>"},{"location":"getting-started/wallet-compatibility/#reporting-issues","title":"Reporting Issues","text":"<p>If you encounter compatibility problems:</p> <ol> <li>Check Known Issues: Review the section above first</li> <li>Gather Information: Collect logs, error messages, and configuration    details</li> <li>Create Bug Report: Open an issue with detailed reproduction steps</li> <li>Community Support: Ask for help in our    Discord community</li> </ol>"},{"location":"getting-started/wallet-compatibility/#version-compatibility-matrix","title":"Version Compatibility Matrix","text":"EUDIPLO Version Protocol Versions Notes 1.x.x OID4VCI draft-15, OID4VP draft-24, SD-JWT VC draft-08 Current stable Latest (main) Latest draft versions Development version <p>Protocol Evolution</p> <p>EUDI wallet protocols are still evolving. Compatibility may change as new protocol versions are adopted. We track the latest specifications and update EUDIPLO accordingly.</p>"},{"location":"getting-started/wallet-compatibility/#need-help","title":"Need Help?","text":"<ul> <li>\ud83d\udcd6 Documentation: Check our   Getting Started guide</li> <li>\ud83d\udc1b Issues: Report problems on   GitHub Issues</li> <li>\ud83d\udcac Community: Join our Discord server</li> <li>\ud83d\udce7 Contact: Reach out to the EUDIPLO team through GitHub discussions</li> </ul>"}]}